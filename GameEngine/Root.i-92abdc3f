#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Root.cpp"
#line 1 "<built-in>"
#line 1 "<built-in>"
#line 176 "<built-in>"
#line 1 "<command line>"
#line 1 "<built-in>"
#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Root.cpp"
#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"


#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
#line 14 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
#pragma warning(disable: 4049)
#line 27 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 20 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\winapifamily.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\sdkddkver.h"
#line 20 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\sdkddkver.h"
#pragma warning(push)

#pragma warning(disable: 4001)
#line 279 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\sdkddkver.h"
#pragma warning(pop)
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"
#line 149 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)


#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\excpt.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\excpt.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 67 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\sal.h"
#line 2381 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\sal.h"
extern "C" {
#line 2987 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\sal.h"
}



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\ConcurrencySal.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\ConcurrencySal.h"
extern "C" {
#line 354 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\ConcurrencySal.h"
}
#line 2990 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\sal.h"
#line 67 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"





#pragma pack(push,8)


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vadefs.h"
#line 28 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vadefs.h"
#pragma pack(push,8)


extern "C" {
#line 50 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vadefs.h"
typedef __w64 unsigned int uintptr_t;
#line 59 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vadefs.h"
typedef char * va_list;
#line 141 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vadefs.h"
}


#pragma pack(pop)
#line 74 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"



extern "C" {
#line 496 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
typedef __w64 unsigned int size_t;






typedef size_t rsize_t;
#line 512 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
typedef __w64 int intptr_t;
#line 530 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
typedef __w64 int ptrdiff_t;
#line 541 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
#line 563 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
typedef int errno_t;



typedef __w64 long __time32_t;




typedef __int64 __time64_t;







typedef __time64_t time_t;
#line 635 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
 __declspec(dllimport) void __cdecl _invalid_parameter( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);





__declspec(dllimport) __declspec(noreturn)
void __cdecl _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
#line 2072 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct localerefcount {
        char *locale;
        wchar_t *wlocale;
        int *refcount;
        int *wrefcount;
} locrefcount;

typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned int lc_time_cp;
        locrefcount lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
        wchar_t * locale_name[6];
} threadlocinfo;




}
#line 2148 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#pragma pack(pop)
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\excpt.h"






#pragma pack(push,8)


extern "C" {





typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
#line 52 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\excpt.h"
struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
         struct _EXCEPTION_RECORD *_ExceptionRecord,
         void * _EstablisherFrame,
            struct _CONTEXT *_ContextRecord,
            void * _DispatcherContext
    );
#line 96 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\excpt.h"
unsigned long __cdecl _exception_code(void);
void * __cdecl _exception_info(void);
int __cdecl _abnormal_termination(void);
#line 175 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\excpt.h"
}


#pragma pack(pop)
#line 160 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdarg.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdarg.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdarg.h"
#line 29 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdarg.h"
extern "C" {






void __declspec(dllimport) __cdecl _vacopy( va_list *, va_list);



}
#line 161 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
#line 17 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
extern "C" {







#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
#line 14 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings.h"
#line 63 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings.h"
extern "C" {
#line 484 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings.h"
}
#line 513 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings_strict.h"
#line 188 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings_strict.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings_undef.h"
#line 188 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings_strict.h"
#line 513 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings.h"
#line 534 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\driverspecs.h"
#line 125 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\driverspecs.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/sdv_driverspecs.h"
#line 125 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\driverspecs.h"








extern "C" {
#line 863 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\driverspecs.h"
}
#line 534 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\specstrings.h"
#line 14 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
#line 42 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
extern "C" {
#line 51 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
#line 156 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef void *LPVOID;
typedef const void *LPCVOID;

typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#pragma warning(disable: 4214)


extern "C" {



#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
#line 19 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 19 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"



extern "C" {
#line 49 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
__declspec(dllimport) const unsigned short * __cdecl __pctype_func(void);

__declspec(dllimport) extern const unsigned short *_pctype;
#line 62 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
__declspec(dllimport) extern const unsigned short _wctype[];
#line 73 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
__declspec(dllimport) const wctype_t * __cdecl __pwctype_func(void);

__declspec(dllimport) extern const wctype_t *_pwctype;
#line 119 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isdigit( int _C);
               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isspace( int _C);
               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isblank( int _C);
               __declspec(dllimport) int __cdecl _isblank_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl toupper( int _C);
                                  __declspec(dllimport) int __cdecl tolower( int _C);
                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
#line 164 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
               __declspec(dllimport) int __cdecl iswalpha( wint_t _C);
               __declspec(dllimport) int __cdecl _iswalpha_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswupper( wint_t _C);
               __declspec(dllimport) int __cdecl _iswupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswlower( wint_t _C);
               __declspec(dllimport) int __cdecl _iswlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswdigit( wint_t _C);
               __declspec(dllimport) int __cdecl _iswdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswxdigit( wint_t _C);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswspace( wint_t _C);
               __declspec(dllimport) int __cdecl _iswspace_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswpunct( wint_t _C);
               __declspec(dllimport) int __cdecl _iswpunct_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswblank( wint_t _C);
               __declspec(dllimport) int __cdecl _iswblank_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswalnum( wint_t _C);
               __declspec(dllimport) int __cdecl _iswalnum_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswprint( wint_t _C);
               __declspec(dllimport) int __cdecl _iswprint_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswgraph( wint_t _C);
               __declspec(dllimport) int __cdecl _iswgraph_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswcntrl( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcntrl_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswascii( wint_t _C);

               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcsymf_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl __iswcsym( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcsym_l( wint_t _C, _locale_t _Locale);


               __declspec(dllimport) int __cdecl isleadbyte( int _C);
               __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
#line 235 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
__declspec(dllimport) extern int __mb_cur_max;



__declspec(dllimport) int __cdecl ___mb_cur_max_func(void);
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);






__declspec(dllimport) int __cdecl _chvalidator( int _Ch, int _Mask);
#line 283 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
__declspec(dllimport) int __cdecl _chvalidator_l( _locale_t, int _Ch, int _Mask);
#line 387 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ctype.h"
}
#line 31 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 81 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\kernelspecs.h"
#line 43 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\kernelspecs.h"
extern "C" {
#line 249 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\kernelspecs.h"
}
#line 81 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 169 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
  typedef unsigned long POINTER_64_INT;
#line 67 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
extern "C" {


typedef signed char INT8, *PINT8;
typedef signed short INT16, *PINT16;
typedef signed int INT32, *PINT32;
typedef signed __int64 INT64, *PINT64;
typedef unsigned char UINT8, *PUINT8;
typedef unsigned short UINT16, *PUINT16;
typedef unsigned int UINT32, *PUINT32;
typedef unsigned __int64 UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
#line 129 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
    typedef __w64 int INT_PTR, *PINT_PTR;
    typedef __w64 unsigned int UINT_PTR, *PUINT_PTR;

    typedef __w64 long LONG_PTR, *PLONG_PTR;
    typedef __w64 unsigned long ULONG_PTR, *PULONG_PTR;
#line 328 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef __w64 long SHANDLE_PTR;
typedef __w64 unsigned long HANDLE_PTR;
#line 349 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
__inline
void * __ptr64
PtrToPtr64(
    const void *p
    )
{
    return((void * __ptr64) (unsigned __int64) (ULONG_PTR)p );
}

__inline
void *
Ptr64ToPtr(
    const void * __ptr64 p
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) p);
}

__inline
void * __ptr64
HandleToHandle64(
    const void *h
    )
{
    return((void * __ptr64)(__int64)(LONG_PTR)h );
}

__inline
void *
Handle64ToHandle(
    const void * __ptr64 h
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) h );
}
#line 415 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
#line 464 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\basetsd.h"
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;




}
#line 169 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 339 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef void *PVOID;
typedef void * __ptr64 PVOID64;
#line 381 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
#line 394 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef wchar_t WCHAR;





typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef PWSTR *PZPWSTR;
typedef const PWSTR *PCZPWSTR;
typedef WCHAR *LPUWSTR, *PUWSTR;
typedef const WCHAR *LPCWSTR, *PCWSTR;
typedef PCWSTR *PZPCWSTR;
typedef const PCWSTR *PCZPCWSTR;
typedef const WCHAR *LPCUWSTR, *PCUWSTR;

typedef WCHAR *PZZWSTR;
typedef const WCHAR *PCZZWSTR;
typedef WCHAR *PUZZWSTR;
typedef const WCHAR *PCUZZWSTR;

typedef WCHAR *PNZWCH;
typedef const WCHAR *PCNZWCH;
typedef WCHAR *PUNZWCH;
typedef const WCHAR *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;
#line 451 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR *PCUUCSSTR;

typedef UCSCHAR *PUUCSCHAR;
typedef const UCSCHAR *PCUUCSCHAR;







typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef CHAR *NPSTR, *LPSTR, *PSTR;
typedef PSTR *PZPSTR;
typedef const PSTR *PCZPSTR;
typedef const CHAR *LPCSTR, *PCSTR;
typedef PCSTR *PZPCSTR;
typedef const PCSTR *PCZPCSTR;

typedef CHAR *PZZSTR;
typedef const CHAR *PCZZSTR;

typedef CHAR *PNZCH;
typedef const CHAR *PCNZCH;







typedef WCHAR TCHAR, *PTCHAR;
typedef WCHAR TBYTE , *PTBYTE ;



typedef LPWCH LPTCH, PTCH;
typedef LPCWCH LPCTCH, PCTCH;
typedef LPWSTR PTSTR, LPTSTR;
typedef LPCWSTR PCTSTR, LPCTSTR;
typedef LPUWSTR PUTSTR, LPUTSTR;
typedef LPCUWSTR PCUTSTR, LPCUTSTR;
typedef LPWSTR LP;
typedef PZZWSTR PZZTSTR;
typedef PCZZWSTR PCZZTSTR;
typedef PUZZWSTR PUZZTSTR;
typedef PCUZZWSTR PCUZZTSTR;
typedef PZPWSTR PZPTSTR;
typedef PNZWCH PNZTCH;
typedef PCNZWCH PCNZTCH;
typedef PUNZWCH PUNZTCH;
typedef PCUNZWCH PCUNZTCH;
#line 537 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef SHORT *PSHORT;
typedef LONG *PLONG;
#line 547 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _PROCESSOR_NUMBER {
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;
#line 571 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef void *HANDLE;
#line 581 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef HANDLE *PHANDLE;







typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;
#line 602 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef long HRESULT;
#line 665 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
#line 677 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;
#line 708 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;
#line 723 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
#line 745 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;




typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;

    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;




typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;
#line 802 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
#line 854 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
ULONGLONG
__stdcall
Int64ShllMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
         LONGLONG Value,
         DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    );


#pragma warning(push)

#pragma warning(disable: 4035 4793)

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shld edx, eax, cl
        shl eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
         LONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shrd eax, edx, cl
        sar edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
         ULONGLONG Value,
         DWORD ShiftCount
    )
{
    __asm {
        mov ecx, ShiftCount
        mov eax, dword ptr [Value]
        mov edx, dword ptr [Value+4]
        shrd eax, edx, cl
        shr edx, cl
    }
}


#pragma warning(pop)
#line 945 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" {
#line 997 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
unsigned int
__cdecl
_rotl (
         unsigned int Value,
         int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
         unsigned __int64 Value,
         int Shift
    );

unsigned int
__cdecl
_rotr (
         unsigned int Value,
         int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
         unsigned __int64 Value,
         int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)




}






typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
#line 1068 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"
typedef struct _GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[ 8 ];
} GUID;
#line 75 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"
typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;
#line 146 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"



extern "C" {
#line 47 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
__declspec(dllimport) void * __cdecl _memccpy( void * _Dst, const void * _Src, int _Val, size_t _MaxCount);
               __declspec(dllimport) const void * __cdecl memchr( const void * _Buf , int _Val, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);
               __declspec(dllimport) int __cdecl _memicmp_l( const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale);
               int __cdecl memcmp( const void * _Buf1, const void * _Buf2, size_t _Size);



void * __cdecl memcpy( void * _Dst, const void * _Src, size_t _Size);

__declspec(dllimport) errno_t __cdecl memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
#line 94 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
        void * __cdecl memset( void * _Dst, int _Val, size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details.")) __declspec(dllimport) void * __cdecl memccpy( void * _Dst, const void * _Src, int _Val, size_t _Size);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);





                   __declspec(dllimport) errno_t __cdecl _strset_s( char * _Dst, size_t _DstSize, int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Dest)[_Size], int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _strset( char *_Dest, int _Value);

                   __declspec(dllimport) errno_t __cdecl strcpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Dest)[_Size], const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl strcpy( char *_Dest, const char * _Source);

                   __declspec(dllimport) errno_t __cdecl strcat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Dest)[_Size], const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl strcat( char *_Dest, const char * _Source);

               int __cdecl strcmp( const char * _Str1, const char * _Str2);
               size_t __cdecl strlen( const char * _Str);
               __declspec(dllimport)


size_t __cdecl strnlen( const char * _Str, size_t _MaxCount);

               static __inline


size_t __cdecl strnlen_s( const char * _Str, size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}


                   __declspec(dllimport) errno_t __cdecl memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);


__declspec(dllimport) void * __cdecl memmove( void * _Dst, const void * _Src, size_t _Size);






               __declspec(dllimport) char * __cdecl _strdup( const char * _Src);





               __declspec(dllimport) const char * __cdecl strchr( const char * _Str, int _Val);
               __declspec(dllimport) int __cdecl _stricmp( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _strcmpi( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _stricmp_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl strcoll( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _strcoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _stricoll( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _stricoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _strncoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strncoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _strnicoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl strcspn( const char * _Str, const char * _Control);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strerror( const char * _ErrMsg);
                   __declspec(dllimport) errno_t __cdecl _strerror_s( char * _Buf, size_t _SizeInBytes, const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strerror( int);

                   __declspec(dllimport) errno_t __cdecl strerror_s( char * _Buf, size_t _SizeInBytes, int _ErrNum);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
                   __declspec(dllimport) errno_t __cdecl _strlwr_s( char * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strlwr( char *_String);
                   __declspec(dllimport) errno_t __cdecl _strlwr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strlwr_l( char *_String, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl strncat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Dest)[_Size], const char * _Source, size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable: 6059)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strncat( char *_Dest, const char * _Source, size_t _Count);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl strncmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicmp_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl strncpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size], const char * _Source, size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strncpy( char *_Dest, const char * _Source, size_t _Count);
                   __declspec(dllimport) errno_t __cdecl _strnset_s( char * _Str, size_t _SizeInBytes, int _Val, size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Dest)[_Size], int _Val, size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strnset( char *_Dest, int _Val, size_t _Count);
               __declspec(dllimport) const char * __cdecl strpbrk( const char * _Str, const char * _Control);
               __declspec(dllimport) const char * __cdecl strrchr( const char * _Str, int _Ch);
__declspec(dllimport) char * __cdecl _strrev( char * _Str);
               __declspec(dllimport) size_t __cdecl strspn( const char * _Str, const char * _Control);
                               __declspec(dllimport) const char * __cdecl strstr( const char * _Str, const char * _SubStr);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strtok( char * _Str, const char * _Delim);

               __declspec(dllimport) char * __cdecl strtok_s( char * _Str, const char * _Delim, char ** _Context);

                   __declspec(dllimport) errno_t __cdecl _strupr_s( char * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strupr( char *_String);
                   __declspec(dllimport) errno_t __cdecl _strupr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strupr_l( char *_String, _locale_t _Locale);
                   __declspec(dllimport) size_t __cdecl strxfrm ( char * _Dst, const char * _Src, size_t _MaxCount);
                   __declspec(dllimport) size_t __cdecl _strxfrm_l( char * _Dst, const char * _Src, size_t _MaxCount, _locale_t _Locale);


extern "C++" {


               inline char * __cdecl strchr( char * _Str, int _Ch)
        { return (char*)strchr((const char*)_Str, _Ch); }
               inline char * __cdecl strpbrk( char * _Str, const char * _Control)
        { return (char*)strpbrk((const char*)_Str, _Control); }
               inline char * __cdecl strrchr( char * _Str, int _Ch)
        { return (char*)strrchr((const char*)_Str, _Ch); }
                               inline char * __cdecl strstr( char * _Str, const char * _SubStr)
        { return (char*)strstr((const char*)_Str, _SubStr); }



               inline void * __cdecl memchr( void * _Pv, int _C, size_t _N)
        { return (void*)memchr((const void*)_Pv, _C, _N); }

}
#line 245 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details.")) __declspec(dllimport) char * __cdecl strdup( const char * _Src);






               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details.")) __declspec(dllimport) int __cdecl strcmpi( const char * _Str1, const char * _Str2);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details.")) __declspec(dllimport) int __cdecl stricmp( const char * _Str1, const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details.")) __declspec(dllimport) char * __cdecl strlwr( char * _Str);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl strnicmp( const char * _Str1, const char * _Str, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details.")) __declspec(dllimport) char * __cdecl strnset( char * _Str, int _Val, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details.")) __declspec(dllimport) char * __cdecl strrev( char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details.")) char * __cdecl strset( char * _Str, int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details.")) __declspec(dllimport) char * __cdecl strupr( char * _Str);
#line 273 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
               __declspec(dllimport) wchar_t * __cdecl _wcsdup( const wchar_t * _Str);






                   __declspec(dllimport) errno_t __cdecl wcscat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcscat( wchar_t *_Dest, const wchar_t * _Source);



__declspec(dllimport) const wchar_t * __cdecl wcschr( const wchar_t * _Str, wchar_t _Ch);
               __declspec(dllimport) int __cdecl wcscmp( const wchar_t * _Str1, const wchar_t * _Str2);

                   __declspec(dllimport) errno_t __cdecl wcscpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcscpy( wchar_t *_Dest, const wchar_t * _Source);
               __declspec(dllimport) size_t __cdecl wcscspn( const wchar_t * _Str, const wchar_t * _Control);
               __declspec(dllimport) size_t __cdecl wcslen( const wchar_t * _Str);
               __declspec(dllimport)


size_t __cdecl wcsnlen( const wchar_t * _Src, size_t _MaxCount);

               static __inline


size_t __cdecl wcsnlen_s( const wchar_t * _Src, size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}


                   __declspec(dllimport) errno_t __cdecl wcsncat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable: 6059)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsncat( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl wcsncmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);

                   __declspec(dllimport) errno_t __cdecl wcsncpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsncpy( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
               __declspec(dllimport) const wchar_t * __cdecl wcspbrk( const wchar_t * _Str, const wchar_t * _Control);
               __declspec(dllimport) const wchar_t * __cdecl wcsrchr( const wchar_t * _Str, wchar_t _Ch);
               __declspec(dllimport) size_t __cdecl wcsspn( const wchar_t * _Str, const wchar_t * _Control);


__declspec(dllimport) const wchar_t * __cdecl wcsstr( const wchar_t * _Str, const wchar_t * _SubStr);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcstok( wchar_t * _Str, const wchar_t * _Delim);

               __declspec(dllimport) wchar_t * __cdecl wcstok_s( wchar_t * _Str, const wchar_t * _Delim, wchar_t ** _Context);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcserror( int _ErrNum);
                   __declspec(dllimport) errno_t __cdecl _wcserror_s( wchar_t * _Buf, size_t _SizeInWords, int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl __wcserror( const wchar_t * _Str);
                   __declspec(dllimport) errno_t __cdecl __wcserror_s( wchar_t * _Buffer, size_t _SizeInWords, const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

               __declspec(dllimport) int __cdecl _wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcsicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsnicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl _wcsnset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Val, size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Dst)[_Size], wchar_t _Val, size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsnset( wchar_t *_Str, wchar_t _Val, size_t _MaxCount);
__declspec(dllimport) wchar_t * __cdecl _wcsrev( wchar_t * _Str);
                   __declspec(dllimport) errno_t __cdecl _wcsset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsset( wchar_t *_Str, wchar_t _Val);

                   __declspec(dllimport) errno_t __cdecl _wcslwr_s( wchar_t * _Str, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcslwr( wchar_t *_String);
                   __declspec(dllimport) errno_t __cdecl _wcslwr_s_l( wchar_t * _Str, size_t _SizeInWords, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl _wcsupr_s( wchar_t * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsupr( wchar_t *_String);
                   __declspec(dllimport) errno_t __cdecl _wcsupr_s_l( wchar_t * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
                   __declspec(dllimport) size_t __cdecl wcsxfrm( wchar_t * _Dst, const wchar_t * _Src, size_t _MaxCount);
                   __declspec(dllimport) size_t __cdecl _wcsxfrm_l( wchar_t * _Dst, const wchar_t *_Src, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl wcscoll( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcscoll_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcsicoll_l( const wchar_t * _Str1, const wchar_t *_Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsncoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsncoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsnicoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsnicoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);




extern "C++" {


        inline wchar_t * __cdecl wcschr( wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
               inline wchar_t * __cdecl wcspbrk( wchar_t *_Str, const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
               inline wchar_t * __cdecl wcsrchr( wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }


        inline wchar_t * __cdecl wcsstr( wchar_t *_Str, const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 403 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsdup( const wchar_t * _Str);
#line 413 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsnset( wchar_t * _Str, wchar_t _Val, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsrev( wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsset( wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcslwr( wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsupr( wchar_t * _Str);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
#line 434 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string.h"
}
#line 146 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"




__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}
#line 192 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"
__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
#line 1081 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"





typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 1176 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C++"
template <typename T, size_t N>
char (*RtlpNumberOf( T (&)[N] ))[N];
#line 1304 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef


EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
            struct _EXCEPTION_RECORD *ExceptionRecord,
         PVOID EstablisherFrame,
            struct _CONTEXT *ContextRecord,
         PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
#line 2141 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C++" {

    template <size_t S>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE;

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<1>
    {
        typedef INT8 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<2>
    {
        typedef INT16 type;
    };

    template <>
    struct _ENUM_FLAG_INTEGER_FOR_SIZE<4>
    {
        typedef INT32 type;
    };


    template <class T>
    struct _ENUM_FLAG_SIZED_INTEGER
    {
        typedef typename _ENUM_FLAG_INTEGER_FOR_SIZE<sizeof(T)>::type type;
    };

}
#line 2269 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;







typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
#line 2310 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
    M128A XmmRegisters[8];
    BYTE Reserved4[224];



} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
                                   PXSAVE_AREA Area;


    DWORD Reserved2;


    PVOID Buffer;


    DWORD Reserved3;


} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;
#line 3839 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;
#line 4799 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" {
#line 4846 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
void
__int2c (
    void
    );

#pragma intrinsic(__int2c)
#line 4930 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
}
#line 4962 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#pragma warning(push)





#pragma warning(pop)
#line 4983 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" {
#line 5006 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
BOOLEAN
_bittest (
                                   LONG const *Base,
         LONG Offset
    );

BOOLEAN
_bittestandcomplement (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandset (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_bittestandreset (
                                        LONG *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
                                                              LONG volatile *Base,
         LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
                                                              LONG volatile *Base,
         LONG Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)
#line 5057 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
BOOLEAN
_BitScanForward (
          DWORD *Index,
         DWORD Mask
    );


BOOLEAN
_BitScanReverse (
          DWORD *Index,
         DWORD Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#line 5102 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
SHORT
_InterlockedIncrement16 (
                                  SHORT volatile *Addend
    );

SHORT
_InterlockedDecrement16 (
                                  SHORT volatile *Addend
    );

SHORT
_InterlockedCompareExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange,
         SHORT Comperand
    );

LONG64
_InterlockedCompareExchange64 (
                                  LONG64 volatile *Destination,
         LONG64 ExChange,
         LONG64 Comperand
    );

#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedCompareExchange64)
#line 5180 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
LONG
_InterlockedAnd (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
_InterlockedOr (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
_InterlockedXor (
                                  LONG volatile *Destination,
         LONG Value
    );

LONG
__cdecl
_InterlockedIncrement (
                                  LONG volatile *Addend
    );

LONG
__cdecl
_InterlockedDecrement (
                                  LONG volatile *Addend
    );

LONG
__cdecl
_InterlockedExchange (
                                  LONG volatile *Target,
         LONG Value
    );

LONG
__cdecl
_InterlockedExchangeAdd (
                                  LONG volatile *Addend,
         LONG Value
    );

__forceinline
LONG
_InterlockedAdd (
                                  LONG volatile *Addend,
         LONG Value
    )

{

    return _InterlockedExchangeAdd(Addend, Value) + Value;
}

LONG
__cdecl
_InterlockedCompareExchange (
                                  LONG volatile * Destination,
         LONG ExChange,
         LONG Comperand
    );



__forceinline

PVOID
_InlineInterlockedExchangePointer(



                          PVOID volatile * Destination,
             PVOID Value
    )
{
    return (PVOID)_InterlockedExchange((LONG volatile *) Destination,
                                      (LONG) Value);
}






__forceinline

PVOID
_InlineInterlockedCompareExchangePointer (



                          PVOID volatile * Destination,
             PVOID ExChange,
             PVOID Comperand
    )
{
    return (PVOID)_InterlockedCompareExchange((LONG volatile *) Destination,
                                             (LONG) ExChange,
                                             (LONG) Comperand);
}
#line 5292 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)








CHAR
_InterlockedExchange8 (
                                  CHAR volatile *Target,
         CHAR Value
    );

SHORT
_InterlockedExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)
#line 5337 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
char
_InterlockedAnd8 (
                                  char volatile *Destination,
         char Value
    );

char
_InterlockedOr8 (
                                  char volatile *Destination,
         char Value
    );

char
_InterlockedXor8 (
                                  char volatile *Destination,
         char Value
    );

SHORT
_InterlockedAnd16 (
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedXor16(
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedCompareExchange16 (
                                  SHORT volatile *Destination,
         SHORT ExChange,
         SHORT Comperand
    );

SHORT
_InterlockedOr16 (
                                  SHORT volatile *Destination,
         SHORT Value
    );

SHORT
_InterlockedIncrement16 (
                                  SHORT volatile *Destination
    );

SHORT
_InterlockedDecrement16 (
                                  SHORT volatile *Destination
    );

#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)
#pragma intrinsic (_InterlockedCompareExchange16)
#pragma intrinsic (_InterlockedIncrement16)
#pragma intrinsic (_InterlockedDecrement16)
#line 5409 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__forceinline
LONG64
_InterlockedAnd64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);

    return Old;
}






__forceinline
LONG64
_InterlockedAdd64 (
                                  LONG64 volatile *Addend,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old + Value;
}
#line 5470 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
LONG
_InterlockedXor (
                                  LONG volatile *Target,
         LONG Set
    );

#pragma intrinsic(_InterlockedXor)





LONGLONG
__forceinline
_InterlockedOr64 (
                                  LONGLONG volatile *Destination,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);

    return Old;
}



__forceinline
LONG64
_InterlockedXor64 (
                                  LONG64 volatile *Destination,
         LONG64 Value
    )
{
    LONG64 Old;

    do {
        Old = *Destination;
    } while (_InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);

    return Old;
}



LONGLONG
__forceinline
_InterlockedIncrement64 (
                                  LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);

    return Old + 1;
}





__forceinline
LONGLONG
_InterlockedDecrement64 (
                                  LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);

    return Old - 1;
}



__forceinline
LONGLONG
_InterlockedExchange64 (
                                  LONGLONG volatile *Target,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Target;
    } while (_InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);

    return Old;
}






__forceinline
LONGLONG
_InterlockedExchangeAdd64 (
                                  LONGLONG volatile *Addend,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (_InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old;
}
#line 5610 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
void
__incfsbyte (
         DWORD Offset
    );

void
__addfsbyte (
         DWORD Offset,
         BYTE Value
    );

void
__incfsword (
         DWORD Offset
    );

void
__addfsword (
         DWORD Offset,
         WORD Value
    );

void
__incfsdword (
         DWORD Offset
    );

void
__addfsdword (
         DWORD Offset,
         DWORD Value
    );

#pragma intrinsic(__incfsbyte)
#pragma intrinsic(__addfsbyte)
#pragma intrinsic(__incfsword)
#pragma intrinsic(__addfsword)
#pragma intrinsic(__incfsdword)
#pragma intrinsic(__addfsdword)
#line 5664 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
void
__cpuidex (
    int CPUInfo[4],
    int Function,
    int SubLeaf
    );

#pragma intrinsic(__cpuidex)
#line 5681 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
BYTE
__readfsbyte (
         DWORD Offset
    );

WORD
__readfsword (
         DWORD Offset
    );

DWORD
__readfsdword (
         DWORD Offset
    );

void
__writefsbyte (
         DWORD Offset,
         BYTE Data
    );

void
__writefsword (
         DWORD Offset,
         WORD Data
    );

void
__writefsdword (
         DWORD Offset,
         DWORD Data
    );

#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)





void
_mm_pause (
    void
    );

#pragma intrinsic(_mm_pause)






}
#line 5748 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#pragma prefast(push)
#pragma warning(push)
#pragma prefast(disable: 6001 28113, "The barrier variable is accessed only to create a side effect.")
#pragma warning(disable: 4793)
__forceinline
void
MemoryBarrier (
    void
    )
{
    LONG Barrier;

    _InterlockedOr(&Barrier, 0);
    return;
}

#pragma warning(pop)
#pragma prefast(pop)
#line 5778 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
void
_mm_prefetch (
         CHAR const *a,
         int sel
    );

#pragma intrinsic(_mm_prefetch)
#line 5807 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
DWORD64
__readpmc (
         DWORD Counter
    );

#pragma intrinsic(__readpmc)







DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)








__inline PVOID GetFiberData( void ) { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);}
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);}
#line 5900 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Spare0;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
#line 5922 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef char __C_ASSERT__[(sizeof(XSAVE_FORMAT) == 512)?1:-1];







#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
#line 5929 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 5941 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _CONTEXT {
#line 5961 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} CONTEXT;

typedef CONTEXT *PCONTEXT;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 6029 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 6039 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
#line 7934 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" {


__forceinline
CHAR
ReadAcquire8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *Destination = Value;
    return;
}


}
#line 8163 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__forceinline
CHAR
ReadRaw8 (
                               CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
                                CHAR volatile *Destination,
         CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
                               SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
                                SHORT volatile *Destination,
         SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
                               LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
                                LONG volatile *Destination,
         LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
                               LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
                                LONG64 volatile *Destination,
         LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
BYTE
ReadUCharAcquire (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE
ReadUCharNoFence (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE
ReadUCharRaw (
                               BYTE const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
                                BYTE volatile *Destination,
         BYTE Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
WORD
ReadUShortAcquire (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadAcquire16((PSHORT)Source);
}

__forceinline
WORD
ReadUShortNoFence (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadNoFence16((PSHORT)Source);
}

__forceinline
WORD
ReadUShortRaw (
                               WORD const volatile *Source
    )

{

    return (WORD )ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
                                WORD volatile *Destination,
         WORD Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
DWORD
ReadULongAcquire (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__forceinline
DWORD
ReadULongNoFence (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__forceinline
DWORD
ReadULongRaw (
                               DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
                                DWORD volatile *Destination,
         DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
DWORD64
ReadULong64Acquire (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64NoFence (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64Raw (
                               DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
                                DWORD64 volatile *Destination,
         DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}
#line 8577 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__forceinline
PVOID
ReadPointerAcquire (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire((PLONG)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence((PLONG)Source);
}

__forceinline
PVOID
ReadPointerRaw (
                               PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw((PLONG)Source);
}

__forceinline
void
WritePointerRelease (
                                PVOID volatile *Destination,
         PVOID Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
                                PVOID volatile *Destination,
             PVOID Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerRaw (
                                PVOID volatile *Destination,
             PVOID Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}
#line 8813 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
#line 8827 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 8839 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _WOW64_CONTEXT {
#line 8859 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
    DWORD ContextFlags;







    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;






    WOW64_FLOATING_SAVE_AREA FloatSave;






    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;






    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;






    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;







    BYTE ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 8927 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"



typedef struct _WOW64_LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;
#line 8981 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
#line 9039 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef PVOID PCLAIMS_BLOB;
#line 9083 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
#line 9141 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
#line 9160 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
#line 9160 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"


typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 9169 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 9204 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];

} SID, *PISID;
#line 9235 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;

    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;
#line 9630 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum {

    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
} WELL_KNOWN_SID_TYPE;
#line 9837 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
#line 9867 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
#line 9981 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;
#line 10049 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;

} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
#line 10172 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
#line 10223 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
#line 10313 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE Revision;
   BYTE Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;


typedef struct _SECURITY_OBJECT_AI_PARAMS {
    DWORD Size;
    DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;
#line 10390 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
#line 10410 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
#line 10464 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
#line 10485 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone = 0x00000000,






    AccessReasonAllowedAce = 0x00010000,
    AccessReasonDeniedAce = 0x00020000,

    AccessReasonAllowedParentAce = 0x00030000,
    AccessReasonDeniedParentAce = 0x00040000,

    AccessReasonNotGrantedByCape = 0x00050000,
    AccessReasonNotGrantedByParentCape = 0x00060000,

    AccessReasonNotGrantedToAppContainer = 0x00070000,

    AccessReasonMissingPrivilege = 0x00100000,
    AccessReasonFromPrivilege = 0x00200000,


    AccessReasonIntegrityLevel = 0x00300000,

    AccessReasonOwnership = 0x00400000,

    AccessReasonNullDacl = 0x00500000,
    AccessReasonEmptyDacl = 0x00600000,

    AccessReasonNoSD = 0x00700000,
    AccessReasonNoGrant = 0x00800000,

    AccessReasonTrustLabel = 0x00900000
}
ACCESS_REASON_TYPE;
#line 10536 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
#line 10565 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;
#line 10656 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
#line 10728 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];

} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;
#line 10875 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE PerUserPolicy[(((56)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;

typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;
#line 10986 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64 Version;
    PWSTR Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
#line 10998 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID pValue;
    DWORD ValueLength;
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
#line 11070 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {






    PWSTR Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {






    DWORD Name;





    WORD ValueType;






    WORD Reserved;





    DWORD Flags;





    DWORD ValueCount;





    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
#line 11189 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {





    WORD Version;





    WORD Reserved;

    DWORD AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;
#line 11216 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
#line 11271 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;
#line 11348 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };



    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };




    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };





    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;
#line 11431 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
    DWORD UmsVersion;
        PVOID UmsContext;
        PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES;

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessReserved1Policy,
    ProcessSignaturePolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        };
    };
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        };
    };
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        };
    };
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD ProhibitDynamicCode : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;


typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD MicrosoftSignedOnly : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
    };
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
#line 11820 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    JobObjectReserved9Information,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;


typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;
#line 11887 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE Flags;
    BYTE Reserved[21];
    WORD GroupCount;
                             GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

                          struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
#line 12077 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {

    DWORD64 EnabledFeatures;


    DWORD64 EnabledVolatileFeatures;


    DWORD Size;

    DWORD OptimizedSave : 1;


    XSTATE_FEATURE Features[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;


typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;
#line 12312 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _FILE_ID_128 {
    BYTE Identifier[16];
} FILE_ID_128, *PFILE_ID_128;





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
#line 12392 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
#line 12495 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _SCRUB_DATA_INPUT {





    DWORD Size;
#line 12510 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
    DWORD Flags;







    DWORD MaximumIos;





    DWORD Reserved[17];







    BYTE ResumeContext[816];

} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;



typedef struct _SCRUB_PARITY_EXTENT {

    LONGLONG Offset;

    ULONGLONG Length;

} SCRUB_PARITY_EXTENT, *PSCRUB_PARITY_EXTENT;

typedef struct _SCRUB_PARITY_EXTENT_DATA {





    WORD Size;





    WORD Flags;





    WORD NumberOfParityExtents;





    WORD MaximumNumberOfParityExtents;





    SCRUB_PARITY_EXTENT ParityExtents[1];

} SCRUB_PARITY_EXTENT_DATA, *PSCRUB_PARITY_EXTENT_DATA;



typedef struct _SCRUB_DATA_OUTPUT {





    DWORD Size;
#line 12598 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
    DWORD Flags;





    DWORD Status;






    ULONGLONG ErrorFileOffset;






    ULONGLONG ErrorLength;





    ULONGLONG NumberOfBytesRepaired;





    ULONGLONG NumberOfBytesFailed;





    ULONGLONG InternalFileReference;
#line 12647 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
    WORD ResumeContextLength;







    WORD ParityExtentDataOffset;





    DWORD Reserved[5];
#line 12686 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
    BYTE ResumeContext[816];

} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;
#line 12703 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _SharedVirtualDiskSupportType
{



    SharedVirtualDisksUnsupported = 0,




    SharedVirtualDisksSupported = 1
} SharedVirtualDiskSupportType;

typedef enum _SharedVirtualDiskHandleState
{



    SharedVirtualDiskHandleStateNone = 0,





    SharedVirtualDiskHandleStateFileShared = 1,





    SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;





typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {




    SharedVirtualDiskSupportType SharedVirtualDiskSupport;





    SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, *PSHARED_VIRTUAL_DISK_SUPPORT;
#line 12793 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_MAX_POWER_SAVINGS;






extern "C" const GUID GUID_MIN_POWER_SAVINGS;






extern "C" const GUID GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID NO_SUBGROUP_GUID;







extern "C" const GUID ALL_POWERSCHEMES_GUID;
#line 12860 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_POWERSCHEME_PERSONALITY;
#line 12869 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_ACTIVE_POWERSCHEME;
#line 12884 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_IDLE_RESILIENCY_SUBGROUP;





extern "C" const GUID GUID_IDLE_RESILIENCY_PERIOD;






extern "C" const GUID GUID_IDLE_RESILIENCY_PLATFORM_STATE;






extern "C" const GUID GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;
#line 12917 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;
#line 12926 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_VIDEO_SUBGROUP;





extern "C" const GUID GUID_VIDEO_POWERDOWN_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ANNOYANCE_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;





extern "C" const GUID GUID_VIDEO_DIM_TIMEOUT;





extern "C" const GUID GUID_VIDEO_ADAPTIVE_POWERDOWN;





extern "C" const GUID GUID_MONITOR_POWER_ON;




extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;





extern "C" const GUID GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;




extern "C" const GUID GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;






extern "C" const GUID GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;





extern "C" const GUID GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID GUID_ALLOW_DISPLAY_REQUIRED;







extern "C" const GUID GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern "C" const GUID GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern "C" const GUID GUID_NON_ADAPTIVE_INPUT_TIMEOUT;







extern "C" const GUID GUID_DISK_SUBGROUP;





extern "C" const GUID GUID_DISK_POWERDOWN_TIMEOUT;






extern "C" const GUID GUID_DISK_IDLE_TIMEOUT;
#line 13051 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID GUID_DISK_ADAPTIVE_POWERDOWN;
#line 13066 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_SLEEP_SUBGROUP;







extern "C" const GUID GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID GUID_STANDBY_TIMEOUT;
#line 13089 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID GUID_HIBERNATE_FASTS4_POLICY;
#line 13110 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID GUID_SYSTEM_AWAYMODE;





extern "C" const GUID GUID_ALLOW_AWAYMODE;





extern "C" const GUID GUID_VIDEO_FULLSCREEN_PLAYBACK;






extern "C" const GUID GUID_AUDIO_PLAYBACK;







extern "C" const GUID GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID GUID_ALLOW_RTC_WAKE;







extern "C" const GUID GUID_ALLOW_SYSTEM_REQUIRED;
#line 13167 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_SYSTEM_BUTTON_SUBGROUP;
#line 13186 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_POWERBUTTON_ACTION;





extern "C" const GUID GUID_SLEEPBUTTON_ACTION;






extern "C" const GUID GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID GUID_LIDCLOSE_ACTION;
extern "C" const GUID GUID_LIDOPEN_POWERSTATE;
#line 13215 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_BATTERY_SUBGROUP;
#line 13227 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID GUID_BATTERY_DISCHARGE_FLAGS_3;
#line 13250 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PROCESSOR_THROTTLE_POLICY;
#line 13272 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_THROTTLE_MAXIMUM;







extern "C" const GUID GUID_PROCESSOR_THROTTLE_MINIMUM;







extern "C" const GUID GUID_PROCESSOR_ALLOW_THROTTLING;





extern "C" const GUID GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY;
#line 13341 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_TIME;
#line 13350 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_TIME;







extern "C" const GUID GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_POLICY;
#line 13378 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_BOOST_MODE;
#line 13394 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID GUID_PROCESSOR_IDLE_DISABLE;
#line 13410 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM;
#line 13419 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_TIME_CHECK;
#line 13428 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;
#line 13470 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID GUID_PROCESSOR_PARKING_PERF_STATE;







extern "C" const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern "C" const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;
#line 13588 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY;







extern "C" const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY;







extern "C" const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;
#line 13622 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT;






extern "C" const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;







extern "C" const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY;







extern "C" const GUID GUID_SYSTEM_COOLING_POLICY;
#line 13655 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_LOCK_CONSOLE_ON_WAKE;
#line 13665 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_DEVICE_IDLE_POLICY;
#line 13686 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_ACDC_POWER_SOURCE;
#line 13702 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_LIDSWITCH_STATE_CHANGE;
#line 13719 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_BATTERY_PERCENTAGE_REMAINING;






extern "C" const GUID GUID_GLOBAL_USER_PRESENCE;
#line 13737 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_SESSION_DISPLAY_STATUS;
#line 13747 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_SESSION_USER_PRESENCE;






extern "C" const GUID GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID GUID_APPLAUNCH_BUTTON;
#line 13780 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID GUID_PCIEXPRESS_ASPM_POLICY;
#line 13798 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern "C" const GUID GUID_INTSTEER_SUBGROUP;



extern "C" const GUID GUID_INTSTEER_MODE;



extern "C" const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;



extern "C" const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER;



typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;
#line 13876 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;
#line 13899 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;
#line 13925 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct CM_Power_Data_s {
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;





typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,
    LastSleepTime,
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
 POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;
    BOOLEAN Console;
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;
    DWORD LastInputTime;
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN On;
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {





    DWORD Version;





    GUID Guid;






    SYSTEM_POWER_CONDITION PowerCondition;




    DWORD DataLength;




    BYTE Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {





    LARGE_INTEGER ActivationTime;




    DWORD Flags;




    DWORD ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleSlate,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;
#line 14233 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD Granularity;
    DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;




typedef struct {
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
                             PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;
#line 14467 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
extern "C" const GUID PPM_PERFSTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID;



extern "C" const GUID PPM_IDLESTATE_CHANGE_GUID;



extern "C" const GUID PPM_PERFSTATES_DATA_GUID;



extern "C" const GUID PPM_IDLESTATES_DATA_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_GUID;



extern "C" const GUID PPM_IDLE_ACCOUNTING_EX_GUID;



extern "C" const GUID PPM_THERMALCONSTRAINT_GUID;



extern "C" const GUID PPM_PERFMON_PERFSTATE_GUID;



extern "C" const GUID PPM_THERMAL_POLICY_CHANGE_GUID;



typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable: 4121)

typedef struct {
    BYTE Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
#line 14583 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct {
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
#line 14598 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _SYSTEM_POWER_POLICY {
    DWORD Revision;


    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;


    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;

    BYTE DynamicThrottle;
    BYTE Spare2[2];


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;

    DWORD Spare3;



    DWORD DozeS4Timeout;


    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];


    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];


    DWORD SpindownTimeout;


    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;
#line 14658 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct {
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD Revision;
    union {
        WORD AsWORD ;
        struct {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;
#line 14693 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _PROCESSOR_POWER_POLICY_INFO {


    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;


    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];


    DWORD AllowDemotion:1;
    DWORD AllowPromotion:1;
    DWORD Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD Revision;


    BYTE DynamicThrottle;
    BYTE Spare[3];


    DWORD DisableCStates:1;
    DWORD Reserved:31;




    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union {
        BYTE Spare;
        union {
            BYTE AsBYTE ;
            struct {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy: 2;
                BYTE DecreasePolicy: 2;
                BYTE Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {


    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;


    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;


    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {

    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;


    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;





    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BOOLEAN Hiberboot;
    BOOLEAN WakeAlarmPresent;
    BOOLEAN AoAc;



    BOOLEAN DiskSpinDown;
    BYTE spare3[8];


    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];


    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[3];

    BYTE Tag;

    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;

    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;
#line 14854 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
#line 14854 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"








#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
#line 14862 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 14874 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 14984 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"







typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
#line 15054 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {




    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;





    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
#line 15166 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;



typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
#line 15262 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct ANON_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {

    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;


    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union {
            DWORD PhysicalAddress;
            DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
#line 15390 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
#line 15390 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"







typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX;
#line 15553 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
#line 15553 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"


typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 15564 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"






typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
 BYTE bReserved;
 SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct {
        BYTE Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
#line 15668 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    } ;
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
#line 16049 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 16059 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"







typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION * PIMAGE_BASE_RELOCATION;
#line 16113 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
#line 16133 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    CHAR Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
#line 16156 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"


typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 16168 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"


typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
#line 16191 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union {
        DWORD Characteristics;
        struct {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
#line 16246 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    } ;
    DWORD TimeDateStamp;




    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;
            DWORD ReservedAttributes : 31;
        };
    } Attributes;

    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;


} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;
#line 16326 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
#line 16353 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD Name;
        WORD Id;
    } ;
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
#line 16380 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
#line 16401 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
    DWORD GuardCFCheckFunctionPointer;
    DWORD Reserved2;
    DWORD GuardCFFunctionTable;
    DWORD GuardCFFunctionCount;
    DWORD GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
    ULONGLONG GuardCFCheckFunctionPointer;
    ULONGLONG Reserved2;
    ULONGLONG GuardCFFunctionTable;
    ULONGLONG GuardCFFunctionCount;
    DWORD GuardFlags;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
#line 16492 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
#line 16565 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;







typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
#line 16599 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;

    BOOLEAN Unicode;
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
#line 16648 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
#line 16683 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;


} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;
#line 16733 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;

    int :7;
    unsigned int AmaskShift: 8;
    int :16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 16747 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 16756 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union {
        WORD Ordinal;
        WORD Hint;
    } ;

    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,

} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA =0x00010000,


    COR_VERSION_MAJOR_V2 =2,
    COR_VERSION_MAJOR =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR =5,
    COR_DELETED_NAME_LENGTH =8,
    COR_VTABLEGAP_NAME_LENGTH =8,


    NATIVE_TYPE_MAX_CB =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA =0x01,
    IMAGE_COR_MIH_EHRVA =0x02,
    IMAGE_COR_MIH_BASICBLOCK =0x08,


    COR_VTABLE_32BIT =0x01,
    COR_VTABLE_64BIT =0x02,
    COR_VTABLE_FROM_UNMANAGED =0x04,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN =0x08,
    COR_VTABLE_CALL_MOST_DERIVED =0x10,


    IMAGE_COR_EATJ_THUNK_SIZE =32,



    MAX_CLASS_NAME =1024,
    MAX_PACKAGE_NAME =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{

    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;


    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;



    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } ;


    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;


    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;


    IMAGE_DATA_DIRECTORY ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;








#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\apiset.h"
#line 16875 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 16890 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)

WORD
__stdcall
RtlCaptureStackBackTrace(
         DWORD FramesToSkip,
         DWORD FramesToCapture,
                                             PVOID * BackTrace,
              PDWORD BackTraceHash
    );
#line 16914 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
          PCONTEXT ContextRecord
    );
#line 16933 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
void
__stdcall
RtlUnwind(
             PVOID TargetFrame,
             PVOID TargetIp,
             PEXCEPTION_RECORD ExceptionRecord,
         PVOID ReturnValue
    );
#line 17397 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
         PVOID PcValue,
          PVOID * BaseOfImage
    );
#line 17422 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
         const void * Source1,
         const void * Source2,
         SIZE_T Length
    );
#line 17476 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY, *PSLIST_ENTRY;
#line 17497 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY Next;
        WORD Depth;
        WORD CpuId;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;
#line 17525 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
          PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
         const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
            PSLIST_HEADER ListHead,
                             PSLIST_ENTRY List,
            PSLIST_ENTRY ListEnd,
         DWORD Count
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
            PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD
__stdcall
RtlQueryDepthSList (
         PSLIST_HEADER ListHead
    );
#line 17607 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;



typedef struct _RTL_BARRIER {
            DWORD Reserved1;
            DWORD Reserved2;
            ULONG_PTR Reserved3[2];
            DWORD Reserved4;
            DWORD Reserved5;
} RTL_BARRIER, *PRTL_BARRIER;
#line 17651 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(noreturn)
void
__fastfail(
         unsigned int Code
    );

#pragma intrinsic(__fastfail)
#line 17678 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
         DWORD TagBase,
         DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}
#line 17757 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__forceinline
PVOID
RtlSecureZeroMemory(
                                PVOID ptr,
         SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;







    while (cnt) {







        *vptr = 0;



        vptr++;
        cnt--;
    }



    return ptr;
}
#line 17814 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;

typedef OSVERSIONINFOW OSVERSIONINFO;
typedef POSVERSIONINFOW POSVERSIONINFO;
typedef LPOSVERSIONINFOW LPOSVERSIONINFO;






typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;

typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;
#line 17959 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         DWORD TypeMask,
         BYTE Condition
    );
#line 17984 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
          DWORD OSMajorVersion,
          DWORD OSMinorVersion,
          DWORD SpMajorVersion,
          DWORD SpMinorVersion,
          PDWORD ReturnedProductType
    );
#line 18004 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef

void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
         RTL_UMS_SCHEDULER_REASON Reason,
         ULONG_PTR ActivationPayload,
         PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
#line 18093 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__declspec(dllimport)
DWORD
__stdcall
RtlCrc32(
                           const void *Buffer,
         size_t Size,
         DWORD InitialCrc
    );

__declspec(dllimport)
ULONGLONG
__stdcall
RtlCrc64(
                           const void *Buffer,
         size_t Size,
         ULONGLONG InitialCrc
    );
#line 18121 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;
#line 18152 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;






    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {
        PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;

typedef struct _RTL_CONDITION_VARIABLE {
        PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;


typedef
void
(__stdcall *PAPCFUNC)(
         ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation,
    HeapEnableTerminationOnCorruption


} HEAP_INFORMATION_CLASS;
#line 18209 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD , PVOID, PVOID);
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
       PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
                            PVOID Addr,
         SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass,




    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;
#line 18281 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

#pragma warning(push)
#pragma warning(disable: 4200)

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#pragma warning(pop)

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;




typedef struct _SUPPORTED_OS_INFO {
    WORD OsCount;
    WORD MitigationExist;
    WORD OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;
#line 18445 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
#line 18473 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)

#pragma warning(disable: 4200)

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD ulSize;
    WCHAR szLogicalLogFile[256];
    DWORD ulNumRecords;
    EVENTLOGRECORD pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD ulOffsets[];
};




#pragma warning(pop)
#line 18722 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
#line 18810 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
#line 18826 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
#line 18840 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
#line 18854 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
#line 18875 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
#line 18968 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
#line 19022 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
#line 19038 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;







extern "C" {




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\ktmtypes.h"
#line 23 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\ktmtypes.h"
extern "C" {



typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;
#line 78 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\ktmtypes.h"
typedef ULONG NOTIFICATION_MASK;
#line 133 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\ktmtypes.h"
typedef struct _TRANSACTION_NOTIFICATION {
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID EnlistmentId;
    UOW UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;

} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID ProtocolId;
                                  ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


}
#line 19067 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
#line 19236 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
                                WCHAR LogPath[1];

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID EnlistmentId;
    GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation,
    TransactionDTCPrivateInformation
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;
#line 19421 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _KTMOBJECT_CURSOR {





    GUID LastQuery;





    DWORD ObjectIdCount;





    GUID ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




}



typedef DWORD TP_VERSION, *PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP;

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
                PVOID ObjectContext,
                PVOID CleanupContext
    );
#line 19488 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union {
        DWORD Flags;
        struct {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;
#line 19536 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__forceinline
void
TpInitializeCallbackEnviron(
          PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;







    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);



}

__forceinline
void
TpSetCallbackThreadpool(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_POOL Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             PTP_CLEANUP_GROUP CleanupGroup,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
             PTP_CALLBACK_ENVIRON CallbackEnviron,
             struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1;
}

__forceinline
void
TpSetCallbackLongFunction(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PVOID DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            PTP_SIMPLE_CALLBACK FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
            PTP_CALLBACK_ENVIRON CallbackEnviron,
            TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}



__forceinline
void
TpSetCallbackPersistent(
            PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
         PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{






    (CallbackEnviron);
}




typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WORK Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_TIMER Timer
    );

typedef DWORD TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PTP_WAIT Wait,
                TP_WAIT_RESULT WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;
#line 19787 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
__inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18); }
#line 19808 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnt.h"
}



#pragma warning(pop)
#line 182 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"




typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
#line 209 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;







typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();
#line 237 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
typedef WORD ATOM;

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;
#line 263 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\minwindef.h"
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



}
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
#line 39 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;
#line 63 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
typedef void * HGDIOBJ;






struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;


struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;


struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;


struct HDC__{int unused;}; typedef struct HDC__ *HDC;

struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;

struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;


struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;



struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
#line 110 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;
#line 120 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;
#line 131 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
typedef HICON HCURSOR;




typedef DWORD COLORREF;







typedef DWORD *LPCOLORREF;
#line 154 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT x;
    SHORT y;




} POINTS, *PPOINTS, *LPPOINTS;
#line 241 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windef.h"
}
#line 164 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
#line 19 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)







#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\apisetcconv.h"
#line 30 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
#line 13 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)


#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)






extern "C" {
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;
#line 89 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              CHAR cFileName[ 260 ];
              CHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
              WCHAR cFileName[ 260 ];
              WCHAR cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

typedef WIN32_FIND_DATAW WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAW PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAW LPWIN32_FIND_DATA;
#line 147 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;


typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,

    FileStorageInfo,
    FileAlignmentInfo,
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,

    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;


typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
            DWORD dwErrorCode,
            DWORD dwNumberOfBytesTransfered,
            LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;
#line 244 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;
#line 273 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;
#line 417 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\minwinbase.h"
}






#pragma warning(pop)
#line 31 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"






#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
#line 38 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
extern "C" {
#line 50 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
__declspec(dllimport)

LPCH
__stdcall
GetEnvironmentStrings(
    void
    );


__declspec(dllimport)

LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );
#line 74 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
                                     LPWCH NewEnvironment
    );





__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
                                     LPCH penv
    );

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
                                     LPWCH penv
    );







__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
         DWORD nStdHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
         DWORD nStdHandle,
         HANDLE hHandle
    );





__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
         DWORD nStdHandle,
         HANDLE hHandle,
              PHANDLE phPrevValue
    );
#line 148 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );
#line 179 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
__declspec(dllimport)

DWORD
__stdcall
GetEnvironmentVariableA(
             LPCSTR lpName,
                                           LPSTR lpBuffer,
         DWORD nSize
    );

__declspec(dllimport)

DWORD
__stdcall
GetEnvironmentVariableW(
             LPCWSTR lpName,
                                           LPWSTR lpBuffer,
         DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
         LPCSTR lpName,
             LPCSTR lpValue
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
         LPCWSTR lpName,
             LPCWSTR lpValue
    );







__declspec(dllimport)

DWORD
__stdcall
ExpandEnvironmentStringsA(
         LPCSTR lpSrc,
                                       LPSTR lpDst,
         DWORD nSize
    );

__declspec(dllimport)

DWORD
__stdcall
ExpandEnvironmentStringsW(
         LPCWSTR lpSrc,
                                       LPWSTR lpDst,
         DWORD nSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
         LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
         LPCWSTR lpPathName
    );







__declspec(dllimport)

DWORD
__stdcall
GetCurrentDirectoryA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );

__declspec(dllimport)

DWORD
__stdcall
GetCurrentDirectoryW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );







__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
             LPCWSTR lpPath,
         LPCWSTR lpFileName,
             LPCWSTR lpExtension,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
              LPWSTR * lpFilePart
    );
#line 323 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
             LPCSTR lpPath,
         LPCSTR lpFileName,
             LPCSTR lpExtension,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
              LPSTR * lpFilePart
    );





__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
         LPCSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
         LPCWSTR ExeName
    );
#line 372 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processenv.h"
}
#line 37 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
extern "C" {
#line 74 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
         const FILETIME * lpFileTime1,
         const FILETIME * lpFileTime2
    );
#line 90 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
         LPCSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
         LPCWSTR lpPathName,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
#line 119 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
         LPCSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
         LPCWSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD dwCreationDisposition,
         DWORD dwFlagsAndAttributes,
             HANDLE hTemplateFile
    );







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
         DWORD dwFlags,
         LPCWSTR lpDeviceName,
             LPCWSTR lpTargetPath
    );
#line 172 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
         LPCSTR lpFileName
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
         LPCWSTR lpFileName
    );
#line 199 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
         const FILETIME * lpFileTime,
          LPFILETIME lpLocalFileTime
    );
#line 230 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindClose(
            HANDLE hFindFile
    );
#line 245 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
         HANDLE hChangeHandle
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
         LPCSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
         LPCWSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );







__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
         LPCSTR lpFileName,
          LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
         LPCWSTR lpFileName,
          LPWIN32_FIND_DATAW lpFindFileData
    );
#line 309 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
         LPCSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
         LPCWSTR lpFileName,
         FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
         FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
         DWORD dwAdditionalFlags
    );
#line 348 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeW(
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
         HANDLE hChangeHandle
    );
#line 376 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
         HANDLE hFindFile,
          LPWIN32_FIND_DATAW lpFindFileData
    );
#line 405 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
            HANDLE hFindVolume,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
         HANDLE hFindVolume
    );
#line 434 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
         HANDLE hFile
    );
#line 449 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
             LPCSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
             LPCWSTR lpRootPathName,
              LPDWORD lpSectorsPerCluster,
              LPDWORD lpBytesPerSector,
              LPDWORD lpNumberOfFreeClusters,
              LPDWORD lpTotalNumberOfClusters
    );
#line 484 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
             LPCSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
             LPCWSTR lpDirectoryName,
              PULARGE_INTEGER lpFreeBytesAvailableToCaller,
              PULARGE_INTEGER lpTotalNumberOfBytes,
              PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
#line 517 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
             LPCSTR lpRootPathName
    );

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
             LPCWSTR lpRootPathName
    );







__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
         LPCSTR lpFileName
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
         LPCWSTR lpFileName
    );
#line 564 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;
#line 580 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
         LPCSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
         LPCWSTR lpFileName,
         GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation
    );
#line 611 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
         HANDLE hFile,
          LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
         HANDLE hFile,
              LPDWORD lpFileSizeHigh
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
         HANDLE hFile,
          PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
         HANDLE hFile,
              LPFILETIME lpCreationTime,
              LPFILETIME lpLastAccessTime,
              LPFILETIME lpLastWriteTime
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileType(
         HANDLE hFile
    );





__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA(
         HANDLE hFile,
                              LPSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW(
         HANDLE hFile,
                              LPWSTR lpszFilePath,
         DWORD cchFilePath,
         DWORD dwFlags
    );
#line 701 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameA(
         LPCSTR lpFileName,
         DWORD nBufferLength,
                                                   LPSTR lpBuffer,
                 LPSTR * lpFilePart
    );

__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameW(
         LPCWSTR lpFileName,
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
                 LPWSTR * lpFilePart
    );







__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );






__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameA(
         LPCSTR lpszShortPath,
                                               LPSTR lpszLongPath,
         DWORD cchBuffer
    );

__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameW(
         LPCWSTR lpszShortPath,
                                               LPWSTR lpszLongPath,
         DWORD cchBuffer
    );







__declspec(dllimport)

DWORD
__stdcall
GetShortPathNameW(
         LPCWSTR lpszLongPath,
                                               LPWSTR lpszShortPath,
         DWORD cchBuffer
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
         LPCWSTR lpPathName,
         LPCWSTR lpPrefixString,
         UINT uUnique,
                           LPWSTR lpTempFileName
    );
#line 809 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
         HANDLE hFile,
                                      LPWSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
             LPCWSTR lpRootPathName,
                                      LPWSTR lpVolumeNameBuffer,
         DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPWSTR lpFileSystemNameBuffer,
         DWORD nFileSystemNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
         LPCWSTR lpszFileName,
                                  LPWSTR lpszVolumePathName,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
         const FILETIME * lpLocalFileTime,
          LPFILETIME lpFileTime
    );


__declspec(dllimport)
BOOL
__stdcall
LockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh
    );
#line 887 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
         HANDLE hFile,
         DWORD dwFlags,
               DWORD dwReserved,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh,
            LPOVERLAPPED lpOverlapped
    );
#line 907 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
             LPCWSTR lpDeviceName,
                                         LPWSTR lpTargetPath,
         DWORD ucchMax
    );
#line 928 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)

BOOL
__stdcall
ReadFile(
         HANDLE hFile,
                                                                                                  LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
              LPDWORD lpNumberOfBytesRead,
                LPOVERLAPPED lpOverlapped
    );
#line 948 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)

BOOL
__stdcall
ReadFileEx(
         HANDLE hFile,
                                                                         LPVOID lpBuffer,
         DWORD nNumberOfBytesToRead,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)

BOOL
__stdcall
ReadFileScatter(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToRead,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );
#line 981 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
         LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
         LPCWSTR lpPathName
    );







__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
         HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
         LPCSTR lpFileName,
         DWORD dwFileAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
         LPCWSTR lpFileName,
         DWORD dwFileAttributes
    );
#line 1034 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
         HANDLE hFile,
         FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                                   LPVOID lpFileInformation,
         DWORD dwBufferSize
    );
#line 1054 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
         HANDLE hFile,
         LONG lDistanceToMove,
                PLONG lpDistanceToMoveHigh,
         DWORD dwMoveMethod
    );
#line 1072 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
         HANDLE hFile,
         LARGE_INTEGER liDistanceToMove,
              PLARGE_INTEGER lpNewFilePointer,
         DWORD dwMoveMethod
    );
#line 1090 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
         HANDLE hFile,
             const FILETIME * lpCreationTime,
             const FILETIME * lpLastAccessTime,
             const FILETIME * lpLastWriteTime
    );





__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
         HANDLE hFile,
         LONGLONG ValidDataLength
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh
    );
#line 1134 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
         HANDLE hFile,
               DWORD dwReserved,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh,
            LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFile(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
              LPDWORD lpNumberOfBytesWritten,
                LPOVERLAPPED lpOverlapped
    );
#line 1165 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
         HANDLE hFile,
                                                LPCVOID lpBuffer,
         DWORD nNumberOfBytesToWrite,
            LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
         HANDLE hFile,
         FILE_SEGMENT_ELEMENT aSegmentArray[],
         DWORD nNumberOfBytesToWrite,
               LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );
#line 1203 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
                                  LPWSTR lpszVolumeName,
         DWORD cchBufferLength
    );
#line 1233 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
         LPCWSTR lpszVolumeName,
                                                                                          LPWCH lpszVolumePathNames,
         DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
#line 1260 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;
    DWORD dwFileAttributes;
    DWORD dwFileFlags;
    DWORD dwSecurityQosFlags;
    LPSECURITY_ATTRIBUTES lpSecurityAttributes;
    HANDLE hTemplateFile;
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HANDLE
__stdcall
CreateFile2(
         LPCWSTR lpFileName,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
         DWORD dwCreationDisposition,
             LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
    );
#line 1301 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
         HANDLE FileHandle,
         PUCHAR OverlappedRangeStart,
         ULONG Length
    );
#line 1323 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
         LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
         LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh
    );
#line 1358 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fileapi.h"
}
#line 38 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\debugapi.h"
#line 37 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\debugapi.h"
extern "C" {
#line 51 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\debugapi.h"
__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );
#line 67 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\debugapi.h"
__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );
#line 82 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\debugapi.h"
__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
             LPCSTR lpOutputString
    );

__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
             LPCWSTR lpOutputString
    );
#line 114 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\debugapi.h"
__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
         DWORD dwProcessId,
         DWORD dwThreadId,
         DWORD dwContinueStatus
    );


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
          LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
         DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
         DWORD dwProcessId
    );





__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
         HANDLE hProcess,
          PBOOL pbDebuggerPresent
    );
#line 173 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\debugapi.h"
}
#line 39 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\utilapiset.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\utilapiset.h"
extern "C" {






__declspec(dllimport)

PVOID
__stdcall
EncodePointer(
             PVOID Ptr
    );


__declspec(dllimport)

PVOID
__stdcall
DecodePointer(
             PVOID Ptr
    );
#line 64 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\utilapiset.h"
__declspec(dllimport)

PVOID
__stdcall
EncodeSystemPointer(
             PVOID Ptr
    );


__declspec(dllimport)

PVOID
__stdcall
DecodeSystemPointer(
             PVOID Ptr
    );


__declspec(dllimport)
BOOL
__stdcall
Beep(
         DWORD dwFreq,
         DWORD dwDuration
    );






}
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\handleapi.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\handleapi.h"
extern "C" {
#line 47 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\handleapi.h"
__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
         HANDLE hObject
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
         HANDLE hSourceProcessHandle,
         HANDLE hSourceHandle,
         HANDLE hTargetProcessHandle,
             LPHANDLE lpTargetHandle,
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwOptions
    );
#line 76 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\handleapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
         HANDLE hObject,
          LPDWORD lpdwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
         HANDLE hObject,
         DWORD dwMask,
         DWORD dwFlags
    );






}
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
extern "C" {
#line 52 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
#line 69 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
__declspec(dllimport)

void
__stdcall
RaiseException(
         DWORD dwExceptionCode,
         DWORD dwExceptionFlags,
         DWORD nNumberOfArguments,
                                       const ULONG_PTR * lpArguments
    );
#line 89 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
         struct _EXCEPTION_POINTERS * ExceptionInfo
    );


__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
             LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );
#line 114 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
__declspec(dllimport)

DWORD
__stdcall
GetLastError(
    void
    );




__declspec(dllimport)
void
__stdcall
SetLastError(
         DWORD dwErrCode
    );
#line 143 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );




__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
         UINT uMode
    );
#line 175 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
__declspec(dllimport)

PVOID
__stdcall
AddVectoredExceptionHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler(
         PVOID Handle
    );


__declspec(dllimport)

PVOID
__stdcall
AddVectoredContinueHandler(
         ULONG First,
         PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler(
         PVOID Handle
    );
#line 249 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\errhandlingapi.h"
}
#line 42 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fibersapi.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fibersapi.h"
extern "C" {
#line 55 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fibersapi.h"
__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
             PFLS_CALLBACK_FUNCTION lpCallback
    );


__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
         DWORD dwFlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
         DWORD dwFlsIndex,
             PVOID lpFlsData
    );


__declspec(dllimport)
BOOL
__stdcall
FlsFree(
         DWORD dwFlsIndex
    );
#line 104 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fibersapi.h"
__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );
#line 123 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\fibersapi.h"
}
#line 43 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namedpipeapi.h"
#line 37 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namedpipeapi.h"
extern "C" {
#line 47 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namedpipeapi.h"
__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
          PHANDLE hReadPipe,
          PHANDLE hWritePipe,
             LPSECURITY_ATTRIBUTES lpPipeAttributes,
         DWORD nSize
    );


__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
         HANDLE hNamedPipe,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
         HANDLE hNamedPipe
    );


__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
         HANDLE hNamedPipe,
             LPDWORD lpMode,
             LPDWORD lpMaxCollectionCount,
             LPDWORD lpCollectDataTimeout
    );


__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
         HANDLE hNamedPipe,
                                                         LPVOID lpBuffer,
         DWORD nBufferSize,
              LPDWORD lpBytesRead,
              LPDWORD lpTotalBytesAvail,
              LPDWORD lpBytesLeftThisMessage
    );


__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
         HANDLE hNamedPipe,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
         LPCWSTR lpName,
         DWORD dwOpenMode,
         DWORD dwPipeMode,
         DWORD nMaxInstances,
         DWORD nOutBufferSize,
         DWORD nInBufferSize,
         DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
         LPCWSTR lpNamedPipeName,
         DWORD nTimeOut
    );
#line 148 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namedpipeapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
         HANDLE Pipe,
                                                 LPWSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );
#line 171 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namedpipeapi.h"
__declspec(dllimport)

BOOL
__stdcall
ImpersonateNamedPipeClient(
         HANDLE hNamedPipe
    );






}
#line 44 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\profileapi.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\profileapi.h"
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
          LARGE_INTEGER * lpPerformanceCount
    );


__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
          LARGE_INTEGER * lpFrequency
    );



}
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
#line 35 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
extern "C" {
#line 46 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;
#line 66 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
__declspec(dllimport)

HANDLE
__stdcall
HeapCreate(
         DWORD flOptions,
         SIZE_T dwInitialSize,
         SIZE_T dwMaximumSize
    );


__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
         HANDLE hHeap
    );
#line 92 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
__declspec(dllimport)


LPVOID
__stdcall
HeapAlloc(
         HANDLE hHeap,
         DWORD dwFlags,
         SIZE_T dwBytes
    );


__declspec(dllimport)



LPVOID
__stdcall
HeapReAlloc(
            HANDLE hHeap,
         DWORD dwFlags,
                    LPVOID lpMem,
         SIZE_T dwBytes
    );


__declspec(dllimport)

BOOL
__stdcall
HeapFree(
            HANDLE hHeap,
         DWORD dwFlags,
                                        LPVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
         HANDLE hHeap,
         DWORD dwFlags,
         LPCVOID lpMem
    );
#line 146 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
         HANDLE hHeap,
         DWORD dwFlags,
             LPCVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
         HANDLE hHeap,
         DWORD dwFlags
    );





BOOL
__stdcall
HeapSummary(
         HANDLE hHeap,
         DWORD dwFlags,
          LPHEAP_SUMMARY lpSummary
    );
#line 186 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap(
    void
    );
#line 201 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
         DWORD NumberOfHeaps,
                                           PHANDLE ProcessHeaps
    );


__declspec(dllimport)
BOOL
__stdcall
HeapLock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
         HANDLE hHeap,
            LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                PVOID HeapInformation,
         SIZE_T HeapInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation(
             HANDLE HeapHandle,
         HEAP_INFORMATION_CLASS HeapInformationClass,
                                                                    PVOID HeapInformation,
         SIZE_T HeapInformationLength,
              PSIZE_T ReturnLength
    );
#line 266 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\heapapi.h"
}
#line 46 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ioapiset.h"
#line 37 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ioapiset.h"
extern "C" {
#line 49 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ioapiset.h"
__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         BOOL bWait
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateIoCompletionPort(
         HANDLE FileHandle,
             HANDLE ExistingCompletionPort,
         ULONG_PTR CompletionKey,
         DWORD NumberOfConcurrentThreads
    );


__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
         HANDLE CompletionPort,
          LPDWORD lpNumberOfBytesTransferred,
          PULONG_PTR lpCompletionKey,
          LPOVERLAPPED * lpOverlapped,
         DWORD dwMilliseconds
    );





__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
         HANDLE CompletionPort,
                                                   LPOVERLAPPED_ENTRY lpCompletionPortEntries,
         ULONG ulCount,
          PULONG ulNumEntriesRemoved,
         DWORD dwMilliseconds,
         BOOL fAlertable
    );




__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
         HANDLE CompletionPort,
         DWORD dwNumberOfBytesTransferred,
         ULONG_PTR dwCompletionKey,
             LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
         HANDLE hDevice,
         DWORD dwIoControlCode,
                                        LPVOID lpInBuffer,
         DWORD nInBufferSize,
                                                                LPVOID lpOutBuffer,
         DWORD nOutBufferSize,
              LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped
    );





__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
         HANDLE hFile,
             LPOVERLAPPED lpOverlapped
    );
#line 156 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ioapiset.h"
__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResultEx(
         HANDLE hFile,
         LPOVERLAPPED lpOverlapped,
          LPDWORD lpNumberOfBytesTransferred,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
#line 175 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ioapiset.h"
__declspec(dllimport)
BOOL
__stdcall
CancelIo(
         HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
         HANDLE hThread
    );
#line 207 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ioapiset.h"
}
#line 47 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
#line 38 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
extern "C" {
#line 57 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;
#line 74 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
InitializeSRWLock(
          PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockShared(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockShared(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
            PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
            PSRWLOCK SRWLock
    );
#line 159 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
          LPCRITICAL_SECTION lpCriticalSection
    );
#line 176 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );
#line 199 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
          LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );
#line 219 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
          LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount,
         DWORD Flags
    );
#line 238 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
            LPCRITICAL_SECTION lpCriticalSection,
         DWORD dwSpinCount
    );
#line 257 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );




__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
            LPCRITICAL_SECTION lpCriticalSection
    );
#line 283 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
#line 304 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
            PINIT_ONCE InitOnce,
                PVOID Parameter,
                                  PVOID *Context
    );




__declspec(dllimport)
void
__stdcall
InitOnceInitialize(
          PINIT_ONCE InitOnce
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce(
            PINIT_ONCE InitOnce,
                    PINIT_ONCE_FN InitFn,
                PVOID Parameter,
                                  LPVOID * Context
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize(
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
          PBOOL fPending,
                                  LPVOID * lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete(
            LPINIT_ONCE lpInitOnce,
         DWORD dwFlags,
             LPVOID lpContext
    );
#line 361 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
#line 378 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
void
__stdcall
InitializeConditionVariable(
          PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeConditionVariable(
            PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable(
            PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS(
            PCONDITION_VARIABLE ConditionVariable,
            PCRITICAL_SECTION CriticalSection,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW(
            PCONDITION_VARIABLE ConditionVariable,
            PSRWLOCK SRWLock,
         DWORD dwMilliseconds,
         ULONG Flags
    );
#line 429 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetEvent(
         HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
         HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
         HANDLE hSemaphore,
         LONG lReleaseCount,
              LPLONG lpPreviousCount
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
         HANDLE hMutex
    );
#line 470 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
         HANDLE hHandle,
         DWORD dwMilliseconds
    );


__declspec(dllimport)
DWORD
__stdcall
SleepEx(
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
#line 495 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
         HANDLE hHandle,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
         DWORD nCount,
                       const HANDLE * lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
#line 531 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateMutexA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateMutexW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
         BOOL bInitialOwner,
             LPCWSTR lpName
    );
#line 564 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenMutexW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );
#line 586 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateEventA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateEventW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
         BOOL bManualReset,
         BOOL bInitialState,
             LPCWSTR lpName
    );
#line 621 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenEventA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenEventW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );
#line 672 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
typedef
void
(__stdcall *PTIMERAPCROUTINE)(
             LPVOID lpArgToCompletionRoutine,
             DWORD dwTimerLowValue,
             DWORD dwTimerHighValue
    );

__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpTimerName
    );
#line 698 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
BOOL
__stdcall
SetWaitableTimerEx(
         HANDLE hTimer,
         const LARGE_INTEGER * lpDueTime,
         LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
             PREASON_CONTEXT WakeContext,
         ULONG TolerableDelay
    );




__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
         HANDLE hTimer,
         const LARGE_INTEGER * lpDueTime,
         LONG lPeriod,
             PTIMERAPCROUTINE pfnCompletionRoutine,
             LPVOID lpArgToCompletionRoutine,
         BOOL fResume
    );


__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
         HANDLE hTimer
    );
#line 746 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExA(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateMutexExW(
             LPSECURITY_ATTRIBUTES lpMutexAttributes,
             LPCWSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );
#line 777 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateEventExA(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateEventExW(
             LPSECURITY_ATTRIBUTES lpEventAttributes,
             LPCWSTR lpName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
         LONG lInitialCount,
         LONG lMaximumCount,
             LPCWSTR lpName,
               DWORD dwFlags,
         DWORD dwDesiredAccess
    );
#line 832 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCWSTR lpTimerName,
         DWORD dwFlags,
         DWORD dwDesiredAccess
    );
#line 866 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier,
         DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
          LPSYNCHRONIZATION_BARRIER lpBarrier,
         LONG lTotalThreads,
         LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
            LPSYNCHRONIZATION_BARRIER lpBarrier
    );


__declspec(dllimport)
void
__stdcall
Sleep(
         DWORD dwMilliseconds
    );
#line 913 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
BOOL
__stdcall
WaitOnAddress(
                                  volatile void * Address,
                                  PVOID CompareAddress,
         SIZE_T AddressSize,
             DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
         PVOID Address
    );


void
__stdcall
WakeByAddressAll(
         PVOID Address
    );
#line 946 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );
#line 969 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\synchapi.h"
}
#line 48 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\interlockedapi.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\interlockedapi.h"
extern "C" {
#line 47 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\interlockedapi.h"
__declspec(dllimport)
void
__stdcall
InitializeSListHead(
          PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
            PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
            PSLIST_HEADER ListHead,
            PSLIST_ENTRY ListEntry
    );







__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
            PSLIST_HEADER ListHead,
            PSLIST_ENTRY List,
            PSLIST_ENTRY ListEnd,
         ULONG Count
    );




__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
            PSLIST_HEADER ListHead
    );


__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList(
         PSLIST_HEADER ListHead
    );
#line 116 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\interlockedapi.h"
}
#line 49 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
extern "C" {
#line 53 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;

typedef STARTUPINFOW STARTUPINFO;
typedef LPSTARTUPINFOW LPSTARTUPINFO;
#line 111 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
         PAPCFUNC pfnAPC,
         HANDLE hThread,
         ULONG_PTR dwData
    );




__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
         HANDLE hProcess,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );
#line 142 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );
#line 165 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
         UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
         HANDLE hProcess,
         UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
         HANDLE hProcess,
          LPDWORD lpExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateThread(
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
                              LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThread(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
              LPDWORD lpThreadId
    );
#line 236 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );
#line 259 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenThread(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwThreadId
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
         HANDLE hThread,
         int nPriority
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
         HANDLE hThread,
         BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
         HANDLE hThread,
          PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
int
__stdcall
GetThreadPriority(
         HANDLE hThread
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
         DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
         HANDLE hThread,
         DWORD dwExitCode
    );


__declspec(dllimport)

BOOL
__stdcall
GetExitCodeThread(
         HANDLE hThread,
          LPDWORD lpExitCode
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
         HANDLE hThread
    );


__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
         HANDLE hThread
    );
#line 356 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );


__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
         DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
         DWORD dwTlsIndex,
             LPVOID lpTlsValue
    );


__declspec(dllimport)
BOOL
__stdcall
TlsFree(
         DWORD dwTlsIndex
    );




__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
             LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCSTR lpCurrentDirectory,
         LPSTARTUPINFOA lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
#line 431 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
         DWORD dwLevel,
         DWORD dwFlags
    );


__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
         DWORD ProcessId
    );


__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
          LPSTARTUPINFOW lpStartupInfo
    );
#line 470 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW(
             HANDLE hToken,
             LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
             LPSECURITY_ATTRIBUTES lpProcessAttributes,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         BOOL bInheritHandles,
         DWORD dwCreationFlags,
             LPVOID lpEnvironment,
             LPCWSTR lpCurrentDirectory,
         LPSTARTUPINFOW lpStartupInfo,
          LPPROCESS_INFORMATION lpProcessInformation
    );
#line 501 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)

BOOL
__stdcall
SetThreadToken(
             PHANDLE Thread,
             HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken(
         HANDLE ProcessHandle,
         DWORD DesiredAccess,
             PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken(
         HANDLE ThreadHandle,
         DWORD DesiredAccess,
         BOOL OpenAsSelf,
             PHANDLE TokenHandle
    );
#line 541 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
         HANDLE hProcess,
         DWORD dwPriorityClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee(
            PULONG StackSizeInBytes
    );


__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
         HANDLE hProcess
    );


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
         DWORD dwProcessId,
          DWORD * pSessionId
    );






__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
         HANDLE Process
    );







__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
         HANDLE Thread
    );





typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;
#line 615 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );
#line 630 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
         HANDLE Thread
    );


__declspec(dllimport)

BOOL
__stdcall
InitializeProcThreadAttributeList(
                                                LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwAttributeCount,
               DWORD dwFlags,
                                                                                          PSIZE_T lpSize
    );


__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
         HANDLE hProcess,
         DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
         HANDLE hProcess,
              LPDWORD lpdwFlags
    );




__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
            LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
         DWORD dwFlags,
         DWORD_PTR Attribute,
                                 PVOID lpValue,
         SIZE_T cbSize,
                                   PVOID lpPreviousValue,
             PSIZE_T lpReturnSize
    );
#line 703 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateRemoteThreadEx(
         HANDLE hProcess,
             LPSECURITY_ATTRIBUTES lpThreadAttributes,
         SIZE_T dwStackSize,
         LPTHREAD_START_ROUTINE lpStartAddress,
             LPVOID lpParameter,
         DWORD dwCreationFlags,
             LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
              LPDWORD lpThreadId
    );
#line 737 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
void
__stdcall
GetCurrentThreadStackLimits(
          PULONG_PTR LowLimit,
          PULONG_PTR HighLimit
    );




__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
         HANDLE hThread,
            LPCONTEXT lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
         HANDLE hThread,
         const CONTEXT * lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
SetProcessMitigationPolicy(
         PROCESS_MITIGATION_POLICY MitigationPolicy,
                               PVOID lpBuffer,
         SIZE_T dwLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessMitigationPolicy(
         HANDLE hProcess,
         PROCESS_MITIGATION_POLICY MitigationPolicy,
                                 PVOID lpBuffer,
         SIZE_T dwLength
    );
#line 805 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
         HANDLE hProcess,
                                 LPCVOID lpBaseAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
         HANDLE hThread,
          LPFILETIME lpCreationTime,
          LPFILETIME lpExitTime,
          LPFILETIME lpKernelTime,
          LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwProcessId
    );
#line 844 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
BOOL
__stdcall
IsProcessorFeaturePresent(
         DWORD ProcessorFeature
    );
#line 863 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
         HANDLE hProcess,
          PDWORD pdwHandleCount
    );
#line 884 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );
#line 904 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx(
         HANDLE hThread,
         PPROCESSOR_NUMBER lpIdealProcessor,
              PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx(
         HANDLE hThread,
          PPROCESSOR_NUMBER lpIdealProcessor
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
          PPROCESSOR_NUMBER ProcNumber
    );
#line 949 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
         HANDLE hProcess,
          PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
         HANDLE hProcess,
         BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
         HANDLE hThread,
          PBOOL lpIOIsPending
    );


__declspec(dllimport)
BOOL
__stdcall
GetSystemTimes(
              PFILETIME lpIdleTime,
              PFILETIME lpKernelTime,
              PFILETIME lpUserTime
    );
#line 992 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;




__declspec(dllimport)
BOOL
__stdcall
GetThreadInformation(
         HANDLE hThread,
         THREAD_INFORMATION_CLASS ThreadInformationClass,
                                              LPVOID ThreadInformation,
         DWORD ThreadInformationSize
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadInformation(
         HANDLE hThread,
         THREAD_INFORMATION_CLASS ThreadInformationClass,
                                            LPVOID ThreadInformation,
         DWORD ThreadInformationSize
    );
#line 1034 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;






__declspec(dllimport)
BOOL
__stdcall
IsProcessCritical(
         HANDLE hProcess,
          PBOOL Critical
    );
#line 1065 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processthreadsapi.h"
}
#line 50 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
#line 28 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
#pragma warning(disable: 4514)

#pragma warning(disable: 4103)



#pragma warning(push)

#pragma warning(disable: 4001)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)
#line 62 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
extern "C" {
#line 75 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
#line 105 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(deprecated)
__declspec(dllimport)

DWORD
__stdcall
GetVersion(
    void
    );


typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
          LPMEMORYSTATUSEX lpBuffer
    );
#line 142 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)
void
__stdcall
GetSystemTime(
          LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
void
__stdcall
GetLocalTime(
          LPSYSTEMTIME lpSystemTime
    );
#line 173 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
         const SYSTEMTIME * lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );
#line 200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );
#line 218 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );
#line 235 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetSystemTimeAdjustment(
          PDWORD lpTimeAdjustment,
          PDWORD lpTimeIncrement,
          PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)

UINT
__stdcall
GetSystemDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)

UINT
__stdcall
GetSystemDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );







__declspec(dllimport)


UINT
__stdcall
GetWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)


UINT
__stdcall
GetWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );







__declspec(dllimport)

UINT
__stdcall
GetSystemWindowsDirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );

__declspec(dllimport)

UINT
__stdcall
GetSystemWindowsDirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );
#line 332 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;
#line 356 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExA(
         COMPUTER_NAME_FORMAT NameType,
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );

__declspec(dllimport)

BOOL
__stdcall
GetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );
#line 395 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW(
         COMPUTER_NAME_FORMAT NameType,
         LPCWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
         const SYSTEMTIME * lpSystemTime
    );
#line 428 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(deprecated)
__declspec(dllimport)

BOOL
__stdcall
GetVersionExA(
            LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(deprecated)
__declspec(dllimport)

BOOL
__stdcall
GetVersionExW(
            LPOSVERSIONINFOW lpVersionInformation
    );







__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
                                                                PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
            PDWORD ReturnedLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
         LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
                                                                PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
            PDWORD ReturnedLength
    );
#line 492 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
          LPSYSTEM_INFO lpSystemInfo
    );
#line 512 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
         DWORD dwOSMajorVersion,
         DWORD dwOSMinorVersion,
         DWORD dwSpMajorVersion,
         DWORD dwSpMinorVersion,
          PDWORD pdwReturnedProductType
    );







__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
         ULONGLONG ConditionMask,
         ULONG TypeMask,
         UCHAR Condition
    );







__declspec(dllimport)
BOOL
__stdcall
GetOsSafeBootMode(
          PDWORD Flags
    );




__declspec(dllimport)
void
__stdcall
GetSystemTimePreciseAsFileTime(
          LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
         DWORD FirmwareTableProviderSignature,
                                                  PVOID pFirmwareTableEnumBuffer,
         DWORD BufferSize
    );


__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
         DWORD FirmwareTableProviderSignature,
         DWORD FirmwareTableID,
                                                  PVOID pFirmwareTableBuffer,
         DWORD BufferSize
    );
#line 598 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameExW(
         LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );


__declspec(dllimport)

BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
          PULONGLONG TotalMemoryInKilobytes
    );




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameEx2W(
         COMPUTER_NAME_FORMAT NameType,
         DWORD Flags,
         LPCWSTR lpBuffer
    );






__declspec(dllimport)

BOOL
__stdcall
SetSystemTimeAdjustment(
         DWORD dwTimeAdjustment,
         BOOL bTimeAdjustmentDisabled
    );


__declspec(dllimport)
BOOL
__stdcall
InstallELAMCertificateInfo(
         HANDLE ELAMFile
    );
#line 663 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\sysinfoapi.h"
}






#pragma warning(pop)
#line 51 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
extern "C" {
#line 86 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)

LPVOID
__stdcall
VirtualAlloc(
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );
#line 107 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );


__declspec(dllimport)

BOOL
__stdcall
VirtualProtect(
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );
#line 136 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );
#line 153 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocEx(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect
    );
#line 178 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
         HANDLE hProcess,
                                                                                                                           LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );


__declspec(dllimport)

BOOL
__stdcall
VirtualProtectEx(
         HANDLE hProcess,
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flNewProtect,
          PDWORD lpflOldProtect
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
         HANDLE hProcess,
             LPCVOID lpAddress,
                                            PMEMORY_BASIC_INFORMATION lpBuffer,
         SIZE_T dwLength
    );


__declspec(dllimport)

BOOL
__stdcall
ReadProcessMemory(
         HANDLE hProcess,
         LPCVOID lpBaseAddress,
                                                       LPVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesRead
    );


__declspec(dllimport)

BOOL
__stdcall
WriteProcessMemory(
         HANDLE hProcess,
         LPVOID lpBaseAddress,
                            LPCVOID lpBuffer,
         SIZE_T nSize,
              SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingW(
         HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
         DWORD flProtect,
         DWORD dwMaximumSizeHigh,
         DWORD dwMaximumSizeLow,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenFileMappingW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFile(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap
    );


__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileEx(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress
    );
#line 306 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
         LPCVOID lpBaseAddress,
         SIZE_T dwNumberOfBytesToFlush
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
         LPCVOID lpBaseAddress
    );
#line 336 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );


__declspec(dllimport)

BOOL
__stdcall
GetProcessWorkingSetSizeEx(
         HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize,
          PDWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize,
         DWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );


__declspec(dllimport)

UINT
__stdcall
GetWriteWatch(
         DWORD dwFlags,
         PVOID lpBaseAddress,
         SIZE_T dwRegionSize,
                                                PVOID * lpAddresses,
                ULONG_PTR * lpdwCount,
              LPDWORD lpdwGranularity
    );


__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
         LPVOID lpBaseAddress,
         SIZE_T dwRegionSize
    );





typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)

HANDLE
__stdcall
CreateMemoryResourceNotification(
         MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );


__declspec(dllimport)

BOOL
__stdcall
QueryMemoryResourceNotification(
         HANDLE ResourceNotificationHandle,
          PBOOL ResourceState
    );
#line 446 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetSystemFileCacheSize(
          PSIZE_T lpMinimumFileCacheSize,
          PSIZE_T lpMaximumFileCacheSize,
          PDWORD lpFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize(
         SIZE_T MinimumFileCacheSize,
         SIZE_T MaximumFileCacheSize,
         DWORD Flags
    );







__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaW(
         HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
         DWORD flProtect,
         DWORD dwMaximumSizeHigh,
         DWORD dwMaximumSizeLow,
             LPCWSTR lpName,
         DWORD nndPreferred
    );
#line 496 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

__declspec(dllimport)
BOOL
__stdcall
PrefetchVirtualMemory(
         HANDLE hProcess,
         ULONG_PTR NumberOfEntries,
                                PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
         ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileEx(
         PVOID BaseAddress,
         ULONG UnmapFlags
    );
#line 533 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingFromApp(
         HANDLE hFile,
             PSECURITY_ATTRIBUTES SecurityAttributes,
         ULONG PageProtection,
         ULONG64 MaximumSize,
             PCWSTR Name
    );


__declspec(dllimport)

PVOID
__stdcall
MapViewOfFileFromApp(
         HANDLE hFileMappingObject,
         ULONG DesiredAccess,
         ULONG64 FileOffset,
         SIZE_T NumberOfBytesToMap
    );
#line 578 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)

BOOL
__stdcall
AllocateUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                    PULONG_PTR PageArray
    );


__declspec(dllimport)

BOOL
__stdcall
FreeUserPhysicalPages(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                               PULONG_PTR PageArray
    );


__declspec(dllimport)

BOOL
__stdcall
MapUserPhysicalPages(
         PVOID VirtualAddress,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );







__declspec(dllimport)

BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
         HANDLE hProcess,
            PULONG_PTR NumberOfPages,
                                                    PULONG_PTR PageArray,
         DWORD nndPreferred
    );


__declspec(dllimport)

LPVOID
__stdcall
VirtualAllocExNuma(
         HANDLE hProcess,
             LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD flAllocationType,
         DWORD flProtect,
         DWORD nndPreferred
    );
#line 649 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
__declspec(dllimport)

BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
          PULONG Capabilities
    );



typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
    void
    );

typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

__declspec(dllimport)

PVOID
__stdcall
RegisterBadMemoryNotification(
         PBAD_MEMORY_CALLBACK_ROUTINE Callback
    );


__declspec(dllimport)

BOOL
__stdcall
UnregisterBadMemoryNotification(
         PVOID RegistrationHandle
    );
#line 699 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\memoryapi.h"
}
#line 52 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\threadpoollegacyapiset.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\threadpoollegacyapiset.h"
extern "C" {
#line 44 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\threadpoollegacyapiset.h"
__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
         LPTHREAD_START_ROUTINE Function,
             PVOID Context,
         ULONG Flags
    );


__declspec(dllimport)

BOOL
__stdcall
UnregisterWaitEx(
         HANDLE WaitHandle,
             HANDLE CompletionEvent
    );


__declspec(dllimport)

HANDLE
__stdcall
CreateTimerQueue(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
             PHANDLE phNewTimer,
             HANDLE TimerQueue,
         WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
         DWORD DueTime,
         DWORD Period,
         ULONG Flags
    );


__declspec(dllimport)

BOOL
__stdcall
ChangeTimerQueueTimer(
             HANDLE TimerQueue,
            HANDLE Timer,
         ULONG DueTime,
         ULONG Period
    );


__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueTimer(
             HANDLE TimerQueue,
         HANDLE Timer,
             HANDLE CompletionEvent
    );


__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueueEx(
         HANDLE TimerQueue,
             HANDLE CompletionEvent
    );






}
#line 53 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\threadpoolapiset.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\threadpoolapiset.h"
extern "C" {
#line 47 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\threadpoolapiset.h"
typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
                PTP_CALLBACK_INSTANCE Instance,
                PVOID Context,
                PVOID Overlapped,
                ULONG IoResult,
                ULONG_PTR NumberOfBytesTransferred,
                PTP_IO Io
    );




__declspec(dllimport)

PTP_POOL
__stdcall
CreateThreadpool(
               PVOID reserved
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
            PTP_POOL ptpp,
         DWORD cthrdMost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
            PTP_POOL ptpp,
         DWORD cthrdMic
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
            PTP_POOL ptpp,
         PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
         PTP_POOL ptpp,
          PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpool(
            PTP_POOL ptpp
    );


__declspec(dllimport)

PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
            PTP_CLEANUP_GROUP ptpcg,
         BOOL fCancelPendingCallbacks,
                PVOID pvCleanupContext
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
            PTP_CLEANUP_GROUP ptpcg
    );


__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE evt
    );


__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE sem,
         DWORD crel
    );


__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HANDLE mut
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
            PCRITICAL_SECTION pcs
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
            PTP_CALLBACK_INSTANCE pci,
         HMODULE mod
    );


__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
            PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
            PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)

BOOL
__stdcall
TrySubmitThreadpoolCallback(
         PTP_SIMPLE_CALLBACK pfns,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)

PTP_WORK
__stdcall
CreateThreadpoolWork(
         PTP_WORK_CALLBACK pfnwk,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
            PTP_WORK pwk
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
            PTP_WORK pwk,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
            PTP_WORK pwk
    );


__declspec(dllimport)

PTP_TIMER
__stdcall
CreateThreadpoolTimer(
         PTP_TIMER_CALLBACK pfnti,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
            PTP_TIMER pti,
             PFILETIME pftDueTime,
         DWORD msPeriod,
             DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
            PTP_TIMER pti
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
            PTP_TIMER pti,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
            PTP_TIMER pti
    );


__declspec(dllimport)

PTP_WAIT
__stdcall
CreateThreadpoolWait(
         PTP_WAIT_CALLBACK pfnwa,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
            PTP_WAIT pwa,
             HANDLE h,
             PFILETIME pftTimeout
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
            PTP_WAIT pwa,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
            PTP_WAIT pwa
    );


__declspec(dllimport)

PTP_IO
__stdcall
CreateThreadpoolIo(
         HANDLE fl,
         PTP_WIN32_IO_CALLBACK pfnio,
                PVOID pv,
             PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
            PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
            PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
            PTP_IO pio,
         BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
            PTP_IO pio
    );





__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolTimerEx(
            PTP_TIMER pti,
             PFILETIME pftDueTime,
         DWORD msPeriod,
             DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolWaitEx(
            PTP_WAIT pwa,
             HANDLE h,
             PFILETIME pftTimeout,
               PVOID Reserved
    );
#line 414 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\threadpoolapiset.h"
}
#line 54 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\bemapiset.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\bemapiset.h"
extern "C" {
#line 43 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\bemapiset.h"
typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;

typedef struct _BEM_REFERENCE BEM_REFERENCE;

typedef void (__stdcall* BEM_FREE_INTERFACE_CALLBACK)( void* interfaceInstance);

HRESULT
__stdcall
BemCreateReference(
         const GUID & iid,
         void * interfaceInstance,
         BEM_FREE_INTERFACE_CALLBACK freeCallback,
             BEM_REFERENCE ** reference
    );


HRESULT
__stdcall
BemCreateContractFrom(
         LPCWSTR dllPath,
         const GUID & extensionId,
         const CONTRACT_DESCRIPTION * contractDescription,
         void * hostContract,
             void ** contract
    );


HRESULT
__stdcall
BemCopyReference(
         BEM_REFERENCE * reference,
             BEM_REFERENCE ** copiedReference
    );


void
__stdcall
BemFreeReference(
             BEM_REFERENCE * reference
    );


void
__stdcall
BemFreeContract(
             void * contract
    );
#line 98 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\bemapiset.h"
}
#line 55 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\jobapi.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\jobapi.h"
extern "C" {
#line 43 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\jobapi.h"
__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob(
         HANDLE ProcessHandle,
             HANDLE JobHandle,
          PBOOL Result
    );
#line 59 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\jobapi.h"
}
#line 56 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wow64apiset.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wow64apiset.h"
extern "C" {
#line 46 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wow64apiset.h"
__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
          PVOID * OldValue
    );


__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection(
         PVOID OlValue
    );
#line 69 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wow64apiset.h"
__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
         HANDLE hProcess,
          PBOOL Wow64Process
    );
#line 84 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wow64apiset.h"
}
#line 57 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
extern "C" {
#line 59 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
typedef struct tagENUMUILANG {
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID *pEnumUIBuffer;
} ENUMUILANG, *PENUMUILANG;



typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
             HMODULE hModule,
         LPCSTR lpType,
         LPSTR lpName,
         LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
             HMODULE hModule,
         LPCWSTR lpType,
         LPWSTR lpName,
         LONG_PTR lParam);






typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
             HMODULE hModule,
         LPSTR lpType,
         LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
             HMODULE hModule,
         LPWSTR lpType,
         LONG_PTR lParam
    );
#line 154 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
         HMODULE hLibModule
    );
#line 169 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)

HRSRC
__stdcall
FindResourceExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage
    );
#line 195 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
         DWORD dwFindStringOrdinalFlags,
                          LPCWSTR lpStringSource,
         int cchSource,
                         LPCWSTR lpStringValue,
         int cchValue,
         BOOL bIgnoreCase
    );




__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
         HMODULE hLibModule
    );
#line 225 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
         HMODULE hLibModule,
         DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
FreeResource(
         HGLOBAL hResData
    );


__declspec(dllimport)


DWORD
__stdcall
GetModuleFileNameA(
             HMODULE hModule,
                                                                      LPSTR lpFilename,
         DWORD nSize
    );

__declspec(dllimport)


DWORD
__stdcall
GetModuleFileNameW(
             HMODULE hModule,
                                                                      LPWSTR lpFilename,
         DWORD nSize
    );







__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleA(
             LPCSTR lpModuleName
    );

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleW(
             LPCWSTR lpModuleName
    );
#line 302 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
                DWORD dwFlags,
                LPCSTR lpModuleName,
             HMODULE* phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
                DWORD dwFlags,
                LPCWSTR lpModuleName,
             HMODULE* phModule
    );






__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
         DWORD dwFlags,
             LPCSTR lpModuleName,
          HMODULE * phModule
    );

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
         DWORD dwFlags,
             LPCWSTR lpModuleName,
          HMODULE * phModule
    );
#line 357 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
         HMODULE hModule,
         LPCSTR lpProcName
    );
#line 373 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExA(
         LPCSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryExW(
         LPCWSTR lpLibFileName,
               HANDLE hFile,
         DWORD dwFlags
    );
#line 413 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)

HGLOBAL
__stdcall
LoadResource(
             HMODULE hModule,
         HRSRC hResInfo
    );
#line 432 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)
int
__stdcall
LoadStringA(
             HINSTANCE hInstance,
         UINT uID,
                                              LPSTR lpBuffer,
         int cchBufferMax
    );

__declspec(dllimport)
int
__stdcall
LoadStringW(
             HINSTANCE hInstance,
         UINT uID,
                                              LPWSTR lpBuffer,
         int cchBufferMax
    );
#line 467 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)
LPVOID
__stdcall
LockResource(
         HGLOBAL hResData
    );


__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
             HMODULE hModule,
         HRSRC hResInfo
    );
#line 493 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

__declspec(dllimport)
DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
         PCWSTR NewDirectory
    );


__declspec(dllimport)
BOOL
__stdcall
RemoveDllDirectory(
         DLL_DIRECTORY_COOKIE Cookie
    );


__declspec(dllimport)
BOOL
__stdcall
SetDefaultDllDirectories(
         DWORD DirectoryFlags
    );
#line 534 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
             HMODULE hModule,
         LPCSTR lpType,
         LPCSTR lpName,
         ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         LPCWSTR lpName,
         ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
             HMODULE hModule,
         LPCSTR lpType,
         ENUMRESNAMEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
             HMODULE hModule,
         LPCWSTR lpType,
         ENUMRESNAMEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );







__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
             HMODULE hModule,
         ENUMRESTYPEPROCA lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
             HMODULE hModule,
         ENUMRESTYPEPROCW lpEnumFunc,
         LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );
#line 636 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\libloaderapi.h"
}
#line 58 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securitybaseapi.h"
#line 37 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securitybaseapi.h"
extern "C" {
#line 53 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securitybaseapi.h"
__declspec(dllimport)
BOOL
__stdcall
AccessCheck(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW(
         LPCWSTR SubsystemName,
             LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
         DWORD DesiredAccess,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID PrincipalSelfSid,
         HANDLE ClientToken,
         DWORD DesiredAccess,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
                                                                        PPRIVILEGE_SET PrivilegeSet,
            LPDWORD PrivilegeSetLength,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
          LPDWORD GrantedAccess,
          LPBOOL AccessStatus,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         LPCWSTR ObjectTypeName,
             LPCWSTR ObjectName,
         PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
         DWORD DesiredAccess,
         AUDIT_EVENT_TYPE AuditType,
         DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
         DWORD ObjectTypeListLength,
         PGENERIC_MAPPING GenericMapping,
         BOOL ObjectCreation,
                                       LPDWORD GrantedAccessList,
                                       LPDWORD AccessStatusList,
          LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwStartingAceIndex,
                                     LPVOID pAceList,
         DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD dwAccessMask,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
             GUID * ObjectTypeGuid,
             GUID * InheritedObjectTypeGuid,
         PSID pSid,
         BOOL bAuditSuccess,
         BOOL bAuditFailure
    );





__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD MandatoryPolicy,
         PSID pLabelSid
    );
#line 359 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securitybaseapi.h"
__declspec(dllimport)
BOOL
__stdcall
AddResourceAttributeAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid,
         PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
          PDWORD pReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddScopedPolicyIDAce(
            PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         DWORD AccessMask,
         PSID pSid
    );






__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups(
         HANDLE TokenHandle,
         BOOL ResetToDefault,
             PTOKEN_GROUPS NewState,
         DWORD BufferLength,
                                                           PTOKEN_GROUPS PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges(
         HANDLE TokenHandle,
         BOOL DisableAllPrivileges,
             PTOKEN_PRIVILEGES NewState,
         DWORD BufferLength,
                                                           PTOKEN_PRIVILEGES PreviousState,
              PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid(
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount,
         DWORD nSubAuthority0,
         DWORD nSubAuthority1,
         DWORD nSubAuthority2,
         DWORD nSubAuthority3,
         DWORD nSubAuthority4,
         DWORD nSubAuthority5,
         DWORD nSubAuthority6,
         DWORD nSubAuthority7,
             PSID * pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
          PLUID Luid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted(
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
             HANDLE TokenHandle,
         PSID SidToCheck,
          PBOOL IsMember
    );







__declspec(dllimport)
BOOL
__stdcall
CheckTokenCapability(
             HANDLE TokenHandle,
         PSID CapabilitySidToCheck,
          PBOOL HasCapability
    );


__declspec(dllimport)
BOOL
__stdcall
GetAppContainerAce(
         PACL Acl,
         DWORD StartingAceIndex,
             PVOID * AppContainerAce,
              DWORD * AppContainerAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembershipEx(
             HANDLE TokenHandle,
         PSID SidToCheck,
         DWORD Flags,
          PBOOL IsMember
    );






__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
         PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
             PSECURITY_DESCRIPTOR * NewSecurityDescriptor,
             GUID * ObjectType,
         BOOLEAN IsDirectoryObject,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid(
         DWORD nDestinationSidLength,
                                              PSID pDestinationSid,
         PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
         BOOL IsDirectoryObject,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
             GUID * ObjectType,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
             PSECURITY_DESCRIPTOR ParentDescriptor,
             PSECURITY_DESCRIPTOR CreatorDescriptor,
             PSECURITY_DESCRIPTOR * NewDescriptor,
                              GUID ** ObjectTypes,
         ULONG GuidCount,
         BOOL IsContainerObject,
         ULONG AutoInheritFlags,
             HANDLE Token,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
         HANDLE ExistingTokenHandle,
         DWORD Flags,
         DWORD DisableSidCount,
                                    PSID_AND_ATTRIBUTES SidsToDisable,
         DWORD DeletePrivilegeCount,
                                         PLUID_AND_ATTRIBUTES PrivilegesToDelete,
         DWORD RestrictedSidCount,
                                       PSID_AND_ATTRIBUTES SidsToRestrict,
             PHANDLE NewTokenHandle
    );





__declspec(dllimport)

BOOL
__stdcall
CreateWellKnownSid(
         WELL_KNOWN_SID_TYPE WellKnownSidType,
             PSID DomainSid,
                                              PSID pSid,
            DWORD * cbSid
    );


__declspec(dllimport)

BOOL
__stdcall
EqualDomainSid(
         PSID pSid1,
         PSID pSid2,
          BOOL * pfEqual
    );




__declspec(dllimport)
BOOL
__stdcall
DeleteAce(
            PACL pAcl,
         DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity(
                               PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
         HANDLE ExistingTokenHandle,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
             PHANDLE DuplicateTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
         HANDLE hExistingToken,
         DWORD dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpTokenAttributes,
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
         TOKEN_TYPE TokenType,
             PHANDLE phNewToken
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid(
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid(
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce(
         PACL pAcl,
             LPVOID * pAce
    );


__declspec(dllimport)
PVOID
__stdcall
FreeSid(
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce(
         PACL pAcl,
         DWORD dwAceIndex,
             LPVOID * pAce
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation(
         PACL pAcl,
                                              LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION RequestedInformation,
                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD nLength,
          LPDWORD lpnLengthNeeded
    );


__declspec(dllimport)


DWORD
__stdcall
GetLengthSid(
                                           PSID pSid
    );


__declspec(dllimport)

BOOL
__stdcall
GetPrivateObjectSecurity(
         PSECURITY_DESCRIPTOR ObjectDescriptor,
         SECURITY_INFORMATION SecurityInformation,
                                                               PSECURITY_DESCRIPTOR ResultantDescriptor,
         DWORD DescriptorLength,
          PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          PSECURITY_DESCRIPTOR_CONTROL pControl,
          LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbDaclPresent,
             PACL * pDacl,
          LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pGroup,
          LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID * pOwner,
          LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
         PSECURITY_DESCRIPTOR SecurityDescriptor,
          PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          LPBOOL lpbSaclPresent,
             PACL * pSacl,
          LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
         PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired(
         UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority(
         PSID pSid,
         DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount(
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                                                     LPVOID TokenInformation,
         DWORD TokenInformationLength,
          PDWORD ReturnLength
    );





__declspec(dllimport)

BOOL
__stdcall
GetWindowsAccountDomainSid(
         PSID pSid,
                                                          PSID pDomainSid,
            DWORD * cbDomainSid
    );




__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
         HANDLE ThreadHandle
    );



__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
         HANDLE hToken
    );



__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl(
                                   PACL pAcl,
         DWORD nAclLength,
         DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor(
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
         DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSid(
                                                                                  PSID Sid,
         PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
         BYTE nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
         HANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl(
         PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor(
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSid(
         PSID pSid
    );





__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid(
         PSID pSid,
         WELL_KNOWN_SID_TYPE WellKnownSidType
    );




__declspec(dllimport)

BOOL
__stdcall
MakeAbsoluteSD(
         PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
                                                                                                        PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
            LPDWORD lpdwAbsoluteSecurityDescriptorSize,
                                                            PACL pDacl,
            LPDWORD lpdwDaclSize,
                                                            PACL pSacl,
            LPDWORD lpdwSaclSize,
                                                              PSID pOwner,
            LPDWORD lpdwOwnerSize,
                                                                            PSID pPrimaryGroup,
            LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)

BOOL
__stdcall
MakeSelfRelativeSD(
         PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
                                                                    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
            LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask(
            PDWORD AccessMask,
         PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         LPWSTR ObjectTypeName,
             LPWSTR ObjectName,
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
         BOOL ObjectCreation,
         BOOL AccessGranted,
          LPBOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );






__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck(
         HANDLE ClientToken,
            PPRIVILEGE_SET RequiredPrivileges,
          LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
         LPCWSTR SubsystemName,
         LPCWSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
#line 1135 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securitybaseapi.h"
__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );




__declspec(dllimport)
BOOL
__stdcall
RevertToSelf(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation(
            PACL pAcl,
                                            LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW(
         LPCWSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );





__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity(
         HANDLE Handle,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR SecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx(
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR ModificationDescriptor,
            PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
         ULONG AutoInheritFlags,
         PGENERIC_MAPPING GenericMapping,
             HANDLE Token
    );





__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
         SECURITY_INFORMATION SecurityInformation,
          LPDWORD DesiredAccess
    );




__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl(
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
         SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bDaclPresent,
             PACL pDacl,
         BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pGroup,
         BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
             PSID pOwner,
         BOOL bOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
            PSECURITY_DESCRIPTOR SecurityDescriptor,
             PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl(
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
         BOOL bSaclPresent,
             PACL pSacl,
         BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation(
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
                                             LPVOID TokenInformation,
         DWORD TokenInformationLength
    );







__declspec(dllimport)
BOOL
__stdcall
SetCachedSigningLevel(
                                PHANDLE SourceFiles,
         ULONG SourceFileCount,
         ULONG Flags,
             HANDLE TargetFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetCachedSigningLevel(
         HANDLE File,
          PULONG Flags,
          PULONG SigningLevel,
                                                                PUCHAR Thumbprint,
                PULONG ThumbprintSize,
              PULONG ThumbprintAlgorithm
    );
#line 1336 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securitybaseapi.h"
}
#line 59 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namespaceapi.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namespaceapi.h"
extern "C" {
#line 42 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\namespaceapi.h"
__declspec(dllimport)
HANDLE
__stdcall
CreatePrivateNamespaceW(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenPrivateNamespaceW(
         LPVOID lpBoundaryDescriptor,
         LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
         HANDLE Handle,
         ULONG Flags
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateBoundaryDescriptorW(
         LPCWSTR Name,
         ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID RequiredSid
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
         HANDLE BoundaryDescriptor
    );






}
#line 60 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\systemtopologyapi.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\systemtopologyapi.h"
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
          PULONG HighestNodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
         USHORT Node,
          PGROUP_AFFINITY ProcessorMask
    );
#line 66 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\systemtopologyapi.h"
}
#line 61 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processtopologyapi.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processtopologyapi.h"
extern "C" {
#line 46 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processtopologyapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessGroupAffinity(
         HANDLE hProcess,
            PUSHORT GroupCount,
                              PUSHORT GroupArray
    );
#line 69 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processtopologyapi.h"
__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
         HANDLE hThread,
          PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
         HANDLE hThread,
         const GROUP_AFFINITY * GroupAffinity,
              PGROUP_AFFINITY PreviousGroupAffinity
    );
#line 94 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\processtopologyapi.h"
}
#line 62 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securityappcontainer.h"
#line 39 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securityappcontainer.h"
extern "C" {
#line 49 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\securityappcontainer.h"
BOOL
__stdcall
GetAppContainerNamedObjectPath(
             HANDLE Token,
             PSID AppContainerSid,
         ULONG ObjectPathLength,
                                       LPWSTR ObjectPath,
          PULONG ReturnLength
    );





}
#line 63 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\realtimeapiset.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\realtimeapiset.h"
extern "C" {
#line 42 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\realtimeapiset.h"
__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime(
         HANDLE ThreadHandle,
          PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime(
         HANDLE ProcessHandle,
          PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime(
            PULONG BufferLength,
                                          PULONG64 ProcessorIdleCycleTime
    );







__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
         USHORT Group,
            PULONG BufferLength,
                                          PULONG64 ProcessorIdleCycleTime
    );
#line 96 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\realtimeapiset.h"
__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime(
          PULONGLONG UnbiasedTime
    );
#line 110 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\realtimeapiset.h"
}
#line 64 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"



extern "C" {
#line 280 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;

typedef LPVOID (__stdcall *PFIBER_CALLOUT_ROUTINE)(
    LPVOID lpParameter
    );
#line 298 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef PLDT_ENTRY LPLDT_ENTRY;
#line 403 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
#line 458 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;

    DWORD dwProviderOffset;

    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG,*LPCOMMCONFIG;
#line 545 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
#line 646 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 875 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;
#line 895 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
int




__stdcall




WinMain (
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPSTR lpCmdLine,
         int nShowCmd
    );

int



__stdcall

wWinMain(
         HINSTANCE hInstance,
             HINSTANCE hPrevInstance,
         LPWSTR lpCmdLine,
         int nShowCmd
    );

__declspec(dllimport)


HGLOBAL
__stdcall
GlobalAlloc(
         UINT uFlags,
         SIZE_T dwBytes
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalReAlloc (
                HGLOBAL hMem,
         SIZE_T dwBytes,
         UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
         HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
         HGLOBAL hMem
    );

__declspec(dllimport)

LPVOID
__stdcall
GlobalLock (
         HGLOBAL hMem
    );

__declspec(dllimport)

HGLOBAL
__stdcall
GlobalHandle (
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
         HGLOBAL hMem
    );

__declspec(dllimport)


HGLOBAL
__stdcall
GlobalFree(
                    HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
         DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
         HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
         HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
         HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
         HGLOBAL hMem
    );


__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
          LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)


HLOCAL
__stdcall
LocalAlloc(
         UINT uFlags,
         SIZE_T uBytes
    );

__declspec(dllimport)

HLOCAL
__stdcall
LocalReAlloc(
                    HLOCAL hMem,
         SIZE_T uBytes,
         UINT uFlags
    );

__declspec(dllimport)

LPVOID
__stdcall
LocalLock(
         HLOCAL hMem
    );

__declspec(dllimport)

HLOCAL
__stdcall
LocalHandle(
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
         HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
         HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
         HLOCAL hMem
    );

__declspec(dllimport)


HLOCAL
__stdcall
LocalFree(
                    HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
         HLOCAL hMem,
         UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
         UINT uMinFree
    );



__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime (
         USHORT Group,
                                                                PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
            PDWORD ReturnedLength
    );
#line 1144 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
          LPCSTR lpApplicationName,
          LPDWORD lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
          LPCWSTR lpApplicationName,
          LPDWORD lpBinaryType
    );






__declspec(dllimport)

DWORD
__stdcall
GetShortPathNameA(
         LPCSTR lpszLongPath,
                                               LPSTR lpszShortPath,
         DWORD cchBuffer
    );






__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameTransactedA(
             LPCSTR lpszShortPath,
                                               LPSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
__declspec(dllimport)

DWORD
__stdcall
GetLongPathNameTransactedW(
             LPCWSTR lpszShortPath,
                                               LPWSTR lpszLongPath,
             DWORD cchBuffer,
             HANDLE hTransaction
    );
#line 1207 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
          HANDLE hProcess,
          PDWORD_PTR lpProcessAffinityMask,
          PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
         HANDLE hProcess,
         DWORD_PTR dwProcessAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
          HANDLE hProcess,
          PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
          HANDLE hProcess,
          PSIZE_T lpMinimumWorkingSetSize,
          PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)

void
__stdcall
FatalExit(
         int ExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
                                     LPCH NewEnvironment
    );
#line 1274 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
             PEXCEPTION_RECORD pExceptionRecord,
             PCONTEXT pContextRecord,
         DWORD dwFlags
    );
#line 1297 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
void
__stdcall
SwitchToFiber(
         LPVOID lpFiber
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
         LPVOID lpFiber
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );





__declspec(dllimport)

PVOID
__stdcall
CalloutOnFiberStack(
         PVOID lpFiber,
         PFIBER_CALLOUT_ROUTINE lpStartAddress,
             PVOID lpParameter
    );



__declspec(dllimport)

LPVOID
__stdcall
CreateFiberEx(
             SIZE_T dwStackCommitSize,
             SIZE_T dwStackReserveSize,
             DWORD dwFlags,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiberEx(
             LPVOID lpParameter,
             DWORD dwFlags
    );







__declspec(dllimport)

LPVOID
__stdcall
CreateFiber(
             SIZE_T dwStackSize,
             LPFIBER_START_ROUTINE lpStartAddress,
             LPVOID lpParameter
    );

__declspec(dllimport)

LPVOID
__stdcall
ConvertThreadToFiber(
             LPVOID lpParameter
    );
#line 1399 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {




    ULONG UmsVersion;




    PUMS_COMPLETION_LIST CompletionList;





    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;




    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        } ;
        ULONG ThreadUmsFlags;
    } ;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;


__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
             PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
         PUMS_COMPLETION_LIST UmsCompletionList,
         DWORD WaitTimeOut,
          PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
         PUMS_COMPLETION_LIST UmsCompletionList,
            PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
            PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
         PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
         PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
            PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
                                                                     PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength,
              PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
         PUMS_CONTEXT UmsThread,
         UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
         PVOID UmsThreadInformation,
         ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
         PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
             PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
         PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsSystemThreadInformation(
         HANDLE ThreadHandle,
            PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
    );
#line 1569 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
         HANDLE hThread,
         DWORD_PTR dwThreadAffinityMask
    );


__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
         HANDLE hThread,
         DWORD dwIdealProcessor
    );






typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;



__declspec(dllimport)
BOOL
__stdcall
GetProcessInformation (
         HANDLE hProcess,
         PROCESS_INFORMATION_CLASS ProcessInformationClass,
                                               LPVOID ProcessInformation,
         DWORD ProcessInformationSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessInformation (
         HANDLE hProcess,
         PROCESS_INFORMATION_CLASS ProcessInformationClass,
                                             LPVOID ProcessInformation,
         DWORD ProcessInformationSize
    );
#line 1625 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
         HANDLE hProcess,
          LPDWORD lpFlags,
          PBOOL lpPermanent
    );



__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
         LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
          HANDLE hThread,
          DWORD dwSelector,
          LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
         EXECUTION_STATE esFlags
    );







typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
         PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
         HANDLE PowerRequest,
         POWER_REQUEST_TYPE RequestType
    );
#line 1761 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
         HANDLE FileHandle,
         UCHAR Flags
    );
#line 1780 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
         DWORD dwNewMode,
             LPDWORD lpOldMode
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
            HANDLE hThread,
            PWOW64_CONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
         HANDLE hThread,
         const WOW64_CONTEXT *lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
         HANDLE hThread,
         DWORD dwSelector,
          PWOW64_LDT_ENTRY lpSelectorEntry
    );







__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
         HANDLE hThread
    );



__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
         BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
         HANDLE Process
    );
#line 1873 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
         DWORD nCount,
                       const HANDLE *lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
         DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
         UINT uNumber
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
          HANDLE hDevice,
          BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
         HANDLE hMsgIndicator,
         ULONG ulMsgCount
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
         HANDLE hFile,
         LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
         HANDLE hFile,
         LPCWSTR lpShortName
    );
#line 1974 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
LoadModule(
         LPCSTR lpModuleName,
         LPVOID lpParameterBlock
    );



__declspec(dllimport)
UINT
__stdcall
WinExec(
         LPCSTR lpCmdLine,
         UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
              HANDLE hFile,
              LPDWORD lpErrors,
              LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
         HANDLE hFile,
         DWORD dwInQueue,
         DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
         HANDLE hFile,
         DWORD dwFunc
    );

__declspec(dllimport)

BOOL
__stdcall
GetCommConfig(
              HANDLE hCommDev,
                                      LPCOMMCONFIG lpCC,
              LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
          HANDLE hFile,
          LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
            HANDLE hFile,
            LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
          HANDLE hFile,
          LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
          HANDLE hFile,
          LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
          HANDLE hFile,
          LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
         HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
         HANDLE hCommDev,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
         HANDLE hFile,
         DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
         HANDLE hFile,
         LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
         HANDLE hFile,
         LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
         HANDLE hFile,
         char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
                HANDLE hFile,
                LPDWORD lpEvtMask,
                LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
         HANDLE hDevice,
         DWORD dwPositionMethod,
         DWORD dwPartition,
         DWORD dwOffsetLow,
         DWORD dwOffsetHigh,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
          HANDLE hDevice,
          DWORD dwPositionType,
          LPDWORD lpdwPartition,
          LPDWORD lpdwOffsetLow,
          LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
         HANDLE hDevice,
         DWORD dwOperation,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
         HANDLE hDevice,
         DWORD dwEraseType,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
         HANDLE hDevice,
         DWORD dwPartitionMethod,
         DWORD dwCount,
         DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
         HANDLE hDevice,
         DWORD dwTapemarkType,
         DWORD dwTapemarkCount,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
         HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
            HANDLE hDevice,
            DWORD dwOperation,
            LPDWORD lpdwSize,
                                  LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
         LPVOID lpTapeInformation
    );
#line 2240 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
int
__stdcall
MulDiv(
         int nNumber,
         int nNumerator,
         int nDenominator
    );







typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;



__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );





__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
              PDWORD pdwQuotaAllowed,
              PDWORD pdwQuotaUsed
    );







__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
          const FILETIME *lpFileTime,
          LPWORD lpFatDate,
          LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
          WORD wFatDate,
          WORD wFatTime,
          LPFILETIME lpFileTime
    );
#line 2316 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)

DWORD
__stdcall
FormatMessageA(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
__declspec(dllimport)

DWORD
__stdcall
FormatMessageW(
             DWORD dwFlags,
             LPCVOID lpSource,
             DWORD dwMessageId,
             DWORD dwLanguageId,
             LPWSTR lpBuffer,
             DWORD nSize,
             va_list *Arguments
    );
#line 2400 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
              HANDLE hNamedPipe,
              LPDWORD lpFlags,
              LPDWORD lpOutBufferSize,
              LPDWORD lpInBufferSize,
              LPDWORD lpMaxInstances
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
             LPCSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
             LPCWSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
              HANDLE hMailslot,
              LPDWORD lpMaxMessageSize,
              LPDWORD lpNextSize,
              LPDWORD lpMessageCount,
              LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
         HANDLE hMailslot,
         DWORD lReadTimeout
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
         LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
               LPCSTR lpFileName,
               DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
               LPCWSTR lpFileName,
               DWORD dwReserved
    );
#line 2511 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
          LPCSTR lpFileName,
          LPDWORD lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
          LPCWSTR lpFileName,
          LPDWORD lpStatus
    );
#line 2537 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
                               PBYTE pbData,
             PVOID pvCallbackContext,
             ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
                                                PBYTE pbData,
             PVOID pvCallbackContext,
             PULONG ulLength
    );
#line 2564 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
                LPCSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
                LPCWSTR lpFileName,
                ULONG ulFlags,
             PVOID *pvContext
    );






__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
             PFE_EXPORT_FUNC pfExportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
             PFE_IMPORT_FUNC pfImportCallback,
             PVOID pvCallbackContext,
             PVOID pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
         PVOID pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );






__declspec(dllimport)
int
__stdcall
lstrcmpiA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );






__declspec(dllimport)




LPSTR
__stdcall
lstrcpynA(
                             LPSTR lpString1,
         LPCSTR lpString2,
         int iMaxLength
    );
__declspec(dllimport)




LPWSTR
__stdcall
lstrcpynW(
                             LPWSTR lpString1,
         LPCWSTR lpString2,
         int iMaxLength
    );







#pragma warning(push)
#pragma warning(disable: 4995)


__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
                                                 LPSTR lpString1,
          LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
                                                 LPWSTR lpString1,
          LPCWSTR lpString2
    );






__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
                                                                                   LPSTR lpString1,
            LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
                                                                                   LPWSTR lpString1,
            LPCWSTR lpString2
    );







#pragma warning(pop)


__declspec(dllimport)
int
__stdcall
lstrlenA(
         LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
         LPCWSTR lpString
    );






__declspec(dllimport)
HFILE
__stdcall
OpenFile(
            LPCSTR lpFileName,
            LPOFSTRUCT lpReOpenBuff,
            UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
         LPCSTR lpPathName,
         int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
         LPCSTR lpPathName,
         int iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
         HFILE hFile,
                                          LPVOID lpBuffer,
         long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
         HFILE hFile,
                             LPCCH lpBuffer,
         long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
         HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
         HFILE hFile,
         LONG lOffset,
         int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
                            const void* lpv,
                int iSize,
                LPINT lpiResult
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
         HANDLE hObjectToSignal,
         HANDLE hObjectToWaitOn,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );


__declspec(dllimport)
BOOL
__stdcall
BackupRead(
            HANDLE hFile,
                                                                      LPBYTE lpBuffer,
            DWORD nNumberOfBytesToRead,
            LPDWORD lpNumberOfBytesRead,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
            HANDLE hFile,
            DWORD dwLowBytesToSeek,
            DWORD dwHighBytesToSeek,
            LPDWORD lpdwLowByteSeeked,
            LPDWORD lpdwHighByteSeeked,
            LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
            HANDLE hFile,
                                            LPBYTE lpBuffer,
            DWORD nNumberOfBytesToWrite,
            LPDWORD lpNumberOfBytesWritten,
            BOOL bAbort,
            BOOL bProcessSecurity,
            LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD dwStreamId ;
        DWORD dwStreamAttributes ;
        LARGE_INTEGER Size ;
        DWORD dwStreamNameSize ;
        WCHAR cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
#line 2950 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;

typedef STARTUPINFOEXW STARTUPINFOEX;
typedef LPSTARTUPINFOEXW LPSTARTUPINFOEX;
#line 2976 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
OpenMutexA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );




__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreA(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreW(
             LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenSemaphoreA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCSTR lpTimerName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerW(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             BOOL bManualReset,
             LPCWSTR lpTimerName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenWaitableTimerA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpTimerName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateSemaphoreExA(
                LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
                LONG lInitialCount,
                LONG lMaximumCount,
                LPCSTR lpName,
                DWORD dwFlags,
                DWORD dwDesiredAccess
    );




__declspec(dllimport)

HANDLE
__stdcall
CreateWaitableTimerExA(
             LPSECURITY_ATTRIBUTES lpTimerAttributes,
             LPCSTR lpTimerName,
             DWORD dwFlags,
             DWORD dwDesiredAccess
    );
#line 3103 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
CreateFileMappingNumaA(
             HANDLE hFile,
             LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
             LPCSTR lpName,
             DWORD nndPreferred
    );







__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );




__declspec(dllimport)

DWORD
__stdcall
GetLogicalDriveStringsA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );





__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryA(
         LPCSTR lpLibFileName
    );
__declspec(dllimport)

HMODULE
__stdcall
LoadLibraryW(
         LPCWSTR lpLibFileName
    );
#line 3194 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)

HMODULE
__stdcall
LoadPackagedLibrary (
               LPCWSTR lpwLibFileName,
               DWORD Reserved
    );
#line 3215 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
         HANDLE hProcess,
         DWORD dwFlags,
                                          LPSTR lpExeName,
            PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
         HANDLE hProcess,
         DWORD dwFlags,
                                          LPWSTR lpExeName,
            PDWORD lpdwSize
    );
#line 3256 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeHandleList = 2,

    ProcThreadAttributeGroupAffinity = 3,
    ProcThreadAttributePreferredNode = 4,
    ProcThreadAttributeIdealProcessor = 5,
    ProcThreadAttributeUmsThread = 6,
    ProcThreadAttributeMitigationPolicy = 7,


    ProcThreadAttributeSecurityCapabilities = 9,

    ProcThreadAttributeProtectionLevel = 11,
} PROC_THREAD_ATTRIBUTE_NUM;
#line 3434 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
          LPDWORD lpdwLevel,
          LPDWORD lpdwFlags
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
         UINT uAction,
         LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
         UINT uAction,
         LPCWSTR lpMessageText
    );






__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
          LPSTARTUPINFOA lpStartupInfo
    );
#line 3526 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize
    );
#line 3552 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize,
              PDWORD pdwAttribubutes
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                             PVOID pBuffer,
         DWORD nSize,
              PDWORD pdwAttribubutes
    );
#line 3580 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                PVOID pValue,
         DWORD nSize
    );
#line 3606 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
         LPCSTR lpName,
         LPCSTR lpGuid,
                                PVOID pValue,
         DWORD nSize,
         DWORD dwAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
                                PVOID pValue,
         DWORD nSize,
         DWORD dwAttributes
    );
#line 3636 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetFirmwareType (
            PFIRMWARE_TYPE FirmwareType
    );


__declspec(dllimport)
BOOL
__stdcall
IsNativeVhdBoot (
          PBOOL NativeVhdBoot
    );



__declspec(dllimport)

HRSRC
__stdcall
FindResourceA(
             HMODULE hModule,
             LPCSTR lpName,
             LPCSTR lpType
    );
__declspec(dllimport)

HRSRC
__stdcall
FindResourceW(
             HMODULE hModule,
             LPCWSTR lpName,
             LPCWSTR lpType
    );






__declspec(dllimport)

HRSRC
__stdcall
FindResourceExA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             WORD wLanguage
    );




__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
             HMODULE hModule,
             ENUMRESTYPEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
             HMODULE hModule,
             ENUMRESTYPEPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
             HMODULE hModule,
             LPCSTR lpType,
             ENUMRESNAMEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
             HMODULE hModule,
             LPCWSTR lpType,
             ENUMRESNAMEPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
             HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
             HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam
    );






__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
         LPCSTR pFileName,
         BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
         LPCWSTR pFileName,
         BOOL bDeleteExistingResources
    );






__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
         HANDLE hUpdate,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
         HANDLE hUpdate,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
                             LPVOID lpData,
         DWORD cb
    );






__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
         HANDLE hUpdate,
         BOOL fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
         HANDLE hUpdate,
         BOOL fDiscard
    );
#line 3833 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExA(
             LPCSTR lpString,
         DWORD Flags
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExW(
             LPCWSTR lpString,
         DWORD Flags
    );






__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );






__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
             LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
             LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
         ATOM nAtom,
                                       LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
         ATOM nAtom,
                                       LPWSTR lpBuffer,
         int nSize
    );






__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
         LPCSTR lpAppName,
         LPCSTR lpKeyName,
         INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
         LPCWSTR lpAppName,
         LPCWSTR lpKeyName,
         INT nDefault
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString
    );






__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
         LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
         LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
         DWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
         LPCSTR lpAppName,
         LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
         LPCWSTR lpAppName,
         LPCWSTR lpString
    );






__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             INT nDefault,
             LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             INT nDefault,
             LPCWSTR lpFileName
    );
#line 4129 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpDefault,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpDefault,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 4185 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
             LPCSTR lpAppName,
                                           LPSTR lpReturnedString,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
             LPCWSTR lpAppName,
                                           LPWSTR lpReturnedString,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 4257 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
             LPCSTR lpAppName,
             LPCSTR lpString,
             LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
             LPCWSTR lpAppName,
             LPCWSTR lpString,
             LPCWSTR lpFileName
    );







__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
                                           LPSTR lpszReturnBuffer,
             DWORD nSize,
             LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
                                           LPWSTR lpszReturnBuffer,
             DWORD nSize,
             LPCWSTR lpFileName
    );
#line 4324 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                        LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );
#line 4376 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
                                      LPVOID lpStruct,
             UINT uSizeStruct,
             LPCWSTR szFile
    );






__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );




__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
         LPCSTR lpPathName,
         LPCSTR lpPrefixString,
         UINT uUnique,
                           LPSTR lpTempFileName
    );
#line 4453 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)

UINT
__stdcall
GetSystemWow64DirectoryA(
                                           LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)

UINT
__stdcall
GetSystemWow64DirectoryW(
                                           LPWSTR lpBuffer,
         UINT uSize
    );






__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
         BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)( LPSTR lpBuffer, UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)( LPWSTR lpBuffer, UINT uSize);
#line 4553 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
             LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
             LPCWSTR lpPathName
    );






__declspec(dllimport)

DWORD
__stdcall
GetDllDirectoryA(
         DWORD nBufferLength,
                                                   LPSTR lpBuffer
    );
__declspec(dllimport)

DWORD
__stdcall
GetDllDirectoryW(
         DWORD nBufferLength,
                                                   LPWSTR lpBuffer
    );
#line 4600 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
         DWORD Flags
    );
#line 4639 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
#line 4663 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
         LPCSTR lpPathName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
         LPCWSTR lpPathName,
             HANDLE hTransaction
    );






__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameTransactedA(
                    LPCSTR lpFileName,
                    DWORD nBufferLength,
                                                   LPSTR lpBuffer,
                 LPSTR *lpFilePart,
                    HANDLE hTransaction
    );
__declspec(dllimport)

DWORD
__stdcall
GetFullPathNameTransactedW(
                    LPCWSTR lpFileName,
                    DWORD nBufferLength,
                                                   LPWSTR lpBuffer,
                 LPWSTR *lpFilePart,
                    HANDLE hTransaction
    );
#line 4743 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
             DWORD dwFlags,
             LPCSTR lpDeviceName,
             LPCSTR lpTargetPath
    );




__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
             LPCSTR lpDeviceName,
                                         LPSTR lpTargetPath,
             DWORD ucchMax
    );
#line 4771 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedA(
               LPCSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedW(
               LPCWSTR lpFileName,
               DWORD dwDesiredAccess,
               DWORD dwShareMode,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               DWORD dwCreationDisposition,
               DWORD dwFlagsAndAttributes,
               HANDLE hTemplateFile,
               HANDLE hTransaction,
               PUSHORT pusMiniVersion,
               PVOID lpExtendedParameter
    );
#line 4812 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
HANDLE
__stdcall
ReOpenFile(
         HANDLE hOriginalFile,
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
         DWORD dwFlagsAndAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
             LPCSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
             LPCWSTR lpFileName,
             DWORD dwFileAttributes,
             HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
          LPCSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
                                                          LPVOID lpFileInformation,
             HANDLE hTransaction
    );






__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
              LPCSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
              LPCWSTR lpFileName,
              LPDWORD lpFileSizeHigh,
              HANDLE hTransaction
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
             LPCSTR lpFileName,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
             LPCWSTR lpFileName,
             HANDLE hTransaction
    );
#line 4949 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
              LPCSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
              LPCWSTR lpName,
                                  LPSTR lpOemName,
              DWORD OemNameSize,
              PBOOL pbNameContainsSpaces ,
              PBOOL pbNameLegal
    );
#line 4987 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedA(
               LPCSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedW(
               LPCWSTR lpFileName,
               FINDEX_INFO_LEVELS fInfoLevelId,
                                                 LPVOID lpFindFileData,
               FINDEX_SEARCH_OPS fSearchOp,
               LPVOID lpSearchFilter,
               DWORD dwAdditionalFlags,
               HANDLE hTransaction
    );
#line 5028 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName,
         BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName,
         BOOL bFailIfExists
    );
#line 5080 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
             LARGE_INTEGER TotalFileSize,
             LARGE_INTEGER TotalBytesTransferred,
             LARGE_INTEGER StreamSize,
             LARGE_INTEGER StreamBytesTransferred,
             DWORD dwStreamNumber,
             DWORD dwCallbackReason,
             HANDLE hSourceFile,
             HANDLE hDestinationFile,
             LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
                LPCSTR lpExistingFileName,
                LPCSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
                LPCWSTR lpExistingFileName,
                LPCWSTR lpNewFileName,
                LPPROGRESS_ROUTINE lpProgressRoutine,
                LPVOID lpData,

                LPBOOL pbCancel,
                DWORD dwCopyFlags
    );
#line 5126 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             LPBOOL pbCancel,
             DWORD dwCopyFlags,
             HANDLE hTransaction
    );
#line 5170 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef enum _COPYFILE2_MESSAGE_TYPE {
     COPYFILE2_CALLBACK_NONE = 0,
     COPYFILE2_CALLBACK_CHUNK_STARTED,
     COPYFILE2_CALLBACK_CHUNK_FINISHED,
     COPYFILE2_CALLBACK_STREAM_STARTED,
     COPYFILE2_CALLBACK_STREAM_FINISHED,
     COPYFILE2_CALLBACK_POLL_CONTINUE,
     COPYFILE2_CALLBACK_ERROR,
     COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,

    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;



typedef struct COPYFILE2_MESSAGE {

    COPYFILE2_MESSAGE_TYPE Type;
    DWORD dwPadding;

    union {

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } ChunkStarted;

        struct {
            DWORD dwStreamNumber;
            DWORD dwFlags;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } ChunkFinished;

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } StreamStarted;

        struct {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } StreamFinished;

        struct {
            DWORD dwReserved;
        } PollContinue;

        struct {
            COPYFILE2_COPY_PHASE CopyPhase;
            DWORD dwStreamNumber;
            HRESULT hrFailure;
            DWORD dwReserved;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } Error;

    } Info;

} COPYFILE2_MESSAGE;

typedef
COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(
            const COPYFILE2_MESSAGE *pMessage,
            PVOID pvCallbackContext
);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
  DWORD dwSize;
  DWORD dwCopyFlags;
  BOOL *pfCancel;
  PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;
  PVOID pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HRESULT
__stdcall
CopyFile2(
            PCWSTR pwszExistingFileName,
            PCWSTR pwszNewFileName,
            COPYFILE2_EXTENDED_PARAMETERS *pExtendedParameters
);
#line 5307 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName
    );
#line 5353 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             DWORD dwFlags
    );
#line 5382 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags
    );
#line 5410 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
             LPPROGRESS_ROUTINE lpProgressRoutine,
             LPVOID lpData,
             DWORD dwFlags,
             HANDLE hTransaction
    );
#line 5463 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
               LPCSTR lpReplacedFileName,
               LPCSTR lpReplacementFileName,
               LPCSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
               LPCWSTR lpReplacedFileName,
               LPCWSTR lpReplacementFileName,
               LPCWSTR lpBackupFileName,
               DWORD dwReplaceFlags,
               LPVOID lpExclude,
               LPVOID lpReserved
    );
#line 5498 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
#line 5527 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
               LPCSTR lpFileName,
               LPCSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
               LPCWSTR lpFileName,
               LPCWSTR lpExistingFileName,
               LPSECURITY_ATTRIBUTES lpSecurityAttributes,
               HANDLE hTransaction
    );
#line 5560 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamW(
               LPCWSTR lpFileName,
               STREAM_INFO_LEVELS InfoLevel,
                                                       LPVOID lpFindStreamData,
               DWORD dwFlags
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
               LPCWSTR lpFileName,
               STREAM_INFO_LEVELS InfoLevel,
                                                       LPVOID lpFindStreamData,
               DWORD dwFlags,
               HANDLE hTransaction
    );


__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
          HANDLE hFindStream,
                                                       LPVOID lpFindStreamData
    );




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW (
            LPCWSTR lpFileName,
            DWORD dwFlags,
            LPDWORD StringLength,
                                PWSTR LinkName
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW (
            HANDLE hFindStream,
            LPDWORD StringLength,
                                PWSTR LinkName
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
             LPCWSTR lpFileName,
             DWORD dwFlags,
             LPDWORD StringLength,
                                PWSTR LinkName,
             HANDLE hTransaction
    );



__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
             LPCSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPSTR lpUserName,
              DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
              HANDLE hNamedPipe,
              LPDWORD lpState,
              LPDWORD lpCurInstances,
              LPDWORD lpMaxCollectionCount,
              LPDWORD lpCollectDataTimeout,
                                       LPWSTR lpUserName,
              DWORD nMaxUserNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
          LPCSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
          LPCWSTR lpNamedPipeName,
                                        LPVOID lpInBuffer,
          DWORD nInBufferSize,
                                                            LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
          LPDWORD lpBytesRead,
          DWORD nTimeOut
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
         LPCSTR lpNamedPipeName,
         DWORD nTimeOut
    );







__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
         HANDLE Pipe,
                                                  LPSTR ClientComputerName,
         ULONG ClientComputerNameLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
         HANDLE Pipe,
          PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
         HANDLE Pipe,
          PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
         HANDLE Pipe,
          PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
         HANDLE Pipe,
          PULONG ServerSessionId
    );



__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
             LPCSTR lpRootPathName,
             LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
             LPCWSTR lpRootPathName,
             LPCWSTR lpVolumeName
    );






__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
              LPCSTR lpRootPathName,
                                      LPSTR lpVolumeNameBuffer,
              DWORD nVolumeNameSize,
              LPDWORD lpVolumeSerialNumber,
              LPDWORD lpMaximumComponentLength,
              LPDWORD lpFileSystemFlags,
                                          LPSTR lpFileSystemNameBuffer,
              DWORD nFileSystemNameSize
    );







__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
          HANDLE hFile,
          DWORD nPeriodMilliseconds,
          DWORD nBytesPerPeriod,
          BOOL bDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
          HANDLE hFile,
          LPDWORD lpPeriodMilliseconds,
          LPDWORD lpBytesPerPeriod,
          LPBOOL pDiscardable,
          LPDWORD lpTransferSize,
          LPDWORD lpNumOutstandingRequests
    );







__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
             HANDLE hEventLog,
             LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
             HANDLE hEventLog,
             LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
         HANDLE hEventLog,
         LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
         HANDLE hEventLog,
         LPCWSTR lpBackupFileName
    );






__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
         HANDLE hEventLog,
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
          HANDLE hEventLog,
          PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
          HANDLE hEventLog,
          PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
             LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );






__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
             LPCSTR lpUNCServerName,
             LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
             LPCWSTR lpUNCServerName,
             LPCWSTR lpFileName
    );






__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
          HANDLE hEventLog,
          DWORD dwReadFlags,
          DWORD dwRecordOffset,
                                                              LPVOID lpBuffer,
          DWORD nNumberOfBytesToRead,
          DWORD *pnBytesRead,
          DWORD *pnMinNumberOfBytesNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCSTR *lpStrings,
                                     LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
             HANDLE hEventLog,
             WORD wType,
             WORD wCategory,
             DWORD dwEventID,
             PSID lpUserSid,
             WORD wNumStrings,
             DWORD dwDataSize,
                                LPCWSTR *lpStrings,
                                     LPVOID lpRawData
    );
#line 6068 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
          HANDLE hEventLog,
          DWORD dwInfoLevel,
                                                      LPVOID lpBuffer,
          DWORD cbBufSize,
          LPDWORD pcbBytesNeeded
    );
#line 6092 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef ULONG OPERATION_ID;





typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;







typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;



__declspec(dllimport)
BOOL
__stdcall
OperationStart (
         OPERATION_START_PARAMETERS* OperationStartParams
    );

__declspec(dllimport)
BOOL
__stdcall
OperationEnd (
         OPERATION_END_PARAMETERS* OperationEndParams
    );
#line 6140 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
             LPDWORD GrantedAccess,
             LPBOOL AccessStatus,
             LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             HANDLE ClientToken,
             LPCSTR ObjectTypeName,
             LPCSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             PSID PrincipalSelfSid,
             DWORD DesiredAccess,
             AUDIT_EVENT_TYPE AuditType,
             DWORD Flags,
                                              POBJECT_TYPE_LIST ObjectTypeList,
             DWORD ObjectTypeListLength,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
                                             LPDWORD GrantedAccess,
                                             LPDWORD AccessStatusList,
             LPBOOL pfGenerateOnClose
    );





__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
             LPSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
             PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
             LPBOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
         LPCSTR SubsystemName,
         LPCSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );





__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
            PACL pAcl,
            DWORD dwAceRevision,
            DWORD AceFlags,
            UCHAR AceType,
            DWORD AccessMask,
            PSID pSid,
                           PWCHAR ConditionStr,
          DWORD *ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
         LPCSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
          LPCSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
                                                         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
          LPDWORD lpnLengthNeeded
    );





__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
                HANDLE hDirectory,
                                                           LPVOID lpBuffer,
                DWORD nBufferLength,
                BOOL bWatchSubtree,
                DWORD dwNotifyFilter,
                LPDWORD lpBytesReturned,
                LPOVERLAPPED lpOverlapped,
                LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );




__declspec(dllimport)

LPVOID
__stdcall
MapViewOfFileExNuma(
             HANDLE hFileMappingObject,
             DWORD dwDesiredAccess,
             DWORD dwFileOffsetHigh,
             DWORD dwFileOffsetLow,
             SIZE_T dwNumberOfBytesToMap,
             LPVOID lpBaseAddress,
             DWORD nndPreferred
    );



__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
             const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
             LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
             FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
             LPCSTR lpsz,
             UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
             LPCWSTR lpsz,
             UINT_PTR ucchMax
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidA(
             LPCSTR lpSystemName,
         PSID Sid,
                                                LPSTR Name,
             LPDWORD cchName,
                                                                                LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidW(
             LPCWSTR lpSystemName,
         PSID Sid,
                                                LPWSTR Name,
             LPDWORD cchName,
                                                                                LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameA(
             LPCSTR lpSystemName,
             LPCSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
#line 6510 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalA(
             LPCSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountNameLocalW(
             LPCWSTR lpAccountName,
                                              PSID Sid,
             LPDWORD cbSid,
                                                                                LPWSTR ReferencedDomainName,
             LPDWORD cchReferencedDomainName,
             PSID_NAME_USE peUse
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalA(
         PSID Sid,
                                                LPSTR Name,
             LPDWORD cchName,
                                                                                LPSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupAccountSidLocalW(
         PSID Sid,
                                                LPWSTR Name,
             LPDWORD cchName,
                                                                                LPWSTR ReferencedDomainName,
            LPDWORD cchReferencedDomainName,
          PSID_NAME_USE peUse
    );
#line 6590 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
             PLUID lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
             PLUID lpLuid
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameA(
             LPCSTR lpSystemName,
             PLUID lpLuid,
                                                LPSTR lpName,
             LPDWORD cchName
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeNameW(
             LPCWSTR lpSystemName,
             PLUID lpLuid,
                                                LPWSTR lpName,
             LPDWORD cchName
    );






__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameA(
             LPCSTR lpSystemName,
             LPCSTR lpName,
                                                              LPSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );
__declspec(dllimport)
                           BOOL
__stdcall
LookupPrivilegeDisplayNameW(
             LPCWSTR lpSystemName,
             LPCWSTR lpName,
                                                              LPWSTR lpDisplayName,
             LPDWORD cchDisplayName,
             LPDWORD lpLanguageId
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
          LPCSTR lpDef,
          LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
          LPCWSTR lpDef,
          LPDCB lpDCB
    );






__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
          LPCSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
          LPCWSTR lpDef,
          LPDCB lpDCB,
          LPCOMMTIMEOUTS lpCommTimeouts
    );






__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
             LPCSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
             LPCWSTR lpszName,
             HWND hWnd,
             LPCOMMCONFIG lpCC
    );






__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
            LPCSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
            LPCWSTR lpszName,
                                                LPCOMMCONFIG lpCC,
            LPDWORD lpdwSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
         LPCSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
         LPCWSTR lpszName,
                             LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
#line 6776 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameA (
                                            LPSTR lpBuffer,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
GetComputerNameW (
                                            LPWSTR lpBuffer,
            LPDWORD nSize
    );






__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
         LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
         LPCWSTR lpComputerName
    );
#line 6819 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA (
         COMPUTER_NAME_FORMAT NameType,
         LPCSTR lpBuffer
    );





__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameA (
            LPCSTR Hostname,
                                            LPSTR ComputerName,
            LPDWORD nSize
    );
__declspec(dllimport)

BOOL
__stdcall
DnsHostnameToComputerNameW (
            LPCWSTR Hostname,
                                            LPWSTR ComputerName,
            LPDWORD nSize
    );
#line 6857 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
                                                LPSTR lpBuffer,
            LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
                                                LPWSTR lpBuffer,
            LPDWORD pcbBuffer
    );
#line 6905 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
                LPCSTR lpszUsername,
                LPCSTR lpszDomain,
                LPCSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
                LPCWSTR lpszUsername,
                LPCWSTR lpszDomain,
                LPCWSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
             PHANDLE phToken
    );






__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                    LPCSTR lpszUsername,
                    LPCSTR lpszDomain,
                    LPCSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                    LPCWSTR lpszUsername,
                    LPCWSTR lpszDomain,
                    LPCWSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                 PHANDLE phToken,
                 PSID *ppLogonSid,
                                                          PVOID *ppProfileBuffer,
                    LPDWORD pdwProfileLength,
                    PQUOTA_LIMITS pQuotaLimits
    );
#line 6975 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
                HANDLE hToken,
                LPCSTR lpApplicationName,
                LPSTR lpCommandLine,
                LPSECURITY_ATTRIBUTES lpProcessAttributes,
                LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCSTR lpCurrentDirectory,
                LPSTARTUPINFOA lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
    );
#line 7005 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
                      BOOL
__stdcall
CreateProcessWithLogonW(
                LPCWSTR lpUsername,
                LPCWSTR lpDomain,
                LPCWSTR lpPassword,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
                      BOOL
__stdcall
CreateProcessWithTokenW(
                HANDLE hToken,
                DWORD dwLogonFlags,
                LPCWSTR lpApplicationName,
                LPWSTR lpCommandLine,
                DWORD dwCreationFlags,
                LPVOID lpEnvironment,
                LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
                LPPROCESS_INFORMATION lpProcessInformation
      );



__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
         HANDLE TokenHandle
    );







__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
             PHANDLE phNewWaitObject,
                HANDLE hObject,
                WAITORTIMERCALLBACK Callback,
                PVOID Context,
                ULONG dwMilliseconds,
                ULONG dwFlags
    );

__declspec(dllimport)

BOOL
__stdcall
UnregisterWait(
         HANDLE WaitHandle
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
         HANDLE FileHandle,
         LPOVERLAPPED_COMPLETION_ROUTINE Function,
         ULONG Flags
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
             HANDLE TimerQueue,
             WAITORTIMERCALLBACK Callback,
             PVOID Parameter,
             DWORD DueTime,
             DWORD Period,
             BOOL PreferIo
    );

__declspec(dllimport)

BOOL
__stdcall
CancelTimerQueueTimer(
             HANDLE TimerQueue,
             HANDLE Timer
    );

__declspec(dllimport)

BOOL
__stdcall
DeleteTimerQueue(
         HANDLE TimerQueue
    );





__forceinline
void
InitializeThreadpoolEnvironment(
          PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
            PTP_CALLBACK_ENVIRON pcbe,
            PTP_POOL ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
             PTP_CALLBACK_ENVIRON pcbe,
             PTP_CLEANUP_GROUP ptpcg,
             PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
            PTP_CALLBACK_ENVIRON pcbe,
            PVOID mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
            PTP_CALLBACK_ENVIRON pcbe,
            TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}



__forceinline
void
SetThreadpoolCallbackPersistent(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}

__forceinline
void
DestroyThreadpoolEnvironment(
            PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}







__declspec(dllimport)

HANDLE
__stdcall
CreatePrivateNamespaceA(
             LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );







__declspec(dllimport)

HANDLE
__stdcall
OpenPrivateNamespaceA(
             LPVOID lpBoundaryDescriptor,
             LPCSTR lpAliasPrefix
    );
#line 7237 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)

HANDLE
__stdcall
CreateBoundaryDescriptorA(
         LPCSTR Name,
         ULONG Flags
    );
#line 7253 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
            HANDLE * BoundaryDescriptor,
         PSID IntegrityLabel
    );
#line 7281 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;

typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;






__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
          LPHW_PROFILE_INFOA lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
          LPHW_PROFILE_INFOW lpHwProfileInfo
    );







__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
            LPOSVERSIONINFOEXA lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
            LPOSVERSIONINFOEXW lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
#line 7349 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\winerror.h"
#line 26219 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\winerror.h"
__forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}
#line 7349 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
extern "C" {
#line 47 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

__declspec(dllimport)

BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpUniversalTime,
          LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)

BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
             const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpLocalTime,
          LPSYSTEMTIME lpUniversalTime
    );


__declspec(dllimport)

BOOL
__stdcall
FileTimeToSystemTime(
         const FILETIME * lpFileTime,
          LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)

BOOL
__stdcall
SystemTimeToFileTime(
         const SYSTEMTIME * lpSystemTime,
          LPFILETIME lpFileTime
    );


__declspec(dllimport)

DWORD
__stdcall
GetTimeZoneInformation(
          LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );
#line 127 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
         const TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );





__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
         const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );
#line 158 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
__declspec(dllimport)

DWORD
__stdcall
GetDynamicTimeZoneInformation(
          PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );
#line 173 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
BOOL
__stdcall
GetTimeZoneInformationForYear(
         USHORT wYear,
             PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
          LPTIME_ZONE_INFORMATION ptzi
    );
#line 189 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
__declspec(dllimport)

DWORD
__stdcall
EnumDynamicTimeZoneInformation(
         const DWORD dwIndex,
          PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
    );


__declspec(dllimport)

DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
         const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
          LPDWORD FirstYear,
          LPDWORD LastYear
    );


__declspec(dllimport)

BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
             const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpUniversalTime,
          LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)

BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
             const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
         const SYSTEMTIME * lpLocalTime,
          LPSYSTEMTIME lpUniversalTime
    );
#line 240 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timezoneapi.h"
}
#line 7350 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
#line 7383 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
          LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
         BOOL fSuspend,
         BOOL fForce
    );
#line 7414 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
                              PVOID *VirtualAddresses,
         ULONG_PTR NumberOfPages,
                                  PULONG_PTR PageArray
    );

__declspec(dllimport)

HANDLE
__stdcall
CreateJobObjectA(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
CreateJobObjectW(
             LPSECURITY_ATTRIBUTES lpJobAttributes,
             LPCWSTR lpName
    );






__declspec(dllimport)

HANDLE
__stdcall
OpenJobObjectA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)

HANDLE
__stdcall
OpenJobObjectW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );






__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
         HANDLE hJob,
         HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
         HANDLE hJob,
         UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
              HANDLE hJob,
              JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                                         LPVOID lpJobObjectInformation,
              DWORD cbJobObjectInformationLength,
              LPDWORD lpReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
         HANDLE hJob,
         JOBOBJECTINFOCLASS JobObjectInformationClass,
                                                   LPVOID lpJobObjectInformation,
         DWORD cbJobObjectInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
         ULONG NumJob,
                       PJOB_SET_ARRAY UserJobSet,
         ULONG Flags);

__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeA(
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );




__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
            HANDLE hFindVolume,
                                  LPSTR lpszVolumeName,
            DWORD cchBufferLength
    );




__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointA(
         LPCSTR lpszRootPathName,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointW(
         LPCWSTR lpszRootPathName,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
         HANDLE hFindVolumeMountPoint,
                                  LPSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
         HANDLE hFindVolumeMountPoint,
                                  LPWSTR lpszVolumeMountPoint,
         DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
         HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
         LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
         LPCWSTR lpszVolumeMountPoint,
         LPCWSTR lpszVolumeName
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
         LPCSTR lpszVolumeMountPoint,
                                  LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );




__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
         LPCSTR lpszFileName,
                                  LPSTR lpszVolumePathName,
         DWORD cchBufferLength
    );
#line 7646 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
          LPCSTR lpszVolumeName,
                                                                                          LPCH lpszVolumePathNames,
          DWORD cchBufferLength,
          PDWORD lpcchReturnLength
    );
#line 7673 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct tagACTCTXA {
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;

typedef ACTCTXW ACTCTX;
typedef PACTCTXW PACTCTX;





typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;

typedef PCACTCTXW PCACTCTX;






__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxA(
         PCACTCTXA pActCtx
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxW(
         PCACTCTXW pActCtx
    );






__declspec(dllimport)
void
__stdcall
AddRefActCtx(
            HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
            HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
            HANDLE hActCtx
    );



__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
                HANDLE hActCtx,
            ULONG_PTR *lpCookie
    );





__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
         DWORD dwFlags,
         ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
             HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;
#line 7829 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );

__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               LPCWSTR lpStringToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );






__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
               DWORD dwFlags,
               const GUID *lpExtensionGuid,
               ULONG ulSectionId,
               const GUID *lpGuidToFind,
               PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;
#line 7919 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );

typedef BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
              DWORD dwFlags,
              HANDLE hActCtx,
              PVOID pvSubInstance,
              ULONG ulInfoClass,
                                                               PVOID pvBuffer,
              SIZE_T cbBuffer,
              SIZE_T *pcbWrittenOrRequired
    );






__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );





__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
         WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
         WORD GroupNumber
    );







__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
          UCHAR Processor,
          PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
          HANDLE hFile,
          PUSHORT NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
          PPROCESSOR_NUMBER Processor,
          PUSHORT NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
          UCHAR Node,
          PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
          UCHAR Node,
          PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
          USHORT Node,
          PULONGLONG AvailableBytes
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
          ULONG ProximityId,
          PUCHAR NodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
          ULONG ProximityId,
          PUSHORT NodeNumber
    );






typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);
#line 8111 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
          APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
              PVOID pvParameter,
         DWORD dwPingInterval,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
             PCWSTR pwzCommandline,
         DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
          HANDLE hProcess,
          APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
                                  PVOID* ppvParameter,
              PDWORD pdwPingInterval,
              PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
         HANDLE hProcess,
                                PWSTR pwzCommandline,
            PDWORD pcchSize,
              PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
          PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
         BOOL bSuccess
    );
#line 8184 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileW;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;





typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;
#line 8317 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;




typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;




typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;
#line 8391 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
typedef struct _FILE_REMOTE_PROTOCOL_INFO
{

    USHORT StructureVersion;
    USHORT StructureSize;

    ULONG Protocol;


    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;


    ULONG Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;
#line 8420 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
    union {

        struct {

            struct {
                ULONG Capabilities;
            } Server;

            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;

        } Smb2;

        ULONG Reserved[16];

    } ProtocolSpecific;



} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
          HANDLE hFile,
          FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
                                     LPVOID lpFileInformation,
          DWORD dwBufferSize
);







typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;
    FILE_ID_TYPE Type;
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;

        FILE_ID_128 ExtendedFileId;

    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)
HANDLE
__stdcall
OpenFileById (
             HANDLE hVolumeHint,
             LPFILE_ID_DESCRIPTOR lpFileId,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
             LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwFlagsAndAttributes
    );
#line 8508 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
         LPCSTR lpSymlinkFileName,
         LPCSTR lpTargetFileName,
         DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
         LPCWSTR lpSymlinkFileName,
         LPCWSTR lpTargetFileName,
         DWORD dwFlags
    );






__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
             LPCSTR lpSymlinkFileName,
             LPCSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
             LPCWSTR lpSymlinkFileName,
             LPCWSTR lpTargetFileName,
             DWORD dwFlags,
             HANDLE hTransaction
    );
#line 8559 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
                  DWORD dwFlags,
                  HANDLE hActCtx,
                  PCWSTR settingsNameSpace,
                  PCWSTR settingName,
                                                               PWSTR pvBuffer,
              SIZE_T dwBuffer,
              SIZE_T *pdwWrittenOrRequired
    );





__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
         PWSTR TargetPartition,
         PWSTR SparePartition,
         ULONG Flags
    );






__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
                    PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );
#line 8615 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
CopyContext(
            PCONTEXT Destination,
         DWORD ContextFlags,
         PCONTEXT Source
    );
#line 8631 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
InitializeContext(
                                           PVOID Buffer,
         DWORD ContextFlags,
          PCONTEXT* Context,
            PDWORD ContextLength
    );
#line 8648 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetXStateFeaturesMask(
         PCONTEXT Context,
          PDWORD64 FeatureMask
    );


__declspec(dllimport)
PVOID
__stdcall
LocateXStateFeature(
         PCONTEXT Context,
         DWORD FeatureId,
              PDWORD Length
    );
#line 8681 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
BOOL
__stdcall
SetXStateFeaturesMask(
            PCONTEXT Context,
         DWORD64 FeatureMask
    );
#line 8701 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
         HANDLE ThreadHandle,
         DWORD Flags,
         DWORD64 HardwareCounters,
          HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
         HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
         HANDLE ThreadHandle,
          PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
         HANDLE PerformanceDataHandle,
         DWORD Flags,
          PPERFORMANCE_DATA PerformanceData
    );
#line 8749 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
}




#pragma warning(pop)
#line 8811 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winbase.h"
extern "C++" {

__forceinline
unsigned
_InterlockedIncrement(
                                  unsigned volatile *Addend
    )
{
    return (unsigned) _InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedIncrement(
                                  unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedIncrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedIncrement(
                                  unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedIncrement64((volatile long long*) Addend);
}



__forceinline
unsigned
_InterlockedDecrement(
                                  unsigned volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
_InterlockedDecrement(
                                  unsigned long volatile *Addend
    )
{
    return (unsigned long) _InterlockedDecrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
_InterlockedDecrement(
                                  unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) _InterlockedDecrement64((volatile long long*) Addend);
}





__forceinline
unsigned
_InterlockedExchange(
                                  unsigned volatile *Target,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
_InterlockedExchange(
                                  unsigned long volatile *Target,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchange(
                                  unsigned __int64 volatile *Target,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchange64((volatile long long*) Target, (long long) Value);
}



__forceinline
unsigned
_InterlockedExchangeAdd(
                                  unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
                                  unsigned volatile *Addend,
         unsigned Value
    )
{
    return (unsigned) _InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}

__forceinline
unsigned long
_InterlockedExchangeAdd(
                                  unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
                                  unsigned long volatile *Addend,
         unsigned long Value
    )
{
    return (unsigned long) _InterlockedExchangeAdd((volatile long*) Addend, - (long) Value);
}



__forceinline
unsigned __int64
_InterlockedExchangeAdd(
                                  unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend, (long long) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
                                  unsigned __int64 volatile *Addend,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedExchangeAdd64((volatile long long*) Addend, - (long long) Value);
}



__forceinline
unsigned
_InterlockedCompareExchange(
                                  unsigned volatile *Destination,
         unsigned Exchange,
         unsigned Comperand
    )
{
    return (unsigned) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
_InterlockedCompareExchange(
                                  unsigned long volatile *Destination,
         unsigned long Exchange,
         unsigned long Comperand
    )
{
    return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
_InterlockedCompareExchange(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Exchange,
         unsigned __int64 Comperand
    )
{
    return (unsigned __int64) _InterlockedCompareExchange64((volatile long long*) Destination, (long long) Exchange, (long long) Comperand);
}

__forceinline
unsigned __int64
_InterlockedAnd(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedAnd64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedOr(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedOr64((volatile long long*) Destination, (long long) Value);
}

__forceinline
unsigned __int64
_InterlockedXor(
                                  unsigned __int64 volatile *Destination,
         unsigned __int64 Value
    )
{
    return (unsigned __int64) _InterlockedXor64((volatile long long*) Destination, (long long) Value);
}





}
#line 165 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#line 18 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#pragma warning(push)
#pragma warning(disable: 4201)
#line 48 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
extern "C" {
#line 289 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 421 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _PSINJECTDATA {

    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;



} PSINJECTDATA, *PPSINJECTDATA;
#line 509 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
#line 586 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagXFORM
  {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM, *PXFORM, *LPXFORM;


typedef struct tagBITMAP
  {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP, *PBITMAP, *NPBITMAP, *LPBITMAP;





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 611 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"





typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE, *NPRGBTRIPLE, *LPRGBTRIPLE;





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 625 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"





typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD;







typedef RGBQUAD * LPRGBQUAD;
#line 668 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef LONG LCSCSTYPE;



typedef LONG LCSGAMUTMATCH;
#line 700 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;







typedef CIEXYZ *LPCIEXYZ;







typedef struct tagICEXYZTRIPLE
{
        CIEXYZ ciexyzRed;
        CIEXYZ ciexyzGreen;
        CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;







typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
#line 753 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;

typedef LOGCOLORSPACEW LOGCOLORSPACE;
typedef LPLOGCOLORSPACEW LPLOGCOLORSPACE;
#line 794 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize;
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;







typedef struct tagBITMAPINFOHEADER{
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;
#line 830 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct {
        DWORD bV4Size;
        LONG bV4Width;
        LONG bV4Height;
        WORD bV4Planes;
        WORD bV4BitCount;
        DWORD bV4V4Compression;
        DWORD bV4SizeImage;
        LONG bV4XPelsPerMeter;
        LONG bV4YPelsPerMeter;
        DWORD bV4ClrUsed;
        DWORD bV4ClrImportant;
        DWORD bV4RedMask;
        DWORD bV4GreenMask;
        DWORD bV4BlueMask;
        DWORD bV4AlphaMask;
        DWORD bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD bV4GammaRed;
        DWORD bV4GammaGreen;
        DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
#line 861 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct {
        DWORD bV5Size;
        LONG bV5Width;
        LONG bV5Height;
        WORD bV5Planes;
        WORD bV5BitCount;
        DWORD bV5Compression;
        DWORD bV5SizeImage;
        LONG bV5XPelsPerMeter;
        LONG bV5YPelsPerMeter;
        DWORD bV5ClrUsed;
        DWORD bV5ClrImportant;
        DWORD bV5RedMask;
        DWORD bV5GreenMask;
        DWORD bV5BlueMask;
        DWORD bV5AlphaMask;
        DWORD bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD bV5GammaRed;
        DWORD bV5GammaGreen;
        DWORD bV5GammaBlue;
        DWORD bV5Intent;
        DWORD bV5ProfileData;
        DWORD bV5ProfileSize;
        DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;
#line 909 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;







typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
#line 928 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"





typedef struct tagBITMAPFILEHEADER {
        WORD bfType;
        DWORD bfSize;
        WORD bfReserved1;
        WORD bfReserved2;
        DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 944 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#line 954 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;
#line 980 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
#line 1000 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagHANDLETABLE
  {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;







typedef struct tagMETARECORD *PMETARECORD;







typedef struct tagMETARECORD *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT, *LPMETAFILEPICT;





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
#line 1039 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"





typedef struct tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETAHEADER *LPMETAHEADER;





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 1060 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"






typedef struct tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;

    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;

    WORD sReserved;
    DWORD nDescription;

    DWORD offDescription;

    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;

    DWORD cbPixelFormat;

    DWORD offPixelFormat;

    DWORD bOpenGL;



    SIZEL szlMicrometers;


} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;
#line 1128 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
    typedef WCHAR BCHAR;
#line 1138 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
#line 1138 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"





typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;

typedef TEXTMETRICW TEXTMETRIC;
typedef PTEXTMETRICW PTEXTMETRIC;
typedef NPTEXTMETRICW NPTEXTMETRIC;
typedef LPTEXTMETRICW LPTEXTMETRIC;
#line 1204 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 1204 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#line 1221 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
#line 1221 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"





typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;

typedef NEWTEXTMETRICW NEWTEXTMETRIC;
typedef PNEWTEXTMETRICW PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICW LPNEWTEXTMETRIC;
#line 1295 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 1295 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"







typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
}NEWTEXTMETRICEXW;

typedef NEWTEXTMETRICEXW NEWTEXTMETRICEX;
#line 1329 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagPELARRAY
  {
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
  } PELARRAY, *PPELARRAY, *NPPELARRAY, *LPPELARRAY;
#line 1345 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagLOGBRUSH
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32, *NPLOGBRUSH32, *LPLOGBRUSH32;







typedef LOGBRUSH PATTERN;
typedef PATTERN *PPATTERN;
typedef PATTERN *NPPATTERN;
typedef PATTERN *LPPATTERN;
#line 1377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagLOGPEN
  {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
  } LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;







typedef struct tagEXTLOGPEN {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;







typedef struct tagEXTLOGPEN32 {
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32, *NPEXTLOGPEN32, *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;





typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
                                    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;






typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;

typedef LOGFONTW LOGFONT;
typedef PLOGFONTW PLOGFONT;
typedef NPLOGFONTW NPLOGFONT;
typedef LPLOGFONTW LPLOGFONT;
#line 1495 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;

typedef ENUMLOGFONTW ENUMLOGFONT;
typedef LPENUMLOGFONTW LPENUMLOGFONT;






typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;

typedef ENUMLOGFONTEXW ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXW LPENUMLOGFONTEX;
#line 1673 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, * LPPANOSE;
#line 1799 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagEXTLOGFONTA {
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *NPEXTLOGFONTA, *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *NPEXTLOGFONTW, *LPEXTLOGFONTW;

typedef EXTLOGFONTW EXTLOGFONT;
typedef PEXTLOGFONTW PEXTLOGFONT;
typedef NPEXTLOGFONTW NPEXTLOGFONT;
typedef LPEXTLOGFONTW LPEXTLOGFONT;
#line 2185 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {

      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };

      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;

    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;

    DWORD dmPanningWidth;
    DWORD dmPanningHeight;


} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;

typedef DEVMODEW DEVMODE;
typedef PDEVMODEW PDEVMODE;
typedef NPDEVMODEW NPDEVMODE;
typedef LPDEVMODEW LPDEVMODE;
#line 2720 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _DISPLAY_DEVICEA {
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;

typedef DISPLAY_DEVICEW DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEW PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;
#line 2785 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64 pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;

    union
    {
        struct
        {
            UINT32 videoStandard : 16;


            UINT32 vSyncFreqDivider : 6;

            UINT32 reserved : 10;
        } AdditionalSignalInfo;

        UINT32 videoStandard;
    };


    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;



typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    UINT32 modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
#line 2957 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
} DISPLAYCONFIG_PATH_INFO;







typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;


typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;
#line 2998 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32 size;
    LUID adapterId;
    UINT32 id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;







typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32 friendlyNameFromEdid : 1;
            UINT32 friendlyNameForced : 1;
            UINT32 edidIdsValid : 1;
            UINT32 reserved : 29;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    UINT16 edidManufactureId;
    UINT16 edidProductCodeId;
    UINT32 connectorInstance;
    WCHAR monitorFriendlyDeviceName[64];
    WCHAR monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
#line 3121 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;
#line 3145 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _ABC {
    int abcA;
    UINT abcB;
    int abcC;
} ABC, *PABC, *NPABC, *LPABC;

typedef struct _ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
} ABCFLOAT, *PABCFLOAT, *NPABCFLOAT, *LPABCFLOAT;
#line 3169 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _OUTLINETEXTMETRICA {
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *NPOUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
     int otmsCharSlopeRise;
     int otmsCharSlopeRun;
     int otmItalicAngle;
    UINT otmEMSquare;
     int otmAscent;
     int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
     int otmMacAscent;
     int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
     int otmsStrikeoutPosition;
     int otmsUnderscoreSize;
     int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *NPOUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;

typedef OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;
#line 3261 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *NPPOLYTEXTA, *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *NPPOLYTEXTW, *LPPOLYTEXTW;

typedef POLYTEXTW POLYTEXT;
typedef PPOLYTEXTW PPOLYTEXT;
typedef NPPOLYTEXTW NPPOLYTEXT;
typedef LPPOLYTEXTW LPPOLYTEXT;
#line 3299 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _FIXED {

    WORD fract;
    short value;




} FIXED;


typedef struct _MAT2 {
     FIXED eM11;
     FIXED eM12;
     FIXED eM21;
     FIXED eM22;
} MAT2, *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;
#line 3357 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;
#line 3427 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagGCP_RESULTSA
    {
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT *lpOrder;
    int *lpDx;
    int *lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;

typedef GCP_RESULTSW GCP_RESULTS;
typedef LPGCP_RESULTSW LPGCP_RESULTS;
#line 3466 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct _RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;
#line 3483 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;
#line 3555 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
#line 3572 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;

typedef FONTENUMPROCW FONTENUMPROC;




typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);
#line 3603 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) int __stdcall AddFontResourceA( LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW( LPCWSTR);






 __declspec(dllimport) BOOL __stdcall AnimatePalette( HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY * ppe);
 __declspec(dllimport) BOOL __stdcall Arc( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
 __declspec(dllimport) BOOL __stdcall BitBlt( HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
__declspec(dllimport) BOOL __stdcall CancelDC( HDC hdc);
 __declspec(dllimport) BOOL __stdcall Chord( HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
__declspec(dllimport) int __stdcall ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE __stdcall CloseMetaFile( HDC hdc);
__declspec(dllimport) int __stdcall CombineRgn( HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA( HMETAFILE, LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW( HMETAFILE, LPCWSTR);





 __declspec(dllimport) HBITMAP __stdcall CreateBitmap( int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void *lpBits);
 __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect( const BITMAP *pbm);
 __declspec(dllimport) HBRUSH __stdcall CreateBrushIndirect( const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap( HDC hdc, int cx, int cy);
__declspec(dllimport) HDC __stdcall CreateCompatibleDC( HDC hdc);
__declspec(dllimport) HDC __stdcall CreateDCA( LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateDCW( LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap( HDC hdc, const BITMAPINFOHEADER *pbmih, DWORD flInit, const void *pjBits, const BITMAPINFO *pbmi, UINT iUsage);
__declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrush( HGLOBAL h, UINT iUsage);
 __declspec(dllimport) HBRUSH __stdcall CreateDIBPatternBrushPt( const void *lpPackedDIB, UINT iUsage);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateEllipticRgnIndirect( const RECT *lprect);
 __declspec(dllimport) HFONT __stdcall CreateFontIndirectA( const LOGFONTA *lplf);
 __declspec(dllimport) HFONT __stdcall CreateFontIndirectW( const LOGFONTW *lplf);





__declspec(dllimport) HFONT __stdcall CreateFontA( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
__declspec(dllimport) HFONT __stdcall CreateFontW( int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
                                  DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
                                  DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);






__declspec(dllimport) HBRUSH __stdcall CreateHatchBrush( int iHatch, COLORREF color);
__declspec(dllimport) HDC __stdcall CreateICA( LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA * pdm);
__declspec(dllimport) HDC __stdcall CreateICW( LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW * pdm);





__declspec(dllimport) HDC __stdcall CreateMetaFileA( LPCSTR pszFile);
__declspec(dllimport) HDC __stdcall CreateMetaFileW( LPCWSTR pszFile);





 __declspec(dllimport) HPALETTE __stdcall CreatePalette( const LOGPALETTE * plpal);
__declspec(dllimport) HPEN __stdcall CreatePen( int iStyle, int cWidth, COLORREF color);
 __declspec(dllimport) HPEN __stdcall CreatePenIndirect( const LOGPEN *plpen);
__declspec(dllimport) HRGN __stdcall CreatePolyPolygonRgn( const POINT *pptl,
                                                                  const INT *pc,
                                                     int cPoly,
                                                     int iMode);
 __declspec(dllimport) HBRUSH __stdcall CreatePatternBrush( HBITMAP hbm);
__declspec(dllimport) HRGN __stdcall CreateRectRgn( int x1, int y1, int x2, int y2);
__declspec(dllimport) HRGN __stdcall CreateRectRgnIndirect( const RECT *lprect);
__declspec(dllimport) HRGN __stdcall CreateRoundRectRgn( int x1, int y1, int x2, int y2, int w, int h);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceA( DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
__declspec(dllimport) BOOL __stdcall CreateScalableFontResourceW( DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);





__declspec(dllimport) HBRUSH __stdcall CreateSolidBrush( COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC( HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile( HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall DeleteObject( HGDIOBJ ho);
__declspec(dllimport) int __stdcall DescribePixelFormat( HDC hdc,
                                                 int iPixelFormat,
                                                 UINT nBytes,
                                                                           LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
#line 3797 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                        LPCSTR pDevice,
                        LPCSTR pPort,
                        WORD fwCapability,
                                         LPSTR pOutput,
                        const DEVMODEA *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                        LPCWSTR pDevice,
                        LPCWSTR pPort,
                        WORD fwCapability,
                                         LPWSTR pOutput,
                        const DEVMODEW *pDevMode
    );






__declspec(dllimport) int __stdcall DrawEscape( HDC hdc,
                                         int iEscape,
                                         int cjIn,
                                                               LPCSTR lpIn);

 __declspec(dllimport) BOOL __stdcall Ellipse( HDC hdc, int left, int top, int right, int bottom);


__declspec(dllimport) int __stdcall EnumFontFamiliesExA( HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
__declspec(dllimport) int __stdcall EnumFontFamiliesExW( HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);







__declspec(dllimport) int __stdcall EnumFontFamiliesA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontFamiliesW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);





__declspec(dllimport) int __stdcall EnumFontsA( HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
__declspec(dllimport) int __stdcall EnumFontsW( HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);







__declspec(dllimport) int __stdcall EnumObjects( HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);





__declspec(dllimport) BOOL __stdcall EqualRgn( HRGN hrgn1, HRGN hrgn2);
 __declspec(dllimport) int __stdcall Escape( HDC hdc,
                                     int iEscape,
                                     int cjIn,
                                                           LPCSTR pvIn,
                                          LPVOID pvOut);
__declspec(dllimport) int __stdcall ExtEscape( HDC hdc,
                                         int iEscape,
                                         int cjInput,
                                                                  LPCSTR lpInData,
                                         int cjOutput,
                                                                     LPSTR lpOutData);
 __declspec(dllimport) int __stdcall ExcludeClipRect( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) HRGN __stdcall ExtCreateRegion( const XFORM * lpx, DWORD nCount, const RGNDATA * lpData);
 __declspec(dllimport) BOOL __stdcall ExtFloodFill( HDC hdc, int x, int y, COLORREF color, UINT type);
 __declspec(dllimport) BOOL __stdcall FillRgn( HDC hdc, HRGN hrgn, HBRUSH hbr);
 __declspec(dllimport) BOOL __stdcall FloodFill( HDC hdc, int x, int y, COLORREF color);
 __declspec(dllimport) BOOL __stdcall FrameRgn( HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
__declspec(dllimport) int __stdcall GetROP2( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor( HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor( HDC hdc);


__declspec(dllimport)
int
__stdcall
GetBkMode(
         HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
         HBITMAP hbit,
         LONG cb,
                           LPVOID lpvBits
    );

__declspec(dllimport) BOOL __stdcall GetBitmapDimensionEx( HBITMAP hbit, LPSIZE lpsize);
__declspec(dllimport) UINT __stdcall GetBoundsRect( HDC hdc, LPRECT lprect, UINT flags);

__declspec(dllimport) BOOL __stdcall GetBrushOrgEx( HDC hdc, LPPOINT lppt);

__declspec(dllimport) BOOL __stdcall GetCharWidthA( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthW( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidth32A( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidth32W( HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);





__declspec(dllimport) BOOL __stdcall GetCharWidthFloatA( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
__declspec(dllimport) BOOL __stdcall GetCharWidthFloatW( HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsA( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsW( HDC hdc,
                                                 UINT wFirst,
                                                 UINT wLast,
                                                                             LPABC lpABC);






__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatA( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
__declspec(dllimport) BOOL __stdcall GetCharABCWidthsFloatW( HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);





__declspec(dllimport) int __stdcall GetClipBox( HDC hdc, LPRECT lprect);
__declspec(dllimport) int __stdcall GetClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall GetMetaRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject( HDC hdc, UINT type);
__declspec(dllimport) BOOL __stdcall GetCurrentPositionEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) int __stdcall GetDeviceCaps( HDC hdc, int index);
__declspec(dllimport) int __stdcall GetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines,
              LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);


__declspec(dllimport) DWORD __stdcall GetFontData ( HDC hdc,
                                             DWORD dwTable,
                                             DWORD dwOffset,
                                                                                    PVOID pvBuffer,
                                             DWORD cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW( HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                  LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                                             LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );






__declspec(dllimport) int __stdcall GetGraphicsMode( HDC hdc);
__declspec(dllimport) int __stdcall GetMapMode( HDC hdc);
__declspec(dllimport) UINT __stdcall GetMetaFileBitsEx( HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileA( LPCSTR lpName);
__declspec(dllimport) HMETAFILE __stdcall GetMetaFileW( LPCWSTR lpName);





__declspec(dllimport) COLORREF __stdcall GetNearestColor( HDC hdc, COLORREF color);
__declspec(dllimport) UINT __stdcall GetNearestPaletteIndex( HPALETTE h, COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType( HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW( HDC hdc,
                                                     UINT cjCopy,
                                                                               LPOUTLINETEXTMETRICW potm);
#line 4023 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) UINT __stdcall GetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                                 LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall GetPixelFormat( HDC hdc);
__declspec(dllimport) int __stdcall GetPolyFillMode( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetRasterizerCaps( LPRASTERIZER_STATUS lpraststat,
                                                 UINT cjBytes);

__declspec(dllimport) int __stdcall GetRandomRgn ( HDC hdc, HRGN hrgn, INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData( HRGN hrgn,
                                             DWORD nCount,
                                                                                  LPRGNDATA lpRgnData);
__declspec(dllimport) int __stdcall GetRgnBox( HRGN hrgn, LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject( int i);
__declspec(dllimport) int __stdcall GetStretchBltMode( HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
         HDC hdc,
         UINT iStart,
         UINT cEntries,
                               LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT __stdcall GetSystemPaletteUse( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharacterExtra( HDC hdc);
__declspec(dllimport) UINT __stdcall GetTextAlign( HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor( HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE lpsz
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
         HDC hdc,
                  LPCSTR lpString,
         int c,
          LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
         HDC hdc,
                  LPCWSTR lpString,
         int c,
          LPSIZE psizl
    );






__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
         HDC hdc,
                          LPCSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
         HDC hdc,
                          LPCWSTR lpszString,
         int cchString,
         int nMaxExtent,
              LPINT lpnFit,
                                             LPINT lpnDx,
          LPSIZE lpSize
    );







__declspec(dllimport) int __stdcall GetTextCharset( HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo( HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo( DWORD *lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo( HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA( HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW( HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
#line 4155 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;
#line 4179 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges( HDC hdc, LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA( HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW( HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);





__declspec(dllimport) BOOL __stdcall GetTextExtentPointI( HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
__declspec(dllimport) BOOL __stdcall GetTextExtentExPointI ( HDC hdc,
                                                                       LPWORD lpwszString,
                                                     int cwchString,
                                                     int nMaxExtent,
                                                          LPINT lpnFit,
                                                                                         LPINT lpnDx,
                                                      LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL __stdcall GetCharWidthI( HDC hdc,
                                             UINT giFirst,
                                             UINT cgi,
                                                            LPWORD pgi,
                                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL __stdcall GetCharABCWidthsI( HDC hdc,
                                                 UINT giFirst,
                                                 UINT cgi,
                                                                LPWORD pgi,
                                                              LPABC pabc
                                        );
#line 4218 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

__declspec(dllimport) int __stdcall AddFontResourceExA( LPCSTR name, DWORD fl, PVOID res);
__declspec(dllimport) int __stdcall AddFontResourceExW( LPCWSTR name, DWORD fl, PVOID res);





__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA( LPCSTR name, DWORD fl, PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW( LPCWSTR name, DWORD fl, PVOID pdv);





__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx( PVOID pFileView,
                                                     DWORD cjSize,
                                                           PVOID pvResrved,
                                                     DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx( HANDLE h);
#line 4254 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
} AXISINFOA, *PAXISINFOA, *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
} AXISINFOW, *PAXISINFOW, *LPAXISINFOW;

typedef AXISINFOW AXISINFO;
typedef PAXISINFOW PAXISINFO;
typedef LPAXISINFOW LPAXISINFO;






typedef struct tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA, *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW, *LPAXESLISTW;

typedef AXESLISTW AXESLIST;
typedef PAXESLISTW PAXESLIST;
typedef LPAXESLISTW LPAXESLIST;
#line 4302 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;

typedef ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;






__declspec(dllimport) HFONT __stdcall CreateFontIndirectExA( const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT __stdcall CreateFontIndirectExW( const ENUMLOGFONTEXDVW *);







typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA, *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW, *LPENUMTEXTMETRICW;

typedef ENUMTEXTMETRICW ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICW PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICW LPENUMTEXTMETRIC;
#line 4360 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GetViewportExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetViewportOrgEx( HDC hdc, LPPOINT lppoint);
__declspec(dllimport) BOOL __stdcall GetWindowExtEx( HDC hdc, LPSIZE lpsize);
__declspec(dllimport) BOOL __stdcall GetWindowOrgEx( HDC hdc, LPPOINT lppoint);

 __declspec(dllimport) int __stdcall IntersectClipRect( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) BOOL __stdcall InvertRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA( int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
 __declspec(dllimport) BOOL __stdcall LineTo( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall MaskBlt( HDC hdcDest, int xDest, int yDest, int width, int height,
                   HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt( HDC hdcDest, const POINT * lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
                          int height, HBITMAP hbmMask, int xMask, int yMask);

 __declspec(dllimport) int __stdcall OffsetClipRgn( HDC hdc, int x, int y);
__declspec(dllimport) int __stdcall OffsetRgn( HRGN hrgn, int x, int y);
 __declspec(dllimport) BOOL __stdcall PatBlt( HDC hdc, int x, int y, int w, int h, DWORD rop);
 __declspec(dllimport) BOOL __stdcall Pie( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile( HDC hdc, HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall PaintRgn( HDC hdc, HRGN hrgn);
 __declspec(dllimport) BOOL __stdcall PolyPolygon( HDC hdc, const POINT *apt, const INT *asz, int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion( HRGN hrgn, int x, int y);
__declspec(dllimport) BOOL __stdcall PtVisible( HDC hdc, int x, int y);
__declspec(dllimport) BOOL __stdcall RectInRegion( HRGN hrgn, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible( HDC hdc, const RECT * lprect);
 __declspec(dllimport) BOOL __stdcall Rectangle( HDC hdc, int left, int top, int right, int bottom);
 __declspec(dllimport) BOOL __stdcall RestoreDC( HDC hdc, int nSavedDC);
 __declspec(dllimport) HDC __stdcall ResetDCA( HDC hdc, const DEVMODEA * lpdm);
 __declspec(dllimport) HDC __stdcall ResetDCW( HDC hdc, const DEVMODEW * lpdm);





 __declspec(dllimport) UINT __stdcall RealizePalette( HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA( LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW( LPCWSTR lpFileName);





 __declspec(dllimport) BOOL __stdcall RoundRect( HDC hdc, int left, int top, int right, int bottom, int width, int height);
 __declspec(dllimport) BOOL __stdcall ResizePalette( HPALETTE hpal, UINT n);

 __declspec(dllimport) int __stdcall SaveDC( HDC hdc);
 __declspec(dllimport) int __stdcall SelectClipRgn( HDC hdc, HRGN hrgn);
__declspec(dllimport) int __stdcall ExtSelectClipRgn( HDC hdc, HRGN hrgn, int mode);
__declspec(dllimport) int __stdcall SetMetaRgn( HDC hdc);
 __declspec(dllimport) HGDIOBJ __stdcall SelectObject( HDC hdc, HGDIOBJ h);
 __declspec(dllimport) HPALETTE __stdcall SelectPalette( HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
 __declspec(dllimport) COLORREF __stdcall SetBkColor( HDC hdc, COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor( HDC hdc, COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor( HDC hdc, COLORREF color);


 __declspec(dllimport) int __stdcall SetBkMode( HDC hdc, int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
         HBITMAP hbm,
         DWORD cb,
                         const void *pvBits);

__declspec(dllimport) UINT __stdcall SetBoundsRect( HDC hdc, const RECT * lprect, UINT flags);
__declspec(dllimport) int __stdcall SetDIBits( HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void *lpBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 __declspec(dllimport) int __stdcall SetDIBitsToDevice( HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
             int ySrc, UINT StartScan, UINT cLines, const void * lpvBits, const BITMAPINFO * lpbmi, UINT ColorUse);
 __declspec(dllimport) DWORD __stdcall SetMapperFlags( HDC hdc, DWORD flags);
__declspec(dllimport) int __stdcall SetGraphicsMode( HDC hdc, int iMode);
 __declspec(dllimport) int __stdcall SetMapMode( HDC hdc, int iMode);


 __declspec(dllimport) DWORD __stdcall SetLayout( HDC hdc, DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout( HDC hdc);


__declspec(dllimport) HMETAFILE __stdcall SetMetaFileBitsEx( UINT cbBuffer, const BYTE *lpData);
 __declspec(dllimport) UINT __stdcall SetPaletteEntries( HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                                 const PALETTEENTRY *pPalEntries);
 __declspec(dllimport) COLORREF __stdcall SetPixel( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelV( HDC hdc, int x, int y, COLORREF color);
__declspec(dllimport) BOOL __stdcall SetPixelFormat( HDC hdc, int format, const PIXELFORMATDESCRIPTOR * ppfd);
 __declspec(dllimport) int __stdcall SetPolyFillMode( HDC hdc, int mode);
 __declspec(dllimport) BOOL __stdcall StretchBlt( HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
__declspec(dllimport) BOOL __stdcall SetRectRgn( HRGN hrgn, int left, int top, int right, int bottom);
 __declspec(dllimport) int __stdcall StretchDIBits( HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
                 const void * lpBits, const BITMAPINFO * lpbmi, UINT iUsage, DWORD rop);
 __declspec(dllimport) int __stdcall SetROP2( HDC hdc, int rop2);
 __declspec(dllimport) int __stdcall SetStretchBltMode( HDC hdc, int mode);
__declspec(dllimport) UINT __stdcall SetSystemPaletteUse( HDC hdc, UINT use);
 __declspec(dllimport) int __stdcall SetTextCharacterExtra( HDC hdc, int extra);
 __declspec(dllimport) COLORREF __stdcall SetTextColor( HDC hdc, COLORREF color);
 __declspec(dllimport) UINT __stdcall SetTextAlign( HDC hdc, UINT align);
 __declspec(dllimport) BOOL __stdcall SetTextJustification( HDC hdc, int extra, int count);
__declspec(dllimport) BOOL __stdcall UpdateColors( HDC hdc);
#line 4511 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;







typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;







typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;
#line 4575 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall AlphaBlend(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
         HDC hdcDest,
         int xoriginDest,
         int yoriginDest,
         int wDest,
         int hDest,
         HDC hdcSrc,
         int xoriginSrc,
         int yoriginSrc,
         int wSrc,
         int hSrc,
         UINT crTransparent);
#line 4611 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport)
BOOL
__stdcall
GradientFill(
         HDC hdc,
                        PTRIVERTEX pVertex,
         ULONG nVertex,
         PVOID pMesh,
         ULONG nMesh,
         ULONG ulMode
    );
#line 4634 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall GdiAlphaBlend( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall GdiTransparentBlt( HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
                                                int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);

__declspec(dllimport) BOOL __stdcall GdiGradientFill( HDC hdc,
                                                            PTRIVERTEX pVertex,
                                             ULONG nVertex,
                                             PVOID pMesh,
                                             ULONG nCount,
                                             ULONG ulMode);







__declspec(dllimport) BOOL __stdcall PlayMetaFileRecord( HDC hdc,
                                                               LPHANDLETABLE lpHandleTable,
                                                 LPMETARECORD lpMR,
                                                 UINT noObjs);

typedef int (__stdcall* MFENUMPROC)( HDC hdc, HANDLETABLE * lpht, METARECORD * lpMR, int nObj, LPARAM param);
__declspec(dllimport) BOOL __stdcall EnumMetaFile( HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)( HDC hdc, HANDLETABLE * lpht, const ENHMETARECORD * lpmr, int nHandles, LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile( HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA( HENHMETAFILE hEnh, LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW( HENHMETAFILE hEnh, LPCWSTR lpFileName);





__declspec(dllimport) HDC __stdcall CreateEnhMetaFileA( HDC hdc, LPCSTR lpFilename, const RECT *lprc, LPCSTR lpDesc);
__declspec(dllimport) HDC __stdcall CreateEnhMetaFileW( HDC hdc, LPCWSTR lpFilename, const RECT *lprc, LPCWSTR lpDesc);





__declspec(dllimport) BOOL __stdcall DeleteEnhMetaFile( HENHMETAFILE hmf);
__declspec(dllimport) BOOL __stdcall EnumEnhMetaFile( HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
                                                 LPVOID param, const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileA( LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE __stdcall GetEnhMetaFileW( LPCWSTR lpName);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileBits( HENHMETAFILE hEMF,
                                                 UINT nSize,
                                                                          LPBYTE lpData);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionA( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPSTR lpDescription);
__declspec(dllimport) UINT __stdcall GetEnhMetaFileDescriptionW( HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                                                LPWSTR lpDescription);





__declspec(dllimport) UINT __stdcall GetEnhMetaFileHeader( HENHMETAFILE hemf,
                                                     UINT nSize,
                                                                              LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT __stdcall GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf,
                                                         UINT nNumEntries,
                                                                                  LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT __stdcall GetEnhMetaFilePixelFormat( HENHMETAFILE hemf,
                                                         UINT cbBuffer,
                                                                                     PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT __stdcall GetWinMetaFileBits( HENHMETAFILE hemf,
                                                 UINT cbData16,
                                                                             LPBYTE pData16,
                                                 INT iMapMode,
                                                 HDC hdcRef);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFile( HDC hdc, HENHMETAFILE hmf, const RECT * lprect);
__declspec(dllimport) BOOL __stdcall PlayEnhMetaFileRecord( HDC hdc,
                                                                LPHANDLETABLE pht,
                                                     const ENHMETARECORD *pmr,
                                                     UINT cht);

__declspec(dllimport) HENHMETAFILE __stdcall SetEnhMetaFileBits( UINT nSize,
                                                                            const BYTE * pb);

__declspec(dllimport) HENHMETAFILE __stdcall SetWinMetaFileBits( UINT nSize,
                                                                            const BYTE *lpMeta16Data,
                                                             HDC hdcRef,
                                                             const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL __stdcall GdiComment( HDC hdc, UINT nSize, const BYTE *lpData);





__declspec(dllimport) BOOL __stdcall GetTextMetricsA( HDC hdc, LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW( HDC hdc, LPTEXTMETRICW lptm);
#line 4769 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc( HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline( HDC hdc, const POINT *apt, const DWORD *asz, DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform( HDC hdc, LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform( HDC hdc, const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform( HDC hdc, const XFORM * lpxf, DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform( LPXFORM lpxfOut, const XFORM *lpxf1, const XFORM *lpxf2);






__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(
                    HDC hdc,
                    const BITMAPINFO *pbmi,
                    UINT usage,


                    void **ppvBits,
                    HANDLE hSection,
                    DWORD offset);



__declspec(dllimport) UINT __stdcall GetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                                         RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable( HDC hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                                             const RGBQUAD *prgbq);
#line 4846 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment( HDC hdc, const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment( HDC hdc, LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette( HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)( HDC, int);




typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;

    LPCSTR lpszDatatype;
    DWORD fwType;

} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;

    LPCWSTR lpszDatatype;
    DWORD fwType;

} DOCINFOW, *LPDOCINFOW;

typedef DOCINFOW DOCINFO;
typedef LPDOCINFOW LPDOCINFO;
#line 4902 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
 __declspec(dllimport) int __stdcall StartDocA( HDC hdc, const DOCINFOA *lpdi);
 __declspec(dllimport) int __stdcall StartDocW( HDC hdc, const DOCINFOW *lpdi);





 __declspec(dllimport) int __stdcall EndDoc( HDC hdc);
 __declspec(dllimport) int __stdcall StartPage( HDC hdc);
 __declspec(dllimport) int __stdcall EndPage( HDC hdc);
 __declspec(dllimport) int __stdcall AbortDoc( HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc( HDC hdc, ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo( HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure( HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath( HDC hdc);
__declspec(dllimport) int __stdcall GetPath( HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion( HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw( HDC hdc, const POINT * apt, const BYTE * aj, int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath( HDC hdc, int mode);
__declspec(dllimport) int __stdcall SetArcDirection( HDC hdc, int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit( HDC hdc, FLOAT limit, PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath( HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath( HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath( HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen( DWORD iPenStyle,
                                         DWORD cWidth,
                                         const LOGBRUSH *plbrush,
                                         DWORD cStyle,
                                                           const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit( HDC hdc, PFLOAT plimit);
__declspec(dllimport) int __stdcall GetArcDirection( HDC hdc);

__declspec(dllimport) int __stdcall GetObjectA( HANDLE h, int c, LPVOID pv);
__declspec(dllimport) int __stdcall GetObjectW( HANDLE h, int c, LPVOID pv);
#line 4969 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
 __declspec(dllimport) BOOL __stdcall MoveToEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall TextOutA( HDC hdc, int x, int y, LPCSTR lpString, int c);
 __declspec(dllimport) BOOL __stdcall TextOutW( HDC hdc, int x, int y, LPCWSTR lpString, int c);





 __declspec(dllimport) BOOL __stdcall ExtTextOutA( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCSTR lpString, UINT c, const INT * lpDx);
 __declspec(dllimport) BOOL __stdcall ExtTextOutW( HDC hdc, int x, int y, UINT options, const RECT * lprect, LPCWSTR lpString, UINT c, const INT * lpDx);





__declspec(dllimport) BOOL __stdcall PolyTextOutA( HDC hdc, const POLYTEXTA * ppt, int nstrings);
__declspec(dllimport) BOOL __stdcall PolyTextOutW( HDC hdc, const POLYTEXTW * ppt, int nstrings);






__declspec(dllimport) HRGN __stdcall CreatePolygonRgn( const POINT *pptl,
                                                 int cPoint,
                                                 int iMode);
__declspec(dllimport) BOOL __stdcall DPtoLP( HDC hdc, LPPOINT lppt, int c);
__declspec(dllimport) BOOL __stdcall LPtoDP( HDC hdc, LPPOINT lppt, int c);
 __declspec(dllimport) BOOL __stdcall Polygon( HDC hdc, const POINT *apt, int cpt);
 __declspec(dllimport) BOOL __stdcall Polyline( HDC hdc, const POINT *apt, int cpt);

__declspec(dllimport) BOOL __stdcall PolyBezier( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolyBezierTo( HDC hdc, const POINT * apt, DWORD cpt);
__declspec(dllimport) BOOL __stdcall PolylineTo( HDC hdc, const POINT * apt, DWORD cpt);

 __declspec(dllimport) BOOL __stdcall SetViewportExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall SetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall SetWindowExtEx( HDC hdc, int x, int y, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall SetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

 __declspec(dllimport) BOOL __stdcall OffsetViewportOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall OffsetWindowOrgEx( HDC hdc, int x, int y, LPPOINT lppt);
 __declspec(dllimport) BOOL __stdcall ScaleViewportExtEx( HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
 __declspec(dllimport) BOOL __stdcall ScaleWindowExtEx( HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBitmapDimensionEx( HBITMAP hbm, int w, int h, LPSIZE lpsz);
__declspec(dllimport) BOOL __stdcall SetBrushOrgEx( HDC hdc, int x, int y, LPPOINT lppt);

__declspec(dllimport) int __stdcall GetTextFaceA( HDC hdc, int c, LPSTR lpName);
__declspec(dllimport) int __stdcall GetTextFaceW( HDC hdc, int c, LPWSTR lpName);
#line 5026 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW( HDC hdc,
                                                 DWORD nPairs,
                                                                                LPKERNINGPAIR lpKernPair);







__declspec(dllimport) BOOL __stdcall GetDCOrgEx( HDC hdc, LPPOINT lppt);
__declspec(dllimport) BOOL __stdcall FixBrushOrgEx( HDC hdc, int x, int y, LPPOINT ptl);
__declspec(dllimport) BOOL __stdcall UnrealizeObject( HGDIOBJ h);

__declspec(dllimport) BOOL __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit( DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);
#line 5060 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);






__declspec(dllimport) int __stdcall SetICMMode( HDC hdc, int mode);
__declspec(dllimport) BOOL __stdcall CheckColorsInGamut( HDC hdc,
                                                                       LPRGBTRIPLE lpRGBTriple,
                                                                               LPVOID dlpBuffer,
                                                         DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace( HDC hdc);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceA( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEA lpBuffer,
                                                     DWORD nSize);
__declspec(dllimport) BOOL __stdcall GetLogColorSpaceW( HCOLORSPACE hColorSpace,
                                                                          LPLOGCOLORSPACEW lpBuffer,
                                                     DWORD nSize);






__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA( LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW( LPLOGCOLORSPACEW lplcs);





__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace( HDC hdc, HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall DeleteColorSpace( HCOLORSPACE hcs);
__declspec(dllimport) BOOL __stdcall GetICMProfileA( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPSTR pszFilename);
__declspec(dllimport) BOOL __stdcall GetICMProfileW( HDC hdc,
                                                        LPDWORD pBufSize,
                                                                            LPWSTR pszFilename);






__declspec(dllimport) BOOL __stdcall SetICMProfileA( HDC hdc, LPSTR lpFileName);
__declspec(dllimport) BOOL __stdcall SetICMProfileW( HDC hdc, LPWSTR lpFileName);





__declspec(dllimport) BOOL __stdcall GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp);
__declspec(dllimport) BOOL __stdcall ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action);
__declspec(dllimport) int __stdcall EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param);
__declspec(dllimport) int __stdcall EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param);






__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);

__declspec(dllimport) BOOL __stdcall UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);





#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)




__declspec(dllimport) BOOL __stdcall ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
#line 5305 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
typedef struct tagEMR
{
    DWORD iType;
    DWORD nSize;

} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;

} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR emr;
} EMRABORTPATH, *PEMRABORTPATH,
  EMRBEGINPATH, *PEMRBEGINPATH,
  EMRENDPATH, *PEMRENDPATH,
  EMRCLOSEFIGURE, *PEMRCLOSEFIGURE,
  EMRFLATTENPATH, *PEMRFLATTENPATH,
  EMRWIDENPATH, *PEMRWIDENPATH,
  EMRSETMETARGN, *PEMRSETMETARGN,
  EMRSAVEDC, *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH,
  EMRSETBKMODE, *PEMRSETBKMODE,
  EMRSETMAPMODE, *PEMRSETMAPMODE,

  EMRSETLAYOUT, *PEMRSETLAYOUT,

  EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE,
  EMRSETROP2, *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE, *PEMRSETICMMODE,
  EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;

} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;


} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
} EMRLINETO, *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH, *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX, *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX, *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX, *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX, *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC, *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE, *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE,
  EMRPOLYBEZIER, *PEMRPOLYBEZIER,
  EMRPOLYGON, *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO, *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16,
  EMRPOLYBEZIER16, *PEMRPOLYBEZIER16,
  EMRPOLYGON16, *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16, *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN, *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;

} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];

} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;

} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN32 elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;

} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;


    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;

} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
} EMRSETCOLORSPACE, *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;





typedef struct tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
} EMREXTESCAPE, *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRSETICMPROFILE, *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;

    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;
#line 6073 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);





__declspec(dllimport) BOOL __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT x;
    FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);







typedef struct tagLAYERPLANEDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;
#line 6192 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);
#line 6228 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wingdi.h"
}



#pragma warning(pop)
#line 166 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
#line 44 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
extern "C" {
#line 62 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;

typedef MENUTEMPLATEW MENUTEMPLATE;



typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;

typedef LPMENUTEMPLATEW LPMENUTEMPLATE;




typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);
#line 88 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);







typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 161 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef PROPENUMPROCW PROPENUMPROC;
typedef PROPENUMPROCEXW PROPENUMPROCEX;
typedef EDITWORDBREAKPROCW EDITWORDBREAKPROC;
#line 172 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
#line 194 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef WINSTAENUMPROCW WINSTAENUMPROC;
typedef DESKTOPENUMPROCW DESKTOPENUMPROC;
#line 265 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
#pragma warning(push)
#pragma warning(disable: 4995)





__declspec(dllimport)
int
__stdcall
wvsprintfA(
          LPSTR,
                                LPCSTR,
         va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
          LPWSTR,
                                LPCWSTR,
         va_list arglist);






__declspec(dllimport)
int
__cdecl
wsprintfA(
          LPSTR,
                                LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
          LPWSTR,
                                LPCWSTR,
    ...);







#pragma warning(pop)
#line 772 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;

typedef CBT_CREATEWNDW CBT_CREATEWND;
typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;
#line 796 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;
#line 813 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;
#line 964 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct
{
    HWND hwnd;
    RECT rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT;
#line 1029 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagKBDLLHOOKSTRUCT {
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
#line 1059 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;
#line 1097 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagHARDWAREHOOKSTRUCT {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
} HARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 1148 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
         LPCSTR pwszKLID,
         UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
         LPCWSTR pwszKLID,
         UINT Flags);
#line 1168 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
         HKL hkl,
         UINT Flags);
#line 1184 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
         UINT wVirtKey,
         UINT wScanCode,
                          const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags,
             HKL dwhkl);


__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
         HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
                                LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
                                LPWSTR pwszKLID);







__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
         int nBuff,
                                       HKL *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
         DWORD idThread);
#line 1244 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;
#line 1263 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
         UINT cbSize,
         LPMOUSEMOVEPOINT lppt,
                             LPMOUSEMOVEPOINT lpptBuf,
         int nBufPoints,
         DWORD resolution);
#line 1303 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
         LPCSTR lpszDesktop,
               LPCSTR lpszDevice,
               DEVMODEA* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
         LPCWSTR lpszDesktop,
               LPCWSTR lpszDevice,
               DEVMODEW* pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa,
         ULONG ulHeapSize,
               PVOID pvoid);
#line 1368 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
         LPCSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
         LPCWSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
             HWINSTA hwinsta,
         DESKTOPENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
             HWINSTA hwinsta,
         DESKTOPENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
             HDESK hDesktop,
         WNDENUMPROC lpfn,
         LPARAM lParam);


__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
         HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
          HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
         HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
         DWORD dwThreadId);
#line 1489 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
             LPCSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
             LPCWSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
             LPSECURITY_ATTRIBUTES lpsa);






__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
         LPCSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
         LPCWSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);






__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
         WINSTAENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
         WINSTAENUMPROCW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);
#line 1577 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
         PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
                                    PSECURITY_DESCRIPTOR pSID,
         DWORD nLength,
          LPDWORD lpnLengthNeeded);
#line 1610 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                                    PVOID pvInfo,
         DWORD nLength,
              LPDWORD lpnLengthNeeded);






__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
                              PVOID pvInfo,
         DWORD nLength);
#line 1671 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagWNDCLASSEXA {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *NPWNDCLASSEXA, *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT cbSize;

    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;

    HICON hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *NPWNDCLASSEXW, *LPWNDCLASSEXW;

typedef WNDCLASSEXW WNDCLASSEX;
typedef PWNDCLASSEXW PWNDCLASSEX;
typedef NPWNDCLASSEXW NPWNDCLASSEX;
typedef LPWNDCLASSEXW LPWNDCLASSEX;
#line 1716 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *NPWNDCLASSA, *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *NPWNDCLASSW, *LPWNDCLASSW;

typedef WNDCLASSW WNDCLASS;
typedef PWNDCLASSW PWNDCLASS;
typedef NPWNDCLASSW NPWNDCLASS;
typedef LPWNDCLASSW LPWNDCLASS;







__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
         HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
#line 1779 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;



} MSG, *PMSG, *NPMSG, *LPMSG;
#line 1937 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;
#line 1993 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
                               PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;
#line 2255 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;
#line 2528 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
         LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
         LPCWSTR lpString);
#line 2573 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;
#line 2646 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
            LPTRACKMOUSEEVENT lpEventTrack);
#line 2864 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
         HDC hdc,
            LPRECT qrc,
         UINT edge,
         UINT grfFlags);
#line 2927 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
         HDC,
            LPRECT,
         UINT,
         UINT);
#line 2957 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
         HWND hwnd,
         HDC hdc,
         const RECT * lprect,
         UINT flags);
#line 2976 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
             HWND hwnd,
         int idAni,
         const RECT *lprcFrom,
         const RECT *lprcTo);
#line 3059 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagACCEL {

    BYTE fVirt;
    WORD key;
    WORD cmd;





} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;

typedef CREATESTRUCTW CREATESTRUCT;
typedef LPCREATESTRUCTW LPCREATESTRUCT;





typedef struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;
#line 3143 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
} NMHDR;







typedef NMHDR * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
#line 3214 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;
#line 3275 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
#line 3322 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
         const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
         const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
         const MSG *lpMsg);
#line 3362 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
         int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
          LPMSG lpMsg,
             HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
#line 3414 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
             HWND hWnd,
         int id,
         UINT fsModifiers,
         UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
             HWND hWnd,
         int id);
#line 3491 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
         UINT uFlags,
         DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
         BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
DWORD
__stdcall
GetUnpredictedMessagePos(
    void);



__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);



__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
         LPARAM lParam);


__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
         HWND hWnd,
         UINT Msg,
                                 WPARAM wParam,
                                 LPARAM lParam);
#line 3594 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
              PDWORD_PTR lpdwResult);






__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);







typedef struct {
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
              PBSMINFO pbsmInfo);
#line 3714 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
         DWORD flags,
                LPDWORD lpInfo,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 3788 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY *PHDEVNOTIFY;







__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);






__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
         HDEVNOTIFY Handle
    );







typedef PVOID HPOWERNOTIFY;
typedef HPOWERNOTIFY *PHPOWERNOTIFY;



__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
       HANDLE hRecipient,
       LPCGUID PowerSettingGuid,
       DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
       HPOWERNOTIFY Handle
    );

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification (
       HANDLE hRecipient,
       DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterSuspendResumeNotification (
       HPOWERNOTIFY Handle
    );
#line 3876 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
             HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 3945 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
         DWORD idAttach,
         DWORD idAttachTo,
         BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
         LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);





__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
         HANDLE hProcess,
         DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefWindowProcW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
void
__stdcall
PostQuitMessage(
         int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 4069 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);
#line 4083 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
               LPVOID lpReserved);
#line 4106 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
         UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
         const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
         const WNDCLASSW *lpWndClass);






__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
         LPCSTR lpClassName,
             HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
         LPCWSTR lpClassName,
             HINSTANCE hInstance);







__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
             HINSTANCE hInstance,
         LPCSTR lpClassName,
          LPWNDCLASSA lpWndClass);

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
             HINSTANCE hInstance,
         LPCWSTR lpClassName,
          LPWNDCLASSW lpWndClass);







__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
         const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
         const WNDCLASSEXW *);







__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
             HINSTANCE hInstance,
         LPCSTR lpszClass,
          LPWNDCLASSEXA lpwcx);

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
             HINSTANCE hInstance,
         LPCWSTR lpszClass,
          LPWNDCLASSEXW lpwcx);
#line 4229 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);


__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
         DWORD dwExStyle,
             LPCSTR lpClassName,
             LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
         DWORD dwExStyle,
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HMENU hMenu,
             HINSTANCE hInstance,
             LPVOID lpParam);
#line 4291 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsWindow(
             HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
         HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
         HWND hWndParent,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
         HWND hWnd,
         int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
         HWND hWnd,
         DWORD dwTime,
         DWORD dwFlags);
#line 4343 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
         HWND hWnd,
             HDC hdcDst,
             POINT* pptDst,
             SIZE* psize,
             HDC hdcSrc,
             POINT* pptSrc,
         COLORREF crKey,
             BLENDFUNCTION* pblend,
         DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;





__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
         HWND hWnd,
         const UPDATELAYEREDWINDOWINFO* pULWInfo);
#line 4395 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
         HWND hwnd,
              COLORREF* pcrKey,
              BYTE* pbAlpha,
              DWORD* pdwFlags);
#line 4411 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
         HWND hwnd,
         HDC hdcBlt,
         UINT nFlags);
#line 4427 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
         HWND hwnd,
         COLORREF crKey,
         BYTE bAlpha,
         DWORD dwFlags);
#line 4457 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
          HWND hWnd,
          int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
          HWND hWnd,
          BOOL bInvert);


typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
         PFLASHWINFO pfwi);
#line 4496 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
          HWND hWnd,
          BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
         HWND hWnd,
         int X,
         int Y,
         int nWidth,
         int nHeight,
         BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
         HWND hWnd,
             HWND hWndInsertAfter,
         int X,
         int Y,
         int cx,
         int cy,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
         HWND hWnd,
            WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
         HWND hWnd,
         const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
         HWND hWnd,
          DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
         HWND hWnd,
         DWORD dwAffinity);
#line 4581 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
         int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
         HDWP hWinPosInfo,
         HWND hWnd,
             HWND hWndInsertAfter,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);


__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
         HDWP hWinPosInfo);
#line 4615 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
         HWND hWnd);
#line 4684 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack2.h"
#pragma warning(disable: 4103)

#pragma pack(push,2)
#line 4684 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"








typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;







typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

typedef LPDLGTEMPLATEW LPDLGTEMPLATE;
#line 4722 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;

typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;
#line 4740 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;



typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;

typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;
#line 4768 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 4768 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"





__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW lpTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
#line 4841 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
             HINSTANCE hInstance,
         LPCSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
             HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);






__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEA hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
             HINSTANCE hInstance,
         LPCDLGTEMPLATEW hDialogTemplate,
             HWND hWndParent,
             DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
#line 4909 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EndDialog(
         HWND hDlg,
         INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
             HWND hDlg,
         int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
         UINT uValue,
         BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
              BOOL *lpTranslated,
         BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
         LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
         LPCWSTR lpString);







__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
                         LPSTR lpString,
         int cchMax);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
                         LPWSTR lpString,
         int cchMax);






__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
         HWND hDlg,
         int nIDButton,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
         HWND hDlg,
         int nIDFirstButton,
         int nIDLastButton,
         int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
         HWND hDlg,
         int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
         HWND hDlg,
             HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
         HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcA(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefDlgProcW(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
#line 5111 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
         LPMSG lpMsg,
         int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
         LPMSG lpMsg,
         int nCode);
#line 5137 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
             HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);



__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
         HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
         HWND hWndRemove,
         HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
         UINT uFormat,
             HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
         UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
         LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
         LPCWSTR lpszFormat);






__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
         UINT format,
                              LPSTR lpszFormatName,
         int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
         UINT format,
                              LPWSTR lpszFormatName,
         int cchMaxCount);






__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
                         UINT *paFormatPriorityList,
         int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
                           PUINT lpuiFormats,
         UINT cFormats,
          PUINT pcFormatsOut);
#line 5299 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
         LPCSTR pSrc,
                                                    LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
         LPCWSTR pSrc,
                                                    LPSTR pDst);







__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
         LPCSTR pSrc,
                                                    LPSTR pDst);

__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
         LPCSTR pSrc,
                                                    LPWSTR pDst);






__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
         LPCWSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);






__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
         LPCSTR lpszSrc,
                               LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
         LPCSTR lpszSrc,
                               LPWSTR lpszDst,
         DWORD cchDstLength);






__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
                               LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
            LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
            LPWSTR lpsz);






__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
                               LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
                               LPWSTR lpsz,
         DWORD cchLength);






__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
         LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
         LPCWSTR lpsz);






__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
         LPCSTR lpszStart,
         LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
         LPCWSTR lpszStart,
         LPCWSTR lpszCurrent);







__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
          WORD CodePage,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
          WORD CodePage,
          LPCSTR lpStart,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);
#line 5523 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
         WCHAR ch);






__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
         WCHAR ch);
#line 5589 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
SetFocus(
             HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
         int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
         int vKey);

__declspec(dllimport)

BOOL
__stdcall
GetKeyboardState(
                      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
                    LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
         LONG lParam,
                          LPSTR lpString,
         int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
         LONG lParam,
                          LPWSTR lpString,
         int cchSize);






__declspec(dllimport)
int
__stdcall
GetKeyboardType(
         int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
         UINT uVirtKey,
         UINT uScanCode,
                        const BYTE *lpKeyState,
          LPWORD lpChar,
         UINT uFlags,
             HKL dwhkl);


__declspec(dllimport)
int
__stdcall
ToUnicode(
         UINT wVirtKey,
         UINT wScanCode,
                              const BYTE *lpKeyState,
                          LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
         WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
         CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
         WCHAR ch);







__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
         CHAR ch,
         HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
         WCHAR ch,
         HKL dwhkl);
#line 5746 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
void
__stdcall
keybd_event(
         BYTE bVk,
         BYTE bScan,
         DWORD dwFlags,
         ULONG_PTR dwExtraInfo);
#line 5780 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
void
__stdcall
mouse_event(
         DWORD dwFlags,
         DWORD dx,
         DWORD dy,
         DWORD dwData,
         ULONG_PTR dwExtraInfo);
#line 5798 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD type;

    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    };
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
         UINT cInputs,
                        LPINPUT pInputs,
         int cbSize);
#line 5861 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;
#line 5908 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
         HTOUCHINPUT hTouchInput,
         UINT cInputs,
                          PTOUCHINPUT pInputs,
         int cbSize);

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
         HTOUCHINPUT hTouchInput);
#line 5944 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
         HWND hwnd,
         ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
         HWND hwnd,
              PULONG pulFlags);
#line 5974 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
enum tagPOINTER_INPUT_TYPE {
    PT_POINTER = 0x00000001,
    PT_TOUCH = 0x00000002,
    PT_PEN = 0x00000003,
    PT_MOUSE = 0x00000004,

    PT_TOUCHPAD = 0x00000005,

};
typedef DWORD POINTER_INPUT_TYPE;

typedef UINT32 POINTER_FLAGS;
#line 6020 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO {
    POINTER_INPUT_TYPE pointerType;
    UINT32 pointerId;
    UINT32 frameId;
    POINTER_FLAGS pointerFlags;
    HANDLE sourceDevice;
    HWND hwndTarget;
    POINT ptPixelLocation;
    POINT ptHimetricLocation;
    POINT ptPixelLocationRaw;
    POINT ptHimetricLocationRaw;
    DWORD dwTime;
    UINT32 historyCount;
    INT32 InputData;
    DWORD dwKeyStates;
    UINT64 PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;


typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO {
    POINTER_INFO pointerInfo;
    TOUCH_FLAGS touchFlags;
    TOUCH_MASK touchMask;
    RECT rcContact;
    RECT rcContactRaw;
    UINT32 orientation;
    UINT32 pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO {
    POINTER_INFO pointerInfo;
    PEN_FLAGS penFlags;
    PEN_MASK penMask;
    UINT32 pressure;
    UINT32 rotation;
    INT32 tiltX;
    INT32 tiltY;
} POINTER_PEN_INFO;
#line 6147 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
InitializeTouchInjection(
         UINT32 maxCount,
         DWORD dwMode);

__declspec(dllimport)
BOOL
__stdcall
InjectTouchInput(
         UINT32 count,
                      const POINTER_TOUCH_INFO *contacts);

__declspec(dllimport)
BOOL
__stdcall
GetPointerType(
         UINT32 pointerId,
          POINTER_INPUT_TYPE *pointerType);

__declspec(dllimport)
BOOL
__stdcall
GetPointerCursorId(
         UINT32 pointerId,
          UINT32 *cursorId);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfo(
         UINT32 pointerId,
                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfo(
         UINT32 pointerId,
                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfo(
         UINT32 pointerId,
                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfo(
         UINT32 pointerId,
            UINT32 *pointerCount,
                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfoHistory(
         UINT32 pointerId,
            UINT32 *entriesCount,
            UINT32 *pointerCount,
                                                    POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
SkipPointerFrameMessages(
         UINT32 pointerId);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTarget(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTarget(
         HWND hwnd,
         POINTER_INPUT_TYPE pointerType);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointer(
         BOOL fEnable);

__declspec(dllimport)
BOOL
__stdcall
IsMouseInPointerEnabled(
    void);






__declspec(dllimport)
BOOL
__stdcall
RegisterTouchHitTestingWindow(
         HWND hwnd,
         ULONG value);

typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;





typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;





__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToRect(
         const RECT *controlBoundingBox,
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
          TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToPolygon(
    UINT32 numVertices,
                            const POINT *controlPolygon,
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
          TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
         const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
         const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

typedef enum tagFEEDBACK_TYPE {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION = 2,
    FEEDBACK_PEN_TAP = 3,
    FEEDBACK_PEN_DOUBLETAP = 4,
    FEEDBACK_PEN_PRESSANDHOLD = 5,
    FEEDBACK_PEN_RIGHTTAP = 6,
    FEEDBACK_TOUCH_TAP = 7,
    FEEDBACK_TOUCH_DOUBLETAP = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD = 9,
    FEEDBACK_TOUCH_RIGHTTAP = 10,
    FEEDBACK_GESTURE_PRESSANDTAP = 11,
    FEEDBACK_MAX = 0xFFFFFFFF
} FEEDBACK_TYPE;





__declspec(dllimport)
BOOL
__stdcall
GetWindowFeedbackSetting(
         HWND hwnd,
         FEEDBACK_TYPE feedback,
         DWORD dwFlags,
            UINT32* pSize,
                                   void* config);

__declspec(dllimport)
BOOL
__stdcall
SetWindowFeedbackSetting(
         HWND hwnd,
         FEEDBACK_TYPE feedback,
         DWORD dwFlags,
         UINT32 size,
                               const void* configuration);
#line 6413 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagINPUT_TRANSFORM {
    union {
        struct {
            float _11, _12, _13, _14;
            float _21, _22, _23, _24;
            float _31, _32, _33, _34;
            float _41, _42, _43, _44;
        };
        float m[4][4];
    };
} INPUT_TRANSFORM;


__declspec(dllimport)
BOOL
__stdcall
GetPointerInputTransform(
         UINT32 pointerId,
         UINT32 historyCount,
                               INPUT_TRANSFORM *inputTransform);
#line 6449 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
          PLASTINPUTINFO plii);


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
         UINT uCode,
         UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
         UINT uCode,
         UINT uMapType);







__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
         UINT uCode,
         UINT uMapType,
             HKL dwhkl);
#line 6509 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
         UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
         DWORD nCount,
                           const HANDLE *pHandles,
         BOOL fWaitAll,
         DWORD dwMilliseconds,
         DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
         DWORD nCount,
                           const HANDLE *pHandles,
         DWORD dwMilliseconds,
         DWORD dwWakeMask,
         DWORD dwFlags);
#line 6637 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc);
#line 6654 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
UINT_PTR
__stdcall
SetCoalescableTimer(
             HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
             TIMERPROC lpTimerFunc,
         ULONG uToleranceDelay);



__declspec(dllimport)
BOOL
__stdcall
KillTimer(
             HWND hWnd,
         UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
         HWND hWnd,
         BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
         HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
             HINSTANCE hInstance,
         LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
             HINSTANCE hInstance,
         LPCWSTR lpTableName);






__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
                       LPACCEL paccel,
         int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
                       LPACCEL paccel,
         int cAccel);






__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
         HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
         HACCEL hAccelSrc,
                                               LPACCEL lpAccelDst,
         int cAccelEntries);
#line 6756 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
#line 6946 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
         int nIndex);
#line 6963 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
             HINSTANCE hInstance,
         LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
             HINSTANCE hInstance,
         LPCWSTR lpMenuName);






__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
         const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
         const MENUTEMPLATEW *lpMenuTemplate);






__declspec(dllimport)
HMENU
__stdcall
GetMenu(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
         HWND hWnd,
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
         HMENU hMenu,
         UINT cmd,
             LPCSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
         HMENU hMenu,
         UINT cmd,
             LPCWSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);






__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
         HWND hWnd,
         HMENU hMenu,
         UINT uIDHiliteItem,
         UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
         HMENU hMenu,
         UINT uIDItem,
                             LPSTR lpString,
         int cchMax,
         UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
         HMENU hMenu,
         UINT uIDItem,
                             LPWSTR lpString,
         int cchMax,
         UINT flags);






__declspec(dllimport)
UINT
__stdcall
GetMenuState(
         HMENU hMenu,
         UINT uId,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
         HWND hWnd);







__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
         HWND hWnd,
         BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
         HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
         HMENU hMenu,
         UINT uIDCheckItem,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
         HMENU hMenu,
         UINT uIDEnableItem,
         UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
             HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
             LPCWSTR lpNewItem);






__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
             HBITMAP hBitmapUnchecked,
             HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
               int nReserved,
         HWND hWnd,
               const RECT *prcRect);
#line 7269 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
         HWND hwnd,
             LPTPMPARAMS lptpm);



__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
         const POINT *anchorPoint,
         const SIZE *windowSize,
         UINT flags,
             RECT *excludeRect,
          RECT *popupWindowPosition);
#line 7317 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;
typedef MENUINFO const *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
         HMENU,
            LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
         HMENU,
         LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
#line 7405 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;

    HBITMAP hbmpItem;

} MENUITEMINFOW, *LPMENUITEMINFOW;

typedef MENUITEMINFOW MENUITEMINFO;
typedef LPMENUITEMINFOW LPMENUITEMINFO;




typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;

typedef LPCMENUITEMINFOW LPCMENUITEMINFO;





__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOW lpmi);






__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
            LPMENUITEMINFOW lpmii);






__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOW lpmii);
#line 7525 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
         HMENU hMenu,
         UINT fByPos,
         UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
         HMENU hMenu,
         UINT uItem,
         UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
             HWND hWnd,
         HMENU hMenu,
         UINT uItem,
          LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
             HWND hWnd,
         HMENU hMenu,
         POINT ptScreen);
#line 7610 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;
#line 7636 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
DragObject(
         HWND hwndParent,
         HWND hwndFrom,
         UINT fmt,
         ULONG_PTR data,
             HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
         HWND hwnd,
         POINT pt);
#line 7661 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
         HDC hDC,
         int X,
         int Y,
         HICON hIcon);
#line 7712 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;
#line 7738 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)

int
__stdcall
DrawTextA(
         HDC hdc,


    LPCSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
__declspec(dllimport)

int
__stdcall
DrawTextW(
         HDC hdc,


    LPCWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format);
#line 7796 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)

int
__stdcall
DrawTextExA(
         HDC hdc,



    LPSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)

int
__stdcall
DrawTextExW(
         HDC hdc,



    LPWSTR lpchText,
         int cchText,
            LPRECT lprc,
         UINT format,
             LPDRAWTEXTPARAMS lpdtp);
#line 7839 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
         HDC hDC,
             HBRUSH hBrush,
             GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
#line 7897 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
         HDC hdc,
             HBRUSH hbrFore,
             DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
#line 7939 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
         HDC hdc,
         int x,
         int y,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
         HDC hdc,
         int x,
         int y,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions,
         int nTabOrigin);






__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
         HDC hdc,
                        LPCSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
         HDC hdc,
                        LPCWSTR lpString,
         int chCount,
         int nTabPositions,
                                  const INT *lpnTabStopPositions);






__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
         HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
         HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
         HWND hwnd,
         BOOL fUnknown);



__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
         HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
         DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
         UINT uLockCode);






__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
             HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
             HWND hWnd,
             HRGN hrgnClip,
         DWORD flags);
#line 8097 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
             HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
             HWND hWnd,
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
         HWND hWnd,
          LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
         HWND hWnd,
         const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
         HWND hWnd,
              LPRECT lpRect,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
         HWND hWnd,
         HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bRedraw);
#line 8155 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
GetWindowRgn(
         HWND hWnd,
         HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
         HWND hWnd,
          LPRECT lprc);



__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
         HDC hDC,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
             HWND hWnd,
             const RECT *lpRect,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
             HWND hWnd,
             const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
         HWND hWnd,
             HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
         HWND hWnd,
             HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
             HWND hWnd,
             const RECT *lprcUpdate,
             HRGN hrgnUpdate,
         UINT flags);
#line 8251 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
             HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
         HWND hWnd,
         int XAmount,
         int YAmount,
             const RECT *lpRect,
             const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
         HDC hDC,
         int dx,
         int dy,
             const RECT *lprcScroll,
             const RECT *lprcClip,
             HRGN hrgnUpdate,
              LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
         HWND hWnd,
         int dx,
         int dy,
             const RECT *prcScroll,
             const RECT *prcClip,
             HRGN hrgnUpdate,
              LPRECT prcUpdate,
         UINT flags);
#line 8307 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
SetScrollPos(
         HWND hWnd,
         int nBar,
         int nPos,
         BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
         HWND hWnd,
         int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
         HWND hWnd,
         int nBar,
         int nMinPos,
         int nMaxPos,
         BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
         HWND hWnd,
         int nBar,
          LPINT lpMinPos,
          LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
         HWND hWnd,
         int wBar,
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
         HWND hWnd,
         UINT wSBflags,
         UINT wArrows);
#line 8377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetPropA(
         HWND hWnd,
         LPCSTR lpString,
             HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
         HWND hWnd,
         LPCWSTR lpString,
             HANDLE hData);






__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
         HWND hWnd,
         LPCWSTR lpString);






__declspec(dllimport)
int
__stdcall
EnumPropsExA(
         HWND hWnd,
         PROPENUMPROCEXA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
         HWND hWnd,
         PROPENUMPROCEXW lpEnumFunc,
         LPARAM lParam);






__declspec(dllimport)
int
__stdcall
EnumPropsA(
         HWND hWnd,
         PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
         HWND hWnd,
         PROPENUMPROCW lpEnumFunc);






__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
         HWND hWnd,
             LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
         HWND hWnd,
             LPCWSTR lpString);







__declspec(dllimport)
int
__stdcall
GetWindowTextA(
         HWND hWnd,
                            LPSTR lpString,
         int nMaxCount);

__declspec(dllimport)
int
__stdcall
GetWindowTextW(
         HWND hWnd,
                            LPWSTR lpString,
         int nMaxCount);






__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
         HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
         HWND hWnd);






__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
         HWND hWnd,
          LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
            LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu,
         DWORD dwExStyle);
#line 8569 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
} HELPINFO, *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
         HWND,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
         HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
         HMENU,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
         HMENU);
#line 8684 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
MessageBoxA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType);
#line 8730 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
MessageBoxExA(
             HWND hWnd,
             LPCSTR lpText,
             LPCSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
             HWND hWnd,
             LPCWSTR lpText,
             LPCWSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
#line 8756 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;

typedef MSGBOXPARAMSW MSGBOXPARAMS;
typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;






__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
         const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
         const MSGBOXPARAMSW * lpmbp);
#line 8819 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
         UINT uType);
#line 8834 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
int
__stdcall
ShowCursor(
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
         int X,
         int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
         int X,
         int Y);


__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
             HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
          LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
          LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
             const RECT *lpRect);


__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
          LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
         HWND hWnd,
             HBITMAP hBitmap,
         int nWidth,
         int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
         UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
             HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
         int X,
         int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
          LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
         HWND hWnd,
            LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
         HWND hWnd,
            LPPOINT lpPoint);




__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPointForPerMonitorDPI(
             HWND hWnd,
            LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPointForPerMonitorDPI(
             HWND hWnd,
            LPPOINT lpPoint);



__declspec(dllimport)
int
__stdcall
MapWindowPoints(
             HWND hWndFrom,
             HWND hWndTo,
                             LPPOINT lpPoints,
         UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
         POINT Point);


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
         HWND hWndParent,
         POINT Point);
#line 9037 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
         HWND hwnd,
         POINT pt,
         UINT flags);
#line 9116 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
         int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
         int nIndex);




__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
         int cElements,
                          const INT * lpaElements,
                          const COLORREF * lpaRgbValues);
#line 9148 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
         HDC hDC,
         const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
         HDC hDC,
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
          LPRECT lprc,
         int xLeft,
         int yTop,
         int xRight,
         int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
          LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
          LPRECT lprcDst,
         const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
          LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
            LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
         const RECT *lprc1,
         const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
         const RECT *lprc,
         POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
#line 9376 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
WORD
__stdcall
GetClassWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
         HWND hWnd,
         int nIndex);






__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
#line 9492 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
          DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
         DWORD dwDefaultLayout);


__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
         HWND hWndChild,
             HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
             HWND hWndParent,
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
             LPCSTR lpClassName,
             LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
             LPCWSTR lpClassName,
             LPCWSTR lpWindowName);







__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCSTR lpszClass,
             LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
             HWND hWndParent,
             HWND hWndChildAfter,
             LPCWSTR lpszClass,
             LPCWSTR lpszWindow);






__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);




__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
         DWORD dwThreadId,
         WNDENUMPROC lpfn,
         LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
         HWND hWnd,
                                       LPSTR lpClassName,
         int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
         HWND hWnd,
                                       LPWSTR lpClassName,
         int nMaxCount
    );
#line 9660 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
             HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
         HWND hWnd,
              LPDWORD lpdwProcessId);


__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
         BOOL bConvert);







__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
         HWND hWnd);
#line 9712 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetWindow(
         HWND hWnd,
         UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
         int nFilterType,
         HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
         int nFilterType,
         HOOKPROC pfnFilterProc);
#line 9764 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
         int nCode,
         HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
         int idHook,
         HOOKPROC lpfn,
             HINSTANCE hmod,
         DWORD dwThreadId);






__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
         HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
             HHOOK hhk,
         int nCode,
         WPARAM wParam,
         LPARAM lParam);
#line 9903 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
         HMENU hmenu,
         UINT first,
         UINT last,
         UINT check,
         UINT flags);





typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;
#line 9983 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
             HINSTANCE hInstance,
         LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
             HINSTANCE hInstance,
         LPCWSTR lpBitmapName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
             HINSTANCE hInstance,
         LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
             HINSTANCE hInstance,
         LPCWSTR lpCursorName);






__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
         LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
         LPCWSTR lpFileName);






__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
             HINSTANCE hInst,
         int xHotSpot,
         int yHotSpot,
         int nWidth,
         int nHeight,
         const void *pvANDPlane,
         const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
         HCURSOR hCursor);
#line 10093 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
         HCURSOR hcur,
         DWORD id);

typedef struct _ICONINFO {
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
             HINSTANCE hInstance,
         LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
             HINSTANCE hInstance,
         LPCWSTR lpIconName);







__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
                         LPCSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
                         LPCWSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
                             HICON *phicon,
                             UINT *piconid,
         UINT nIcons,
         UINT flags);






__declspec(dllimport)
HICON
__stdcall
CreateIcon(
             HINSTANCE hInstance,
         int nWidth,
         int nHeight,
         BYTE cPlanes,
         BYTE cBitsPixel,
         const BYTE *lpbANDbits,
         const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
         HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
                                       PBYTE presbits,
         BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
                                       PBYTE presbits,
         BOOL fIcon,
         int cxDesired,
         int cyDesired,
         UINT Flags);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
                                PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer,
         int cxDesired,
         int cyDesired,
         UINT Flags);


typedef struct tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;
#line 10256 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
             HINSTANCE hInst,
         LPCSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
             HINSTANCE hInst,
         LPCWSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);






__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
         HANDLE h,
         UINT type,
         int cx,
         int cy,
         UINT flags);
#line 10301 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport) BOOL __stdcall DrawIconEx(
         HDC hdc,
         int xLeft,
         int yTop,
         HICON hIcon,
         int cxWidth,
         int cyWidth,
         UINT istepIfAniCur,
             HBRUSH hbrFlickerFreeDraw,
         UINT diFlags);
#line 10320 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
         PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
         HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
         HICON hIcon,
          PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
} ICONINFOEXW, *PICONINFOEXW;

typedef ICONINFOEXW ICONINFOEX;
typedef PICONINFOEXW PICONINFOEX;





__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
         HICON hicon,
            PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
         HICON hicon,
            PICONINFOEXW piconinfo);
#line 10884 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
         HWND hDlg,
         LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
         HWND hDlg,
         LPMSG lpMsg);
#line 10904 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
         HWND hDlg,
            LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
#line 10955 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
         HWND hwndDlg,
                          LPSTR lpString,
         int chCount,
         int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
         HWND hwndDlg,
                          LPWSTR lpString,
         int chCount,
         int idListBox);






__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
         HWND hDlg,
            LPSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
         HWND hDlg,
            LPWSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);






__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
         HWND hwndDlg,
                         LPSTR lpString,
         int cchOut,
         int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
         HWND hwndDlg,
                         LPWSTR lpString,
         int cchOut,
         int idComboBox);
#line 11371 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
         HWND hwnd,
         int nBar,
         LPCSCROLLINFO lpsi,
         BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
         HWND hwnd,
         int nBar,
            LPSCROLLINFO lpsi);
#line 11428 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMDICREATESTRUCTA {
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;

typedef MDICREATESTRUCTW MDICREATESTRUCT;
typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;





typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
         HWND hWnd,
             HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);






__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcA(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall




DefMDIChildProcW(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
#line 11521 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
         HWND hWndClient,
         LPMSG lpMsg);



__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
         LPCSTR lpClassName,
         LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
         LPCWSTR lpClassName,
         LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
             HWND hWndParent,
             HINSTANCE hInstance,
         LPARAM lParam);







__declspec(dllimport)
WORD
__stdcall
TileWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
             HWND hwndParent,
         UINT wHow,
             const RECT * lpRect,
         UINT cKids,
                          const HWND * lpKids);
#line 11606 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD mkSize;



    CHAR mkKeylist;
    CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD mkSize;



    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;

typedef MULTIKEYHELPW MULTIKEYHELP;
typedef PMULTIKEYHELPW PMULTIKEYHELP;
typedef LPMULTIKEYHELPW LPMULTIKEYHELP;






typedef struct tagHELPWININFOA {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;

typedef HELPWININFOW HELPWININFO;
typedef PHELPWININFOW PHELPWININFO;
typedef LPHELPWININFOW LPHELPWININFO;
#line 11703 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
             HWND hWndMain,
             LPCSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
             HWND hWndMain,
             LPCWSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
#line 11748 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
         HANDLE hProcess,
         DWORD uiFlags);
#line 11946 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;
    UINT dwSampleTime;
    UINT bUseHWTimeStamp;
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS;
#line 12139 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int iPaddedBorderWidth;

} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;

typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;
#line 12214 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;

typedef ICONMETRICSW ICONMETRICS;
typedef PICONMETRICSW PICONMETRICS;
typedef LPICONMETRICSW LPICONMETRICS;
#line 12253 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;

typedef SERIALKEYSW SERIALKEYS;
typedef LPSERIALKEYSW LPSERIALKEYS;
#line 12293 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;

typedef HIGHCONTRASTW HIGHCONTRAST;
typedef LPHIGHCONTRASTW LPHIGHCONTRAST;
#line 12342 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\tvout.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\tvout.h"
typedef struct _VIDEOPARAMETERS {
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;
#line 12342 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
#line 12362 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
             DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
             DEVMODEW* lpDevMode,
         DWORD dwFlags);






__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
             LPCSTR lpszDeviceName,
             DEVMODEA* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
             DEVMODEW* lpDevMode,
               HWND hwnd,
         DWORD dwflags,
             LPVOID lParam);
#line 12408 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode);
#line 12430 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
             LPCSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEA* lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
             LPCWSTR lpszDeviceName,
         DWORD iModeNum,
            DEVMODEW* lpDevMode,
         DWORD dwFlags);
#line 12456 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
             LPCSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEA lpDisplayDevice,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
             LPCWSTR lpDevice,
         DWORD iDevNum,
            PDISPLAY_DEVICEW lpDisplayDevice,
         DWORD dwFlags);
#line 12485 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
         UINT32 flags,
          UINT32* numPathArrayElements,
          UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
         UINT32 numPathArrayElements,
                                         DISPLAYCONFIG_PATH_INFO* pathArray,
         UINT32 numModeInfoArrayElements,
                                             DISPLAYCONFIG_MODE_INFO* modeInfoArray,
         UINT32 flags);

__declspec(dllimport)
                                   LONG
__stdcall
QueryDisplayConfig(
         UINT32 flags,
            UINT32* numPathArrayElements,
                                                                  DISPLAYCONFIG_PATH_INFO* pathArray,
            UINT32* numModeInfoArrayElements,
                                                                          DISPLAYCONFIG_MODE_INFO* modeInfoArray,


        DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
            DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
         DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);







__declspec(dllimport)

BOOL
__stdcall
SystemParametersInfoA(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);
__declspec(dllimport)

BOOL
__stdcall
SystemParametersInfoW(
         UINT uiAction,
         UINT uiParam,
                                 PVOID pvParam,
         UINT fWinIni);
#line 12570 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;
#line 12597 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;
#line 12640 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;
#line 12676 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
#line 12712 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;

typedef SOUNDSENTRYW SOUNDSENTRY;
typedef LPSOUNDSENTRYW LPSOUNDSENTRY;
#line 12764 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);


typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;
#line 12793 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;
    BOOL Enabled;
    LCID Locale;
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;







__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
         DWORD dwLevel);
#line 12825 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
         DWORD dwErrCode,
         DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
         HWND hWnd,
                                             LPWSTR pString,
         int cchMaxCount);
#line 12851 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);
#line 12874 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
         POINT pt,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
         LPCRECT lprc,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
         HWND hwnd,
         DWORD dwFlags);
#line 12907 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;

typedef MONITORINFOEXW MONITORINFOEX;
typedef LPMONITORINFOEXW LPMONITORINFOEX;
#line 12951 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
         HMONITOR hMonitor,
            LPMONITORINFO lpmi);






typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
             HDC hdc,
             LPCRECT lprcClip,
         MONITORENUMPROC lpfnEnum,
         LPARAM dwData);
#line 12992 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
         DWORD event,
         HWND hwnd,
         LONG idObject,
         LONG idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD event,
    HWND hwnd,
    LONG idObject,
    LONG idChild,
    DWORD idEventThread,
    DWORD dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
         DWORD eventMin,
         DWORD eventMax,
             HMODULE hmodWinEventProc,
         WINEVENTPROC pfnWinEventProc,
         DWORD idProcess,
         DWORD idThread,
         DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
         DWORD event);
#line 13044 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
         HWINEVENTHOOK hWinEventHook);
#line 13662 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;
#line 13694 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
         DWORD idThread,
            PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);



__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
         HWND hwnd,
                                            LPSTR pszFileName,
         UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
         HWND hwnd,
                                            LPWSTR pszFileName,
         UINT cchFileNameMax);
#line 13792 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;






__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
            PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
         HWND hwnd,
            PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
         HWND hwnd,
            PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;





typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    BOOL fBarFocused:1;
    BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
         HWND hwnd,
         LONG idObject,
         LONG idItem,
            PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
         HWND hwnd,
         LONG idObject,
            PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
         HWND hwndCombo,
            PCOMBOBOXINFO pcbi);
#line 13942 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
GetAncestor(
         HWND hwnd,
         UINT gaFlags);
#line 13956 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
         HWND hwndParent,
         POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
         HWND hwnd,
                                             LPSTR ptszClassName,
         UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
         HWND hwnd,
                                             LPWSTR ptszClassName,
         UINT cchClassNameMax);
#line 13995 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPSTR pszItemText,
         UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
             HWND hwnd,
         int iItem,
            PALTTABINFO pati,
                                  LPWSTR pszItemText,
         UINT cchItemText);
#line 14036 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
         HWND hwnd);
#line 14053 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);




__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
         HANDLE hUserHandle,
         HANDLE hJob,
         BOOL bGrant);
#line 14084 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;
#line 14117 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;
#line 14140 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagRAWMOUSE {



    USHORT usFlags;




    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        };
    };





    ULONG ulRawButtons;




    LONG lLastX;




    LONG lLastY;




    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;
#line 14229 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagRAWKEYBOARD {



    USHORT MakeCode;





    USHORT Flags;

    USHORT Reserved;




    USHORT VKey;
    UINT Message;




    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;
#line 14282 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;
#line 14298 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;
#line 14328 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
         HRAWINPUT hRawInput,
         UINT uiCommand,
                                                LPVOID pData,
            PUINT pcbSize,
         UINT cbSizeHeader);
#line 14351 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;




    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
             HANDLE hDevice,
         UINT uiCommand,
                                                     LPVOID pData,
            PUINT pcbSize);
#line 14415 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
                                     PRAWINPUT pData,
            PUINT pcbSize,
         UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;
#line 14471 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
                             PCRAWINPUTDEVICE pRawInputDevices,
         UINT uiNumDevices,
         UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
                                      PRAWINPUTDEVICE pRawInputDevices,
            PUINT puiNumDevices,
         UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
                                     PRAWINPUTDEVICELIST pRawInputDeviceList,
            PUINT puiNumDevices,
         UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
                       PRAWINPUT* paRawInput,
         INT nInput,
         UINT cbSizeHeader);
#line 14537 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH = 0x00000003,

    POINTER_DEVICE_TYPE_TOUCH_PAD = 0x00000004,

    POINTER_DEVICE_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY {
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevices(
            UINT32* deviceCount,
                                   POINTER_DEVICE_INFO *pointerDevices);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevice(
         HANDLE device,
                    POINTER_DEVICE_INFO *pointerDevice);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceProperties(
         HANDLE device,
            UINT32* propertyCount,
                                     POINTER_DEVICE_PROPERTY *pointerProperties);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerDeviceNotifications(
         HWND window,
         BOOL notifyRange);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceRects(
         HANDLE device,
                    RECT* pointerDeviceRect,
                    RECT* displayRect);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceCursors(
         HANDLE device,
            UINT32* cursorCount,
                                   POINTER_DEVICE_CURSOR_INFO *deviceCursors);

__declspec(dllimport)
BOOL
__stdcall
GetRawPointerDeviceData(
         UINT32 pointerId,
         UINT32 historyCount,
         UINT32 propertiesCount,
                                POINTER_DEVICE_PROPERTY* pProperties,
                                                 LONG* pValues);
#line 14654 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
         UINT message,
         DWORD dwFlag);
#line 14679 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;
#line 14697 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
         HWND hwnd,
         UINT message,
         DWORD action,
                PCHANGEFILTERSTRUCT pChangeFilterStruct);
#line 14726 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;
#line 14761 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagGESTUREINFO {
    UINT cbSize;
    DWORD dwFlags;
    DWORD dwID;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
    DWORD dwSequenceID;
    ULONGLONG ullArguments;
    UINT cbExtraArgs;
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;
#line 14782 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;
    DWORD dwFlags;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;
#line 14802 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
         HGESTUREINFO hGestureInfo,
          PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
         HGESTUREINFO hGestureInfo,
         UINT cbExtraArgs,
                                    PBYTE pExtraArgs);
#line 14833 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
         HGESTUREINFO hGestureInfo);
#line 14847 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef struct tagGESTURECONFIG {
    DWORD dwID;
    DWORD dwWant;
    DWORD dwBlock;
} GESTURECONFIG, *PGESTURECONFIG;
#line 14901 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         UINT cIDs,
                     PGESTURECONFIG pGestureConfig,

         UINT cbSize);





__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
         HWND hwnd,
         DWORD dwReserved,
         DWORD dwFlags,
         PUINT pcIDs,

                            PGESTURECONFIG pGestureConfig,

         UINT cbSize);
#line 14956 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
         HWND hWnd,
         LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
         HWND hWnd,
                                LPWSTR pwszBuff,
            DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
         HWND hWnd);
#line 14989 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef enum tagINPUT_MESSAGE_DEVICE_TYPE {
     IMDT_UNAVAILABLE = 0x00000000,
     IMDT_KEYBOARD = 0x00000001,
     IMDT_MOUSE = 0x00000002,
     IMDT_TOUCH = 0x00000004,
     IMDT_PEN = 0x00000008,

     IMDT_TOUCHPAD = 0x00000010,

 } INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
     IMO_UNAVAILABLE = 0x00000000,
     IMO_HARDWARE = 0x00000001,
     IMO_INJECTED = 0x00000002,
     IMO_SYSTEM = 0x00000004,
} INPUT_MESSAGE_ORIGIN_ID;




 typedef struct tagINPUT_MESSAGE_SOURCE {
     INPUT_MESSAGE_DEVICE_TYPE deviceType;
     INPUT_MESSAGE_ORIGIN_ID originId;
 } INPUT_MESSAGE_SOURCE;





__declspec(dllimport)
BOOL
__stdcall
GetCurrentInputMessageSource(
          INPUT_MESSAGE_SOURCE *inputMessageSource);

__declspec(dllimport)
BOOL
__stdcall
GetCIMSSM(
          INPUT_MESSAGE_SOURCE *inputMessageSource);
#line 15044 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef enum tagAR_STATE {
    AR_ENABLED = 0x0,
    AR_DISABLED = 0x1,
    AR_SUPPRESSED = 0x2,
    AR_REMOTESESSION = 0x4,
    AR_MULTIMON = 0x8,
    AR_NOSENSOR = 0x10,
    AR_NOT_SUPPORTED = 0x20,
    AR_DOCKED = 0x40,
    AR_LAPTOP = 0x80
} AR_STATE, *PAR_STATE;
#line 15063 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
extern "C++" { inline AR_STATE operator | (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator |= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator & (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator &= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE operator ~ (AR_STATE a) { return AR_STATE(~((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a)); } inline AR_STATE operator ^ (AR_STATE a, AR_STATE b) { return AR_STATE(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } inline AR_STATE &operator ^= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<AR_STATE>::type)b)); } };
#line 15073 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8
} ORIENTATION_PREFERENCE;





extern "C++" { inline ORIENTATION_PREFERENCE operator | (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) | ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator |= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) |= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator & (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) & ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator &= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) &= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE operator ~ (ORIENTATION_PREFERENCE a) { return ORIENTATION_PREFERENCE(~((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a)); } inline ORIENTATION_PREFERENCE operator ^ (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)a) ^ ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } inline ORIENTATION_PREFERENCE &operator ^= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type &)a) ^= ((_ENUM_FLAG_SIZED_INTEGER<ORIENTATION_PREFERENCE>::type)b)); } };


__declspec(dllimport)
BOOL
__stdcall
GetAutoRotationState(
          PAR_STATE pState);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferences(
          ORIENTATION_PREFERENCE *pOrientation);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
         DWORD dwProcessId,
          ORIENTATION_PREFERENCE *pOrientation,
          BOOL *fRotateScreen);

__declspec(dllimport)
BOOL
__stdcall
SetDisplayAutoRotationPreferences(
         ORIENTATION_PREFERENCE orientation);
#line 15125 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
IsImmersiveProcess(
         HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
SetProcessRestrictionExemption(
         BOOL fEnableExemption);
#line 15152 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winuser.h"
}
#line 167 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
extern "C" {






#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\datetimeapi.h"
#line 37 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\datetimeapi.h"
extern "C" {
#line 50 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\datetimeapi.h"
__declspec(dllimport)
int
__stdcall
GetDateFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCSTR lpFormat,
                              LPSTR lpDateStr,
         int cchDate
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate
    );
#line 83 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\datetimeapi.h"
__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCSTR lpFormat,
                              LPSTR lpTimeStr,
         int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );
#line 128 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\datetimeapi.h"
__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpTime,
             LPCWSTR lpFormat,
                              LPWSTR lpTimeStr,
         int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME * lpDate,
             LPCWSTR lpFormat,
                              LPWSTR lpDateStr,
         int cchDate,
             LPCWSTR lpCalendar
    );
#line 166 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\datetimeapi.h"
}
#line 30 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
#line 934 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;

typedef CPINFOEXW CPINFOEX;
typedef LPCPINFOEXW LPCPINFOEX;
#line 992 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;

typedef NUMBERFMTW NUMBERFMT;
typedef LPNUMBERFMTW LPNUMBERFMT;
#line 1021 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;

typedef CURRENCYFMTW CURRENCYFMT;
typedef LPCURRENCYFMTW LPCURRENCYFMT;
#line 1053 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
enum SYSNLS_FUNCTION{
    COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;
#line 1071 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;
#line 1096 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;





typedef LONG GEOID;
typedef DWORD GEOTYPE;
typedef DWORD GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION = 0x0001,
    GEO_LATITUDE = 0x0002,
    GEO_LONGITUDE = 0x0003,
    GEO_ISO2 = 0x0004,
    GEO_ISO3 = 0x0005,
    GEO_RFC1766 = 0x0006,
    GEO_LCID = 0x0007,
    GEO_FRIENDLYNAME= 0x0008,
    GEO_OFFICIALNAME= 0x0009,
    GEO_TIMEZONES = 0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER = 0x000C,
    GEO_PARENT = 0x000D
};





enum SYSGEOCLASS {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0
};






typedef enum _NORM_FORM {
    NormalizationOther = 0,
    NormalizationC = 0x1,
    NormalizationD = 0x2,
    NormalizationKC = 0x5,

    NormalizationKD = 0x6

} NORM_FORM;
#line 1179 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);
#line 1262 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO;



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\stringapiset.h"
#line 20 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\stringapiset.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
#line 20 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\stringapiset.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\stringapiset.h"
extern "C" {
#line 43 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\stringapiset.h"
__declspec(dllimport)
int
__stdcall
CompareStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwCmpFlags,
                               LPCWCH lpString1,
         int cchCount1,
                               LPCWCH lpString2,
         int cchCount2,
               LPNLSVERSIONINFO lpVersionInformation,
               LPVOID lpReserved,
               LPARAM lParam
    );


__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
                               LPCWCH lpString1,
         int cchCount1,
                               LPCWCH lpString2,
         int cchCount2,
         BOOL bIgnoreCase
    );
#line 80 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\stringapiset.h"
__declspec(dllimport)
int
__stdcall
CompareStringW(
         LCID Locale,
         DWORD dwCmpFlags,
                               PCNZWCH lpString1,
         int cchCount1,
                               PCNZWCH lpString2,
         int cchCount2
    );





__declspec(dllimport)
int
__stdcall
FoldStringW(
         DWORD dwMapFlags,
                            LPCWCH lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest
    );
#line 118 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\stringapiset.h"
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
         LCID Locale,
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
                         LPWORD lpCharType
    );





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
         DWORD dwInfoType,
                            LPCWCH lpSrcStr,
         int cchSrc,
          LPWORD lpCharType
    );







__declspec(dllimport)


int
__stdcall
MultiByteToWideChar(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCCH lpMultiByteStr,
         int cbMultiByte,
                                             LPWSTR lpWideCharStr,
         int cchWideChar
    );


__declspec(dllimport)


int
__stdcall
WideCharToMultiByte(
         UINT CodePage,
         DWORD dwFlags,
                                 LPCWCH lpWideCharStr,
         int cchWideChar,
                                                   LPSTR lpMultiByteStr,
         int cbMultiByte,
             LPCCH lpDefaultChar,
              LPBOOL lpUsedDefaultChar
    );






}
#line 1279 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
#line 1345 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
         UINT CodePage);







__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);







__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
         UINT CodePage,
          LPCPINFO lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXA lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
         UINT CodePage,
         DWORD dwFlags,
          LPCPINFOEXW lpCPInfoEx);
#line 1411 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
CompareStringA(
         LCID Locale,
         DWORD dwCmpFlags,
                          PCNZCH lpString1,
         int cchCount1,
                          PCNZCH lpString2,
         int cchCount2);
#line 1457 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
FindNLSString(
                            LCID Locale,
                            DWORD dwFindNLSStringFlags,
                           LPCWSTR lpStringSource,
                            int cchSource,
                           LPCWSTR lpStringValue,
                            int cchValue,
                            LPINT pcchFound);




__declspec(dllimport)
int
__stdcall
LCMapStringW(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCWSTR lpSrcStr,
         int cchSrc,
                                               LPWSTR lpDestStr,
         int cchDest);




__declspec(dllimport)
int
__stdcall
LCMapStringA(
         LCID Locale,
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                                               LPSTR lpDestStr,
         int cchDest);






__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData);





__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
                              LPSTR lpLCData,
         int cchData
    );





__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
         LCID Locale,
         LCTYPE LCType,
         LPCSTR lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
         LCID Locale,
         LCTYPE LCType,
         LPCWSTR lpLCData);
#line 1552 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPSTR lpCalData,
         int cchData,
              LPDWORD lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue);






__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCSTR lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType,
         LPCWSTR lpCalData);
#line 1612 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
LoadStringByReference(
               DWORD Flags,
                   PCWSTR Language,
               PCWSTR SourceString,
                                  PWSTR Buffer,
               ULONG cchBuffer,
               PCWSTR Directory,
               PULONG pcchBufferOut
    );



__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
         BYTE TestChar
    );

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
         UINT CodePage,
         BYTE TestChar
    );
#line 1649 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
         LCID Locale,
                              LPWSTR lpName,
         int cchName,
         DWORD dwFlags);

__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
         LPCWSTR lpName,
         DWORD dwFlags);
#line 1675 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetDurationFormat(
         LCID Locale,
         DWORD dwFlags,
             const SYSTEMTIME *lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration);



__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const NUMBERFMTA *lpFormat,
                                LPSTR lpNumberStr,
         int cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber);







__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
         LCID Locale,
         DWORD dwFlags,
         LPCSTR lpValue,
             const CURRENCYFMTA *lpFormat,
                                  LPSTR lpCurrencyStr,
         int cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
         LCID Locale,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency);







__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
         CALINFO_ENUMPROCA lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
         CALINFO_ENUMPROCW lpCalInfoEnumProc,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
#line 1770 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
         CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
         CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
         LCID Locale,
         CALID Calendar,
         CALTYPE CalType);
#line 1795 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
         TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
         TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
         DATEFMT_ENUMPROCA lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
         DATEFMT_ENUMPROCW lpDateFmtEnumProc,
         LCID Locale,
         DWORD dwFlags);
#line 1840 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
         DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
         DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
         LCID Locale,
         DWORD dwFlags);
#line 1863 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
         LGRPID LanguageGroup,
         DWORD dwFlags);



__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
            NLS_FUNCTION Function,
            LCID Locale,
            LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
         NLS_FUNCTION Function,
         DWORD dwFlags,
         LPNLSVERSIONINFO lpVersionInformation,
                       LPCWSTR lpString,
         INT cchStr);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
         LCID Locale,
         DWORD dwFlags);







__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
         GEOID Location,
         GEOTYPE GeoType,
                              LPSTR lpGeoData,
         int cchData,
         LANGID LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
         GEOID Location,
         GEOTYPE GeoType,
                              LPWSTR lpGeoData,
         int cchData,
         LANGID LangId);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
         GEOCLASS GeoClass,
         GEOID ParentGeoId,
         GEO_ENUMPROC lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
         GEOCLASS GeoClass);







__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
         GEOID GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
         LCID Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
         LCID Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);


__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage( LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);

__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
         DWORD dwFlags,
          PULONG pulNumLanguages,
                                           PZZWSTR pwszLanguagesBuffer,
            PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
                DWORD dwFlags,
                PCZZWSTR pwszLanguagesBuffer,
                PULONG pulNumLanguages
);

__declspec(dllimport)

BOOL
__stdcall
GetFileMUIInfo(
                        DWORD dwFlags,
                        PCWSTR pcwszFilePath,
                                                                  PFILEMUIINFO pFileMUIInfo,
                        DWORD* pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
         DWORD dwFlags,
         PCWSTR pcwszFilePath ,
                                             PWSTR pwszLanguage,
            PULONG pcchLanguage,
                                           PWSTR pwszFileMUIPath,
                    PULONG pcchFileMUIPath,
                    PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
         DWORD dwFlags,
         PCZZWSTR pwmszLanguage,
                                             PZZWSTR pwszFallbackLanguages,
                PDWORD pcchFallbackLanguages,
          PDWORD pAttributes
);


__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
                DWORD dwFlags,
                    PCWSTR pcwstrNewLanguage,
                PCWSTR pcwstrPreviousLanguage,
                DWORD dwReserved,
                PDWORD pdwStatusRtrn
);







__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                         LCID Locale,
                         DWORD dwInfoType,
                        LPCSTR lpSrcStr,
                         int cchSrc,
                         LPWORD lpCharType);
#line 2157 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
         LCID Locale,
         DWORD dwInfoType,
                       LPCSTR lpSrcStr,
         int cchSrc,
          LPWORD lpCharType);

__declspec(dllimport)
int
__stdcall
FoldStringA(
         DWORD dwMapFlags,
                       LPCSTR lpSrcStr,
         int cchSrc,
                              LPSTR lpDestStr,
         int cchDest);






__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
         LOCALE_ENUMPROCA lpLocaleEnumProc,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
         LOCALE_ENUMPROCW lpLocaleEnumProc,
         DWORD dwFlags);







__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
         LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
         LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
         LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
         LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
         LGRPID LanguageGroup,
         DWORD dwFlags,
         LONG_PTR lParam);






__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
         UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
         UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
         DWORD dwFlags,
         LONG_PTR lParam);
#line 2270 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
         CODEPAGE_ENUMPROCA lpCodePageEnumProc,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
         CODEPAGE_ENUMPROCW lpCodePageEnumProc,
         DWORD dwFlags);
#line 2293 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall NormalizeString( NORM_FORM NormForm,
                                                     LPCWSTR lpSrcString,
                                                      int cwSrcLength,
                                                      LPWSTR lpDstString,
                                                      int cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString( NORM_FORM NormForm,
                                                 LPCWSTR lpString,
                                                  int cwLength );




__declspec(dllimport)
int
__stdcall IdnToAscii( DWORD dwFlags,
                                               LPCWSTR lpUnicodeCharStr,
                                                int cchUnicodeChar,
                                                 LPWSTR lpASCIICharStr,
                                                int cchASCIIChar);

__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode( DWORD dwFlags,
                                                            LPCWSTR lpUnicodeCharStr,
                                                             int cchUnicodeChar,
                                                                LPWSTR lpNameprepCharStr,
                                                             int cchNameprepChar);

__declspec(dllimport)
int
__stdcall IdnToUnicode( DWORD dwFlags,
                                                  LPCWSTR lpASCIICharStr,
                                                   int cchASCIIChar,
                                                     LPWSTR lpUnicodeCharStr,
                                                   int cchUnicodeChar);

__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
            DWORD dwFlags,
            LPCWSTR lpLocaleScripts,
            int cchLocaleScripts,
            LPCWSTR lpTestScripts,
            int cchTestScripts);

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                     DWORD dwFlags,
                                     LPCWSTR lpString,
                                     int cchString,
                                     LPWSTR lpScripts,
                                     int cchScripts);
#line 2370 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
             LPCWSTR lpLocaleName,
         LCTYPE LCType,
                              LPWSTR lpLCData,
         int cchData
);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
                              LPWSTR lpCalData,
         int cchData,
              LPDWORD lpValue
);

__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
             const SYSTEMTIME *lpDuration,
         ULONGLONG ullDuration,
             LPCWSTR lpFormat,
                                  LPWSTR lpDurationStr,
         int cchDuration
);

__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const NUMBERFMTW *lpFormat,
                                LPWSTR lpNumberStr,
         int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPCWSTR lpValue,
             const CURRENCYFMTW *lpFormat,
                                  LPWSTR lpCurrencyStr,
         int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);

__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
                                LPWSTR lpLocaleName,
         int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
             NLS_FUNCTION function,
                LPCWSTR lpLocaleName,
                LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
DWORD
__stdcall
IsValidNLSVersion(
                NLS_FUNCTION function,
                LPCWSTR lpLocaleName,
                LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwFindNLSStringFlags,
                          LPCWSTR lpStringSource,
         int cchSource,
                         LPCWSTR lpStringValue,
         int cchValue,
              LPINT pcchFound,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM sortHandle
);
#line 2489 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
LCMapStringEx(
             LPCWSTR lpLocaleName,
         DWORD dwMapFlags,
                       LPCWSTR lpSrcStr,
         int cchSrc,
                              LPWSTR lpDestStr,
         int cchDest,
             LPNLSVERSIONINFO lpVersionInformation,
             LPVOID lpReserved,
             LPARAM sortHandle
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
         LPCWSTR lpLocaleName
);

typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
         CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
             LPCWSTR lpLocaleName,
         CALID Calendar,
             LPCWSTR lpReserved,
         CALTYPE CalType,
         LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
         DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
         TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
             LPCWSTR lpLocaleName,
         DWORD dwFlags,
         LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
         LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
         DWORD dwFlags,
         LPARAM lParam,
             LPVOID lpReserved
);
#line 2571 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                                    LPCWSTR lpNameToResolve,
                                    LPWSTR lpLocaleName,
                                    int cchLocaleName
);
#line 2596 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnls.h"
}
#line 169 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
#line 30 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
extern "C" {
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;







typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;







typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;
#line 97 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;
#line 125 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;
#line 164 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
#line 200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;




typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;
#line 258 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;
#line 285 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
         DWORD CtrlType
    );
#line 330 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );




__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
         HANDLE hConsoleInput,
                        const INPUT_RECORD *lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
         HANDLE hConsoleOutput,
                                                  PCHAR_INFO lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpReadRegion
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
         HANDLE hConsoleOutput,
                                                const CHAR_INFO *lpBuffer,
         COORD dwBufferSize,
         COORD dwBufferCoord,
            PSMALL_RECT lpWriteRegion
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                          LPSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                          LPWSTR lpCharacter,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfCharsRead
    );






__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                          LPWORD lpAttribute,
         DWORD nLength,
         COORD dwReadCoord,
          LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
                        LPCSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
                        LPCWSTR lpCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
         HANDLE hConsoleOutput,
                        const WORD *lpAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
         HANDLE hConsoleOutput,
         CHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
         HANDLE hConsoleOutput,
         WCHAR cCharacter,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfCharsWritten
    );






__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
         HANDLE hConsoleOutput,
         WORD wAttribute,
         DWORD nLength,
         COORD dwWriteCoord,
          LPDWORD lpNumberOfAttrsWritten
    );




__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
            PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
         HANDLE hConsoleOutput,
         PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
         HANDLE hConsoleOutput,
          PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
          PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
         HANDLE hConsoleOutput,
         BOOL bMaximumWindow,
         PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);


__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
          PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
         PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
         HANDLE hConsoleOutput,
         DWORD nFont
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
          PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
          LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
         HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
         HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
         HANDLE hConsoleOutput,
         COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
         HANDLE hConsoleOutput,
         COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
         HANDLE hConsoleOutput,
         const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
         HANDLE hConsoleOutput,
         const SMALL_RECT *lpScrollRectangle,
             const SMALL_RECT *lpClipRectangle,
         COORD dwDestinationOrigin,
         const CHAR_INFO *lpFill
    );






__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
         HANDLE hConsoleOutput,
         BOOL bAbsolute,
         const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
         HANDLE hConsoleOutput,
         WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
         DWORD dwCtrlEvent,
         DWORD dwProcessGroupId);

__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void);


__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
         DWORD dwProcessId);





__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize
    );







__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
                        LPSTR lpConsoleTitle,
         DWORD nSize);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
                        LPWSTR lpConsoleTitle,
         DWORD nSize);







__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
         LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
         LPCWSTR lpConsoleTitle
    );
#line 804 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;








#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\consoleapi.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\consoleapi.h"
extern "C" {






__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
         HANDLE hConsoleHandle,
          LPDWORD lpMode
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
         HANDLE hConsoleInput,
          LPDWORD lpNumberOfEvents
    );


__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
         HANDLE hConsoleInput,
                          PINPUT_RECORD lpBuffer,
         DWORD nLength,
          LPDWORD lpNumberOfEventsRead
    );






__declspec(dllimport)

BOOL
__stdcall
ReadConsoleA(
         HANDLE hConsoleInput,
                                                                                                    LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );

__declspec(dllimport)

BOOL
__stdcall
ReadConsoleW(
         HANDLE hConsoleInput,
                                                                                                      LPVOID lpBuffer,
         DWORD nNumberOfCharsToRead,
                                                      LPDWORD lpNumberOfCharsRead,
             PCONSOLE_READCONSOLE_CONTROL pInputControl
    );







__declspec(dllimport)

BOOL
__stdcall
ReadConsoleInputA(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)

BOOL
__stdcall
ReadConsoleInputW(
         HANDLE hConsoleInput,
                                                    PINPUT_RECORD lpBuffer,
         DWORD nLength,
                                         LPDWORD lpNumberOfEventsRead
    );







__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
             PHANDLER_ROUTINE HandlerRoutine,
         BOOL Add
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
         HANDLE hConsoleHandle,
         DWORD dwMode
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
         HANDLE hConsoleOutput,
                                      const void * lpBuffer,
         DWORD nNumberOfCharsToWrite,
              LPDWORD lpNumberOfCharsWritten,
               LPVOID lpReserved
    );
#line 206 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\consoleapi.h"
}
#line 817 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"






__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
         DWORD dwDesiredAccess,
         DWORD dwShareMode,
             const SECURITY_ATTRIBUTES *lpSecurityAttributes,
         DWORD dwFlags,
               LPVOID lpScreenBufferData
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
         UINT wCodePageID
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
         UINT wCodePageID
    );






__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
          LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
         HANDLE hConsoleOutput,
         DWORD dwFlags,
              PCOORD lpNewScreenBufferDimensions);

__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );





__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
                                 LPDWORD lpdwProcessList,
         DWORD dwProcessCount);





__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
         LPSTR Source,
         LPSTR Target,
         LPSTR ExeName);
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
         LPWSTR Source,
         LPWSTR Target,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
         LPSTR Source,
                                     LPSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
         LPWSTR Source,
                                     LPWSTR TargetBuffer,
         DWORD TargetBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
                                    LPSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
                                    LPWSTR AliasBuffer,
         DWORD AliasBufferLength,
         LPWSTR ExeName);






__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
                                      LPSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
                                      LPWSTR ExeNameBuffer,
         DWORD ExeNameBufferLength);
#line 1010 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincon.h"
}
#line 172 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winver.h"
#line 19 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winver.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\verrsrc.h"
#line 133 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\verrsrc.h"
extern "C" {
#line 147 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\verrsrc.h"
typedef struct tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;


}
#line 19 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winver.h"




extern "C" {
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winver.h"
DWORD
__stdcall
VerFindFileA(
                                     DWORD uFlags,
                                     LPCSTR szFileName,
                                     LPCSTR szWinDir,
                                     LPCSTR szAppDir,
                                     LPSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPSTR szDestDir,
                                     PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                     DWORD uFlags,
                                     LPCWSTR szFileName,
                                     LPCWSTR szWinDir,
                                     LPCWSTR szAppDir,
                                     LPWSTR szCurDir,
                                     PUINT puCurDirLen,
                                     LPWSTR szDestDir,
                                     PUINT puDestDirLen
        );






DWORD
__stdcall
VerInstallFileA(
                                     DWORD uFlags,
                                     LPCSTR szSrcFileName,
                                     LPCSTR szDestFileName,
                                     LPCSTR szSrcDir,
                                     LPCSTR szDestDir,
                                     LPCSTR szCurDir,
                                     LPSTR szTmpFile,
                                     PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                     DWORD uFlags,
                                     LPCWSTR szSrcFileName,
                                     LPCWSTR szDestFileName,
                                     LPCWSTR szSrcDir,
                                     LPCWSTR szDestDir,
                                     LPCWSTR szCurDir,
                                     LPWSTR szTmpFile,
                                     PUINT puTmpFileLen
        );







DWORD
__stdcall
GetFileVersionInfoSizeA(
                    LPCSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                    LPCWSTR lptstrFilename,
                  LPDWORD lpdwHandle
        );







BOOL
__stdcall
GetFileVersionInfoA(
                            LPCSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );

BOOL
__stdcall
GetFileVersionInfoW(
                            LPCWSTR lptstrFilename,
                            DWORD dwHandle,
                            DWORD dwLen,
                                  LPVOID lpData
        );






DWORD __stdcall GetFileVersionInfoSizeExA( DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW( DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);






BOOL __stdcall GetFileVersionInfoExA( DWORD dwFlags,
                                         LPCSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW( DWORD dwFlags,
                                         LPCWSTR lpwstrFilename,
                                               DWORD dwHandle,
                                         DWORD dwLen,
                                                              LPVOID lpData);







DWORD
__stdcall
VerLanguageNameA(
                              DWORD wLang,
                              LPSTR szLang,
                              DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                              DWORD wLang,
                              LPWSTR szLang,
                              DWORD cchLang
        );






BOOL
__stdcall
VerQueryValueA(
             LPCVOID pBlock,
             LPCSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
             LPCVOID pBlock,
             LPCWSTR lpSubBlock,
                                                                                 LPVOID * lplpBuffer,
              PUINT puLen
        );
#line 212 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winver.h"
}
#line 173 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
#line 44 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
extern "C" {
#line 89 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
typedef ACCESS_MASK REGSAM;
#line 119 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
struct val_context {
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
};

typedef struct val_context *PVALCONTEXT;

typedef struct pvalueA {
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA, *PPVALUEA;
typedef struct pvalueW {
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW, *PPVALUEW;

typedef PVALUEW PVALUE;
typedef PPVALUEW PPVALUE;





typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);

typedef QUERYHANDLER *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info *PPROVIDER;

typedef struct value_entA {
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA, *PVALENTA;
typedef struct value_entW {
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW, *PVALENTW;

typedef VALENTW VALENT;
typedef PVALENTW PVALENT;
#line 201 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
typedef LONG LSTATUS;

__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey(
         HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
         HKEY hKey,
             HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
         HANDLE hToken,
               DWORD dwOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
         REGSAM samDesired,
          PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
             LPCSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
             LPCWSTR lpMachineName,
         HKEY hKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
             LPCSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
             LPCWSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
               DWORD Reserved,
             LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
               DWORD Reserved,
             LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          PHKEY phkResult,
              LPDWORD lpdwDisposition,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
         HKEY hKey,
         LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
         HKEY hKey,
         LPCWSTR lpSubKey
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA(
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW(
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
               DWORD Reserved,
                HANDLE hTransaction,
               PVOID pExtendedParameter
    );






__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
         HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
         HKEY hBase,
          BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA(
         HKEY hKey,
             LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW(
         HKEY hKey,
             LPCWSTR lpValueName
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
         HKEY hKey,
         DWORD dwIndex,
                              LPSTR lpName,
         DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
         HKEY hKey,
         DWORD dwIndex,
                              LPWSTR lpName,
         DWORD cchName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW(
         HKEY hKey,
         DWORD dwIndex,
                                                    LPWSTR lpName,
            LPDWORD lpcchName,
               LPDWORD lpReserved,
                                                     LPWSTR lpClass,
                LPDWORD lpcchClass,
              PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW(
         HKEY hKey,
         DWORD dwIndex,
                                                              LPWSTR lpValueName,
            LPDWORD lpcchValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,
                LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey(
         HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
                                                    PSECURITY_DESCRIPTOR pSecurityDescriptor,
            LPDWORD lpcbSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpFile
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpFile
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
         HKEY hKey,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter,
             HANDLE hEvent,
         BOOL fAsynchronous
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
          PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
          PHKEY phkResult
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA(
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW(
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
         HKEY hKey,
             LPCSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
         HKEY hKey,
             LPCWSTR lpSubKey,
             DWORD ulOptions,
         REGSAM samDesired,
          PHKEY phkResult,
                HANDLE hTransaction,
               PVOID pExtendedParemeter
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA(
         HKEY hKey,
                                                      LPSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW(
         HKEY hKey,
                                                      LPWSTR lpClass,
                LPDWORD lpcchClass,
               LPDWORD lpReserved,
              LPDWORD lpcSubKeys,
              LPDWORD lpcbMaxSubKeyLen,
              LPDWORD lpcbMaxClassLen,
              LPDWORD lpcValues,
              LPDWORD lpcbMaxValueNameLen,
              LPDWORD lpcbMaxValueLen,
              LPDWORD lpcbSecurityDescriptor,
              PFILETIME lpftLastWriteTime
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
                                                                                LPSTR lpData,
                PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
                                                                                LPWSTR lpData,
                PLONG lpcbData
    );
#line 810 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA (
         HKEY hKey,
                           PVALENTA val_list,
         DWORD num_vals,
                                                                                    LPSTR lpValueBuf,
                LPDWORD ldwTotsize
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW (
         HKEY hKey,
                           PVALENTW val_list,
         DWORD num_vals,
                                                                                    LPWSTR lpValueBuf,
                LPDWORD ldwTotsize
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               LPDWORD lpReserved,
              LPDWORD lpType,
                                                                                LPBYTE lpData,

                                                 LPDWORD lpcbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
         HKEY hKey,
             LPCSTR lpSubKey,
         LPCSTR lpNewFile,
         LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         LPCWSTR lpNewFile,
         LPCWSTR lpOldFile
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA(
         HKEY hKey,
         LPCSTR lpFile,
         DWORD dwFlags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW(
         HKEY hKey,
         LPCWSTR lpFile,
         DWORD dwFlags
    );
#line 920 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
         HKEY hKey,
             LPCWSTR lpSubKeyName,
         LPCWSTR lpNewKeyName
    );



__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity(
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
         HKEY hKey,
             LPCSTR lpSubKey,
         DWORD dwType,
                                 LPCSTR lpData,
         DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
         HKEY hKey,
             LPCWSTR lpSubKey,
         DWORD dwType,
                                 LPCWSTR lpData,
         DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA(
         HKEY hKey,
             LPCSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW(
         HKEY hKey,
             LPCWSTR lpValueName,
               DWORD Reserved,
         DWORD dwType,
                                 const BYTE * lpData,
         DWORD cbData
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA(
         HKEY hKey,
             LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW(
         HKEY hKey,
             LPCWSTR lpSubKey
    );
#line 1047 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA (
              HKEY hKey,
              LPCSTR lpSubKey,
              LPCSTR lpValueName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW (
              HKEY hKey,
              LPCWSTR lpSubKey,
              LPCWSTR lpValueName
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA (
                HKEY hKey,
                LPCSTR lpSubKey,
                LPCSTR lpValueName,
                DWORD dwType,
                                 LPCVOID lpData,
                DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW (
                HKEY hKey,
                LPCWSTR lpSubKey,
                LPCWSTR lpValueName,
                DWORD dwType,
                                 LPCVOID lpData,
                DWORD cbData
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA(
         HKEY hKey,
             LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW(
         HKEY hKey,
             LPCWSTR lpSubKey
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
                HKEY hKeySrc,
                LPCSTR lpSubKey,
                HKEY hKeyDest
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA(
         HKEY hkey,
             LPCSTR lpSubKey,
             LPCSTR lpValue,
         DWORD dwFlags,
              LPDWORD pdwType,







                                                 PVOID pvData,
                LPDWORD pcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW(
         HKEY hkey,
             LPCWSTR lpSubKey,
             LPCWSTR lpValue,
         DWORD dwFlags,
              LPDWORD pdwType,







                                                 PVOID pvData,
                LPDWORD pcbData
    );
#line 1185 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW(
         HKEY hKeySrc,
             LPCWSTR lpSubKey,
         HKEY hKeyDest
    );






__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA(
         HKEY hKey,
             LPCSTR pszValue,
                                     LPSTR pszOutBuf,
         DWORD cbOutBuf,
              LPDWORD pcbData,
         DWORD Flags,
             LPCSTR pszDirectory
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW(
         HKEY hKey,
             LPCWSTR pszValue,
                                     LPWSTR pszOutBuf,
         DWORD cbOutBuf,
              LPDWORD pcbData,
         DWORD Flags,
             LPCWSTR pszDirectory
    );







__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA(
         LPCSTR lpFile,
          PHKEY phkResult,
         REGSAM samDesired,
         DWORD dwOptions,
               DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW(
         LPCWSTR lpFile,
          PHKEY phkResult,
         REGSAM samDesired,
         DWORD dwOptions,
               DWORD Reserved
    );
#line 1266 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );

__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );







__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
             LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
             LPWSTR lpMachineName
    );
#line 1316 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\reason.h"
#line 1316 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
#line 1338 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );



__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );
#line 1385 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
             LPSTR lpMachineName,
             LPSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
             LPWSTR lpMachineName,
             LPWSTR lpMessage,
             DWORD dwGracePeriod,
             DWORD dwShutdownFlags,
             DWORD dwReason
    );






__declspec(dllimport)
DWORD
__stdcall
CheckForHiberboot(
            PBOOLEAN pHiberboot,
         BOOLEAN bClearFlag
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA(
         HKEY hKey,
         LPCSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW(
         HKEY hKey,
         LPCWSTR lpFile,
             const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );
#line 1450 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winreg.h"
}
#line 176 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
extern "C" {
#line 43 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wnnc.h"
#line 43 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
#line 92 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
typedef struct _NETRESOURCEA {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment ;
    LPSTR lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment ;
    LPWSTR lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;

typedef NETRESOURCEW NETRESOURCE;
typedef LPNETRESOURCEW LPNETRESOURCE;
#line 150 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetAddConnectionA(
             LPCSTR lpRemoteName,
             LPCSTR lpPassword,
             LPCSTR lpLocalName
    );

DWORD __stdcall
WNetAddConnectionW(
             LPCWSTR lpRemoteName,
             LPCWSTR lpPassword,
             LPCWSTR lpLocalName
    );







DWORD __stdcall
WNetAddConnection2A(
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection2W(
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetAddConnection3A(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserName,
             DWORD dwFlags
    );

DWORD __stdcall
WNetAddConnection3W(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserName,
             DWORD dwFlags
    );







DWORD __stdcall
WNetCancelConnectionA(
         LPCSTR lpName,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnectionW(
         LPCWSTR lpName,
         BOOL fForce
    );







DWORD __stdcall
WNetCancelConnection2A(
         LPCSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );

DWORD __stdcall
WNetCancelConnection2W(
         LPCWSTR lpName,
         DWORD dwFlags,
         BOOL fForce
    );







DWORD __stdcall
WNetGetConnectionA(
         LPCSTR lpLocalName,
                                 LPSTR lpRemoteName,
            LPDWORD lpnLength
    );

DWORD __stdcall
WNetGetConnectionW(
         LPCWSTR lpLocalName,
                                 LPWSTR lpRemoteName,
            LPDWORD lpnLength
    );
#line 276 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetRestoreSingleConnectionW(
             HWND hwndParent,
             LPCWSTR lpDevice,
             BOOL fUseUI
    );
#line 296 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetUseConnectionA(
             HWND hwndOwner,
             LPNETRESOURCEA lpNetResource,
             LPCSTR lpPassword,
             LPCSTR lpUserId,
             DWORD dwFlags,
                                    LPSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );

DWORD __stdcall
WNetUseConnectionW(
             HWND hwndOwner,
             LPNETRESOURCEW lpNetResource,
             LPCWSTR lpPassword,
             LPCWSTR lpUserId,
             DWORD dwFlags,
                                    LPWSTR lpAccessName,
                LPDWORD lpBufferSize,
              LPDWORD lpResult
    );
#line 331 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog(
         HWND hwnd,
         DWORD dwType
    );


DWORD __stdcall
WNetDisconnectDialog(
             HWND hwnd,
         DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;

typedef CONNECTDLGSTRUCTW CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTW LPCONNECTDLGSTRUCT;
#line 381 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetConnectionDialog1A(
            LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetConnectionDialog1W(
            LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );






typedef struct _DISCDLGSTRUCTA{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;

typedef DISCDLGSTRUCTW DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTW LPDISCDLGSTRUCT;
#line 422 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetDisconnectDialog1A(
         LPDISCDLGSTRUCTA lpConnDlgStruct
    );

DWORD __stdcall
WNetDisconnectDialog1W(
         LPDISCDLGSTRUCTW lpConnDlgStruct
    );
#line 443 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetOpenEnumA(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEA lpNetResource,
          LPHANDLE lphEnum
    );

DWORD __stdcall
WNetOpenEnumW(
          DWORD dwScope,
          DWORD dwType,
          DWORD dwUsage,
             LPNETRESOURCEW lpNetResource,
          LPHANDLE lphEnum
    );







DWORD __stdcall
WNetEnumResourceA(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetEnumResourceW(
            HANDLE hEnum,
            LPDWORD lpcCount,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );







DWORD __stdcall
WNetCloseEnum(
         HANDLE hEnum
    );



DWORD __stdcall
WNetGetResourceParentA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );

DWORD __stdcall
WNetGetResourceParentW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer
    );







DWORD __stdcall
WNetGetResourceInformationA(
         LPNETRESOURCEA lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPSTR *lplpSystem
    );

DWORD __stdcall
WNetGetResourceInformationW(
         LPNETRESOURCEW lpNetResource,
                                    LPVOID lpBuffer,
            LPDWORD lpcbBuffer,
             LPWSTR *lplpSystem
    );
#line 545 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
typedef struct _UNIVERSAL_NAME_INFOA {
    LPSTR lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW {
    LPWSTR lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;

typedef UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOW LPUNIVERSAL_NAME_INFO;





typedef struct _REMOTE_NAME_INFOA {
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;

typedef REMOTE_NAME_INFOW REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOW LPREMOTE_NAME_INFO;






DWORD __stdcall
WNetGetUniversalNameA(
         LPCSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetUniversalNameW(
         LPCWSTR lpLocalPath,
         DWORD dwInfoLevel,
                                      LPVOID lpBuffer,
            LPDWORD lpBufferSize
    );
#line 603 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetGetUserA(
             LPCSTR lpName,
                             LPSTR lpUserName,
             LPDWORD lpnLength
    );




DWORD __stdcall
WNetGetUserW(
             LPCWSTR lpName,
                             LPWSTR lpUserName,
             LPDWORD lpnLength
    );
#line 641 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetGetProviderNameA(
            DWORD dwNetType,
                                LPSTR lpProviderName,
            LPDWORD lpBufferSize
    );

DWORD __stdcall
WNetGetProviderNameW(
            DWORD dwNetType,
                                LPWSTR lpProviderName,
            LPDWORD lpBufferSize
    );






typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;






DWORD __stdcall
WNetGetNetworkInformationA(
          LPCSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );

DWORD __stdcall
WNetGetNetworkInformationW(
          LPCWSTR lpProvider,
          LPNETINFOSTRUCT lpNetInfoStruct
    );
#line 700 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
DWORD __stdcall
WNetGetLastErrorA(
          LPDWORD lpError,
                                LPSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPSTR lpNameBuf,
         DWORD nNameBufSize
    );

DWORD __stdcall
WNetGetLastErrorW(
          LPDWORD lpError,
                                LPWSTR lpErrorBuf,
         DWORD nErrorBufSize,
                               LPWSTR lpNameBuf,
         DWORD nNameBufSize
    );
#line 792 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT, *LPNETCONNECTINFOSTRUCT;







DWORD __stdcall
MultinetGetConnectionPerformanceA(
          LPNETRESOURCEA lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );

DWORD __stdcall
MultinetGetConnectionPerformanceW(
          LPNETRESOURCEW lpNetResource,
          LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
#line 829 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winnetwk.h"
}
#line 179 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\cderr.h"
#line 183 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dde.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dde.h"
extern "C" {
#line 55 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dde.h"
typedef struct {

        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
   fAck:1;



} DDEACK;
#line 74 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dde.h"
typedef struct {

        unsigned short reserved:14,
                 fDeferUpd:1,
   fAckReq:1;



 short cfFormat;
} DDEADVISE;
#line 95 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dde.h"
typedef struct {

 unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;



 short cfFormat;
 BYTE Value[1];
} DDEDATA;
#line 119 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dde.h"
typedef struct {

 unsigned short unused:13,

   fRelease:1,
   fReserved:2;



 short cfFormat;
 BYTE Value[1];


} DDEPOKE;
#line 144 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dde.h"
typedef struct {

        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
   fAckReq:1;



 short cfFormat;
} DDELN;

typedef struct {

 unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;



 short cfFormat;
 BYTE rgb[1];
} DDEUP;






BOOL
__stdcall
DdeSetQualityOfService(
    HWND hwndClient,
    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

BOOL
__stdcall
ImpersonateDdeClientWindow(
    HWND hWndClient,
    HWND hWndServer);




LPARAM __stdcall PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
BOOL __stdcall UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
BOOL __stdcall FreeDDElParam(UINT msg, LPARAM lParam);
LPARAM __stdcall ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);





}
#line 184 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
#line 18 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
extern "C" {







struct HCONVLIST__{int unused;}; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__{int unused;}; typedef struct HCONV__ *HCONV;
struct HSZ__{int unused;}; typedef struct HSZ__ *HSZ;
struct HDDEDATA__{int unused;}; typedef struct HDDEDATA__ *HDDEDATA;




typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR, *PHSZPAIR;




typedef struct tagCONVCONTEXT {
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
} CONVCONTEXT, *PCONVCONTEXT;




typedef struct tagCONVINFO {
    DWORD cb;
    DWORD_PTR hUser;
    HCONV hConvPartner;
    HSZ hszSvcPartner;
    HSZ hszServiceReq;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    UINT wType;
    UINT wStatus;
    UINT wConvst;
    UINT wLastError;
    HCONVLIST hConvList;
    CONVCONTEXT ConvCtxt;
    HWND hwnd;
    HWND hwndPartner;
} CONVINFO, *PCONVINFO;
#line 203 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);





UINT
__stdcall
DdeInitializeA(
            LPDWORD pidInst,
         PFNCALLBACK pfnCallback,
         DWORD afCmd,
               DWORD ulRes);
UINT
__stdcall
DdeInitializeW(
            LPDWORD pidInst,
         PFNCALLBACK pfnCallback,
         DWORD afCmd,
               DWORD ulRes);
#line 263 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
BOOL
__stdcall
DdeUninitialize(
         DWORD idInst);




HCONVLIST
__stdcall
DdeConnectList(
         DWORD idInst,
         HSZ hszService,
         HSZ hszTopic,
         HCONVLIST hConvList,
             PCONVCONTEXT pCC);

HCONV
__stdcall
DdeQueryNextServer(
         HCONVLIST hConvList,
         HCONV hConvPrev);
BOOL
__stdcall
DdeDisconnectList(
         HCONVLIST hConvList);




HCONV
__stdcall
DdeConnect(
         DWORD idInst,
         HSZ hszService,
         HSZ hszTopic,
             PCONVCONTEXT pCC);

BOOL
__stdcall
DdeDisconnect(
         HCONV hConv);

HCONV
__stdcall
DdeReconnect(
         HCONV hConv);

UINT
__stdcall
DdeQueryConvInfo(
         HCONV hConv,
         DWORD idTransaction,
            PCONVINFO pConvInfo);

BOOL
__stdcall
DdeSetUserHandle(
         HCONV hConv,
         DWORD id,
         DWORD_PTR hUser);

BOOL
__stdcall
DdeAbandonTransaction(
         DWORD idInst,
         HCONV hConv,
         DWORD idTransaction);





BOOL
__stdcall
DdePostAdvise(
         DWORD idInst,
         HSZ hszTopic,
         HSZ hszItem);

BOOL
__stdcall
DdeEnableCallback(
         DWORD idInst,
         HCONV hConv,
         UINT wCmd);

BOOL
__stdcall
DdeImpersonateClient(
         HCONV hConv);







HDDEDATA
__stdcall
DdeNameService(
         DWORD idInst,
             HSZ hsz1,
             HSZ hsz2,
         UINT afCmd);
#line 377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
HDDEDATA
__stdcall
DdeClientTransaction(
             LPBYTE pData,
         DWORD cbData,
         HCONV hConv,
             HSZ hszItem,
         UINT wFmt,
         UINT wType,
         DWORD dwTimeout,
              LPDWORD pdwResult);






HDDEDATA
__stdcall
DdeCreateDataHandle(
         DWORD idInst,
                             LPBYTE pSrc,
         DWORD cb,
         DWORD cbOff,
             HSZ hszItem,
         UINT wFmt,
         UINT afCmd);

HDDEDATA
__stdcall
DdeAddData(
         HDDEDATA hData,
                         LPBYTE pSrc,
         DWORD cb,
         DWORD cbOff);

DWORD
__stdcall
DdeGetData(
         HDDEDATA hData,
                                  LPBYTE pDst,
         DWORD cbMax,
         DWORD cbOff);

LPBYTE
__stdcall
DdeAccessData(
         HDDEDATA hData,
              LPDWORD pcbDataSize);

BOOL
__stdcall
DdeUnaccessData(
         HDDEDATA hData);

BOOL
__stdcall
DdeFreeDataHandle(
         HDDEDATA hData);




UINT
__stdcall
DdeGetLastError(
         DWORD idInst);
#line 471 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
HSZ
__stdcall
DdeCreateStringHandleA(
         DWORD idInst,
         LPCSTR psz,
         int iCodePage);
HSZ
__stdcall
DdeCreateStringHandleW(
         DWORD idInst,
         LPCWSTR psz,
         int iCodePage);






DWORD
__stdcall
DdeQueryStringA(
         DWORD idInst,
         HSZ hsz,
                             LPSTR psz,
         DWORD cchMax,
         int iCodePage);
DWORD
__stdcall
DdeQueryStringW(
         DWORD idInst,
         HSZ hsz,
                             LPWSTR psz,
         DWORD cchMax,
         int iCodePage);






BOOL
__stdcall
DdeFreeStringHandle(
         DWORD idInst,
         HSZ hsz);

BOOL
__stdcall
DdeKeepStringHandle(
         DWORD idInst,
         HSZ hsz);

int
__stdcall
DdeCmpStringHandles(
         HSZ hsz1,
         HSZ hsz2);






typedef struct tagDDEML_MSG_HOOK_DATA {
    UINT_PTR uiLo;
    UINT_PTR uiHi;
    DWORD cbData;
    DWORD Data[8];
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;


typedef struct tagMONMSGSTRUCT {
    UINT cb;
    HWND hwndTo;
    DWORD dwTime;
    HANDLE hTask;
    UINT wMsg;
    WPARAM wParam;
    LPARAM lParam;
    DDEML_MSG_HOOK_DATA dmhd;
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    DWORD dwRet;
    UINT wType;
    UINT wFmt;
    HCONV hConv;
    HSZ hsz1;
    HSZ hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;
    DWORD cbData;
    DWORD Data[8];
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA {
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    CHAR str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
    UINT cb;
    BOOL fsAction;
    DWORD dwTime;
    HSZ hsz;
    HANDLE hTask;
    WCHAR str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;

typedef MONHSZSTRUCTW MONHSZSTRUCT;
typedef PMONHSZSTRUCTW PMONHSZSTRUCT;
#line 600 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
typedef struct tagMONERRSTRUCT {
    UINT cb;
    UINT wLastError;
    DWORD dwTime;
    HANDLE hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT {
    UINT cb;
    DWORD dwTime;
    HANDLE hTask;
    BOOL fEstablished;
    BOOL fNoData;
    HSZ hszSvc;
    HSZ hszTopic;
    HSZ hszItem;
    UINT wFmt;
    BOOL fServer;
    HCONV hConvServer;
    HCONV hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT {
    UINT cb;
    BOOL fConnect;
    DWORD dwTime;
    HANDLE hTask;
    HSZ hszSvc;
    HSZ hszTopic;
    HCONV hConvClient;
    HCONV hConvServer;
} MONCONVSTRUCT, *PMONCONVSTRUCT;
#line 656 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ddeml.h"
}
#line 185 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dlgs.h"
#line 262 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dlgs.h"
typedef struct tagCRGB
{
    BYTE bRed;
    BYTE bGreen;
    BYTE bBlue;
    BYTE bExtra;
} CRGB;
#line 186 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\lzexpand.h"
#line 26 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\lzexpand.h"
extern "C" {
#line 52 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\lzexpand.h"
INT
__stdcall
LZStart(
    void
    );

void
__stdcall
LZDone(
    void
    );




LONG
__stdcall
CopyLZFile(
         INT hfSource,
         INT hfDest
    );



LONG
__stdcall
LZCopy(
         INT hfSource,
         INT hfDest
    );



INT
__stdcall
LZInit(
         INT hfSource
    );



INT
__stdcall
GetExpandedNameA(
         LPSTR lpszSource,
                           LPSTR lpszBuffer
    );


INT
__stdcall
GetExpandedNameW(
         LPWSTR lpszSource,
                           LPWSTR lpszBuffer
    );
#line 115 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\lzexpand.h"
INT
__stdcall
LZOpenFileA(
         LPSTR lpFileName,
            LPOFSTRUCT lpReOpenBuf,
         WORD wStyle
    );


INT
__stdcall
LZOpenFileW(
         LPWSTR lpFileName,
            LPOFSTRUCT lpReOpenBuf,
         WORD wStyle
    );
#line 139 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\lzexpand.h"
LONG
__stdcall
LZSeek(
         INT hFile,
         LONG lOffset,
         INT iOrigin
    );



INT
__stdcall
LZRead(
         INT hFile,
                                          CHAR* lpBuffer,
         INT cbRead
    );

void
__stdcall
LZClose(
         INT hFile
    );





}
#line 188 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 18 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#pragma warning(disable: 4201)



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"








extern "C" {
#line 94 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
typedef UINT MMVERSION;



typedef UINT MMRESULT;



typedef UINT *LPUINT;




typedef struct mmtime_tag
{
    UINT wType;
    union
    {
        DWORD ms;
        DWORD sample;
        DWORD cb;
        DWORD ticks;


        struct
        {
            BYTE hour;
            BYTE min;
            BYTE sec;
            BYTE frame;
            BYTE fps;
            BYTE dummy;

            BYTE pad[2];

        } smpte;


        struct
        {
            DWORD songptrpos;
        } midi;
    } u;
} MMTIME, *PMMTIME, *NPMMTIME, *LPMMTIME;
#line 275 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
struct HDRVR__{int unused;}; typedef struct HDRVR__ *HDRVR;
#line 297 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef DRVCALLBACK *LPDRVCALLBACK;

typedef DRVCALLBACK *PDRVCALLBACK;






}




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 312 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 37 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"








extern "C" {
#line 61 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
extern "C" {
#line 49 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef DWORD MCIERROR;




typedef UINT MCIDEVICEID;



typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);




__declspec(dllimport)
MCIERROR
__stdcall
mciSendCommandA(
         MCIDEVICEID mciId,
         UINT uMsg,
             DWORD_PTR dwParam1,
             DWORD_PTR dwParam2
    );

__declspec(dllimport)
MCIERROR
__stdcall
mciSendCommandW(
         MCIDEVICEID mciId,
         UINT uMsg,
             DWORD_PTR dwParam1,
             DWORD_PTR dwParam2
    );






__declspec(dllimport)
MCIERROR
__stdcall
mciSendStringA(
         LPCSTR lpstrCommand,
                                    LPSTR lpstrReturnString,
         UINT uReturnLength,
             HWND hwndCallback
    );

__declspec(dllimport)
MCIERROR
__stdcall
mciSendStringW(
         LPCWSTR lpstrCommand,
                                    LPWSTR lpstrReturnString,
         UINT uReturnLength,
             HWND hwndCallback
    );






__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDA(
         LPCSTR pszDevice
    );

__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDW(
         LPCWSTR pszDevice
    );






__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDFromElementIDA(
         DWORD dwElementID,
         LPCSTR lpstrType
    );

__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDFromElementIDW(
         DWORD dwElementID,
         LPCWSTR lpstrType
    );






__declspec(dllimport)
BOOL
__stdcall
mciGetErrorStringA(
         MCIERROR mcierr,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
BOOL
__stdcall
mciGetErrorStringW(
         MCIERROR mcierr,
                          LPWSTR pszText,
         UINT cchText
    );
#line 184 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
__declspec(dllimport)
BOOL
__stdcall
mciSetYieldProc(
         MCIDEVICEID mciId,
             YIELDPROC fpYieldProc,
         DWORD dwYieldData
    );




__declspec(dllimport)
HTASK
__stdcall
mciGetCreatorTask(
         MCIDEVICEID mciId
    );

__declspec(dllimport)
YIELDPROC
__stdcall
mciGetYieldProc(
         MCIDEVICEID mciId,
         LPDWORD pdwYieldData
    );
#line 516 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_GENERIC_PARMS {
    DWORD_PTR dwCallback;
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS, *LPMCI_GENERIC_PARMS;





typedef struct tagMCI_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;

typedef MCI_OPEN_PARMSW MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSW PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSW LPMCI_OPEN_PARMS;
#line 561 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS, *LPMCI_PLAY_PARMS;



typedef struct tagMCI_SEEK_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS, *LPMCI_SEEK_PARMS;



typedef struct tagMCI_STATUS_PARMS {
    DWORD_PTR dwCallback;
    DWORD_PTR dwReturn;
    DWORD dwItem;
    DWORD dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS, * LPMCI_STATUS_PARMS;





typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSA, * LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
} MCI_INFO_PARMSW, * LPMCI_INFO_PARMSW;

typedef MCI_INFO_PARMSW MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSW LPMCI_INFO_PARMS;
#line 615 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwReturn;
    DWORD dwItem;
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS, * LPMCI_GETDEVCAPS_PARMS;





typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR lpstrReturn;
    DWORD dwRetSize;
    DWORD dwNumber;
    UINT wDeviceType;
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;

typedef MCI_SYSINFO_PARMSW MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSW PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSW LPMCI_SYSINFO_PARMS;
#line 661 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
} MCI_SET_PARMS, *PMCI_SET_PARMS, *LPMCI_SET_PARMS;



typedef struct tagMCI_BREAK_PARMS {
    DWORD_PTR dwCallback;

    int nVirtKey;
    HWND hwndBreak;






} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS, * LPMCI_BREAK_PARMS;






typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;

typedef MCI_SAVE_PARMSW MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSW PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSW LPMCI_SAVE_PARMS;
#line 716 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;

typedef MCI_LOAD_PARMSW MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSW PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSW LPMCI_LOAD_PARMS;
#line 743 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_RECORD_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_RECORD_PARMS, *LPMCI_RECORD_PARMS;
#line 803 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS, *LPMCI_VD_PLAY_PARMS;



typedef struct tagMCI_VD_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS, *LPMCI_VD_STEP_PARMS;





typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;

typedef MCI_VD_ESCAPE_PARMSW MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSW PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSW LPMCI_VD_ESCAPE_PARMS;
#line 897 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;

typedef MCI_WAVE_OPEN_PARMSW MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSW PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSW LPMCI_WAVE_OPEN_PARMS;
#line 937 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS, *LPMCI_WAVE_DELETE_PARMS;



typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;

    UINT wInput;
    UINT wOutput;






    WORD wFormatTag;
    WORD wReserved2;
    WORD nChannels;
    WORD wReserved3;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wReserved4;
    WORD wBitsPerSample;
    WORD wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS, * LPMCI_WAVE_SET_PARMS;
#line 1009 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwTimeFormat;
    DWORD dwAudio;
    DWORD dwTempo;
    DWORD dwPort;
    DWORD dwSlave;
    DWORD dwMaster;
    DWORD dwOffset;
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS, * LPMCI_SEQ_SET_PARMS;
#line 1089 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;

typedef MCI_ANIM_OPEN_PARMSW MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSW PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSW LPMCI_ANIM_OPEN_PARMS;
#line 1133 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrom;
    DWORD dwTo;
    DWORD dwSpeed;
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS, *LPMCI_ANIM_PLAY_PARMS;



typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD_PTR dwCallback;
    DWORD dwFrames;
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS, *LPMCI_ANIM_STEP_PARMS;





typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;

typedef MCI_ANIM_WINDOW_PARMSW MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSW PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSW LPMCI_ANIM_WINDOW_PARMS;
#line 1186 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * LPMCI_ANIM_RECT_PARMS;



typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD_PTR dwCallback;
    RECT rc;
    HDC hDC;
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS, * LPMCI_ANIM_UPDATE_PARMS;
#line 1252 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR lpstrDeviceType;
    LPCSTR lpstrElementName;
    LPCSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD_PTR dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR lpstrDeviceType;
    LPCWSTR lpstrElementName;
    LPCWSTR lpstrAlias;
    DWORD dwStyle;
    HWND hWndParent;
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;

typedef MCI_OVLY_OPEN_PARMSW MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSW PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSW LPMCI_OVLY_OPEN_PARMS;
#line 1298 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD_PTR dwCallback;
    HWND hWnd;
    UINT nCmdShow;
    LPCWSTR lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;

typedef MCI_OVLY_WINDOW_PARMSW MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSW PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSW LPMCI_OVLY_WINDOW_PARMS;
#line 1332 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD_PTR dwCallback;




    RECT rc;

} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS, * LPMCI_OVLY_RECT_PARMS;





typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;

typedef MCI_OVLY_SAVE_PARMSW MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSW PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSW LPMCI_OVLY_SAVE_PARMS;
#line 1377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD_PTR dwCallback;
    LPCSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD_PTR dwCallback;
    LPCWSTR lpfilename;
    RECT rc;
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;

typedef MCI_OVLY_LOAD_PARMSW MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSW PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSW LPMCI_OVLY_LOAD_PARMS;
#line 1407 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mciapi.h"
DWORD_PTR
__stdcall
mciGetDriverData(
    MCIDEVICEID wDeviceID
    );

UINT
__stdcall
mciLoadCommandResource(
    HANDLE hInstance,
    LPCWSTR lpResName,
    UINT wType
    );

BOOL
__stdcall
mciSetDriverData(
    MCIDEVICEID wDeviceID,
    DWORD_PTR dwData
    );

UINT
__stdcall
mciDriverYield(
    MCIDEVICEID wDeviceID
    );

BOOL
__stdcall
mciDriverNotify(
    HANDLE hwndCallback,
    MCIDEVICEID wDeviceID,
    UINT uStatus
    );

BOOL
__stdcall
mciFreeCommandResource(
    UINT wTable
    );






}
#line 61 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
extern "C" {
#line 57 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
typedef struct DRVCONFIGINFOEX {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
    DWORD dnDevNode;
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX, *NPDRVCONFIGINFOEX, *LPDRVCONFIGINFOEX;
#line 96 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
typedef struct tagDRVCONFIGINFO {
    DWORD dwDCISize;
    LPCWSTR lpszDCISectionName;
    LPCWSTR lpszDCIAliasName;
} DRVCONFIGINFO, *PDRVCONFIGINFO, *NPDRVCONFIGINFO, *LPDRVCONFIGINFO;
#line 117 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
typedef LRESULT (__stdcall* DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

__declspec(dllimport)
LRESULT
__stdcall
CloseDriver(
         HDRVR hDriver,
         LPARAM lParam1,
         LPARAM lParam2
    );

__declspec(dllimport)
HDRVR
__stdcall
OpenDriver(
         LPCWSTR szDriverName,
         LPCWSTR szSectionName,
         LPARAM lParam2
    );

__declspec(dllimport)
LRESULT
__stdcall
SendDriverMessage(
         HDRVR hDriver,
         UINT message,
         LPARAM lParam1,
         LPARAM lParam2
    );

__declspec(dllimport)
HMODULE
__stdcall
DrvGetModuleHandle(
         HDRVR hDriver
    );

__declspec(dllimport)
HMODULE
__stdcall
GetDriverModuleHandle(
         HDRVR hDriver
    );

__declspec(dllimport)
LRESULT
__stdcall
DefDriverProc(
         DWORD_PTR dwDriverIdentifier,
         HDRVR hdrvr,
         UINT uMsg,
         LPARAM lParam1,
         LPARAM lParam2
    );
#line 200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
BOOL
__stdcall
DriverCallback(
    DWORD_PTR dwCallback,
    DWORD dwFlags,
    HDRVR hDevice,
    DWORD dwMsg,
    DWORD_PTR dwUser,
    DWORD_PTR dwParam1,
    DWORD_PTR dwParam2
    );
#line 220 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
LONG
__stdcall
sndOpenSound(
         LPCWSTR EventName,
         LPCWSTR AppName,
         INT32 Flags,
             PHANDLE FileHandle
    );
#line 244 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
typedef DWORD (__stdcall *DRIVERMSGPROC)(DWORD, DWORD, DWORD_PTR, DWORD_PTR, DWORD_PTR);

UINT
__stdcall
mmDrvInstall(
    HDRVR hDriver,
    LPCWSTR wszDrvEntry,
    DRIVERMSGPROC drvMessage,
    UINT wFlags
    );
#line 290 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
typedef DWORD FOURCC;
typedef char * HPSTR;
struct HMMIO__{int unused;}; typedef struct HMMIO__ *HMMIO;
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
            LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC *LPMMIOPROC;



typedef struct _MMIOINFO
{

        DWORD dwFlags;
        FOURCC fccIOProc;
        LPMMIOPROC pIOProc;
        UINT wErrorRet;
        HTASK htask;


        LONG cchBuffer;
        HPSTR pchBuffer;
        HPSTR pchNext;
        HPSTR pchEndRead;
        HPSTR pchEndWrite;
        LONG lBufOffset;


        LONG lDiskOffset;
        DWORD adwInfo[3];


        DWORD dwReserved1;
        DWORD dwReserved2;
        HMMIO hmmio;
} MMIOINFO, *PMMIOINFO, *NPMMIOINFO, *LPMMIOINFO;
typedef const MMIOINFO *LPCMMIOINFO;


typedef struct _MMCKINFO
{
        FOURCC ckid;
        DWORD cksize;
        FOURCC fccType;
        DWORD dwDataOffset;
        DWORD dwFlags;
} MMCKINFO, *PMMCKINFO, *NPMMCKINFO, *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;
#line 420 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
__declspec(dllimport)
FOURCC
__stdcall
mmioStringToFOURCCA(
    LPCSTR sz,
         UINT uFlags
    );

__declspec(dllimport)
FOURCC
__stdcall
mmioStringToFOURCCW(
    LPCWSTR sz,
         UINT uFlags
    );






__declspec(dllimport)
LPMMIOPROC
__stdcall
mmioInstallIOProcA(
         FOURCC fccIOProc,
             LPMMIOPROC pIOProc,
         DWORD dwFlags
    );

__declspec(dllimport)
LPMMIOPROC
__stdcall
mmioInstallIOProcW(
         FOURCC fccIOProc,
             LPMMIOPROC pIOProc,
         DWORD dwFlags
    );






__declspec(dllimport)
HMMIO
__stdcall
mmioOpenA(
                                   LPSTR pszFileName,
                LPMMIOINFO pmmioinfo,
         DWORD fdwOpen
    );

__declspec(dllimport)
HMMIO
__stdcall
mmioOpenW(
                                   LPWSTR pszFileName,
                LPMMIOINFO pmmioinfo,
         DWORD fdwOpen
    );






__declspec(dllimport)
MMRESULT
__stdcall
mmioRenameA(
         LPCSTR pszFileName,
         LPCSTR pszNewFileName,
             LPCMMIOINFO pmmioinfo,
         DWORD fdwRename
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioRenameW(
         LPCWSTR pszFileName,
         LPCWSTR pszNewFileName,
             LPCMMIOINFO pmmioinfo,
         DWORD fdwRename
    );
#line 522 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mmioClose(
         HMMIO hmmio,
         UINT fuClose
    );

__declspec(dllimport)
LONG
__stdcall
mmioRead(
         HMMIO hmmio,
                            HPSTR pch,
         LONG cch
    );

__declspec(dllimport)
LONG
__stdcall
mmioWrite(
         HMMIO hmmio,
                          const char * pch,
         LONG cch
    );

__declspec(dllimport)
LONG
__stdcall
mmioSeek(
         HMMIO hmmio,
         LONG lOffset,
         int iOrigin
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioGetInfo(
         HMMIO hmmio,
          LPMMIOINFO pmmioinfo,
         UINT fuInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioSetInfo(
         HMMIO hmmio,
         LPCMMIOINFO pmmioinfo,
         UINT fuInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioSetBuffer(
         HMMIO hmmio,
                                LPSTR pchBuffer,
         LONG cchBuffer,
         UINT fuBuffer
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioFlush(
         HMMIO hmmio,
         UINT fuFlush
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioAdvance(
         HMMIO hmmio,
             LPMMIOINFO pmmioinfo,
         UINT fuAdvance
    );

__declspec(dllimport)
LRESULT
__stdcall
mmioSendMessage(
         HMMIO hmmio,
         UINT uMsg,
             LPARAM lParam1,
             LPARAM lParam2
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioDescend(
         HMMIO hmmio,
            LPMMCKINFO pmmcki,
             const MMCKINFO * pmmckiParent,
         UINT fuDescend
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioAscend(
         HMMIO hmmio,
         LPMMCKINFO pmmcki,
         UINT fuAscend
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioCreateChunk(
         HMMIO hmmio,
         LPMMCKINFO pmmcki,
         UINT fuCreate
    );
#line 647 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi.h"
}
#line 66 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi2.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi2.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi2.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi2.h"
extern "C" {






typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
typedef TIMECALLBACK *LPTIMECALLBACK;
#line 62 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmiscapi2.h"
__declspec(dllimport)
MMRESULT
__stdcall
timeSetEvent(
         UINT uDelay,
         UINT uResolution,
         LPTIMECALLBACK fptc,
         DWORD_PTR dwUser,
         UINT fuEvent
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeKillEvent(
         UINT uTimerID
    );






}
#line 67 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\playsoundapi.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\playsoundapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\playsoundapi.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\playsoundapi.h"
extern "C" {
#line 52 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\playsoundapi.h"
__declspec(dllimport)
BOOL
__stdcall
sndPlaySoundA(
             LPCSTR pszSound,
         UINT fuSound
    );

__declspec(dllimport)
BOOL
__stdcall
sndPlaySoundW(
             LPCWSTR pszSound,
         UINT fuSound
    );
#line 117 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\playsoundapi.h"
__declspec(dllimport)
BOOL
__stdcall
PlaySoundA(
             LPCSTR pszSound,
             HMODULE hmod,
         DWORD fdwSound
    );

__declspec(dllimport)
BOOL
__stdcall
PlaySoundW(
             LPCWSTR pszSound,
             HMODULE hmod,
         DWORD fdwSound
    );
#line 151 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\playsoundapi.h"
}
#line 71 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
extern "C" {
#line 56 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
struct HWAVE__{int unused;}; typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__{int unused;}; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__{int unused;}; typedef struct HWAVEOUT__ *HWAVEOUT;
typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
#line 88 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct wavehdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD_PTR reserved;
} WAVEHDR, *PWAVEHDR, *NPWAVEHDR, *LPWAVEHDR;
#line 110 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagWAVEOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;

typedef WAVEOUTCAPSW WAVEOUTCAPS;
typedef PWAVEOUTCAPSW PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSW NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSW LPWAVEOUTCAPS;






typedef struct tagWAVEOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;

typedef WAVEOUTCAPS2W WAVEOUTCAPS2;
typedef PWAVEOUTCAPS2W PWAVEOUTCAPS2;
typedef NPWAVEOUTCAPS2W NPWAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2W LPWAVEOUTCAPS2;
#line 203 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagWAVEINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;

typedef WAVEINCAPSW WAVEINCAPS;
typedef PWAVEINCAPSW PWAVEINCAPS;
typedef NPWAVEINCAPSW NPWAVEINCAPS;
typedef LPWAVEINCAPSW LPWAVEINCAPS;






typedef struct tagWAVEINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;

typedef WAVEINCAPS2W WAVEINCAPS2;
typedef PWAVEINCAPS2W PWAVEINCAPS2;
typedef NPWAVEINCAPS2W NPWAVEINCAPS2;
typedef LPWAVEINCAPS2W LPWAVEINCAPS2;
#line 311 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct waveformat_tag {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
} WAVEFORMAT, *PWAVEFORMAT, *NPWAVEFORMAT, *LPWAVEFORMAT;






typedef struct pcmwaveformat_tag {
    WAVEFORMAT wf;
    WORD wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT, *NPPCMWAVEFORMAT, *LPPCMWAVEFORMAT;
#line 337 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;

} WAVEFORMATEX, *PWAVEFORMATEX, *NPWAVEFORMATEX, *LPWAVEFORMATEX;


typedef const WAVEFORMATEX *LPCWAVEFORMATEX;


__declspec(dllimport)
UINT
__stdcall
waveOutGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetDevCapsA(
         UINT_PTR uDeviceID,
          LPWAVEOUTCAPSA pwoc,
         UINT cbwoc
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetDevCapsW(
         UINT_PTR uDeviceID,
          LPWAVEOUTCAPSW pwoc,
         UINT cbwoc
    );
#line 393 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetVolume(
             HWAVEOUT hwo,
          LPDWORD pdwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetVolume(
             HWAVEOUT hwo,
         DWORD dwVolume
    );
#line 416 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
#line 444 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
waveOutOpen(
              LPHWAVEOUT phwo,
         UINT uDeviceID,
         LPCWAVEFORMATEX pwfx,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
waveOutClose(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutPrepareHeader(
         HWAVEOUT hwo,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutUnprepareHeader(
         HWAVEOUT hwo,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutWrite(
         HWAVEOUT hwo,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutPause(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutRestart(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutReset(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutBreakLoop(
         HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPosition(
         HWAVEOUT hwo,
                                 LPMMTIME pmmt,
         UINT cbmmt
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPitch(
         HWAVEOUT hwo,
          LPDWORD pdwPitch
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetPitch(
         HWAVEOUT hwo,
         DWORD dwPitch
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPlaybackRate(
         HWAVEOUT hwo,
          LPDWORD pdwRate
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetPlaybackRate(
         HWAVEOUT hwo,
         DWORD dwRate
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetID(
         HWAVEOUT hwo,
          LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
waveOutMessage(
             HWAVEOUT hwo,
         UINT uMsg,
         DWORD_PTR dw1,
         DWORD_PTR dw2
    );






__declspec(dllimport)
UINT
__stdcall
waveInGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
waveInGetDevCapsA(
         UINT_PTR uDeviceID,
                              LPWAVEINCAPSA pwic,
         UINT cbwic
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetDevCapsW(
         UINT_PTR uDeviceID,
                              LPWAVEINCAPSW pwic,
         UINT cbwic
    );
#line 627 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
waveInGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
#line 655 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
waveInOpen(
              LPHWAVEIN phwi,
         UINT uDeviceID,
         LPCWAVEFORMATEX pwfx,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
waveInClose(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInPrepareHeader(
         HWAVEIN hwi,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInUnprepareHeader(
         HWAVEIN hwi,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInAddBuffer(
         HWAVEIN hwi,
                                LPWAVEHDR pwh,
         UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInStart(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInStop(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInReset(
         HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetPosition(
         HWAVEIN hwi,
                                 LPMMTIME pmmt,
         UINT cbmmt
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetID(
         HWAVEIN hwi,
         LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
waveInMessage(
             HWAVEIN hwi,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );
#line 780 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
struct HMIDI__{int unused;}; typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__{int unused;}; typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__{int unused;}; typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__{int unused;}; typedef struct HMIDISTRM__ *HMIDISTRM;
typedef HMIDI *LPHMIDI;
typedef HMIDIIN *LPHMIDIIN;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HMIDISTRM *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD *LPKEYARRAY;
#line 833 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagMIDIOUTCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;

typedef MIDIOUTCAPSW MIDIOUTCAPS;
typedef PMIDIOUTCAPSW PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSW NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSW LPMIDIOUTCAPS;






typedef struct tagMIDIOUTCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wVoices;
    WORD wNotes;
    WORD wChannelMask;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;

typedef MIDIOUTCAPS2W MIDIOUTCAPS2;
typedef PMIDIOUTCAPS2W PMIDIOUTCAPS2;
typedef NPMIDIOUTCAPS2W NPMIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2W LPMIDIOUTCAPS2;
#line 941 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagMIDIINCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];


    DWORD dwSupport;

} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];


    DWORD dwSupport;

} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;

typedef MIDIINCAPSW MIDIINCAPS;
typedef PMIDIINCAPSW PMIDIINCAPS;
typedef NPMIDIINCAPSW NPMIDIINCAPS;
typedef LPMIDIINCAPSW LPMIDIINCAPS;






typedef struct tagMIDIINCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];


    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];


    DWORD dwSupport;

    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;

typedef MIDIINCAPS2W MIDIINCAPS2;
typedef PMIDIINCAPS2W PMIDIINCAPS2;
typedef NPMIDIINCAPS2W NPMIDIINCAPS2;
typedef LPMIDIINCAPS2W LPMIDIINCAPS2;
#line 1024 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct midihdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD_PTR dwUser;
    DWORD dwFlags;
    struct midihdr_tag *lpNext;
    DWORD_PTR reserved;


    DWORD dwOffset;
    DWORD_PTR dwReserved[8];

} MIDIHDR, *PMIDIHDR, *NPMIDIHDR, *LPMIDIHDR;



typedef struct midievent_tag
{
    DWORD dwDeltaTime;
    DWORD dwStreamID;
    DWORD dwEvent;
    DWORD dwParms[1];
} MIDIEVENT;

typedef struct midistrmbuffver_tag
{
    DWORD dwVersion;
    DWORD dwMid;
    DWORD dwOEMVersion;
} MIDISTRMBUFFVER;
#line 1108 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct midiproptimediv_tag
{
    DWORD cbStruct;
    DWORD dwTimeDiv;
} MIDIPROPTIMEDIV, *LPMIDIPROPTIMEDIV;

typedef struct midiproptempo_tag
{
    DWORD cbStruct;
    DWORD dwTempo;
} MIDIPROPTEMPO, *LPMIDIPROPTEMPO;




__declspec(dllimport)
UINT
__stdcall
midiOutGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
midiStreamOpen(
          LPHMIDISTRM phms,
                           LPUINT puDeviceID,
         DWORD cMidi,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamClose(
         HMIDISTRM hms
    );


__declspec(dllimport)
MMRESULT
__stdcall
midiStreamProperty(
         HMIDISTRM hms,
                                                       LPBYTE lppropdata,
         DWORD dwProperty
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamPosition(
         HMIDISTRM hms,
                              LPMMTIME lpmmt,
         UINT cbmmt
    );


__declspec(dllimport)
MMRESULT
__stdcall
midiStreamOut(
         HMIDISTRM hms,
                             LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamPause(
         HMIDISTRM hms
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamRestart(
         HMIDISTRM hms
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamStop(
         HMIDISTRM hms
    );



__declspec(dllimport)
MMRESULT
__stdcall
midiConnect(
         HMIDI hmi,
         HMIDIOUT hmo,
             LPVOID pReserved
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiDisconnect(
         HMIDI hmi,
         HMIDIOUT hmo,
             LPVOID pReserved
    );






__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetDevCapsA(
         UINT_PTR uDeviceID,
                              LPMIDIOUTCAPSA pmoc,
         UINT cbmoc
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetDevCapsW(
         UINT_PTR uDeviceID,
                              LPMIDIOUTCAPSW pmoc,
         UINT cbmoc
    );
#line 1256 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetVolume(
             HMIDIOUT hmo,
          LPDWORD pdwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutSetVolume(
             HMIDIOUT hmo,
         DWORD dwVolume
    );
#line 1279 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
#line 1307 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
midiOutOpen(
          LPHMIDIOUT phmo,
         UINT uDeviceID,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutClose(
         HMIDIOUT hmo
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutPrepareHeader(
         HMIDIOUT hmo,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutUnprepareHeader(
         HMIDIOUT hmo,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutShortMsg(
         HMIDIOUT hmo,
         DWORD dwMsg
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutLongMsg(
         HMIDIOUT hmo,
                           LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutReset(
         HMIDIOUT hmo
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutCachePatches(
         HMIDIOUT hmo,
         UINT uBank,
                              LPWORD pwpa,
         UINT fuCache
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutCacheDrumPatches(
         HMIDIOUT hmo,
         UINT uPatch,
                              LPWORD pwkya,
         UINT fuCache
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetID(
         HMIDIOUT hmo,
          LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
midiOutMessage(
             HMIDIOUT hmo,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );






__declspec(dllimport)
UINT
__stdcall
midiInGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
midiInGetDevCapsA(
         UINT_PTR uDeviceID,
                              LPMIDIINCAPSA pmic,
         UINT cbmic
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetDevCapsW(
         UINT_PTR uDeviceID,
                              LPMIDIINCAPSW pmic,
         UINT cbmic
    );






__declspec(dllimport)
MMRESULT
__stdcall
midiInGetErrorTextA(
         MMRESULT mmrError,
                          LPSTR pszText,
         UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetErrorTextW(
         MMRESULT mmrError,
                          LPWSTR pszText,
         UINT cchText
    );
#line 1476 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
midiInOpen(
          LPHMIDIIN phmi,
         UINT uDeviceID,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInClose(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInPrepareHeader(
         HMIDIIN hmi,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInUnprepareHeader(
         HMIDIIN hmi,
                                LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInAddBuffer(
         HMIDIIN hmi,
                             LPMIDIHDR pmh,
         UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInStart(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInStop(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInReset(
         HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetID(
         HMIDIIN hmi,
          LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
midiInMessage(
             HMIDIIN hmi,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );
#line 1586 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagAUXCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;

typedef AUXCAPSW AUXCAPS;
typedef PAUXCAPSW PAUXCAPS;
typedef NPAUXCAPSW NPAUXCAPS;
typedef LPAUXCAPSW LPAUXCAPS;






typedef struct tagAUXCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    WORD wTechnology;
    WORD wReserved1;
    DWORD dwSupport;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;

typedef AUXCAPS2W AUXCAPS2;
typedef PAUXCAPS2W PAUXCAPS2;
typedef NPAUXCAPS2W NPAUXCAPS2;
typedef LPAUXCAPS2W LPAUXCAPS2;
#line 1671 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
UINT
__stdcall
auxGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
auxGetDevCapsA(
         UINT_PTR uDeviceID,
                             LPAUXCAPSA pac,
         UINT cbac
    );

__declspec(dllimport)
MMRESULT
__stdcall
auxGetDevCapsW(
         UINT_PTR uDeviceID,
                             LPAUXCAPSW pac,
         UINT cbac
    );
#line 1707 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
auxSetVolume(
         UINT uDeviceID,
         DWORD dwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
auxGetVolume(
         UINT uDeviceID,
          LPDWORD pdwVolume
    );





__declspec(dllimport)
MMRESULT
__stdcall
auxOutMessage(
         UINT uDeviceID,
         UINT uMsg,
             DWORD_PTR dw1,
             DWORD_PTR dw2
    );
#line 1751 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
struct HMIXEROBJ__{int unused;}; typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef HMIXEROBJ *LPHMIXEROBJ;

struct HMIXER__{int unused;}; typedef struct HMIXER__ *HMIXER;
typedef HMIXER *LPHMIXER;
#line 1783 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
UINT
__stdcall
mixerGetNumDevs(
    void
    );




typedef struct tagMIXERCAPSA {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;

typedef MIXERCAPSW MIXERCAPS;
typedef PMIXERCAPSW PMIXERCAPS;
typedef LPMIXERCAPSW LPMIXERCAPS;





typedef struct tagMIXERCAPS2A {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    CHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    WCHAR szPname[32];
    DWORD fdwSupport;
    DWORD cDestinations;
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;

typedef MIXERCAPS2W MIXERCAPS2;
typedef PMIXERCAPS2W PMIXERCAPS2;
typedef LPMIXERCAPS2W LPMIXERCAPS2;
#line 1864 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetDevCapsA(
         UINT_PTR uMxId,
                                 LPMIXERCAPSA pmxcaps,
         UINT cbmxcaps
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetDevCapsW(
         UINT_PTR uMxId,
                                 LPMIXERCAPSW pmxcaps,
         UINT cbmxcaps
    );
#line 1892 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mixerOpen(
              LPHMIXER phmx,
         UINT uMxId,
             DWORD_PTR dwCallback,
             DWORD_PTR dwInstance,
         DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
mixerClose(
         HMIXER hmx
    );


__declspec(dllimport)
DWORD
__stdcall
mixerMessage(
             HMIXER hmx,
         UINT uMsg,
             DWORD_PTR dwParam1,
             DWORD_PTR dwParam2
    );




typedef struct tagMIXERLINEA {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    CHAR szShortName[16];
    CHAR szName[64];
    struct {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        CHAR szPname[32];
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
    DWORD cbStruct;
    DWORD dwDestination;
    DWORD dwSource;
    DWORD dwLineID;
    DWORD fdwLine;
    DWORD_PTR dwUser;
    DWORD dwComponentType;
    DWORD cChannels;
    DWORD cConnections;
    DWORD cControls;
    WCHAR szShortName[16];
    WCHAR szName[64];
    struct {
        DWORD dwType;
        DWORD dwDeviceID;
        WORD wMid;
        WORD wPid;
        MMVERSION vDriverVersion;
        WCHAR szPname[32];
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;

typedef MIXERLINEW MIXERLINE;
typedef PMIXERLINEW PMIXERLINE;
typedef LPMIXERLINEW LPMIXERLINE;
#line 2059 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineInfoA(
             HMIXEROBJ hmxobj,
            LPMIXERLINEA pmxl,
         DWORD fdwInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineInfoW(
             HMIXEROBJ hmxobj,
            LPMIXERLINEW pmxl,
         DWORD fdwInfo
    );
#line 2095 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetID(
             HMIXEROBJ hmxobj,
          UINT * puMxId,
         DWORD fdwId
    );
#line 2112 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagMIXERCONTROLA {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    CHAR szShortName[16];
    CHAR szName[64];
    union {
        struct {
            LONG lMinimum;
            LONG lMaximum;
        } ;
        struct {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } ;
        DWORD dwReserved[6];
    } Bounds;
    union {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD dwControlType;
    DWORD fdwControl;
    DWORD cMultipleItems;
    WCHAR szShortName[16];
    WCHAR szName[64];
    union {
        struct {
            LONG lMinimum;
            LONG lMaximum;
        } ;
        struct {
            DWORD dwMinimum;
            DWORD dwMaximum;
        } ;
        DWORD dwReserved[6];
    } Bounds;
    union {
        DWORD cSteps;
        DWORD cbCustomData;
        DWORD dwReserved[6];
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;

typedef MIXERCONTROLW MIXERCONTROL;
typedef PMIXERCONTROLW PMIXERCONTROL;
typedef LPMIXERCONTROLW LPMIXERCONTROL;
#line 2288 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagMIXERLINECONTROLSA {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
        DWORD dwControlID;
        DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLA pamxctrl;
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
    DWORD cbStruct;
    DWORD dwLineID;
    union {
        DWORD dwControlID;
        DWORD dwControlType;
    } ;
    DWORD cControls;
    DWORD cbmxctrl;
    LPMIXERCONTROLW pamxctrl;
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;

typedef MIXERLINECONTROLSW MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSW PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSW LPMIXERLINECONTROLS;
#line 2340 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineControlsA(
             HMIXEROBJ hmxobj,
            LPMIXERLINECONTROLSA pmxlc,
         DWORD fdwControls
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineControlsW(
             HMIXEROBJ hmxobj,
            LPMIXERLINECONTROLSW pmxlc,
         DWORD fdwControls
    );
#line 2375 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tMIXERCONTROLDETAILS {
    DWORD cbStruct;
    DWORD dwControlID;
    DWORD cChannels;
    union {
        HWND hwndOwner;
        DWORD cMultipleItems;
    } ;
    DWORD cbDetails;
    LPVOID paDetails;
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS, *LPMIXERCONTROLDETAILS;
#line 2394 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD dwParam1;
    DWORD dwParam2;
    CHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD dwParam1;
    DWORD dwParam2;
    WCHAR szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;

typedef MIXERCONTROLDETAILS_LISTTEXTW MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTW PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTW LPMIXERCONTROLDETAILS_LISTTEXT;
#line 2426 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG fValue;
} MIXERCONTROLDETAILS_BOOLEAN,
      *PMIXERCONTROLDETAILS_BOOLEAN,
     *LPMIXERCONTROLDETAILS_BOOLEAN;

typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG lValue;
} MIXERCONTROLDETAILS_SIGNED,
      *PMIXERCONTROLDETAILS_SIGNED,
     *LPMIXERCONTROLDETAILS_SIGNED;


typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD dwValue;
} MIXERCONTROLDETAILS_UNSIGNED,
      *PMIXERCONTROLDETAILS_UNSIGNED,
     *LPMIXERCONTROLDETAILS_UNSIGNED;




__declspec(dllimport)
MMRESULT
__stdcall
mixerGetControlDetailsA(
             HMIXEROBJ hmxobj,
            LPMIXERCONTROLDETAILS pmxcd,
         DWORD fdwDetails
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetControlDetailsW(
             HMIXEROBJ hmxobj,
            LPMIXERCONTROLDETAILS pmxcd,
         DWORD fdwDetails
    );
#line 2481 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mixerSetControlDetails(
             HMIXEROBJ hmxobj,
         LPMIXERCONTROLDETAILS pmxcd,
         DWORD fdwDetails
    );
#line 2502 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmeapi.h"
}
#line 73 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 82 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timeapi.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timeapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timeapi.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timeapi.h"
extern "C" {
#line 57 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timeapi.h"
typedef struct timecaps_tag {
    UINT wPeriodMin;
    UINT wPeriodMax;
} TIMECAPS, *PTIMECAPS, *NPTIMECAPS, *LPTIMECAPS;


__declspec(dllimport)
MMRESULT
__stdcall
timeGetSystemTime(
                              LPMMTIME pmmt,
         UINT cbmmt
    );

__declspec(dllimport)
DWORD
__stdcall
timeGetTime(
    void
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeGetDevCaps(
                             LPTIMECAPS ptc,
         UINT cbtc
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeBeginPeriod(
         UINT uPeriod
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeEndPeriod(
         UINT uPeriod
    );
#line 107 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\timeapi.h"
}
#line 82 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 92 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsyscom.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
#line 34 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
extern "C" {
#line 148 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
typedef struct tagJOYCAPSA {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;


    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];

} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;


    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];

} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;

typedef JOYCAPSW JOYCAPS;
typedef PJOYCAPSW PJOYCAPS;
typedef NPJOYCAPSW NPJOYCAPS;
typedef LPJOYCAPSW LPJOYCAPS;






typedef struct tagJOYCAPS2A {
    WORD wMid;
    WORD wPid;
    CHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    CHAR szRegKey[32];
    CHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W {
    WORD wMid;
    WORD wPid;
    WCHAR szPname[32];
    UINT wXmin;
    UINT wXmax;
    UINT wYmin;
    UINT wYmax;
    UINT wZmin;
    UINT wZmax;
    UINT wNumButtons;
    UINT wPeriodMin;
    UINT wPeriodMax;
    UINT wRmin;
    UINT wRmax;
    UINT wUmin;
    UINT wUmax;
    UINT wVmin;
    UINT wVmax;
    UINT wCaps;
    UINT wMaxAxes;
    UINT wNumAxes;
    UINT wMaxButtons;
    WCHAR szRegKey[32];
    WCHAR szOEMVxD[260];
    GUID ManufacturerGuid;
    GUID ProductGuid;
    GUID NameGuid;
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;

typedef JOYCAPS2W JOYCAPS2;
typedef PJOYCAPS2W PJOYCAPS2;
typedef NPJOYCAPS2W NPJOYCAPS2;
typedef LPJOYCAPS2W LPJOYCAPS2;
#line 321 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
typedef struct joyinfo_tag {
    UINT wXpos;
    UINT wYpos;
    UINT wZpos;
    UINT wButtons;
} JOYINFO, *PJOYINFO, *NPJOYINFO, *LPJOYINFO;



typedef struct joyinfoex_tag {
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwXpos;
    DWORD dwYpos;
    DWORD dwZpos;
    DWORD dwRpos;
    DWORD dwUpos;
    DWORD dwVpos;
    DWORD dwButtons;
    DWORD dwButtonNumber;
    DWORD dwPOV;
    DWORD dwReserved1;
    DWORD dwReserved2;
} JOYINFOEX, *PJOYINFOEX, *NPJOYINFOEX, *LPJOYINFOEX;






__declspec(dllimport)
MMRESULT
__stdcall
joyGetPosEx(
         UINT uJoyID,
          LPJOYINFOEX pji
    );



__declspec(dllimport)
UINT
__stdcall
joyGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
joyGetDevCapsA(
         UINT_PTR uJoyID,
                             LPJOYCAPSA pjc,
         UINT cbjc
    );

__declspec(dllimport)
MMRESULT
__stdcall
joyGetDevCapsW(
         UINT_PTR uJoyID,
                             LPJOYCAPSW pjc,
         UINT cbjc
    );
#line 397 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
joyGetPos(
         UINT uJoyID,
          LPJOYINFO pji
    );

__declspec(dllimport)
MMRESULT
__stdcall
joyGetThreshold(
         UINT uJoyID,
          LPUINT puThreshold
    );

__declspec(dllimport)
MMRESULT
__stdcall
joyReleaseCapture(
         UINT uJoyID
    );

__declspec(dllimport)
MMRESULT
__stdcall
joySetCapture(
         HWND hwnd,
         UINT uJoyID,
         UINT uPeriod,
         BOOL fChanged
    );

__declspec(dllimport)
MMRESULT
__stdcall
joySetThreshold(
         UINT uJoyID,
         UINT uThreshold
    );




__declspec(dllimport)
MMRESULT
__stdcall
joyConfigChanged(
         DWORD dwFlags
    );
#line 456 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\joystickapi.h"
}
#line 92 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 139 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
}




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 143 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mmsystem.h"
#line 189 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\nb30.h"
#line 26 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\nb30.h"
extern "C" {
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\nb30.h"
typedef struct _NCB {
    UCHAR ncb_command;
    UCHAR ncb_retcode;
    UCHAR ncb_lsn;
    UCHAR ncb_num;
    PUCHAR ncb_buffer;
    WORD ncb_length;
    UCHAR ncb_callname[16];
    UCHAR ncb_name[16];
    UCHAR ncb_rto;
    UCHAR ncb_sto;
    void (__stdcall *ncb_post)( struct _NCB * );
    UCHAR ncb_lana_num;
    UCHAR ncb_cmd_cplt;



    UCHAR ncb_reserve[10];

    HANDLE ncb_event;



} NCB, *PNCB;






typedef struct _ADAPTER_STATUS {
    UCHAR adapter_address[6];
    UCHAR rev_major;
    UCHAR reserved0;
    UCHAR adapter_type;
    UCHAR rev_minor;
    WORD duration;
    WORD frmr_recv;
    WORD frmr_xmit;

    WORD iframe_recv_err;

    WORD xmit_aborts;
    DWORD xmit_success;
    DWORD recv_success;

    WORD iframe_xmit_err;

    WORD recv_buff_unavail;
    WORD t1_timeouts;
    WORD ti_timeouts;
    DWORD reserved1;
    WORD free_ncbs;
    WORD max_cfg_ncbs;
    WORD max_ncbs;
    WORD xmit_buf_unavail;
    WORD max_dgram_size;
    WORD pending_sess;
    WORD max_cfg_sess;
    WORD max_sess;
    WORD max_sess_pkt_size;
    WORD name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

typedef struct _NAME_BUFFER {
    UCHAR name[16];
    UCHAR name_num;
    UCHAR name_flags;
} NAME_BUFFER, *PNAME_BUFFER;
#line 135 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\nb30.h"
typedef struct _SESSION_HEADER {
    UCHAR sess_name;
    UCHAR num_sess;
    UCHAR rcv_dg_outstanding;
    UCHAR rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;

typedef struct _SESSION_BUFFER {
    UCHAR lsn;
    UCHAR state;
    UCHAR local_name[16];
    UCHAR remote_name[16];
    UCHAR rcvs_outstanding;
    UCHAR sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;
#line 167 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\nb30.h"
typedef struct _LANA_ENUM {
    UCHAR length;
    UCHAR lana[254 +1];
} LANA_ENUM, *PLANA_ENUM;






typedef struct _FIND_NAME_HEADER {
    WORD node_count;
    UCHAR reserved;
    UCHAR unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;

typedef struct _FIND_NAME_BUFFER {
    UCHAR length;
    UCHAR access_control;
    UCHAR frame_control;
    UCHAR destination_addr[6];
    UCHAR source_addr[6];
    UCHAR routing_info[18];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;






typedef struct _ACTION_HEADER {
    ULONG transport_id;
    USHORT action_code;
    USHORT reserved;
} ACTION_HEADER, *PACTION_HEADER;
#line 302 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\nb30.h"
UCHAR
__stdcall
Netbios(
    PNCB pncb
    );
#line 321 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\nb30.h"
}
#line 190 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
extern "C" {
#line 76 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
typedef void * I_RPC_HANDLE;




typedef long RPC_STATUS;
#line 158 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
#line 25 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
extern "C" {
#line 57 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef unsigned char * RPC_CSTR;





typedef unsigned short * RPC_WSTR;
typedef const unsigned short * RPC_CWSTR;


typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
#line 77 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef GUID UUID;
#line 89 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
                        RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;




typedef struct _UUID_VECTOR
{
  unsigned long Count;
                      UUID *Uuid[1];
} UUID_VECTOR;
#line 113 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef void * RPC_IF_HANDLE;
#line 123 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 208 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short * Protseq[1];
} RPC_PROTSEQ_VECTORW;
#line 235 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY, *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
         UUID * ObjectUuid,
          UUID * TypeUuid,
          RPC_STATUS * Status
    );


typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
         RPC_IF_HANDLE InterfaceUuid,
         void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
         void *Context
    ) ;
#line 274 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingCopy (
         RPC_BINDING_HANDLE SourceBinding,
          RPC_BINDING_HANDLE * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
            RPC_BINDING_HANDLE * Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqOption (
          RPC_BINDING_HANDLE hBinding,
          unsigned long option,
          ULONG_PTR *pOptionValue
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
         RPC_CSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
         RPC_WSTR StringBinding,
          RPC_BINDING_HANDLE * Binding
    );
#line 376 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
         void *ContextHandle,
          RPC_BINDING_HANDLE * Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqObject (
         RPC_BINDING_HANDLE Binding,
          UUID * ObjectUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingReset (
         RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetObject (
         RPC_BINDING_HANDLE Binding,
         UUID * ObjectUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel (
          unsigned long AuthnSvc,
          unsigned long *AuthnLevel
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR * StringBinding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR * StringBinding
    );
#line 467 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
            RPC_BINDING_VECTOR * * BindingVector
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingComposeA (
             RPC_CSTR ObjUuid,
             RPC_CSTR ProtSeq,
             RPC_CSTR NetworkAddr,
             RPC_CSTR Endpoint,
             RPC_CSTR Options,
                 RPC_CSTR * StringBinding
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingComposeW (
             RPC_WSTR ObjUuid,
             RPC_WSTR ProtSeq,
             RPC_WSTR NetworkAddr,
             RPC_WSTR Endpoint,
             RPC_WSTR Options,
                 RPC_WSTR * StringBinding
    );
#line 532 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingParseA (
         RPC_CSTR StringBinding,
                 RPC_CSTR * ObjUuid,
                 RPC_CSTR * Protseq,
                 RPC_CSTR * NetworkAddr,
                 RPC_CSTR * Endpoint,
                 RPC_CSTR * NetworkOptions
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcStringBindingParseW (
         RPC_WSTR StringBinding,
                 RPC_WSTR * ObjUuid,
                 RPC_WSTR * Protseq,
                 RPC_WSTR * NetworkAddr,
                 RPC_WSTR * Endpoint,
                 RPC_WSTR * NetworkOptions
    );
#line 586 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
            RPC_CSTR * String
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
            RPC_WSTR * String
    );
#line 619 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcIfInqId (
         RPC_IF_HANDLE RpcIfHandle,
          RPC_IF_ID * RpcIfId
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
         RPC_CSTR Protseq
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
         RPC_WSTR Protseq
    );
#line 666 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
         RPC_BINDING_HANDLE Binding,
          unsigned int * Timeout
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
         RPC_BINDING_HANDLE Binding,
         unsigned int Timeout
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
         long Timeout
    );






__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
             RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
             RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
#line 733 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectInqType (
         UUID * ObjUuid,
                       UUID * TypeUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectSetInqFn (
         RPC_OBJECT_INQ_FN * InquiryFn
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcObjectSetType (
         UUID * ObjUuid,
                      UUID * TypeUuid
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
            RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
            RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
#line 797 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqBindings (
             RPC_BINDING_VECTOR * * BindingVector
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * * MgrEpv
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerListen (
         unsigned int MinimumCallThreads,
         unsigned int MaxCalls,
         unsigned int DontWait
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterIf (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
             RPC_IF_CALLBACK_FN *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf3 (
         RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
             void * MgrEpv,
         unsigned int Flags,
         unsigned int MaxCalls,
         unsigned int MaxRpcSize,
             RPC_IF_CALLBACK_FN *IfCallback,
             void * SecurityDescriptor
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUnregisterIf (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         unsigned int WaitForCallsToComplete
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
             RPC_IF_HANDLE IfSpec,
             UUID * MgrTypeUuid,
         int RundownContextHandles
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );






__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1032 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1115 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
             void * SecurityDescriptor,
         PRPC_POLICY Policy
    );
#line 1194 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)
void
__stdcall
RpcServerYield (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
            RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqStats (
             RPC_BINDING_HANDLE Binding,
             RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
             RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
             RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
         unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
             RPC_BINDING_HANDLE Binding,
             RPC_IF_ID_VECTOR * * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
            RPC_IF_ID_VECTOR * * IfIdVector
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_CSTR * ServerPrincName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
             RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
             RPC_WSTR * ServerPrincName
    );
#line 1331 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
         unsigned long AuthnSvc,
             RPC_CSTR * PrincName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
         unsigned long AuthnSvc,
             RPC_WSTR * PrincName
    );
#line 1368 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpResolveBinding (
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_CSTR * EntryName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
             RPC_WSTR * EntryName
    );
#line 1426 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef void * RPC_AUTH_IDENTITY_HANDLE;
typedef void * RPC_AUTHZ_HANDLE;
#line 1500 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
                                                   unsigned short *User;
  unsigned long UserLength;
                                                     unsigned short *Domain;
  unsigned long DomainLength;
                                                       unsigned short *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;





typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
                             unsigned char *User;
  unsigned long UserLength;
                               unsigned char *Domain;
  unsigned long DomainLength;
                                 unsigned char *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
#line 1578 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;



typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;





typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
                                       unsigned long *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
                                            unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;



typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;




typedef struct _RPC_SECURITY_QOS_V3_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;






typedef struct _RPC_SECURITY_QOS_V4_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

typedef struct _RPC_SECURITY_QOS_V4_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;






typedef struct _RPC_SECURITY_QOS_V5_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_W, *PRPC_SECURITY_QOS_V5_W;

typedef struct _RPC_SECURITY_QOS_V5_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_A, *PRPC_SECURITY_QOS_V5_A;
#line 1888 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;



typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;



typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;
#line 1967 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateA (
         RPC_BINDING_HANDLE_TEMPLATE_V1_A * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_A * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateW (
         RPC_BINDING_HANDLE_TEMPLATE_V1_W * Template,
             RPC_BINDING_HANDLE_SECURITY_V1_W * Security,
             RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
          RPC_BINDING_HANDLE * Binding
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingGetTrainingContextHandle (
         RPC_BINDING_HANDLE Binding,
             void ** ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindingHandle (
          RPC_BINDING_HANDLE * Binding
    );
#line 2019 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;
#line 2037 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
         RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
         RPC_WSTR ServerName,
         RPC_WSTR ServerPort,
             RPC_WSTR RemoteUser,
             RPC_WSTR AuthType,
            void * ResourceUuid,
            void * SessionId,
             void * Interface,
             void * Reserved,
         unsigned long Flags,
                 RPC_WSTR * NewServerName,
                 RPC_WSTR * NewServerPort
    );
#line 2064 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
         RPC_WSTR String
    );
#line 2088 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcImpersonateClient (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient2 (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcRevertToSelfEx (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcRevertToSelf (
    void
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_AUTHZ_HANDLE * Privs,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              unsigned long * AuthzSvc,
          unsigned long Flags
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
             RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQos
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
             RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
             RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
             RPC_SECURITY_QOS * SecurityQOS
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
                 RPC_CSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
          unsigned long RpcQosVersion,
              RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
                 RPC_WSTR * ServerPrincName,
              unsigned long * AuthnLevel,
              unsigned long * AuthnSvc,
              RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
              unsigned long * AuthzSvc,
         unsigned long RpcQosVersion,
              RPC_SECURITY_QOS * SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
         void * Arg,
         RPC_WSTR ServerPrincName,
         unsigned long KeyVer,
             void * * Key,
          RPC_STATUS * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerCompleteSecurityCallback(
         RPC_BINDING_HANDLE BindingHandle,
         RPC_STATUS Status
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
             RPC_CSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
             RPC_WSTR ServerPrincName,
         unsigned long AuthnSvc,
             RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
             void * Arg
    );
#line 2414 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct {
    unsigned char * UserName;
    unsigned char * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1, * PRPC_CLIENT_INFORMATION1;



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcBindingServerFromClient (
             RPC_BINDING_HANDLE ClientBinding,
          RPC_BINDING_HANDLE * ServerBinding
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
         RPC_STATUS exception
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcTestCancel(
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcServerTestCancel (
             RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcCancelThread(
         void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
         void * Thread,
         long Timeout
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidCreate (
          UUID * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
          UUID * Uuid
    );




__declspec(dllimport)

RPC_STATUS
__stdcall
UuidToStringA (
         const UUID * Uuid,
             RPC_CSTR * StringUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidFromStringA (
             RPC_CSTR StringUuid,
          UUID * Uuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidToStringW (
         const UUID * Uuid,
             RPC_WSTR * StringUuid
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
UuidFromStringW (
             RPC_WSTR StringUuid,
          UUID * Uuid
    );
#line 2561 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)
signed int
__stdcall
UuidCompare (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
UuidCreateNil (
          UUID * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
         UUID * Uuid1,
         UUID * Uuid2,
          RPC_STATUS * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
         UUID * Uuid,
          RPC_STATUS * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
         UUID * Uuid,
          RPC_STATUS * Status
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_CSTR Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpRegisterW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector,
             RPC_WSTR Annotation
    );
#line 2682 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcEpUnregister(
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR * BindingVector,
             UUID_VECTOR * UuidVector
    );





__declspec(dllimport)

RPC_STATUS
__stdcall
DceErrorInqTextA (
         RPC_STATUS RpcStatus,
                                         RPC_CSTR ErrorText
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
DceErrorInqTextW (
         RPC_STATUS RpcStatus,
                                         RPC_WSTR ErrorText
    );
#line 2732 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;
#line 2745 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
                      RPC_BINDING_HANDLE EpBinding,
         unsigned long InquiryType,
             RPC_IF_ID * IfId,
             unsigned long VersOption,
             UUID * ObjectUuid,
          RPC_EP_INQ_HANDLE * InquiryContext
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
            RPC_EP_INQ_HANDLE * InquiryContext
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_CSTR * Annotation
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
         RPC_EP_INQ_HANDLE InquiryContext,
          RPC_IF_ID * IfId,
              RPC_BINDING_HANDLE * Binding,
              UUID * ObjectUuid,
                 RPC_WSTR * Annotation
    );
#line 2812 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
             RPC_BINDING_HANDLE EpBinding,
         RPC_IF_ID * IfId,
         RPC_BINDING_HANDLE Binding,
             UUID * ObjectUuid
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
         RPC_BINDING_HANDLE ClientBinding,
         unsigned long RequestedMgmtOperation,
          RPC_STATUS * Status
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
         RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );


__declspec(dllimport)
int
__stdcall
RpcExceptionFilter (
         unsigned long ExceptionCode
    );
#line 2874 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef void *RPC_INTERFACE_GROUP, **PRPC_INTERFACE_GROUP;


typedef struct
{
    unsigned long Version;
    RPC_WSTR ProtSeq;
    RPC_WSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEW, *PRPC_ENDPOINT_TEMPLATEW;

typedef struct
{
    unsigned long Version;
    RPC_CSTR ProtSeq;
    RPC_CSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEA, *PRPC_ENDPOINT_TEMPLATEA;
#line 2915 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef struct
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_CSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEA, *PRPC_INTERFACE_TEMPLATEA;

typedef struct
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_WSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEW, *PRPC_INTERFACE_TEMPLATEW;
#line 2974 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
typedef void __stdcall
RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN (
         RPC_INTERFACE_GROUP IfGroup,
         void* IdleCallbackContext,
         unsigned long IsGroupIdle
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateW (
                       RPC_INTERFACE_TEMPLATEW *Interfaces,
         unsigned long NumIfs,
                             RPC_ENDPOINT_TEMPLATEW *Endpoints,
         unsigned long NumEndpoints,
         unsigned long IdlePeriod,
         RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
         void* IdleCallbackContext,
          PRPC_INTERFACE_GROUP IfGroup
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateA (
                       RPC_INTERFACE_TEMPLATEA *Interfaces,
         unsigned long NumIfs,
                             RPC_ENDPOINT_TEMPLATEA *Endpoints,
         unsigned long NumEndpoints,
         unsigned long IdlePeriod,
         RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
         void* IdleCallbackContext,
          PRPC_INTERFACE_GROUP IfGroup
    );
#line 3039 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupClose (
         RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupActivate (
         RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupDeactivate (
         RPC_INTERFACE_GROUP IfGroup,
         unsigned long ForceDeactivation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupInqBindings (
         RPC_INTERFACE_GROUP IfGroup,
             RPC_BINDING_VECTOR * * BindingVector
    );








#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
extern "C" {





typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void * RpcInterfaceInformation;
    void * ReservedForRuntime;
    void * ManagerEpv;
    void * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE, * PRPC_MESSAGE;







typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                          UUID * InterfaceId,
                          RPC_VERSION * InterfaceVersion,
                          UUID * ObjectId,
                          unsigned char * Rpcpro,
                          void * * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                           void * arg
                        );
#line 164 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
typedef
void
(__stdcall * RPC_DISPATCH_FUNCTION) (
           PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION * DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char * RpcProtocolSequence;
    unsigned char * Endpoint;
} RPC_PROTSEQ_ENDPOINT, * PRPC_PROTSEQ_ENDPOINT;
#line 189 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE, * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE, * PRPC_CLIENT_INTERFACE;
#line 222 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
           RPC_MESSAGE * Message
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcGetBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
           RPC_MESSAGE * Message,
       UUID * ObjectUuid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSendReceive (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcFreeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSend (
           PRPC_MESSAGE Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcReceive (
           PRPC_MESSAGE Message,
       unsigned int Size
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
           RPC_MESSAGE * Message
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
         PRPC_MESSAGE Message,
     unsigned int NewSize
    );

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
           I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
       I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void *
__stdcall
I_RpcAllocate (
       unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
       void * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntChkSystemHandleLeak (
       void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrChkSystemHandleLeak (
       void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntSetSystemHandle (
       void* Handle,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrSetSystemHandle (
       void* Handle,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcClntGetSystemHandle (
                                              unsigned char** pMemory,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcSvrGetSystemHandle (
                                              unsigned char** ppMemory,
       unsigned char Type,
       unsigned long AccessMask,
    void * CallObj
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
       unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    void
    );

typedef
void
(__stdcall * PRPC_RUNDOWN) (
    void * AssociationContext
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
       RPC_BINDING_HANDLE Handle,
       PRPC_RUNDOWN RundownRoutine,
       void * Context
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
       RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
       RPC_BINDING_HANDLE BindingHandle,
        void * * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
       RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
       RPC_BINDING_HANDLE BindingHandle,
        void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
       unsigned long EntryNameSyntax,
       unsigned short *EntryName,
       RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
       RPC_BINDING_HANDLE Binding,
        unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
       RPC_BINDING_HANDLE Binding,
        void **SecurityContextHandle
    );


typedef struct _RPC_SEC_CONTEXT_KEY_INFO
{
    unsigned long EncryptAlgorithm;
    unsigned long KeySize;
    unsigned long SignatureAlgorithm;
}
RPC_SEC_CONTEXT_KEY_INFO, *PRPC_SEC_CONTEXT_KEY_INFO;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContextKeyInfo (
             RPC_BINDING_HANDLE Binding,
            void *KeyInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
         RPC_BINDING_HANDLE Binding,
          unsigned char * WireId
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqMarshalledTargetInfo (
         RPC_BINDING_HANDLE Binding,
          unsigned long * MarshalledTargetInfoSize,
                                                           RPC_CSTR * MarshalledTargetInfo
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
       RPC_BINDING_HANDLE Binding,
        unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
       RPC_BINDING_HANDLE Binding,
        void **AsyncHandle
    );




__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
             RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
             RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
             void * SecurityDescriptor,
         void * Policy
    );
#line 660 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartService (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint,
         RPC_IF_HANDLE IfSpec
    );



__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
         RPC_BINDING_HANDLE Binding,
                              RPC_WSTR *DynamicEndpoint
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
         RPC_BINDING_HANDLE Binding,
                              RPC_CSTR *DynamicEndpoint
    );
#line 709 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
       RPC_BINDING_HANDLE Context
    );







__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
       RPC_BINDING_HANDLE Binding,
        unsigned int * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
       RPC_IF_HANDLE RpcIfHandle,
        RPC_TRANSFER_SYNTAX * TransferSyntaxes,
       unsigned int TransferSyntaxSize,
        unsigned int * TransferSyntaxCount
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_UuidCreate (
        UUID * Uuid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingCopy (
       RPC_BINDING_HANDLE SourceBinding,
        RPC_BINDING_HANDLE * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
                RPC_BINDING_HANDLE BindingHandle,
        unsigned int * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
       RPC_BINDING_HANDLE Binding,
        void **ConnId,
        int *pfFirstCall
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCreateNP (
         RPC_WSTR ServerName,
         RPC_WSTR ServiceName,
         RPC_WSTR NetworkOptions,
          RPC_BINDING_HANDLE *Binding
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void * pAddress
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
       RPC_FORWARD_FUNCTION * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn(
    void
    );

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
       RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );
#line 833 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqRemoteConnAddress (
       RPC_BINDING_HANDLE Binding,
           void *Buffer,
           unsigned long *BufferSize,
        unsigned long *AddressFormat
    );

__declspec(dllimport)
void
__stdcall
I_RpcSessionStrictContextHandle (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
      unsigned long * RecvBuffSize,
      unsigned long * SendBuffSize
  );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
      unsigned long RecvBuffSize,
      unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
       void *Buffer,
       unsigned int BufferLength,
       int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
       RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerStopListening(
    void
    );

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
       void * hWnd,
       void * Context,
                void * hSyncEvent
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
       RPC_BINDING_HANDLE Binding,
       RPC_BLOCKING_FN BlockingFn,
       unsigned long ServerTid
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcSetThreadParams(
       int fClientFree,
                void *Context,
                void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
       void * hWnd,
       unsigned int Message,
       unsigned int wParam,
       unsigned long lParam
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
         RPC_CSTR Protseq,
         RPC_CSTR Endpoint
    );

__declspec(dllimport)

RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint
    );
#line 978 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
        unsigned int * Type
    );

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
       RPC_STATUS Status
    );







typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;
                                   char *Buffer;
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{

    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;


    unsigned short *ServerName;
    unsigned short *ServerPort;
    unsigned short *RemoteUser;
    unsigned short *AuthType;
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;


} RDR_CALLOUT_STATE;



typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
             RPC_WSTR Machine,
             RPC_WSTR DotMachine,
             unsigned long PortNumber
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
           void *Context,
            char *Buffer,
            unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
            unsigned long *ConnectionTimeout
        );


typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn)
    (
       void *Context,
       RDR_CALLOUT_STATE *CallOutState,
       RPC_HTTP_REDIRECTOR_STAGE Stage
    );

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
       RDR_CALLOUT_STATE *CallOutState
    );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)
        (
             void *Context,
                  int *SessionIdPresent,
                  UUID *SessionId,
              int *ResourceIdPresent,
              UUID *ResourceId
        );




typedef RPC_STATUS
(__stdcall *I_RpcProxyFilterIfFn)
    (
         void *Context,
         UUID *IfUuid,
         unsigned short IfMajorVersion,
          int *fAllow
    );

typedef enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,
    RpcBackEndConnectionAttempts,
    RpcBackEndConnectionFailed,
    RpcRequestsPerSecond,
    RpcIncomingConnections,
    RpcIncomingBandwidth,
    RpcOutgoingBandwidth,
    RpcAttemptedLbsDecisions,
    RpcFailedLbsDecisions,
    RpcAttemptedLbsMessages,
    RpcFailedLbsMessages,
    RpcLastCounter
} RpcPerfCounters;

typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterFn)
    (
         RpcPerfCounters Counter,
         int ModifyTrend,
         unsigned long Size
    );

 typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterBackendServerFn)
    (
         unsigned short* MachineName,
         int IsConnectEvent
    );







typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;

    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;

} I_RpcProxyCallbackInterface;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
       unsigned long ConnectionType,
       unsigned short *ServerAddress,
       unsigned short *ServerPort,
       unsigned short *MinConnTimeout,
       void *ConnectionParameter,
                RDR_CALLOUT_STATE *CallOutState,
       I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );
#line 1178 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdcep.h"
__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReplyToClientWithStatus (
       void *ConnectionParameter,
       RPC_STATUS RpcStatus
    );

__declspec(dllimport)
void
__stdcall
I_RpcRecordCalloutFailure (
       RPC_STATUS RpcStatus,
       RDR_CALLOUT_STATE *CallOutState,
       unsigned short *DllName
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMgmtEnableDedicatedThreadPool (
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetDefaultSD(
          void ** ppSecurityDescriptor
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcOpenClientProcess(
             RPC_BINDING_HANDLE Binding,
         unsigned long DesiredAccess,
             void** ClientProcess
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsServerLocal(
         RPC_BINDING_HANDLE Binding,
          unsigned int * ServerLocalFlag
    );

RPC_STATUS __stdcall
I_RpcBindingSetPrivateOption (
         RPC_BINDING_HANDLE hBinding,
         unsigned long option,
         ULONG_PTR optionValue
    );






RPC_STATUS
__stdcall
I_RpcServerSubscribeForDisconnectNotification (
         RPC_BINDING_HANDLE Binding,
         void * hEvent
    );

RPC_STATUS
__stdcall
I_RpcServerGetAssociationID (
         RPC_BINDING_HANDLE Binding,
          unsigned long * AssociationID
    );

__declspec(dllimport)
long
__stdcall
I_RpcServerDisableExceptionFilter (
    );







}
#line 3075 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcdce.h"



}
#line 158 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\rpcnsi.h"
#line 28 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\rpcnsi.h"
typedef void * RPC_NS_HANDLE;
#line 44 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\rpcnsi.h"
__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             RPC_BINDING_VECTOR *BindingVec,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectUuidVec
    );





RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID_VECTOR *ObjectVector
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
         unsigned long BindingMaxCount,
          RPC_NS_HANDLE *LookupContext
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
        RPC_NS_HANDLE LookupContext,
        RPC_BINDING_VECTOR * * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
           RPC_NS_HANDLE * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
         unsigned long GroupNameSyntax,
             RPC_CSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
            RPC_NS_HANDLE InquiryContext,
             RPC_CSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
         unsigned long GroupNameSyntax,
             RPC_WSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
            RPC_NS_HANDLE InquiryContext,
             RPC_WSTR *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName,
         unsigned long Priority,
             RPC_CSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_CSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_CSTR *MemberName,
          unsigned long *Priority,
          RPC_CSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName,
         unsigned long Priority,
             RPC_WSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
             RPC_IF_ID *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
         unsigned long InquiryType,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
             RPC_WSTR MemberName,
          RPC_NS_HANDLE *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
         RPC_NS_HANDLE InquiryContext,
              RPC_IF_ID *IfId,
          RPC_WSTR *MemberName,
          unsigned long *Priority,
          RPC_WSTR *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_NS_HANDLE *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
        RPC_NS_HANDLE InquiryContext,
        UUID * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
           RPC_NS_HANDLE * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_CSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
       RPC_NS_HANDLE NsHandle,
       unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
        unsigned long * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
       unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_WSTR *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
             RPC_IF_ID *IfId,
         unsigned long VersOption,
             UUID_VECTOR *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
          RPC_IF_ID_VECTOR * *IfIdVec
    );





__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
         unsigned long EntryNameSyntax,
             RPC_CSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
         unsigned long EntryNameSyntax,
             RPC_WSTR EntryName,
             RPC_IF_HANDLE IfSpec,
             UUID *ObjUuid,
          RPC_NS_HANDLE *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
       RPC_NS_HANDLE ImportContext,
        RPC_BINDING_HANDLE * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
           RPC_NS_HANDLE * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
           RPC_BINDING_VECTOR * BindingVec,
        RPC_BINDING_HANDLE * Binding
    );
#line 160 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcnterr.h"
#line 162 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 214 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
#line 30 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
extern "C" {
#line 53 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,

    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;


typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
    } RPC_ASYNC_EVENT;
#line 87 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {




    struct {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
        } APC;







    struct {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
        } IOC;






    struct {
        HWND hWnd;
        UINT Msg;
        } HWND;
#line 137 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
    HANDLE hEvent;
#line 150 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE {
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
                             PRPC_ASYNC_STATE pAsync,
         unsigned int Size
    );


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
         PRPC_ASYNC_STATE pAsync
    ) ;


__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
         PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
            PRPC_ASYNC_STATE pAsync,
              void *Reply
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncAbortCall (
            PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;

__declspec(dllimport)

RPC_STATUS
__stdcall
RpcAsyncCancelCall (
            PRPC_ASYNC_STATE pAsync,
         BOOL fAbort
    ) ;






typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;
#line 277 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;



        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorStartEnumeration (
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNextRecord (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
         BOOL CopyStrings,
          RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorEndEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorResetEnumeration (
            RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorGetNumberOfRecords (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
          int *Records
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorSaveErrorInfo (
         RPC_ERROR_ENUM_HANDLE *EnumHandle,
                                          PVOID *ErrorBlob,
          size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorLoadErrorInfo (
                               PVOID ErrorBlob,
         size_t BlobSize,
          RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcErrorAddRecord (
         RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void
__stdcall
RpcErrorClearInformation (
    void
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
         DWORD dwTimeout
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
             RPC_BINDING_HANDLE ClientBinding,
         BOOL ImpersonateOnReturn,
             PVOID Reserved1,
             PLARGE_INTEGER pExpirationTime,
         LUID Reserved2,
         DWORD Reserved3,
             PVOID Reserved4,
          PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcFreeAuthorizationContext (
            PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
             RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
         RPC_BINDING_HANDLE ServerBindingHandle,
         PVOID UserContext
    );


typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

typedef struct _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;
#line 463 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;






typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;


typedef struct tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
} RPC_CALL_ATTRIBUTES_V2_A;



typedef struct tagRPC_CALL_ATTRIBUTES_V3_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V3_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_A;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
             RPC_BINDING_HANDLE ClientBinding,
            void *RpcCallAttributes
    );
#line 644 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
typedef RPC_CALL_ATTRIBUTES_V3_W RPC_CALL_ATTRIBUTES;
#line 653 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpcasync.h"
typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2
} RPC_NOTIFICATIONS;



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerSubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
         RPC_NOTIFICATION_TYPES NotificationType,
         RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnsubscribeForNotification (
             RPC_BINDING_HANDLE Binding,
         RPC_NOTIFICATIONS Notification,
          unsigned long *NotificationsQueued
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingBind (
             PRPC_ASYNC_STATE pAsync,
         RPC_BINDING_HANDLE Binding,
         RPC_IF_HANDLE IfSpec
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingUnbind (
         RPC_BINDING_HANDLE Binding
    );







RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
          PRPC_MESSAGE Message,
          PRPC_ASYNC_STATE pAsync
    );


RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
         PRPC_ASYNC_STATE pAsync,
         unsigned long ExceptionCode
    ) ;


int
__stdcall
I_RpcExceptionFilter (
         unsigned long ExceptionCode
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqClientTokenAttributes (
         RPC_BINDING_HANDLE Binding,
              LUID * TokenId,
              LUID * AuthenticationId,
              LUID * ModifiedId
    );







}
#line 214 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 223 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
}
#line 191 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
#line 49 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 49 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"




extern "C" {
#line 62 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
struct HDROP__{int unused;}; typedef struct HDROP__ *HDROP;


extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileA( HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch);

extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileW( HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch);





extern "C" __declspec(dllimport) BOOL __stdcall DragQueryPoint( HDROP hDrop, POINT *ppt);
extern "C" __declspec(dllimport) void __stdcall DragFinish( HDROP hDrop);
extern "C" __declspec(dllimport) void __stdcall DragAcceptFiles( HWND hWnd, BOOL fAccept);

extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteA( HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters,
             LPCSTR lpDirectory, INT nShowCmd);
extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteW( HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters,
             LPCWSTR lpDirectory, INT nShowCmd);






extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableA( LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);

extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableW( LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);





extern "C" __declspec(dllimport) LPWSTR * __stdcall CommandLineToArgvW( LPCWSTR lpCmdLine, int* pNumArgs);

extern "C" __declspec(dllimport) INT __stdcall ShellAboutA( HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
extern "C" __declspec(dllimport) INT __stdcall ShellAboutW( HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);





extern "C" __declspec(dllimport) HICON __stdcall DuplicateIcon( HINSTANCE hInst, HICON hIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon);





extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExA( HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExW( HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId);





extern "C" __declspec(dllimport) HICON __stdcall ExtractIconA( HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex);
extern "C" __declspec(dllimport) HICON __stdcall ExtractIconW( HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex);
#line 129 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _DRAGINFOA {
    UINT uSize;
    POINT pt;
    BOOL fNC;
    PZZSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;
    POINT pt;
    BOOL fNC;
    PZZWSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;

typedef DRAGINFOW DRAGINFO;
typedef LPDRAGINFOW LPDRAGINFO;
#line 191 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
} APPBARDATA, *PAPPBARDATA;


extern "C" __declspec(dllimport) UINT_PTR __stdcall SHAppBarMessage( DWORD dwMessage, PAPPBARDATA pData);





extern "C" __declspec(dllimport) DWORD __stdcall DoEnvironmentSubstA( LPSTR pszSrc, UINT cchSrc);
extern "C" __declspec(dllimport) DWORD __stdcall DoEnvironmentSubstW( LPWSTR pszSrc, UINT cchSrc);







extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExA( LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExW( LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
#line 255 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef WORD FILEOP_FLAGS;
#line 268 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef WORD PRINTEROP_FLAGS;
#line 277 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _SHFILEOPSTRUCTA
{
    HWND hwnd;
    UINT wFunc;
    PCZZSTR pFrom;
    PCZZSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCSTR lpszProgressTitle;
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
    HWND hwnd;
    UINT wFunc;
    PCZZWSTR pFrom;
    PCZZWSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    PCWSTR lpszProgressTitle;
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;

typedef SHFILEOPSTRUCTW SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTW LPSHFILEOPSTRUCT;





extern "C" __declspec(dllimport) int __stdcall SHFileOperationA( LPSHFILEOPSTRUCTA lpFileOp);
extern "C" __declspec(dllimport) int __stdcall SHFileOperationW( LPSHFILEOPSTRUCTW lpFileOp);





extern "C" __declspec(dllimport) void __stdcall SHFreeNameMappings( HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR pszOldPath;
    LPSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR pszOldPath;
    LPWSTR pszNewPath;
    int cchOldPath;
    int cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;

typedef SHNAMEMAPPINGW SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGW LPSHNAMEMAPPING;
#line 430 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
#pragma warning(push)
#pragma warning(disable: 4201)



typedef struct _SHELLEXECUTEINFOA
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCSTR lpVerb;
    LPCSTR lpFile;
    LPCSTR lpParameters;
    LPCSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } ;
    HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void *lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union
    {
        HANDLE hIcon;

        HANDLE hMonitor;

    } ;
    HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;

typedef SHELLEXECUTEINFOW SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOW LPSHELLEXECUTEINFO;





extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExA( SHELLEXECUTEINFOA *pExecInfo);
extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExW( SHELLEXECUTEINFOW *pExecInfo);
#line 501 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _SHCREATEPROCESSINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR pszFile;
    LPCWSTR pszParameters;
    LPCWSTR pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    BOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

extern "C" __declspec(dllimport) BOOL __stdcall SHCreateProcessAsUserW( PSHCREATEPROCESSINFOW pscpi);




extern "C" __declspec(dllimport) HRESULT __stdcall SHEvaluateSystemCommandTemplate( PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters);
#line 859 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef enum ASSOCCLASS
{
    ASSOCCLASS_SHELL_KEY = 0,
    ASSOCCLASS_PROGID_KEY,
    ASSOCCLASS_PROGID_STR,
    ASSOCCLASS_CLSID_KEY,
    ASSOCCLASS_CLSID_STR,
    ASSOCCLASS_APP_KEY,
    ASSOCCLASS_APP_STR,
    ASSOCCLASS_SYSTEM_STR,
    ASSOCCLASS_FOLDER,
    ASSOCCLASS_STAR,

    ASSOCCLASS_FIXED_PROGID_STR,
    ASSOCCLASS_PROTOCOL_STR,

} ASSOCCLASS;

typedef struct ASSOCIATIONELEMENT
{
    ASSOCCLASS ac;
    HKEY hkClass;
    PCWSTR pszClass;
} ASSOCIATIONELEMENT;



extern "C" __declspec(dllimport) HRESULT __stdcall AssocCreateForClasses( const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID & riid, void **ppv);
#line 932 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _SHQUERYRBINFO {
    DWORD cbSize;

    __int64 i64Size;
    __int64 i64NumItems;




} SHQUERYRBINFO, *LPSHQUERYRBINFO;
#line 951 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinA( LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinW( LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);





extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinA( HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinW( HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);
#line 976 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef enum
{
    QUNS_NOT_PRESENT = 1,
    QUNS_BUSY = 2,
    QUNS_RUNNING_D3D_FULL_SCREEN = 3,
    QUNS_PRESENTATION_MODE = 4,
    QUNS_ACCEPTS_NOTIFICATIONS = 5,

    QUNS_QUIET_TIME = 6,


    QUNS_APP = 7,

} QUERY_USER_NOTIFICATION_STATE;

extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryUserNotificationState( QUERY_USER_NOTIFICATION_STATE *pquns);




extern "C" __declspec(dllimport) HRESULT __stdcall SHGetPropertyStoreForWindow( HWND hwnd, const IID & riid, void** ppv);



typedef struct _NOTIFYICONDATAA {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;




    CHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR szInfo[256];
    union {
        UINT uTimeout;
        UINT uVersion;
    } ;
    CHAR szInfoTitle[64];
    DWORD dwInfoFlags;


    GUID guidItem;


    HICON hBalloonIcon;

} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;




    WCHAR szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR szInfo[256];
    union {
        UINT uTimeout;
        UINT uVersion;
    } ;
    WCHAR szInfoTitle[64];
    DWORD dwInfoFlags;


    GUID guidItem;


    HICON hBalloonIcon;

} NOTIFYICONDATAW, *PNOTIFYICONDATAW;

typedef NOTIFYICONDATAW NOTIFYICONDATA;
typedef PNOTIFYICONDATAW PNOTIFYICONDATA;
#line 1163 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _NOTIFYICONIDENTIFIER {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
} NOTIFYICONIDENTIFIER, *PNOTIFYICONIDENTIFIER;


extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);







extern "C" __declspec(dllimport) HRESULT __stdcall Shell_NotifyIconGetRect( const NOTIFYICONIDENTIFIER* identifier, RECT* iconLocation);
#line 1209 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _SHFILEINFOA
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        CHAR szDisplayName[260];
        CHAR szTypeName[80];
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        WCHAR szDisplayName[260];
        WCHAR szTypeName[80];
} SHFILEINFOW;

typedef SHFILEINFOW SHFILEINFO;
#line 1258 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoA( LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi,
    UINT cbFileInfo, UINT uFlags);
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoW( LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi,
    UINT cbFileInfo, UINT uFlags);







typedef struct _SHSTOCKICONINFO
{
    DWORD cbSize;
    HICON hIcon;
    int iSysImageIndex;
    int iIcon;
    WCHAR szPath[260];
} SHSTOCKICONINFO;
#line 1290 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef enum SHSTOCKICONID
{
    SIID_DOCNOASSOC = 0,
    SIID_DOCASSOC = 1,
    SIID_APPLICATION = 2,
    SIID_FOLDER = 3,
    SIID_FOLDEROPEN = 4,
    SIID_DRIVE525 = 5,
    SIID_DRIVE35 = 6,
    SIID_DRIVEREMOVE = 7,
    SIID_DRIVEFIXED = 8,
    SIID_DRIVENET = 9,
    SIID_DRIVENETDISABLED = 10,
    SIID_DRIVECD = 11,
    SIID_DRIVERAM = 12,
    SIID_WORLD = 13,
    SIID_SERVER = 15,
    SIID_PRINTER = 16,
    SIID_MYNETWORK = 17,
    SIID_FIND = 22,
    SIID_HELP = 23,
    SIID_SHARE = 28,
    SIID_LINK = 29,
    SIID_SLOWFILE = 30,
    SIID_RECYCLER = 31,
    SIID_RECYCLERFULL = 32,
    SIID_MEDIACDAUDIO = 40,
    SIID_LOCK = 47,
    SIID_AUTOLIST = 49,
    SIID_PRINTERNET = 50,
    SIID_SERVERSHARE = 51,
    SIID_PRINTERFAX = 52,
    SIID_PRINTERFAXNET = 53,
    SIID_PRINTERFILE = 54,
    SIID_STACK = 55,
    SIID_MEDIASVCD = 56,
    SIID_STUFFEDFOLDER = 57,
    SIID_DRIVEUNKNOWN = 58,
    SIID_DRIVEDVD = 59,
    SIID_MEDIADVD = 60,
    SIID_MEDIADVDRAM = 61,
    SIID_MEDIADVDRW = 62,
    SIID_MEDIADVDR = 63,
    SIID_MEDIADVDROM = 64,
    SIID_MEDIACDAUDIOPLUS = 65,
    SIID_MEDIACDRW = 66,
    SIID_MEDIACDR = 67,
    SIID_MEDIACDBURN = 68,
    SIID_MEDIABLANKCD = 69,
    SIID_MEDIACDROM = 70,
    SIID_AUDIOFILES = 71,
    SIID_IMAGEFILES = 72,
    SIID_VIDEOFILES = 73,
    SIID_MIXEDFILES = 74,
    SIID_FOLDERBACK = 75,
    SIID_FOLDERFRONT = 76,
    SIID_SHIELD = 77,
    SIID_WARNING = 78,
    SIID_INFO = 79,
    SIID_ERROR = 80,
    SIID_KEY = 81,
    SIID_SOFTWARE = 82,
    SIID_RENAME = 83,
    SIID_DELETE = 84,
    SIID_MEDIAAUDIODVD = 85,
    SIID_MEDIAMOVIEDVD = 86,
    SIID_MEDIAENHANCEDCD = 87,
    SIID_MEDIAENHANCEDDVD = 88,
    SIID_MEDIAHDDVD = 89,
    SIID_MEDIABLURAY = 90,
    SIID_MEDIAVCD = 91,
    SIID_MEDIADVDPLUSR = 92,
    SIID_MEDIADVDPLUSRW = 93,
    SIID_DESKTOPPC = 94,
    SIID_MOBILEPC = 95,
    SIID_USERS = 96,
    SIID_MEDIASMARTMEDIA = 97,
    SIID_MEDIACOMPACTFLASH = 98,
    SIID_DEVICECELLPHONE = 99,
    SIID_DEVICECAMERA = 100,
    SIID_DEVICEVIDEOCAMERA = 101,
    SIID_DEVICEAUDIOPLAYER = 102,
    SIID_NETWORKCONNECT = 103,
    SIID_INTERNET = 104,
    SIID_ZIPFILE = 105,
    SIID_SETTINGS = 106,


    SIID_DRIVEHDDVD = 132,
    SIID_DRIVEBD = 133,
    SIID_MEDIAHDDVDROM = 134,
    SIID_MEDIAHDDVDR = 135,
    SIID_MEDIAHDDVDRAM = 136,
    SIID_MEDIABDROM = 137,
    SIID_MEDIABDR = 138,
    SIID_MEDIABDRE = 139,
    SIID_CLUSTEREDDRIVE = 140,

    SIID_MAX_ICONS = 175,
} SHSTOCKICONID;



extern "C" __declspec(dllimport) HRESULT __stdcall SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii);







extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExA( LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
              ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExW( LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
              ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);






extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoA( LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags);

extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoW( LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags);
#line 1445 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandA( HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandW( HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);
#line 1455 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct _OPEN_PRINTER_PROPS_INFOA
{
    DWORD dwSize;
    LPSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOA, *POPEN_PRINTER_PROPS_INFOA;
typedef struct _OPEN_PRINTER_PROPS_INFOW
{
    DWORD dwSize;
    LPWSTR pszSheetName;
    UINT uSheetIndex;
    DWORD dwFlags;
    BOOL bModal;
} OPEN_PRINTER_PROPS_INFOW, *POPEN_PRINTER_PROPS_INFOW;

typedef OPEN_PRINTER_PROPS_INFOW OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOW POPEN_PRINTER_PROPS_INFO;
#line 1498 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHLoadNonloadedIconOverlayIdentifiers(void);
#line 1519 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHIsFileAvailableOffline( PCWSTR pwszPath, DWORD *pdwStatus);
#line 1532 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHSetLocalizedName( PCWSTR pszPath, PCWSTR pszResModule, int idsRes);




extern "C" __declspec(dllimport) HRESULT __stdcall SHRemoveLocalizedName( PCWSTR pszPath);

extern "C" __declspec(dllimport) HRESULT __stdcall SHGetLocalizedName( PCWSTR pszPath, PWSTR pszResModule, UINT cch, int *pidsRes);
#line 1568 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxA(
             HINSTANCE hAppInst,
             HWND hWnd,
         LPCSTR lpcText,
             LPCSTR lpcTitle,
         UINT fuStyle, ...);
extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxW(
             HINSTANCE hAppInst,
             HWND hWnd,
         LPCWSTR lpcText,
             LPCWSTR lpcTitle,
         UINT fuStyle, ...);







extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveA( LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveW( LPCWSTR pszPath);
#line 1599 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsA( HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress);
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsW( HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);





extern "C" HRESULT __stdcall SHGetUnreadMailCountA( HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
extern "C" HRESULT __stdcall SHGetUnreadMailCountW( HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);





extern "C" HRESULT __stdcall SHSetUnreadMailCountA( LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand);
extern "C" HRESULT __stdcall SHSetUnreadMailCountW( LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
#line 1624 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" BOOL __stdcall SHTestTokenMembership( HANDLE hToken, ULONG ulRID);





extern "C" __declspec(dllimport) HRESULT __stdcall SHGetImageList( int iImageList, const IID & riid, void **ppvObj);
#line 1648 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef HRESULT (__stdcall *PFNCANSHAREFOLDERW)( PCWSTR pszPath);
typedef HRESULT (__stdcall *PFNSHOWSHAREFOLDERUIW)( HWND hwndParent, PCWSTR pszPath);
#line 1658 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
}




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 1662 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"




#pragma warning(pop)
#line 1678 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall InitNetworkAddressControl(void);
#line 1691 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
typedef struct tagNC_ADDRESS
{
   struct NET_ADDRESS_INFO_ *pAddrInfo;
   USHORT PortNumber;
   BYTE PrefixLength;
} NC_ADDRESS, *PNC_ADDRESS;
#line 1719 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\shellapi.h"
extern "C" HRESULT __stdcall SHGetDriveMedia( PCWSTR pszDrive, DWORD *pdwMediaContent);
#line 193 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
#line 63 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
typedef struct _PERF_DATA_BLOCK {
    WCHAR Signature[4];
    DWORD LittleEndian;
    DWORD Version;

    DWORD Revision;

    DWORD TotalByteLength;
    DWORD HeaderLength;
    DWORD NumObjectTypes;

    LONG DefaultObject;




    SYSTEMTIME SystemTime;

    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

    LARGE_INTEGER PerfTime100nSec;

    DWORD SystemNameLength;
    DWORD SystemNameOffset;


} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;
#line 101 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
typedef struct _PERF_OBJECT_TYPE {
    DWORD TotalByteLength;







    DWORD DefinitionLength;







    DWORD HeaderLength;



    DWORD ObjectNameTitleIndex;




    LPWSTR ObjectNameTitle;



    DWORD ObjectHelpTitleIndex;




    LPWSTR ObjectHelpTitle;



    DWORD DetailLevel;



    DWORD NumCounters;


    LONG DefaultCounter;



    LONG NumInstances;
#line 163 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
    DWORD CodePage;


    LARGE_INTEGER PerfTime;

    LARGE_INTEGER PerfFreq;

} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;
#line 547 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
typedef struct _PERF_COUNTER_DEFINITION {
    DWORD ByteLength;
    DWORD CounterNameTitleIndex;





    LPWSTR CounterNameTitle;



    DWORD CounterHelpTitleIndex;





    LPWSTR CounterHelpTitle;



    LONG DefaultScale;


    DWORD DetailLevel;

    DWORD CounterType;
    DWORD CounterSize;
    DWORD CounterOffset;


} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;
#line 594 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
typedef struct _PERF_INSTANCE_DEFINITION {
    DWORD ByteLength;

    DWORD ParentObjectTitleIndex;





    DWORD ParentObjectInstance;



    LONG UniqueID;


    DWORD NameOffset;


    DWORD NameLength;





} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;
#line 633 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
typedef struct _PERF_COUNTER_BLOCK {
    DWORD ByteLength;

} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
#line 653 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
typedef DWORD (__stdcall PM_OPEN_PROC) ( LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC) ( LPWSTR lpValueName,



                                                  LPVOID *lppData,
                                                  LPDWORD lpcbTotalBytes,
                                                  LPDWORD lpNumObjectTypes);
typedef DWORD (__stdcall PM_CLOSE_PROC) (void);
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);
#line 683 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 683 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winperf.h"
#line 195 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;






typedef UINT_PTR SOCKET;
#line 60 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
typedef struct fd_set {
        u_int fd_count;
        SOCKET fd_array[64];
} fd_set;


extern "C" {


extern int __stdcall __WSAFDIsSet(SOCKET, fd_set *);


}
#line 103 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
struct timeval {
        long tv_sec;
        long tv_usec;
};
#line 159 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
struct hostent {
        char * h_name;
        char * * h_aliases;
        short h_addrtype;
        short h_length;
        char * * h_addr_list;

};





struct netent {
        char * n_name;
        char * * n_aliases;
        short n_addrtype;
        u_long n_net;
};

struct servent {
        char * s_name;
        char * * s_aliases;




        short s_port;
        char * s_proto;

};

struct protoent {
        char * p_name;
        char * * p_aliases;
        short p_proto;
};
#line 272 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\inaddr.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\inaddr.h"
typedef struct in_addr {
        union {
                struct { UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { USHORT s_w1,s_w2; } S_un_w;
                ULONG S_addr;
        } S_un;






} IN_ADDR, *PIN_ADDR, *LPIN_ADDR;
#line 272 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
#line 304 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
struct sockaddr_in {
        short sin_family;
        u_short sin_port;
        struct in_addr sin_addr;
        char sin_zero[8];
};




typedef struct WSAData {
        WORD wVersion;
        WORD wHighVersion;







        char szDescription[256 +1];
        char szSystemStatus[128 +1];
        unsigned short iMaxSockets;
        unsigned short iMaxUdpDg;
        char * lpVendorInfo;

} WSADATA;

typedef WSADATA *LPWSADATA;
#line 355 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
struct ip_mreq {
        struct in_addr imr_multiaddr;
        struct in_addr imr_interface;
};
#line 477 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
struct sockaddr {
        u_short sa_family;
        char sa_data[14];
};





struct sockproto {
        u_short sp_family;
        u_short sp_protocol;
};
#line 523 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
struct linger {
        u_short l_onoff;
        u_short l_linger;
};
#line 731 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsock.h"
extern "C" {


SOCKET __stdcall accept (
                               SOCKET s,
                                                           struct sockaddr *addr,
                                      int *addrlen);

int __stdcall bind (
                          SOCKET s,
                                               const struct sockaddr *addr,
                          int namelen);

int __stdcall closesocket ( SOCKET s);

int __stdcall connect (
                             SOCKET s,
                                                  const struct sockaddr *name,
                             int namelen);

int __stdcall ioctlsocket (
                                 SOCKET s,
                                 long cmd,
                                    u_long *argp);

int __stdcall getpeername (
                                 SOCKET s,
                                                                      struct sockaddr *name,
                                    int * namelen);

int __stdcall getsockname (
                                 SOCKET s,
                                                                      struct sockaddr *name,
                                    int * namelen);

int __stdcall getsockopt (
                                SOCKET s,
                                int level,
                                int optname,
                                                       char * optval,
                                   int *optlen);

u_long __stdcall htonl ( u_long hostlong);

u_short __stdcall htons ( u_short hostshort);

unsigned long __stdcall inet_addr ( const char * cp);

char * __stdcall inet_ntoa ( struct in_addr in);

int __stdcall listen (
                            SOCKET s,
                            int backlog);

u_long __stdcall ntohl ( u_long netlong);

u_short __stdcall ntohs ( u_short netshort);

int __stdcall recv (
                          SOCKET s,
                                                                                   char * buf,
                          int len,
                          int flags);

int __stdcall recvfrom (
                              SOCKET s,
                                                                                       char * buf,
                              int len,
                              int flags,
                                                                       struct sockaddr * from,
                                     int * fromlen);

int __stdcall select (
                             int nfds,
                                    fd_set *readfds,
                                    fd_set *writefds,
                                    fd_set *exceptfds,
                                  const struct timeval *timeout);

int __stdcall send (
                          SOCKET s,
                                           const char * buf,
                          int len,
                          int flags);

int __stdcall sendto (
                            SOCKET s,
                                             const char * buf,
                            int len,
                            int flags,
                                                   const struct sockaddr *to,
                            int tolen);

int __stdcall setsockopt (
                                SOCKET s,
                                int level,
                                int optname,
                                                        const char * optval,
                                int optlen);

int __stdcall shutdown (
                              SOCKET s,
                              int how);

SOCKET __stdcall socket (
                               int af,
                               int type,
                               int protocol);



struct hostent * __stdcall gethostbyaddr(
                                                                    const char * addr,
                                                   int len,
                                                   int type);

struct hostent * __stdcall gethostbyname( const char * name);

int __stdcall gethostname (
                                                                   char * name,
                                 int namelen);

struct servent * __stdcall getservbyport(
                                                   int port,
                                                     const char * proto);

struct servent * __stdcall getservbyname(
                                                     const char * name,
                                                     const char * proto);

struct protoent * __stdcall getprotobynumber( int proto);

struct protoent * __stdcall getprotobyname( const char * name);



int __stdcall WSAStartup(
                               WORD wVersionRequired,
                                LPWSADATA lpWSAData);

int __stdcall WSACleanup(void);

void __stdcall WSASetLastError( int iError);

int __stdcall WSAGetLastError(void);

BOOL __stdcall WSAIsBlocking(void);

int __stdcall WSAUnhookBlockingHook(void);

FARPROC __stdcall WSASetBlockingHook( FARPROC lpBlockFunc);

int __stdcall WSACancelBlockingCall(void);

HANDLE __stdcall WSAAsyncGetServByName(
                                             HWND hWnd,
                                             u_int wMsg,
                                               const char * name,
                                               const char * proto,
                                                                   char * buf,
                                             int buflen);

HANDLE __stdcall WSAAsyncGetServByPort(
                                             HWND hWnd,
                                             u_int wMsg,
                                             int port,
                                             const char * proto,
                                                                   char * buf,
                                             int buflen);

HANDLE __stdcall WSAAsyncGetProtoByName(
                                              HWND hWnd,
                                              u_int wMsg,
                                                const char * name,
                                                                    char * buf,
                                              int buflen);

HANDLE __stdcall WSAAsyncGetProtoByNumber(
                                                HWND hWnd,
                                                u_int wMsg,
                                                int number,
                                                                      char * buf,
                                                int buflen);

HANDLE __stdcall WSAAsyncGetHostByName(
                                             HWND hWnd,
                                             u_int wMsg,
                                               const char * name,
                                                                   char * buf,
                                             int buflen);

HANDLE __stdcall WSAAsyncGetHostByAddr(
                                             HWND hWnd,
                                             u_int wMsg,
                                             const char * addr,
                                             int len,
                                             int type,
                                                                   char * buf,
                                             int buflen);

int __stdcall WSACancelAsyncRequest( HANDLE hAsyncTaskHandle);

int __stdcall WSAAsyncSelect(
                                   SOCKET s,
                                   HWND hWnd,
                                   u_int wMsg,
                                   long lEvent);

int __stdcall WSARecvEx (
                               SOCKET s,
                                                                                        char * buf,
                               int len,
                                  int *flags);

typedef struct _TRANSMIT_FILE_BUFFERS {
    PVOID Head;
    DWORD HeadLength;
    PVOID Tail;
    DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;





BOOL
__stdcall
TransmitFile (
         SOCKET hSocket,
         HANDLE hFile,
         DWORD nNumberOfBytesToWrite,
         DWORD nNumberOfBytesPerSend,
                LPOVERLAPPED lpOverlapped,
             LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
         DWORD dwReserved
    );

BOOL
__stdcall
AcceptEx (
         SOCKET sListenSocket,
         SOCKET sAcceptSocket,

                           PVOID lpOutputBuffer,
         DWORD dwReceiveDataLength,
         DWORD dwLocalAddressLength,
         DWORD dwRemoteAddressLength,
          LPDWORD lpdwBytesReceived,
            LPOVERLAPPED lpOverlapped
    );

void
__stdcall
GetAcceptExSockaddrs (
                                                                                     PVOID lpOutputBuffer,
         DWORD dwReceiveDataLength,
         DWORD dwLocalAddressLength,
         DWORD dwRemoteAddressLength,
                                                     struct sockaddr **LocalSockaddr,
          LPINT LocalSockaddrLength,
                                                      struct sockaddr **RemoteSockaddr,
          LPINT RemoteSockaddrLength
    );


}



typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr *LPSOCKADDR;

typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger *LPLINGER;

typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set *LPFD_SET;

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent *LPPROTOENT;

typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval *LPTIMEVAL;
#line 196 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
extern "C" {
#line 242 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef unsigned int ALG_ID;
#line 323 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;
#line 840 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMS_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    BYTE *pbOID;
    DWORD cbOID;
} CMS_KEY_INFO, *PCMS_KEY_INFO;


typedef struct _HMAC_Info {
    ALG_ID HashAlgid;
    BYTE *pbInnerString;
    DWORD cbInnerString;
    BYTE *pbOuterString;
    DWORD cbOuterString;
} HMAC_INFO, *PHMAC_INFO;


typedef struct _SCHANNEL_ALG {
    DWORD dwUse;
    ALG_ID Algid;
    DWORD cBits;
    DWORD dwFlags;
    DWORD dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;
#line 872 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _PROV_ENUMALGS {
    ALG_ID aiAlgid;
    DWORD dwBitLen;
    DWORD dwNameLen;
    CHAR szName[20];
} PROV_ENUMALGS;


typedef struct _PROV_ENUMALGS_EX {
    ALG_ID aiAlgid;
    DWORD dwDefaultLen;
    DWORD dwMinLen;
    DWORD dwMaxLen;
    DWORD dwProtocols;
    DWORD dwNameLen;
    CHAR szName[20];
    DWORD dwLongNameLen;
    CHAR szLongName[40];
} PROV_ENUMALGS_EX;


typedef struct _PUBLICKEYSTRUC {
        BYTE bType;
        BYTE bVersion;
        WORD reserved;
        ALG_ID aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;

typedef struct _RSAPUBKEY {
        DWORD magic;
        DWORD bitlen;
        DWORD pubexp;

} RSAPUBKEY;

typedef struct _PUBKEY {
        DWORD magic;
        DWORD bitlen;
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;

typedef struct _DSSSEED {
        DWORD counter;
        BYTE seed[20];
} DSSSEED;

typedef struct _PUBKEYVER3 {
        DWORD magic;
        DWORD bitlenP;
        DWORD bitlenQ;
        DWORD bitlenJ;
        DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;

typedef struct _PRIVKEYVER3 {
        DWORD magic;
        DWORD bitlenP;
        DWORD bitlenQ;
        DWORD bitlenJ;
        DWORD bitlenX;
        DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;

typedef struct _KEY_TYPE_SUBTYPE {
        DWORD dwKeySpec;
        GUID Type;
        GUID Subtype;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;

typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char SerialNumber[8];
    int CertIndex;
    unsigned char CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;


typedef struct _CRYPT_RC4_KEY_STATE {
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;

typedef struct _CRYPT_DES_KEY_STATE {
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;

typedef struct _CRYPT_3DES_KEY_STATE {
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;



typedef struct _CRYPT_AES_128_KEY_STATE {
    unsigned char Key[16];
    unsigned char IV[16];
    unsigned char EncryptionState[11][16];
    unsigned char DecryptionState[11][16];
    unsigned char Feedback[16];
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;

typedef struct _CRYPT_AES_256_KEY_STATE {
    unsigned char Key[32];
    unsigned char IV[16];
    unsigned char EncryptionState[15][16];
    unsigned char DecryptionState[15][16];
    unsigned char Feedback[16];
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;
#line 997 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPTOAPI_BLOB {
                            DWORD cbData;
                                BYTE *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
CERT_NAME_BLOB, *PCERT_NAME_BLOB,
CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
CERT_BLOB, *PCERT_BLOB,
CRL_BLOB, *PCRL_BLOB,
DATA_BLOB, *PDATA_BLOB,
CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;
#line 1023 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMS_DH_KEY_INFO {
    DWORD dwVersion;
    ALG_ID Algid;
    LPSTR pszContentEncObjId;
    CRYPT_DATA_BLOB PubInfo;
    void *pReserved;
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;


__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextA(
                HCRYPTPROV *phProv,
                LPCSTR szContainer,
                LPCSTR szProvider,
                DWORD dwProvType,
                DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextW(
                HCRYPTPROV *phProv,
                LPCWSTR szContainer,
                LPCWSTR szProvider,
                DWORD dwProvType,
                DWORD dwFlags
    );
#line 1115 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptReleaseContext(
            HCRYPTPROV hProv,
            DWORD dwFlags
    );
#line 1134 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGenKey(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            DWORD dwFlags,
            HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDeriveKey(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            HCRYPTHASH hBaseData,
            DWORD dwFlags,
            HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyKey(
            HCRYPTKEY hKey
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyParam(
            HCRYPTKEY hKey,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );
#line 1186 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyParam(
                                                    HCRYPTKEY hKey,
                                                    DWORD dwParam,
                                                        BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetHashParam(
            HCRYPTHASH hHash,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );
#line 1221 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetHashParam(
                                                HCRYPTHASH hHash,
                                                DWORD dwParam,
                                                        BYTE *pbData,
                                                DWORD *pdwDataLen,
                                                DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetProvParam(
            HCRYPTPROV hProv,
            DWORD dwParam,
            const BYTE *pbData,
            DWORD dwFlags
    );
#line 1256 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetProvParam(
                                                    HCRYPTPROV hProv,
                                                    DWORD dwParam,
                                                        BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGenRandom(
                            HCRYPTPROV hProv,
                            DWORD dwLen,
                                   BYTE *pbBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetUserKey(
            HCRYPTPROV hProv,
            DWORD dwKeySpec,
            HCRYPTKEY *phUserKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptExportKey(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTKEY hExpKey,
                                                    DWORD dwBlobType,
                                                    DWORD dwFlags,
                                                        BYTE *pbData,
                                                    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptImportKey(
                            HCRYPTPROV hProv,
                                 const BYTE *pbData,
                            DWORD dwDataLen,
                            HCRYPTKEY hPubKey,
                            DWORD dwFlags,
                            HCRYPTKEY *phKey
    );

__declspec(dllimport)
                       BOOL
__stdcall
CryptEncrypt(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTHASH hHash,
                                                    BOOL Final,
                                                    DWORD dwFlags,
                                                         BYTE *pbData,
                                                    DWORD *pdwDataLen,
                                                    DWORD dwBufLen
    );

__declspec(dllimport)
                       BOOL
__stdcall
CryptDecrypt(
                                                    HCRYPTKEY hKey,
                                                    HCRYPTHASH hHash,
                                                    BOOL Final,
                                                    DWORD dwFlags,
                                                         BYTE *pbData,
                                                    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateHash(
            HCRYPTPROV hProv,
            ALG_ID Algid,
            HCRYPTKEY hKey,
            DWORD dwFlags,
            HCRYPTHASH *phHash
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashData(
                            HCRYPTHASH hHash,
                                 const BYTE *pbData,
                            DWORD dwDataLen,
                            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashSessionKey(
            HCRYPTHASH hHash,
            HCRYPTKEY hKey,
            DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyHash(
            HCRYPTHASH hHash
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSignHashA(
                                                  HCRYPTHASH hHash,
                                                  DWORD dwKeySpec,
                                                  LPCSTR szDescription,
                                                  DWORD dwFlags,
                                                      BYTE *pbSignature,
                                                  DWORD *pdwSigLen
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSignHashW(
                                                  HCRYPTHASH hHash,
                                                  DWORD dwKeySpec,
                                                  LPCWSTR szDescription,
                                                  DWORD dwFlags,
                                                      BYTE *pbSignature,
                                                  DWORD *pdwSigLen
    );
#line 1460 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureA(
                            HCRYPTHASH hHash,
                                 const BYTE *pbSignature,
                            DWORD dwSigLen,
                            HCRYPTKEY hPubKey,
                            LPCSTR szDescription,
                            DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureW(
                            HCRYPTHASH hHash,
                                 const BYTE *pbSignature,
                            DWORD dwSigLen,
                            HCRYPTKEY hPubKey,
                            LPCWSTR szDescription,
                            DWORD dwFlags
    );
#line 1548 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderA(
            LPCSTR pszProvName,
            DWORD dwProvType
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderW(
            LPCWSTR pszProvName,
            DWORD dwProvType
    );
#line 1592 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExA(
                LPCSTR pszProvName,
                DWORD dwProvType,
                DWORD *pdwReserved,
                DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExW(
                LPCWSTR pszProvName,
                DWORD dwProvType,
                DWORD *pdwReserved,
                DWORD dwFlags
    );
#line 1644 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
                       BOOL
__stdcall
CryptGetDefaultProviderA(
                                                    DWORD dwProvType,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                            LPSTR pszProvName,
                                                    DWORD *pcbProvName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptGetDefaultProviderW(
                                                    DWORD dwProvType,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                            LPWSTR pszProvName,
                                                    DWORD *pcbProvName
    );
#line 1700 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProviderTypesA(
                                                    DWORD dwIndex,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                    DWORD *pdwProvType,
                                                            LPSTR szTypeName,
                                                    DWORD *pcbTypeName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProviderTypesW(
                                                    DWORD dwIndex,
                                                    DWORD *pdwReserved,
                                                    DWORD dwFlags,
                                                    DWORD *pdwProvType,
                                                            LPWSTR szTypeName,
                                                    DWORD *pcbTypeName
    );
#line 1788 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProvidersA(
                                                        DWORD dwIndex,
                                                        DWORD *pdwReserved,
                                                        DWORD dwFlags,
                                                        DWORD *pdwProvType,
                                                            LPSTR szProvName,
                                                        DWORD *pcbProvName
    );
__declspec(dllimport)
                       BOOL
__stdcall
CryptEnumProvidersW(
                                                        DWORD dwIndex,
                                                        DWORD *pdwReserved,
                                                        DWORD dwFlags,
                                                        DWORD *pdwProvType,
                                                            LPWSTR szProvName,
                                                        DWORD *pcbProvName
    );
#line 1875 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptContextAddRef(
                HCRYPTPROV hProv,
                DWORD *pdwReserved,
                DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateKey(
                HCRYPTKEY hKey,
                DWORD *pdwReserved,
                DWORD dwFlags,
                HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateHash(
                HCRYPTHASH hHash,
                DWORD *pdwReserved,
                DWORD dwFlags,
                HCRYPTHASH *phHash
    );
#line 1911 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
BOOL
__cdecl
GetEncSChannel(
                                       BYTE **pData,
          DWORD *dwDecSize
    );
#line 1932 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
#line 18 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
extern "C" {
#line 29 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
#line 150 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct __BCRYPT_KEY_LENGTHS_STRUCT
{
    ULONG dwMinLength;
    ULONG dwMaxLength;
    ULONG dwIncrement;
} BCRYPT_KEY_LENGTHS_STRUCT;

typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;

typedef struct _BCRYPT_OID
{
    ULONG cbOID;
    PUCHAR pbOID;
} BCRYPT_OID;

typedef struct _BCRYPT_OID_LIST
{
    ULONG dwOIDCount;
    BCRYPT_OID *pOIDs;
} BCRYPT_OID_LIST;

typedef struct _BCRYPT_PKCS1_PADDING_INFO
{
    LPCWSTR pszAlgId;
} BCRYPT_PKCS1_PADDING_INFO;

typedef struct _BCRYPT_PSS_PADDING_INFO
{
    LPCWSTR pszAlgId;
    ULONG cbSalt;
} BCRYPT_PSS_PADDING_INFO;

typedef struct _BCRYPT_OAEP_PADDING_INFO
{
    LPCWSTR pszAlgId;
    PUCHAR pbLabel;
    ULONG cbLabel;
} BCRYPT_OAEP_PADDING_INFO;






typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
    ULONG cbSize;
    ULONG dwInfoVersion;
    PUCHAR pbNonce;
    ULONG cbNonce;
    PUCHAR pbAuthData;
    ULONG cbAuthData;
    PUCHAR pbTag;
    ULONG cbTag;
    PUCHAR pbMacContext;
    ULONG cbMacContext;
    ULONG cbAAD;
    ULONGLONG cbData;
    ULONG dwFlags;
} BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
#line 295 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCryptBuffer {
    ULONG cbBuffer;
    ULONG BufferType;
    PVOID pvBuffer;
} BCryptBuffer, * PBCryptBuffer;

typedef struct _BCryptBufferDesc {
    ULONG ulVersion;
    ULONG cBuffers;
    PBCryptBuffer pBuffers;
} BCryptBufferDesc, * PBCryptBufferDesc;
#line 317 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef PVOID BCRYPT_HANDLE;
typedef PVOID BCRYPT_ALG_HANDLE;
typedef PVOID BCRYPT_KEY_HANDLE;
typedef PVOID BCRYPT_HASH_HANDLE;
typedef PVOID BCRYPT_SECRET_HANDLE;
#line 330 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCRYPT_KEY_BLOB
{
    ULONG Magic;
} BCRYPT_KEY_BLOB;
#line 352 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCRYPT_RSAKEY_BLOB
{
    ULONG Magic;
    ULONG BitLength;
    ULONG cbPublicExp;
    ULONG cbModulus;
    ULONG cbPrime1;
    ULONG cbPrime2;
} BCRYPT_RSAKEY_BLOB;
#line 400 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCRYPT_ECCKEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_ECCKEY_BLOB, *PBCRYPT_ECCKEY_BLOB;
#line 417 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCRYPT_DH_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
} BCRYPT_DH_KEY_BLOB, *PBCRYPT_DH_KEY_BLOB;






typedef struct _BCRYPT_DH_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
} BCRYPT_DH_PARAMETER_HEADER;
#line 451 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCRYPT_DSA_KEY_BLOB
{
    ULONG dwMagic;
    ULONG cbKey;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_KEY_BLOB, *PBCRYPT_DSA_KEY_BLOB;

typedef enum
{
    DSA_HASH_ALGORITHM_SHA1,
    DSA_HASH_ALGORITHM_SHA256,
    DSA_HASH_ALGORITHM_SHA512
}HASHALGORITHM_ENUM;

typedef enum
{
    DSA_FIPS186_2,
    DSA_FIPS186_3
} DSAFIPSVERSION_ENUM;

typedef struct _BCRYPT_DSA_KEY_BLOB_V2
{
    ULONG dwMagic;
    ULONG cbKey;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
} BCRYPT_DSA_KEY_BLOB_V2, *PBCRYPT_DSA_KEY_BLOB_V2;

typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
    ULONG dwMagic;
    ULONG dwVersion;
    ULONG cbKeyData;
} BCRYPT_KEY_DATA_BLOB_HEADER, *PBCRYPT_KEY_DATA_BLOB_HEADER;
#line 502 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCRYPT_DSA_PARAMETER_HEADER
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    UCHAR Count[4];
    UCHAR Seed[20];
    UCHAR q[20];
} BCRYPT_DSA_PARAMETER_HEADER;

typedef struct _BCRYPT_DSA_PARAMETER_HEADER_V2
{
    ULONG cbLength;
    ULONG dwMagic;
    ULONG cbKeyLength;
    HASHALGORITHM_ENUM hashAlgorithm;
    DSAFIPSVERSION_ENUM standardVersion;
    ULONG cbSeedLength;
    ULONG cbGroupSize;
    UCHAR Count[4];
} BCRYPT_DSA_PARAMETER_HEADER_V2;
#line 617 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
NTSTATUS
__stdcall
BCryptOpenAlgorithmProvider(
                BCRYPT_ALG_HANDLE *phAlgorithm,
                LPCWSTR pszAlgId,
                LPCWSTR pszImplementation,
                ULONG dwFlags);
#line 639 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
{
    LPWSTR pszName;
    ULONG dwClass;
    ULONG dwFlags;

} BCRYPT_ALGORITHM_IDENTIFIER;



NTSTATUS
__stdcall
BCryptEnumAlgorithms(
            ULONG dwAlgOperations,
            ULONG *pAlgCount,
            BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList,
            ULONG dwFlags);

typedef struct _BCRYPT_PROVIDER_NAME
{
    LPWSTR pszProviderName;
} BCRYPT_PROVIDER_NAME;


NTSTATUS
__stdcall
BCryptEnumProviders(
            LPCWSTR pszAlgId,
            ULONG *pImplCount,
            BCRYPT_PROVIDER_NAME **ppImplList,
            ULONG dwFlags);







NTSTATUS
__stdcall
BCryptGetProperty(
                                                BCRYPT_HANDLE hObject,
                                                LPCWSTR pszProperty,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptSetProperty(
                            BCRYPT_HANDLE hObject,
                            LPCWSTR pszProperty,
                                 PUCHAR pbInput,
                            ULONG cbInput,
                            ULONG dwFlags);


NTSTATUS
__stdcall
BCryptCloseAlgorithmProvider(
            BCRYPT_ALG_HANDLE hAlgorithm,
            ULONG dwFlags);


void
__stdcall
BCryptFreeBuffer(
         PVOID pvBuffer);






NTSTATUS
__stdcall
BCryptGenerateSymmetricKey(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_KEY_HANDLE *phKey,
                                             PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                             PUCHAR pbSecret,
                                        ULONG cbSecret,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptGenerateKeyPair(
            BCRYPT_ALG_HANDLE hAlgorithm,
            BCRYPT_KEY_HANDLE *phKey,
            ULONG dwLength,
            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptEncrypt(
                                                BCRYPT_KEY_HANDLE hKey,
                                                     PUCHAR pbInput,
                                                ULONG cbInput,
                                                void *pPaddingInfo,
                                                       PUCHAR pbIV,
                                                ULONG cbIV,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDecrypt(
                                                BCRYPT_KEY_HANDLE hKey,
                                                     PUCHAR pbInput,
                                                ULONG cbInput,
                                                void *pPaddingInfo,
                                                       PUCHAR pbIV,
                                                ULONG cbIV,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptExportKey(
                                                BCRYPT_KEY_HANDLE hKey,
                                                BCRYPT_KEY_HANDLE hExportKey,
                                                LPCWSTR pszBlobType,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptImportKey(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_KEY_HANDLE hImportKey,
                                        LPCWSTR pszBlobType,
                                        BCRYPT_KEY_HANDLE *phKey,
                                             PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                             PUCHAR pbInput,
                                        ULONG cbInput,
                                        ULONG dwFlags);




NTSTATUS
__stdcall
BCryptImportKeyPair(
                                    BCRYPT_ALG_HANDLE hAlgorithm,
                                    BCRYPT_KEY_HANDLE hImportKey,
                                    LPCWSTR pszBlobType,
                                    BCRYPT_KEY_HANDLE *phKey,
                                         PUCHAR pbInput,
                                    ULONG cbInput,
                                    ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDuplicateKey(
                                        BCRYPT_KEY_HANDLE hKey,
                                        BCRYPT_KEY_HANDLE *phNewKey,
                                             PUCHAR pbKeyObject,
                                        ULONG cbKeyObject,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptFinalizeKeyPair(
            BCRYPT_KEY_HANDLE hKey,
            ULONG dwFlags);


NTSTATUS
__stdcall
BCryptDestroyKey(
            BCRYPT_KEY_HANDLE hKey);


NTSTATUS
__stdcall
BCryptDestroySecret(
            BCRYPT_SECRET_HANDLE hSecret);



NTSTATUS
__stdcall
BCryptSignHash(
                                                BCRYPT_KEY_HANDLE hKey,
                                                void *pPaddingInfo,
                                                     PUCHAR pbInput,
                                                ULONG cbInput,
                                                    PUCHAR pbOutput,
                                                ULONG cbOutput,
                                                ULONG *pcbResult,
                                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptVerifySignature(
                                BCRYPT_KEY_HANDLE hKey,
                                void *pPaddingInfo,
                                     PUCHAR pbHash,
                                ULONG cbHash,
                                     PUCHAR pbSignature,
                                ULONG cbSignature,
                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptSecretAgreement(
            BCRYPT_KEY_HANDLE hPrivKey,
            BCRYPT_KEY_HANDLE hPubKey,
            BCRYPT_SECRET_HANDLE *phAgreedSecret,
            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDeriveKey(
                BCRYPT_SECRET_HANDLE hSharedSecret,
                LPCWSTR pwszKDF,
                BCryptBufferDesc *pParameterList,
                                                        PUCHAR pbDerivedKey,
                ULONG cbDerivedKey,
                ULONG *pcbResult,
                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptKeyDerivation(
                BCRYPT_KEY_HANDLE hKey,
                BCryptBufferDesc *pParameterList,
                                                    PUCHAR pbDerivedKey,
                ULONG cbDerivedKey,
                ULONG *pcbResult,
                ULONG dwFlags);






NTSTATUS
__stdcall
BCryptCreateHash(
                                        BCRYPT_ALG_HANDLE hAlgorithm,
                                        BCRYPT_HASH_HANDLE *phHash,
                                             PUCHAR pbHashObject,
                                        ULONG cbHashObject,
                                             PUCHAR pbSecret,
                                        ULONG cbSecret,
                                        ULONG dwFlags);



NTSTATUS
__stdcall
BCryptHashData(
                            BCRYPT_HASH_HANDLE hHash,
                                 PUCHAR pbInput,
                            ULONG cbInput,
                            ULONG dwFlags);



NTSTATUS
__stdcall
BCryptFinishHash(
                                BCRYPT_HASH_HANDLE hHash,
                                     PUCHAR pbOutput,
                                ULONG cbOutput,
                                ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDuplicateHash(
                                        BCRYPT_HASH_HANDLE hHash,
                                        BCRYPT_HASH_HANDLE *phNewHash,
                                             PUCHAR pbHashObject,
                                        ULONG cbHashObject,
                                        ULONG dwFlags);


NTSTATUS
__stdcall
BCryptDestroyHash(
            BCRYPT_HASH_HANDLE hHash);
#line 967 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
NTSTATUS
__stdcall
BCryptGenRandom(
                                    BCRYPT_ALG_HANDLE hAlgorithm,
                                          PUCHAR pbBuffer,
                                    ULONG cbBuffer,
                                    ULONG dwFlags);






NTSTATUS
__stdcall
BCryptDeriveKeyCapi(
                                    BCRYPT_HASH_HANDLE hHash,
                                    BCRYPT_ALG_HANDLE hTargetAlg,
                                          PUCHAR pbDerivedKey,
                                    ULONG cbDerivedKey,
                                    ULONG dwFlags);



NTSTATUS
__stdcall
BCryptDeriveKeyPBKDF2(
                                    BCRYPT_ALG_HANDLE hPrf,
                                         PUCHAR pbPassword,
                                    ULONG cbPassword,
                                         PUCHAR pbSalt,
                                    ULONG cbSalt,
                                    ULONGLONG cIterations,
                                          PUCHAR pbDerivedKey,
                                    ULONG cbDerivedKey,
                                    ULONG dwFlags);





typedef struct _BCRYPT_INTERFACE_VERSION
{
    USHORT MajorVersion;
    USHORT MinorVersion;

} BCRYPT_INTERFACE_VERSION, *PBCRYPT_INTERFACE_VERSION;
#line 1093 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
typedef struct _CRYPT_INTERFACE_REG
{
    ULONG dwInterface;
    ULONG dwFlags;

    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;

typedef struct _CRYPT_IMAGE_REG
{
    PWSTR pszImage;

    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG *rgpInterfaces;
}
CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;

typedef struct _CRYPT_PROVIDER_REG
{
    ULONG cAliases;
    PWSTR *rgpszAliases;

    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
}
CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;

typedef struct _CRYPT_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;





typedef struct _CRYPT_CONTEXT_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;

typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;

typedef struct _CRYPT_CONTEXTS
{
    ULONG cContexts;
    PWSTR *rgpszContexts;
}
CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;

typedef struct _CRYPT_CONTEXT_FUNCTIONS
{
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;

typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;





typedef struct _CRYPT_PROPERTY_REF
{
    PWSTR pszProperty;

    ULONG cbValue;
    PUCHAR pbValue;
}
CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;

typedef struct _CRYPT_IMAGE_REF
{
    PWSTR pszImage;
    ULONG dwFlags;
}
CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;

typedef struct _CRYPT_PROVIDER_REF
{
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;

    ULONG cProperties;
    PCRYPT_PROPERTY_REF *rgpProperties;

    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
}
CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;

typedef struct _CRYPT_PROVIDER_REFS
{
    ULONG cProviders;
    PCRYPT_PROVIDER_REF *rgpProviders;
}
CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;
#line 1217 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
NTSTATUS
__stdcall
BCryptQueryProviderRegistration(
         LPCWSTR pszProvider,
         ULONG dwMode,
         ULONG dwInterface,
            ULONG* pcbBuffer,



    PCRYPT_PROVIDER_REG *ppBuffer);


NTSTATUS
__stdcall
BCryptEnumRegisteredProviders(
            ULONG* pcbBuffer,



    PCRYPT_PROVIDERS *ppBuffer);





NTSTATUS
__stdcall
BCryptCreateContext(
         ULONG dwTable,
         LPCWSTR pszContext,
             PCRYPT_CONTEXT_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptDeleteContext(
         ULONG dwTable,
         LPCWSTR pszContext);


NTSTATUS
__stdcall
BCryptEnumContexts(
         ULONG dwTable,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXTS *ppBuffer);


NTSTATUS
__stdcall
BCryptConfigureContext(
         ULONG dwTable,
         LPCWSTR pszContext,
         PCRYPT_CONTEXT_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptQueryContextConfiguration(
         ULONG dwTable,
         LPCWSTR pszContext,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_CONFIG *ppBuffer);


NTSTATUS
__stdcall
BCryptAddContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         ULONG dwPosition);


NTSTATUS
__stdcall
BCryptRemoveContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction);


NTSTATUS
__stdcall
BCryptEnumContextFunctions(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);


NTSTATUS
__stdcall
BCryptConfigureContextFunction(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);


NTSTATUS
__stdcall
BCryptQueryContextFunctionConfiguration(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);



NTSTATUS
__stdcall
BCryptEnumContextFunctionProviders(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
            ULONG* pcbBuffer,



    PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);


NTSTATUS
__stdcall
BCryptSetContextFunctionProperty(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         LPCWSTR pszProperty,
         ULONG cbValue,
                                  PUCHAR pbValue);


NTSTATUS
__stdcall
BCryptQueryContextFunctionProperty(
         ULONG dwTable,
         LPCWSTR pszContext,
         ULONG dwInterface,
         LPCWSTR pszFunction,
         LPCWSTR pszProperty,
            ULONG* pcbValue,



    PUCHAR *ppbValue);
#line 1401 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
NTSTATUS
__stdcall
BCryptRegisterConfigChangeNotify(
          HANDLE *phEvent);
#line 1414 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\bcrypt.h"
NTSTATUS
__stdcall
BCryptUnregisterConfigChangeNotify(
         HANDLE hEvent);






NTSTATUS __stdcall
BCryptResolveProviders(
             LPCWSTR pszContext,
             ULONG dwInterface,
             LPCWSTR pszFunction,
             LPCWSTR pszProvider,
         ULONG dwMode,
         ULONG dwFlags,
            ULONG* pcbBuffer,



    PCRYPT_PROVIDER_REFS *ppBuffer);




NTSTATUS
__stdcall
BCryptGetFipsAlgorithmMode(
          BOOLEAN *pfEnabled
    );






}
#line 1932 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"








#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
#line 18 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
extern "C" {







typedef LONG SECURITY_STATUS;
#line 56 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
typedef LPVOID (__stdcall *PFN_NCRYPT_ALLOC)(
         SIZE_T cbSize
    );

typedef void (__stdcall *PFN_NCRYPT_FREE)(
         LPVOID pv
    );

typedef struct NCRYPT_ALLOC_PARA {
    DWORD cbSize;
    PFN_NCRYPT_ALLOC pfnAlloc;
    PFN_NCRYPT_FREE pfnFree;
} NCRYPT_ALLOC_PARA;
#line 182 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
typedef BCryptBuffer NCryptBuffer;
typedef BCryptBuffer* PNCryptBuffer;
typedef BCryptBufferDesc NCryptBufferDesc;
typedef BCryptBufferDesc* PNCryptBufferDesc;





typedef ULONG_PTR NCRYPT_HANDLE;
typedef ULONG_PTR NCRYPT_PROV_HANDLE;
typedef ULONG_PTR NCRYPT_KEY_HANDLE;
typedef ULONG_PTR NCRYPT_HASH_HANDLE;
typedef ULONG_PTR NCRYPT_SECRET_HANDLE;



typedef
struct _NCRYPT_CIPHER_PADDING_INFO
{

    ULONG cbSize;


    DWORD dwFlags;






    PUCHAR pbIV;
    ULONG cbIV;
#line 227 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
    PUCHAR pbOtherInfo;
    ULONG cbOtherInfo;

} NCRYPT_CIPHER_PADDING_INFO, *PNCRYPT_CIPHER_PADDING_INFO;
#line 245 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
typedef struct _NCRYPT_PLATFORM_ATTEST_PADDING_INFO {
    ULONG magic;
    ULONG pcrMask;
} NCRYPT_PLATFORM_ATTEST_PADDING_INFO;



typedef struct _NCRYPT_KEY_ATTEST_PADDING_INFO {
    ULONG magic;
    PUCHAR pbKeyBlob;
    ULONG cbKeyBlob;
    PUCHAR pbKeyAuth;
    ULONG cbKeyAuth;
} NCRYPT_KEY_ATTEST_PADDING_INFO;
#line 304 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptOpenStorageProvider(
            NCRYPT_PROV_HANDLE *phProvider,
             LPCWSTR pszProviderName,
            DWORD dwFlags);
#line 326 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
typedef struct _NCryptAlgorithmName
{
    LPWSTR pszName;
    DWORD dwClass;
    DWORD dwAlgOperations;
    DWORD dwFlags;
} NCryptAlgorithmName;



SECURITY_STATUS
__stdcall
NCryptEnumAlgorithms(
            NCRYPT_PROV_HANDLE hProvider,
            DWORD dwAlgOperations,
            DWORD * pdwAlgCount,
                                         NCryptAlgorithmName **ppAlgList,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptIsAlgSupported(
            NCRYPT_PROV_HANDLE hProvider,
            LPCWSTR pszAlgId,
            DWORD dwFlags);






typedef struct NCryptKeyName
{
    LPWSTR pszName;
    LPWSTR pszAlgid;
    DWORD dwLegacyKeySpec;
    DWORD dwFlags;
} NCryptKeyName;


SECURITY_STATUS
__stdcall
NCryptEnumKeys(
            NCRYPT_PROV_HANDLE hProvider,
             LPCWSTR pszScope,
             NCryptKeyName **ppKeyName,
            PVOID * ppEnumState,
            DWORD dwFlags);



typedef struct NCryptProviderName
{
    LPWSTR pszName;
    LPWSTR pszComment;
} NCryptProviderName;


SECURITY_STATUS
__stdcall
NCryptEnumStorageProviders(
            DWORD * pdwProviderCount,
                                              NCryptProviderName **ppProviderList,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptFreeBuffer(
                  PVOID pvInput);
#line 408 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptOpenKey(
            NCRYPT_PROV_HANDLE hProvider,
            NCRYPT_KEY_HANDLE *phKey,
            LPCWSTR pszKeyName,
             DWORD dwLegacyKeySpec,
            DWORD dwFlags);
#line 424 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptCreatePersistedKey(
            NCRYPT_PROV_HANDLE hProvider,
            NCRYPT_KEY_HANDLE *phKey,
            LPCWSTR pszAlgId,
             LPCWSTR pszKeyName,
            DWORD dwLegacyKeySpec,
            DWORD dwFlags);
#line 556 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
typedef struct __NCRYPT_UI_POLICY
{
    DWORD dwVersion;
    DWORD dwFlags;
    LPCWSTR pszCreationTitle;
    LPCWSTR pszFriendlyName;
    LPCWSTR pszDescription;
} NCRYPT_UI_POLICY;



typedef struct __NCRYPT_SUPPORTED_LENGTHS
{
    DWORD dwMinLength;
    DWORD dwMaxLength;
    DWORD dwIncrement;
    DWORD dwDefaultLength;
} NCRYPT_SUPPORTED_LENGTHS;






SECURITY_STATUS
__stdcall
NCryptGetProperty(
            NCRYPT_HANDLE hObject,
            LPCWSTR pszProperty,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);
#line 597 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptSetProperty(
            NCRYPT_HANDLE hObject,
            LPCWSTR pszProperty,
                              PBYTE pbInput,
            DWORD cbInput,
            DWORD dwFlags);







SECURITY_STATUS
__stdcall
NCryptFinalizeKey(
            NCRYPT_KEY_HANDLE hKey,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptEncrypt(
            NCRYPT_KEY_HANDLE hKey,
                                  PBYTE pbInput,
            DWORD cbInput,
                void *pPaddingInfo,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptDecrypt(
            NCRYPT_KEY_HANDLE hKey,
                                  PBYTE pbInput,
            DWORD cbInput,
                void *pPaddingInfo,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);





typedef struct _NCRYPT_KEY_BLOB_HEADER
{
    ULONG cbSize;
    ULONG dwMagic;
    ULONG cbAlgName;
    ULONG cbKeyData;
} NCRYPT_KEY_BLOB_HEADER, *PNCRYPT_KEY_BLOB_HEADER;
#line 679 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptImportKey(
            NCRYPT_PROV_HANDLE hProvider,
             NCRYPT_KEY_HANDLE hImportKey,
            LPCWSTR pszBlobType,
             NCryptBufferDesc *pParameterList,
            NCRYPT_KEY_HANDLE *phKey,
                             PBYTE pbData,
            DWORD cbData,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptExportKey(
            NCRYPT_KEY_HANDLE hKey,
             NCRYPT_KEY_HANDLE hExportKey,
            LPCWSTR pszBlobType,
             NCryptBufferDesc *pParameterList,
                                                    PBYTE pbOutput,
            DWORD cbOutput,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptSignHash(
            NCRYPT_KEY_HANDLE hKey,
                void *pPaddingInfo,
                                  PBYTE pbHashValue,
            DWORD cbHashValue,
                                                       PBYTE pbSignature,
            DWORD cbSignature,
            DWORD * pcbResult,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptVerifySignature(
            NCRYPT_KEY_HANDLE hKey,
                void *pPaddingInfo,
                                  PBYTE pbHashValue,
            DWORD cbHashValue,
                                  PBYTE pbSignature,
            DWORD cbSignature,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptDeleteKey(
            NCRYPT_KEY_HANDLE hKey,
            DWORD dwFlags);



SECURITY_STATUS
__stdcall
NCryptFreeObject(
            NCRYPT_HANDLE hObject);



BOOL
__stdcall
NCryptIsKeyHandle(
            NCRYPT_KEY_HANDLE hKey);


SECURITY_STATUS
__stdcall
NCryptTranslateHandle(
              NCRYPT_PROV_HANDLE *phProvider,
            NCRYPT_KEY_HANDLE *phKey,
            HCRYPTPROV hLegacyProv,
             HCRYPTKEY hLegacyKey,
             DWORD dwLegacyKeySpec,
            DWORD dwFlags);
#line 776 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
SECURITY_STATUS
__stdcall
NCryptNotifyChangeKey(
            NCRYPT_PROV_HANDLE hProvider,
            HANDLE *phEvent,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptSecretAgreement(
            NCRYPT_KEY_HANDLE hPrivKey,
            NCRYPT_KEY_HANDLE hPubKey,
            NCRYPT_SECRET_HANDLE *phAgreedSecret,
            DWORD dwFlags);




SECURITY_STATUS
__stdcall
NCryptDeriveKey(
                NCRYPT_SECRET_HANDLE hSharedSecret,
                LPCWSTR pwszKDF,
                NCryptBufferDesc *pParameterList,
                                                        PBYTE pbDerivedKey,
                DWORD cbDerivedKey,
                DWORD *pcbResult,
                ULONG dwFlags);






SECURITY_STATUS
__stdcall
NCryptKeyDerivation(
                NCRYPT_KEY_HANDLE hKey,
                NCryptBufferDesc *pParameterList,
                                                    PUCHAR pbDerivedKey,
                DWORD cbDerivedKey,
                DWORD *pcbResult,
                ULONG dwFlags);
#line 835 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ncrypt.h"
}
#line 1940 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
#line 1951 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;



typedef ULONG_PTR HCRYPTPROV_LEGACY;
#line 1968 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_BIT_BLOB {
    DWORD cbData;
    BYTE *pbData;
    DWORD cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;







typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;
#line 2224 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_OBJID_TABLE {
    DWORD dwAlgId;
    LPCSTR pszObjId;
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;





typedef struct _CRYPT_HASH_INFO {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;
#line 2250 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_EXTENSION {
    LPSTR pszObjId;
    BOOL fCritical;
    CRYPT_OBJID_BLOB Value;
} CERT_EXTENSION, *PCERT_EXTENSION;
typedef const CERT_EXTENSION* PCCERT_EXTENSION;
#line 2270 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;
#line 2282 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_ATTRIBUTE {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_ATTR_BLOB rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;

typedef struct _CRYPT_ATTRIBUTES {
    DWORD cAttr;
    PCRYPT_ATTRIBUTE rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;
#line 2300 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_RDN_ATTR {
    LPSTR pszObjId;
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;
#line 2488 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_RDN {
    DWORD cRDNAttr;
    PCERT_RDN_ATTR rgRDNAttr;
} CERT_RDN, *PCERT_RDN;





typedef struct _CERT_NAME_INFO {
    DWORD cRDN;
    PCERT_RDN rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;







typedef struct _CERT_NAME_VALUE {
    DWORD dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;
#line 2526 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;
#line 2545 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO{
    DWORD dwVersion;
    CRYPT_DER_BLOB PrivateKey;
    LPSTR szCurveOid;
    CRYPT_BIT_BLOB PublicKey;
} CRYPT_ECC_PRIVATE_KEY_INFO, *PCRYPT_ECC_PRIVATE_KEY_INFO;






typedef struct _CRYPT_PRIVATE_KEY_INFO{
    DWORD Version;
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DER_BLOB PrivateKey;
    PCRYPT_ATTRIBUTES pAttributes;
} CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;





typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
    CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedPrivateKey;
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
#line 2589 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
         CRYPT_ALGORITHM_IDENTIFIER Algorithm,
         CRYPT_DATA_BLOB EncryptedPrivateKey,
                                              BYTE* pbClearTextKey,
            DWORD* pcbClearTextKey,
         LPVOID pVoidDecryptFunc);
#line 2612 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
          CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm,
         CRYPT_DATA_BLOB* pClearTextPrivateKey,
                                              BYTE* pbEncryptedKey,
            DWORD* pcbEncryptedKey,
         LPVOID pVoidEncryptFunc);
#line 2631 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
                                                       CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo,
                                                       HCRYPTPROV *phCryptProv,
                                                       LPVOID pVoidResolveFunc);
#line 2645 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
    CRYPT_DIGEST_BLOB PrivateKey;
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
    LPVOID pVoidResolveFunc;
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID pVoidDecryptFunc;
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
#line 2661 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
    HCRYPTPROV hCryptProv;
    DWORD dwKeySpec;
    LPSTR pszPrivateKeyObjId;

    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID pVoidEncryptFunc;
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;
#line 2683 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_INFO {
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_INFO, *PCERT_INFO;
#line 2732 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME RevocationDate;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;







typedef struct _CRL_INFO {
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    DWORD cCRLEntry;
    PCRL_ENTRY rgCRLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CRL_INFO, *PCRL_INFO;
#line 2769 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_OR_CRL_BLOB {
    DWORD dwChoice;
    DWORD cbEncoded;

    BYTE *pbEncoded;
} CERT_OR_CRL_BLOB, * PCERT_OR_CRL_BLOB;

typedef struct _CERT_OR_CRL_BUNDLE {
    DWORD cItem;

    PCERT_OR_CRL_BLOB rgItem;
} CERT_OR_CRL_BUNDLE, *PCERT_OR_CRL_BUNDLE;







typedef struct _CERT_REQUEST_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;
#line 2804 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD dwVersion;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    LPWSTR pwszChallengeString;
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;
#line 2820 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;
#line 2834 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CTL_USAGE {
    DWORD cUsageIdentifier;
    LPSTR *rgpszUsageIdentifier;
} CTL_USAGE, *PCTL_USAGE,
CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
typedef const CTL_USAGE* PCCTL_USAGE;
typedef const CERT_ENHKEY_USAGE* PCCERT_ENHKEY_USAGE;





typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB SubjectIdentifier;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CTL_ENTRY, *PCTL_ENTRY;




typedef struct _CTL_INFO {
    DWORD dwVersion;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD cCTLEntry;
    PCTL_ENTRY rgCTLEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CTL_INFO, *PCTL_INFO;
#line 2882 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR pszTimeStampAlgorithm;
    LPSTR pszContentType;
    CRYPT_OBJID_BLOB Content;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;




typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR pwszName;
    LPWSTR pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, * PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;




typedef struct _CRYPT_CSP_PROVIDER {
    DWORD dwKeySpec;
    LPWSTR pwszProviderName;
    CRYPT_BIT_BLOB Signature;
} CRYPT_CSP_PROVIDER, * PCRYPT_CSP_PROVIDER;
#line 2950 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFormatObject(
         DWORD dwCertEncodingType,
         DWORD dwFormatType,
         DWORD dwFormatStrType,
             void *pFormatStruct,
             LPCSTR lpszStructType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                               void *pbFormat,
            DWORD *pcbFormat
    );
#line 3033 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(
         size_t cbSize
    );

typedef void (__stdcall *PFN_CRYPT_FREE)(
         LPVOID pv
    );


typedef struct _CRYPT_ENCODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;


__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObjectEx(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
         DWORD dwFlags,
             PCRYPT_ENCODE_PARA pEncodePara,
              void *pvEncoded,
            DWORD *pcbEncoded
    );

__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObject(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 3149 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_DECODE_PARA {
    DWORD cbSize;
    PFN_CRYPT_ALLOC pfnAlloc;
    PFN_CRYPT_FREE pfnFree;
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;

__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObjectEx(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
             PCRYPT_DECODE_PARA pDecodePara,
              void *pvStructInfo,
            DWORD *pcbStructInfo
    );


__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObject(
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
                                                              void *pvStructInfo,
            DWORD *pcbStructInfo
    );
#line 3989 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_EXTENSIONS {
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;
#line 4156 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_NAME_BLOB CertIssuer;
    CRYPT_INTEGER_BLOB CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;







typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME NotBefore;
    FILETIME NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;

typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB KeyId;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;
#line 4200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_POLICY_ID {
    DWORD cCertPolicyElementId;
    LPSTR *rgpszCertPolicyElementId;
} CERT_POLICY_ID, *PCERT_POLICY_ID;

typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD cCertPolicyId;
    PCERT_POLICY_ID rgCertPolicyId;
    CRYPT_BIT_BLOB RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;
#line 4224 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_OTHER_NAME {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;

typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD dwAltNameChoice;
    union {
        PCERT_OTHER_NAME pOtherName;
        LPWSTR pwszRfc822Name;
        LPWSTR pwszDNSName;

        CERT_NAME_BLOB DirectoryName;

        LPWSTR pwszURL;
        CRYPT_DATA_BLOB IPAddress;
        LPSTR pszRegisteredID;
    } ;
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;
#line 4258 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_ALT_NAME_INFO {
    DWORD cAltEntry;
    PCERT_ALT_NAME_ENTRY rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;
#line 4293 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB SubjectType;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
    DWORD cSubtreesConstraint;
    CERT_NAME_BLOB *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;
#line 4310 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    BOOL fCA;
    BOOL fPathLenConstraint;
    DWORD dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;
#line 4335 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR pszPolicyQualifierId;
    CRYPT_OBJID_BLOB Qualifier;
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;

typedef struct _CERT_POLICY_INFO {
    LPSTR pszPolicyIdentifier;
    DWORD cPolicyQualifier;
    CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;

typedef struct _CERT_POLICIES_INFO {
    DWORD cPolicyInfo;
    CERT_POLICY_INFO *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;
#line 4359 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR pszOrganization;
    DWORD cNoticeNumbers;
    int *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;
    LPWSTR pszDisplayText;
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;







typedef struct _CPS_URLS {
    LPWSTR pszURL;
    CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;
    CRYPT_DATA_BLOB *pDigest;
} CPS_URLS, *PCPS_URLS;

typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR pszPracticesReference;
    LPSTR pszNoticeIdentifier;
    LPSTR pszNSINoticeIdentifier;
    DWORD cCPSURLs;
    CPS_URLS *rgCPSURLs;
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;
#line 4404 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_POLICY_MAPPING {
    LPSTR pszIssuerDomainPolicy;
    LPSTR pszSubjectDomainPolicy;
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;

typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD cPolicyMapping;
    PCERT_POLICY_MAPPING rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;







typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    BOOL fRequireExplicitPolicy;
    DWORD dwRequireExplicitPolicySkipCerts;

    BOOL fInhibitPolicyMapping;
    DWORD dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;
#line 4506 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR pszObjId;
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
#line 4520 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_CONTENT_INFO {
    LPSTR pszObjId;
    CRYPT_DER_BLOB Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;
#line 4578 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD cValue;
    PCRYPT_DER_BLOB rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;
#line 4595 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB KeyId;
    CERT_ALT_NAME_INFO AuthorityCertIssuer;

    CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
#line 4631 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR pszAccessMethod;
    CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;


typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD cAccDescr;
    PCERT_ACCESS_DESCRIPTION rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS,
  CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;
#line 4693 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRL_DIST_POINT_NAME {
    DWORD dwDistPointNameChoice;
    union {
        CERT_ALT_NAME_INFO FullName;

    } ;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;





typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    CRYPT_BIT_BLOB ReasonFlags;
    CERT_ALT_NAME_INFO CRLIssuer;
} CRL_DIST_POINT, *PCRL_DIST_POINT;
#line 4719 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRL_DIST_POINTS_INFO {
    DWORD cDistPoint;
    PCRL_DIST_POINT rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;
#line 4750 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CROSS_CERT_DIST_POINTS_INFO {

    DWORD dwSyncDeltaTime;

    DWORD cDistPoint;
    PCERT_ALT_NAME_INFO rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;
#line 4778 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_PAIR {
   CERT_BLOB Forward;
   CERT_BLOB Reverse;
} CERT_PAIR, *PCERT_PAIR;
#line 4811 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME DistPointName;
    BOOL fOnlyContainsUserCerts;
    BOOL fOnlyContainsCACerts;
    CRYPT_BIT_BLOB OnlySomeReasonFlags;
    BOOL fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
#line 4842 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY Base;
    DWORD dwMinimum;
    BOOL fMaximum;
    DWORD dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;

typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD cPermittedSubtree;
    PCERT_GENERAL_SUBTREE rgPermittedSubtree;
    DWORD cExcludedSubtree;
    PCERT_GENERAL_SUBTREE rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
#line 4943 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;
#line 4974 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;
#line 4987 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_ECC_SIGNATURE {
    CRYPT_UINT_BLOB r;
    CRYPT_UINT_BLOB s;
} CERT_ECC_SIGNATURE, *PCERT_ECC_SIGNATURE;
#line 4999 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB seed;
    DWORD pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;

typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB p;
    CRYPT_UINT_BLOB g;
    CRYPT_UINT_BLOB q;
    CRYPT_UINT_BLOB j;
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;
#line 5022 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR pszContentEncryptionObjId;
    BYTE rgbCounter[4];
    BYTE rgbKeyLength[4];
    CRYPT_DATA_BLOB PubInfo;
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;
#line 5038 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_ECC_CMS_SHARED_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_DATA_BLOB EntityUInfo;
    BYTE rgbSuppPubInfo[4];
} CRYPT_ECC_CMS_SHARED_INFO, *PCRYPT_ECC_CMS_SHARED_INFO;
#line 5051 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD dwVersion;
    BOOL fIV;
    BYTE rgbIV[8];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;
#line 5075 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;

typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
#line 5100 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_QC_STATEMENT {
    LPSTR pszStatementId;
    CRYPT_OBJID_BLOB StatementInfo;
} CERT_QC_STATEMENT, *PCERT_QC_STATEMENT;

typedef struct _CERT_QC_STATEMENTS_EXT_INFO {
    DWORD cStatement;
    PCERT_QC_STATEMENT rgStatement;
} CERT_QC_STATEMENTS_EXT_INFO, *PCERT_QC_STATEMENTS_EXT_INFO;
#line 5152 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_MASK_GEN_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
} CRYPT_MASK_GEN_ALGORITHM, *PCRYPT_MASK_GEN_ALGORITHM;

typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    DWORD dwSaltLength;
    DWORD dwTrailerField;
} CRYPT_RSA_SSA_PSS_PARAMETERS, *PCRYPT_RSA_SSA_PSS_PARAMETERS;
#line 5187 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_PSOURCE_ALGORITHM {
    LPSTR pszObjId;
    CRYPT_DATA_BLOB EncodingParameters;
} CRYPT_PSOURCE_ALGORITHM, *PCRYPT_PSOURCE_ALGORITHM;

typedef struct _CRYPT_RSAES_OAEP_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM MaskGenAlgorithm;
    CRYPT_PSOURCE_ALGORITHM PSourceAlgorithm;
} CRYPT_RSAES_OAEP_PARAMETERS, *PCRYPT_RSAES_OAEP_PARAMETERS;
#line 5481 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMC_TAGGED_ATTRIBUTE {
    DWORD dwBodyPartID;
    CRYPT_ATTRIBUTE Attribute;
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;

typedef struct _CMC_TAGGED_CERT_REQUEST {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB SignedCertRequest;
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;

typedef struct _CMC_TAGGED_REQUEST {
    DWORD dwTaggedRequestChoice;
    union {

        PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;
    } ;
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;



typedef struct _CMC_TAGGED_CONTENT_INFO {
    DWORD dwBodyPartID;
    CRYPT_DER_BLOB EncodedContentInfo;
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;

typedef struct _CMC_TAGGED_OTHER_MSG {
    DWORD dwBodyPartID;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;



typedef struct _CMC_DATA_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedRequest;
    PCMC_TAGGED_REQUEST rgTaggedRequest;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_DATA_INFO, *PCMC_DATA_INFO;



typedef struct _CMC_RESPONSE_INFO {
    DWORD cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;
    DWORD cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;
    DWORD cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;
#line 5544 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMC_PEND_INFO {
    CRYPT_DATA_BLOB PendToken;
    FILETIME PendTime;
} CMC_PEND_INFO, *PCMC_PEND_INFO;

typedef struct _CMC_STATUS_INFO {
    DWORD dwStatus;
    DWORD cBodyList;
    DWORD *rgdwBodyList;
    LPWSTR pwszStatusString;
    DWORD dwOtherInfoChoice;
    union {



        DWORD dwFailInfo;

        PCMC_PEND_INFO pPendInfo;
    } ;
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;
#line 5641 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMC_ADD_EXTENSIONS_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;
#line 5658 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMC_ADD_ATTRIBUTES_INFO {
    DWORD dwCmcDataReference;
    DWORD cCertReference;
    DWORD *rgdwCertReference;
    DWORD cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;
#line 5674 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_TEMPLATE_EXT {
    LPSTR pszObjId;
    DWORD dwMajorVersion;
    BOOL fMinorVersion;
    DWORD dwMinorVersion;
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;
#line 5690 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_HASHED_URL {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB Hash;
    LPWSTR pwszUrl;

} CERT_HASHED_URL, *PCERT_HASHED_URL;

typedef struct _CERT_LOGOTYPE_DETAILS {
    LPWSTR pwszMimeType;
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_DETAILS, *PCERT_LOGOTYPE_DETAILS;

typedef struct _CERT_LOGOTYPE_REFERENCE {
    DWORD cHashedUrl;
    PCERT_HASHED_URL rgHashedUrl;
} CERT_LOGOTYPE_REFERENCE, *PCERT_LOGOTYPE_REFERENCE;

typedef struct _CERT_LOGOTYPE_IMAGE_INFO {


    DWORD dwLogotypeImageInfoChoice;

    DWORD dwFileSize;
    DWORD dwXSize;
    DWORD dwYSize;

    DWORD dwLogotypeImageResolutionChoice;
    union {




        DWORD dwNumBits;


        DWORD dwTableSize;
    } ;
    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;
#line 5739 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_LOGOTYPE_IMAGE {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_IMAGE_INFO pLogotypeImageInfo;
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;


typedef struct _CERT_LOGOTYPE_AUDIO_INFO {
    DWORD dwFileSize;
    DWORD dwPlayTime;
    DWORD dwChannels;
    DWORD dwSampleRate;

    LPWSTR pwszLanguage;

} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;

typedef struct _CERT_LOGOTYPE_AUDIO {
    CERT_LOGOTYPE_DETAILS LogotypeDetails;

    PCERT_LOGOTYPE_AUDIO_INFO pLogotypeAudioInfo;
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;


typedef struct _CERT_LOGOTYPE_DATA {
    DWORD cLogotypeImage;
    PCERT_LOGOTYPE_IMAGE rgLogotypeImage;

    DWORD cLogotypeAudio;
    PCERT_LOGOTYPE_AUDIO rgLogotypeAudio;
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;


typedef struct _CERT_LOGOTYPE_INFO {
    DWORD dwLogotypeInfoChoice;
    union {

        PCERT_LOGOTYPE_DATA pLogotypeDirectInfo;


        PCERT_LOGOTYPE_REFERENCE pLogotypeIndirectInfo;
    } ;
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;




typedef struct _CERT_OTHER_LOGOTYPE_INFO {
    LPSTR pszObjId;
    CERT_LOGOTYPE_INFO LogotypeInfo;
} CERT_OTHER_LOGOTYPE_INFO, *PCERT_OTHER_LOGOTYPE_INFO;




typedef struct _CERT_LOGOTYPE_EXT_INFO {
    DWORD cCommunityLogo;
    PCERT_LOGOTYPE_INFO rgCommunityLogo;
    PCERT_LOGOTYPE_INFO pIssuerLogo;
    PCERT_LOGOTYPE_INFO pSubjectLogo;
    DWORD cOtherLogo;
    PCERT_OTHER_LOGOTYPE_INFO rgOtherLogo;
} CERT_LOGOTYPE_EXT_INFO, *PCERT_LOGOTYPE_EXT_INFO;
#line 5813 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_BIOMETRIC_DATA {
    DWORD dwTypeOfBiometricDataChoice;
    union {

        DWORD dwPredefined;


        LPSTR pszObjId;
    } ;

    CERT_HASHED_URL HashedUrl;
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;
#line 5833 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_BIOMETRIC_EXT_INFO {
    DWORD cBiometricData;
    PCERT_BIOMETRIC_DATA rgBiometricData;
} CERT_BIOMETRIC_EXT_INFO, *PCERT_BIOMETRIC_EXT_INFO;
#line 5853 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _OCSP_SIGNATURE_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CRYPT_BIT_BLOB Signature;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
} OCSP_SIGNATURE_INFO, *POCSP_SIGNATURE_INFO;

typedef struct _OCSP_SIGNED_REQUEST_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    POCSP_SIGNATURE_INFO pOptionalSignatureInfo;
} OCSP_SIGNED_REQUEST_INFO, *POCSP_SIGNED_REQUEST_INFO;







typedef struct _OCSP_CERT_ID {
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_HASH_BLOB IssuerNameHash;
    CRYPT_HASH_BLOB IssuerKeyHash;
    CRYPT_INTEGER_BLOB SerialNumber;
} OCSP_CERT_ID, *POCSP_CERT_ID;

typedef struct _OCSP_REQUEST_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_ENTRY, *POCSP_REQUEST_ENTRY;

typedef struct _OCSP_REQUEST_INFO {
    DWORD dwVersion;
    PCERT_ALT_NAME_ENTRY pRequestorName;
    DWORD cRequestEntry;
    POCSP_REQUEST_ENTRY rgRequestEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_REQUEST_INFO, *POCSP_REQUEST_INFO;
#line 5900 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _OCSP_RESPONSE_INFO {
    DWORD dwStatus;
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Value;
} OCSP_RESPONSE_INFO, *POCSP_RESPONSE_INFO;
#line 5923 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
    CRYPT_DER_BLOB ToBeSigned;
    OCSP_SIGNATURE_INFO SignatureInfo;
} OCSP_BASIC_SIGNED_RESPONSE_INFO, *POCSP_BASIC_SIGNED_RESPONSE_INFO;







typedef struct _OCSP_BASIC_REVOKED_INFO {
    FILETIME RevocationDate;


    DWORD dwCrlReasonCode;
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;

typedef struct _OCSP_BASIC_RESPONSE_ENTRY {
    OCSP_CERT_ID CertId;
    DWORD dwCertStatus;
    union {





        POCSP_BASIC_REVOKED_INFO pRevokedInfo;

    } ;
    FILETIME ThisUpdate;
    FILETIME NextUpdate;

    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;






typedef struct _OCSP_BASIC_RESPONSE_INFO {
    DWORD dwVersion;
    DWORD dwResponderIdChoice;
    union {

        CERT_NAME_BLOB ByNameResponderId;

        CRYPT_HASH_BLOB ByKeyResponderId;
    } ;
    FILETIME ProducedAt;
    DWORD cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY rgResponseEntry;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;
#line 5996 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_SUPPORTED_ALGORITHM_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB IntendedKeyUsage;
    CERT_POLICIES_INFO IntendedCertPolicies;
} CERT_SUPPORTED_ALGORITHM_INFO, *PCERT_SUPPORTED_ALGORITHM_INFO;






typedef struct _CERT_TPM_SPECIFICATION_INFO {
    LPWSTR pwszFamily;
    DWORD dwLevel;
    DWORD dwRevision;
} CERT_TPM_SPECIFICATION_INFO, *PCERT_TPM_SPECIFICATION_INFO;






typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;
#line 6095 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR pszOID;
    void *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;
#line 6119 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptInstallOIDFunctionAddress(
             HMODULE hModule,
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         DWORD cFuncEntry,
                           const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
         DWORD dwFlags
    );







__declspec(dllimport)
HCRYPTOIDFUNCSET
__stdcall
CryptInitOIDFunctionSet(
         LPCSTR pszFuncName,
         DWORD dwFlags
    );
#line 6163 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptGetOIDFunctionAddress(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
         LPCSTR pszOID,
         DWORD dwFlags,
             void **ppvFuncAddr,
          HCRYPTOIDFUNCADDR *phFuncAddr
    );
#line 6187 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptGetDefaultOIDDllList(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
                                                                                 WCHAR *pwszDllList,
            DWORD *pcchDllList
    );
#line 6221 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptGetDefaultOIDFunctionAddress(
         HCRYPTOIDFUNCSET hFuncSet,
         DWORD dwEncodingType,
             LPCWSTR pwszDll,
         DWORD dwFlags,
             void **ppvFuncAddr,
            HCRYPTOIDFUNCADDR *phFuncAddr
    );
#line 6246 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFreeOIDFunctionAddress(
         HCRYPTOIDFUNCADDR hFuncAddr,
         DWORD dwFlags
    );
#line 6268 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszDll,
             LPCSTR pszOverrideFuncName
    );





__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID
    );
#line 6307 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterDefaultOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         DWORD dwIndex,
         LPCWSTR pwszDll
    );
#line 6324 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterDefaultOIDFunction(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCWSTR pwszDll
    );
#line 6341 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetOIDFunctionValue(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszValueName,
         DWORD dwValueType,
                                      const BYTE *pbValueData,
         DWORD cbValueData
    );
#line 6362 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetOIDFunctionValue(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
             LPCWSTR pwszValueName,
              DWORD *pdwValueType,
                                                            BYTE *pbValueData,
                DWORD *pcbValueData
    );

typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(
         DWORD dwEncodingType,
         LPCSTR pszFuncName,
         LPCSTR pszOID,
         DWORD cValue,
                       const DWORD rgdwValueType[],
                       LPCWSTR const rgpwszValueName[],
                       const BYTE * const rgpbValueData[],
                       const DWORD rgcbValueData[],
                void *pvArg
    );
#line 6400 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDFunction(
         DWORD dwEncodingType,
             LPCSTR pszFuncName,
             LPCSTR pszOID,
         DWORD dwFlags,
                void *pvArg,
               PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
    );
#line 6447 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_OID_INFO {
    DWORD cbSize;
    LPCSTR pszOID;
    LPCWSTR pwszName;
    DWORD dwGroupId;
    union {
        DWORD dwValue;
        ALG_ID Algid;
        DWORD dwLength;
    } ;
    CRYPT_DATA_BLOB ExtraInfo;
#line 6485 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;
#line 6579 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCRYPT_OID_INFO
__stdcall
CryptFindOIDInfo(
         DWORD dwKeyType,
         void *pvKey,
         DWORD dwGroupId
    );
#line 6649 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDInfo(
         PCCRYPT_OID_INFO pInfo,
         DWORD dwFlags
    );







__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDInfo(
         PCCRYPT_OID_INFO pInfo
    );


typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(
         PCCRYPT_OID_INFO pInfo,
                void *pvArg
    );
#line 6686 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDInfo(
         DWORD dwGroupId,
         DWORD dwFlags,
                void *pvArg,
               PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
    );
#line 6719 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
LPCWSTR
__stdcall
CryptFindLocalizedName(
         LPCWSTR pwszCryptName
    );
#line 6733 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_STRONG_SIGN_SERIALIZED_INFO {
    DWORD dwFlags;
    LPWSTR pwszCNGSignHashAlgids;
    LPWSTR pwszCNGPubKeyMinBitLengths;
} CERT_STRONG_SIGN_SERIALIZED_INFO, *PCERT_STRONG_SIGN_SERIALIZED_INFO;
#line 6761 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_STRONG_SIGN_PARA {
    DWORD cbSize;

    DWORD dwInfoChoice;
    union {
        void *pvInfo;


        PCERT_STRONG_SIGN_SERIALIZED_INFO pSerializedInfo;


        LPSTR pszOID;

    } ;
} CERT_STRONG_SIGN_PARA, *PCERT_STRONG_SIGN_PARA;

typedef const CERT_STRONG_SIGN_PARA *PCCERT_STRONG_SIGN_PARA;
#line 6850 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void *HCRYPTMSG;
#line 6887 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_ISSUER_SERIAL_NUMBER {
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;




typedef struct _CERT_ID {
    DWORD dwIdChoice;
    union {

        CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;

        CRYPT_HASH_BLOB KeyId;

        CRYPT_HASH_BLOB HashId;
    } ;
} CERT_ID, *PCERT_ID;
#line 6960 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_SIGNER_ENCODE_INFO {
    DWORD cbSize;
    PCERT_INFO pCertInfo;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
#line 6987 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;

typedef struct _CMSG_SIGNED_ENCODE_INFO {
    DWORD cbSize;
    DWORD cSigners;
    PCMSG_SIGNER_ENCODE_INFO rgSigners;
    DWORD cCertEncoded;
    PCERT_BLOB rgCertEncoded;
    DWORD cCrlEncoded;
    PCRL_BLOB rgCrlEncoded;





} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;
#line 7047 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCODE_INFO;

typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;




    PCERT_INFO *rgpRecipients;
#line 7075 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
#line 7100 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
#line 7149 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_BIT_BLOB RecipientPublicKey;
    CERT_ID RecipientId;



    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
    void *pvKeyWrapAuxInfo;







    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwKeySpec;

    DWORD dwKeyChoice;
    union {



        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;




        PCERT_ID pSenderId;
    } ;
    CRYPT_DATA_BLOB UserKeyingMaterial;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
#line 7217 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    void *pvKeyEncryptionAuxInfo;
    HCRYPTPROV hCryptProv;
    DWORD dwKeyChoice;
    union {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } ;
    CRYPT_DATA_BLOB KeyId;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
#line 7243 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
struct _CMSG_RECIPIENT_ENCODE_INFO {
    DWORD dwRecipientChoice;
    union {

        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;
    } ;
};
#line 7275 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_RC2_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;
#line 7293 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
    DWORD cbSize;
    DWORD dwFlags;
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;
#line 7315 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_RC4_AUX_INFO {
    DWORD cbSize;
    DWORD dwBitLen;
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;
#line 7329 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
    DWORD cbSize;
    CMSG_SIGNED_ENCODE_INFO SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
#line 7351 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_HASHED_ENCODE_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;
#line 7368 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
#line 7389 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(
             const void *pvArg,
                                 BYTE *pbData,
         DWORD cbData,
         BOOL fFinal
    );



typedef struct _CMSG_STREAM_INFO {
    DWORD cbContent;
    PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;
    void *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;
#line 7437 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToEncode(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
         void const *pvMsgEncodeInfo,
             LPSTR pszInnerContentObjID,
             PCMSG_STREAM_INFO pStreamInfo
    );
#line 7457 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CryptMsgCalculateEncodedLength(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
         void const *pvMsgEncodeInfo,
             LPSTR pszInnerContentObjID,
         DWORD cbData
    );
#line 7481 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToDecode(
         DWORD dwMsgEncodingType,
         DWORD dwFlags,
         DWORD dwMsgType,
             HCRYPTPROV_LEGACY hCryptProv,
               PCERT_INFO pRecipientInfo,
             PCMSG_STREAM_INFO pStreamInfo
    );




__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgDuplicate(
             HCRYPTMSG hCryptMsg
    );






__declspec(dllimport)
BOOL
__stdcall
CryptMsgClose(
             HCRYPTMSG hCryptMsg
    );
#line 7524 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgUpdate(
         HCRYPTMSG hCryptMsg,
                                 const BYTE *pbData,
         DWORD cbData,
         BOOL fFinal
    );
#line 7558 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgGetParam(
         HCRYPTMSG hCryptMsg,
         DWORD dwParamType,
         DWORD dwIndex,
                                                  void *pvData,
            DWORD *pcbData
    );
#line 7693 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_SIGNER_INFO {
    DWORD dwVersion;
    CERT_NAME_BLOB Issuer;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;


    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;
#line 7728 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD dwVersion;
    CERT_ID SignerId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;


    CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB EncryptedHash;
    CRYPT_ATTRIBUTES AuthAttrs;
    CRYPT_ATTRIBUTES UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;
#line 7761 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
#line 8002 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD dwVersion;


    CERT_ID RecipientId;

    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;

typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {

    CERT_ID RecipientId;

    CRYPT_DATA_BLOB EncryptedKey;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD dwVersion;
    DWORD dwOriginatorChoice;
    union {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } ;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;

    DWORD cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;





typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD dwVersion;
    CRYPT_DATA_BLOB KeyId;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;


    FILETIME Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;

typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD dwRecipientChoice;
    union {

        PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;

        PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;

        PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    } ;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;
#line 8097 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgControl(
         HCRYPTMSG hCryptMsg,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );
#line 8176 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    DWORD dwSignerIndex;
    DWORD dwSignerType;
    void *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
#line 8229 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CTRL_DECRYPT_PARA {
    DWORD cbSize;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    DWORD dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;
#line 8269 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD cbSize;

    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;
    DWORD dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
#line 8313 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
    DWORD cbSize;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;
    DWORD dwRecipientIndex;
    DWORD dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
#line 8357 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
    DWORD cbSize;
    HCRYPTPROV hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
    DWORD dwRecipientIndex;
    DWORD dwKeyChoice;
    union {

        HCRYPTKEY hKeyEncryptionKey;

        void *pvKeyEncryptionKey;
    } ;
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
#line 8419 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    CRYPT_DATA_BLOB blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
#line 8435 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
    DWORD cbSize;
    DWORD dwSignerIndex;
    DWORD dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
#line 8506 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
BOOL
__stdcall
CryptMsgVerifyCountersignatureEncoded(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwEncodingType,
                                   PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
                                                   PBYTE pbSignerInfoCountersignature,
         DWORD cbSignerInfoCountersignature,
         PCERT_INFO pciCountersigner
    );
#line 8529 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
BOOL
__stdcall
CryptMsgVerifyCountersignatureEncodedEx(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwEncodingType,
                                   PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
                                                   PBYTE pbSignerInfoCountersignature,
         DWORD cbSignerInfoCountersignature,
         DWORD dwSignerType,
         void *pvSigner,
         DWORD dwFlags,
                void *pvExtra
    );
#line 8555 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
BOOL
__stdcall
CryptMsgCountersign(
         HCRYPTMSG hCryptMsg,
         DWORD dwIndex,
         DWORD cCountersigners,
                                PCMSG_SIGNER_ENCODE_INFO rgCountersigners
    );







BOOL
__stdcall
CryptMsgCountersignEncoded(
         DWORD dwEncodingType,
                                   PBYTE pbSignerInfo,
         DWORD cbSignerInfo,
         DWORD cCountersigners,
                                PCMSG_SIGNER_ENCODE_INFO rgCountersigners,
                                                                          PBYTE pbCountersignature,
            PDWORD pcbCountersignature
    );
#line 8589 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void * (__stdcall *PFN_CMSG_ALLOC) (
         size_t cb
    );

typedef void (__stdcall *PFN_CMSG_FREE)(
            void *pv
    );
#line 8610 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY) (
            HCRYPTPROV *phCryptProv,
         PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
             PVOID pvEncryptAuxInfo,
         PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
               PFN_CMSG_ALLOC pfnAlloc,
          HCRYPTKEY *phEncryptKey,
                                                      PBYTE *ppbEncryptParameters,
          PDWORD pcbEncryptParameters
    );


typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY) (
         HCRYPTPROV hCryptProv,
         HCRYPTKEY hEncryptKey,
         PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
                                                  PBYTE pbData,
            PDWORD pcbData
    );


typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY) (
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
         PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
                                   PBYTE pbEncodedKey,
         DWORD cbEncodedKey,
          HCRYPTKEY *phEncryptKey
    );
#line 8664 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD cbSize;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;
    DWORD dwEncryptFlags;
    union {

        HCRYPTKEY hContentEncryptKey;

        BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    } ;
    DWORD dwFlags;

    BOOL fCNG;

    BYTE *pbCNGContentEncryptKeyObject;
    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
#line 8752 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (
            PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8769 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;
#line 8810 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
            PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8830 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
    DWORD cbSize;
    CRYPT_DATA_BLOB EncryptedKey;
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;







typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB UserKeyingMaterial;
    DWORD dwOriginatorChoice;
    union {

        CERT_ID OriginatorCertId;

        CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    } ;
    DWORD cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;
#line 8917 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
            PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 8936 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
    DWORD cbSize;
    DWORD dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB EncryptedKey;
    DWORD dwFlags;
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;
#line 8978 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST) (
         PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
         PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
            PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 9007 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST) (
         PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
         PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTKEY *phContentEncryptKey
    );
#line 9045 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
    DWORD cbSize;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    PFN_CMSG_ALLOC pfnAlloc;
    PFN_CMSG_FREE pfnFree;




    NCRYPT_KEY_HANDLE hNCryptKey;

    BYTE *pbContentEncryptKey;
    DWORD cbContentEncryptKey;

    BCRYPT_KEY_HANDLE hCNGContentEncryptKey;
    BYTE *pbCNGContentEncryptKeyObject;
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;
#line 9081 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
         DWORD dwFlags,
               void *pvReserved
    );
#line 9106 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
         DWORD dwFlags,
               void *pvReserved
    );
#line 9131 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY) (
            PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
         DWORD dwFlags,
               void *pvReserved
    );
#line 9217 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void *HCERTSTORE;
#line 9229 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCertEncoded;
    DWORD cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;
#line 9254 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRL_CONTEXT {
    DWORD dwCertEncodingType;
    BYTE *pbCrlEncoded;
    DWORD cbCrlEncoded;
    PCRL_INFO pCrlInfo;
    HCERTSTORE hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;
#line 9273 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CTL_CONTEXT {
    DWORD dwMsgAndCertEncodingType;
    BYTE *pbCtlEncoded;
    DWORD cbCtlEncoded;
    PCTL_INFO pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG hCryptMsg;
    BYTE *pbCtlContent;
    DWORD cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
#line 9517 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD dwParam;
    BYTE *pbData;
    DWORD cbData;
    DWORD dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;

typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR pwszContainerName;
    LPWSTR pwszProvName;
    DWORD dwProvType;
    DWORD dwFlags;
    DWORD cProvParam;
    PCRYPT_KEY_PROV_PARAM rgProvParam;
    DWORD dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
#line 9557 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_KEY_CONTEXT {
    DWORD cbSize;
    union {
        HCRYPTPROV hCryptProv;


        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;
    DWORD dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;







typedef struct _ROOT_INFO_LUID {
    DWORD LowPart;
    LONG HighPart;
} ROOT_INFO_LUID, *PROOT_INFO_LUID;

typedef struct _CRYPT_SMART_CARD_ROOT_INFO {
    BYTE rgbCardID [16];
    ROOT_INFO_LUID luid;
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;
#line 9683 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    union {
        HKEY hKeyBase;
        void *pvBase;
    } ;
    union {
        void *pvSystemStore;
        LPCSTR pszSystemStore;
        LPCWSTR pwszSystemStore;
    } ;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;
#line 10048 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
    HKEY hKeyBase;
    LPWSTR pwszRegPath;
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
#line 10061 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
    HKEY hKey;
    LPWSTR pwszStoreDirectory;
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;
#line 10143 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_LDAP_STORE_OPENED_PARA {
    void *pvLdapSessionHandle;

    LPCWSTR pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;
#line 10511 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

HCERTSTORE
__stdcall
CertOpenStore(
         LPCSTR lpszStoreProvider,
         DWORD dwEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
             const void *pvPara
    );







typedef void *HCERTSTOREPROV;
#line 10540 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_STORE_PROV_INFO {
    DWORD cbSize;
    DWORD cStoreProvFunc;
    void **rgpvStoreProvFunc;
    HCERTSTOREPROV hStoreProv;
    DWORD dwStoreProvFlags;
    HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;
#line 10556 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
         LPCSTR lpszStoreProvider,
         DWORD dwEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
             const void *pvPara,
         HCERTSTORE hCertStore,
            PCERT_STORE_PROV_INFO pStoreProvInfo
    );
#line 10626 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(
                HCERTSTOREPROV hStoreProv,
         DWORD dwFlags
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pStoreCertContext,
         DWORD dwFlags,
             PCCERT_CONTEXT *ppProvCertContext
    );
#line 10652 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags
    );





typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags
    );
#line 10676 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pStoreCrlContext,
         DWORD dwFlags,
             PCCRL_CONTEXT *ppProvCrlContext
    );
#line 10703 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags
    );
#line 10726 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pStoreCtlContext,
         DWORD dwFlags,
             PCCTL_CONTEXT *ppProvCtlContext
    );
#line 10753 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
                                                     );
#line 10776 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(
            HCERTSTOREPROV hStoreProv,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );

typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD dwFindFlags;
    DWORD dwFindType;
    const void *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
*PCCERT_STORE_PROV_FIND_INFO;

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCERT_CONTEXT pPrevCertContext,
         DWORD dwFlags,
            void **ppvStoreProvFindInfo,
             PCCERT_CONTEXT *ppProvCertContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                                  void *pvData,
            DWORD *pcbData
    );


typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCRL_CONTEXT pPrevCrlContext,
         DWORD dwFlags,
            void **ppvStoreProvFindInfo,
             PCCRL_CONTEXT *ppProvCrlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                                  void *pvData,
            DWORD *pcbData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(
         HCERTSTOREPROV hStoreProv,
         PCCERT_STORE_PROV_FIND_INFO pFindInfo,
         PCCTL_CONTEXT pPrevCtlContext,
         DWORD dwFlags,
            void **ppvStoreProvFindInfo,
             PCCTL_CONTEXT *ppProvCtlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         void *pvStoreProvFindInfo,
         DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
            HCERTSTOREPROV hStoreProv,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
                                                  void *pvData,
            DWORD *pcbData
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CertDuplicateStore(
         HCERTSTORE hCertStore
    );
#line 10950 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSaveStore(
         HCERTSTORE hCertStore,
         DWORD dwEncodingType,
         DWORD dwSaveAs,
         DWORD dwSaveTo,
            void *pvSaveToPara,
         DWORD dwFlags
    );
#line 10992 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertCloseStore(
             HCERTSTORE hCertStore,
         DWORD dwFlags
    );
#line 11012 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetSubjectCertificateFromStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId

    );
#line 11038 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertEnumCertificatesInStore(
         HCERTSTORE hCertStore,
             PCCERT_CONTEXT pPrevCertContext
    );
#line 11070 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertFindCertificateInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCERT_CONTEXT pPrevCertContext
    );
#line 11432 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetIssuerCertificateFromStore(
         HCERTSTORE hCertStore,
         PCCERT_CONTEXT pSubjectContext,
             PCCERT_CONTEXT pPrevIssuerContext,
            DWORD *pdwFlags
    );
#line 11452 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifySubjectCertificateContext(
         PCCERT_CONTEXT pSubject,
             PCCERT_CONTEXT pIssuer,
            DWORD *pdwFlags
    );




__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertDuplicateCertificateContext(
             PCCERT_CONTEXT pCertContext
    );
#line 11485 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateCertificateContext(
         DWORD dwCertEncodingType,
                                    const BYTE *pbCertEncoded,
         DWORD cbCertEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCertificateContext(
             PCCERT_CONTEXT pCertContext
    );
#line 11648 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextProperty(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 11725 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetCertificateContextProperty(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );
#line 11749 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertEnumCertificateContextProperties(
         PCCERT_CONTEXT pCertContext,
         DWORD dwPropId
    );
#line 11774 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertCreateCTLEntryFromCertificateContextProperties(
         PCCERT_CONTEXT pCertContext,
         DWORD cOptAttr,
                             PCRYPT_ATTRIBUTE rgOptAttr,
         DWORD dwFlags,
               void *pvReserved,
                                                          PCTL_ENTRY pCtlEntry,
            DWORD *pcbCtlEntry
    );
#line 11803 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextPropertiesFromCTLEntry(
         PCCERT_CONTEXT pCertContext,
         PCTL_ENTRY pCtlEntry,
         DWORD dwFlags
    );
#line 11864 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertGetCRLFromStore(
         HCERTSTORE hCertStore,
             PCCERT_CONTEXT pIssuerContext,
             PCCRL_CONTEXT pPrevCrlContext,
            DWORD *pdwFlags
    );
#line 11890 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertEnumCRLsInStore(
         HCERTSTORE hCertStore,
             PCCRL_CONTEXT pPrevCrlContext
    );
#line 11921 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertFindCRLInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCRL_CONTEXT pPrevCrlContext
    );
#line 12007 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRL_FIND_ISSUED_FOR_PARA {
    PCCERT_CONTEXT pSubjectCert;
    PCCERT_CONTEXT pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;
#line 12026 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertDuplicateCRLContext(
             PCCRL_CONTEXT pCrlContext
    );
#line 12047 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertCreateCRLContext(
         DWORD dwCertEncodingType,
                                   const BYTE *pbCrlEncoded,
         DWORD cbCrlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCRLContext(
             PCCRL_CONTEXT pCrlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCRLContextProperty(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 12092 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetCRLContextProperty(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );
#line 12112 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertEnumCRLContextProperties(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwPropId
    );
#line 12133 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertFindCertificateInCRL(
         PCCERT_CONTEXT pCert,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags,
               void *pvReserved,
                              PCRL_ENTRY *ppCrlEntry
    );
#line 12156 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertIsValidCRLForCertificate(
         PCCERT_CONTEXT pCert,
         PCCRL_CONTEXT pCrl,
         DWORD dwFlags,
               void *pvReserved
    );
#line 12224 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCertificateToStore(
             HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
                                    const BYTE *pbCertEncoded,
         DWORD cbCertEncoded,
         DWORD dwAddDisposition,
                 PCCERT_CONTEXT *ppCertContext
    );
#line 12294 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddCertificateContextToStore(
             HCERTSTORE hCertStore,
         PCCERT_CONTEXT pCertContext,
         DWORD dwAddDisposition,
                 PCCERT_CONTEXT *ppStoreContext
    );
#line 12349 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddSerializedElementToStore(
             HCERTSTORE hCertStore,
                                const BYTE *pbElement,
         DWORD cbElement,
         DWORD dwAddDisposition,
         DWORD dwFlags,
         DWORD dwContextTypeFlags,
              DWORD *pdwContextType,
                 const void **ppvContext
    );
#line 12379 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCertificateFromStore(
         PCCERT_CONTEXT pCertContext
    );
#line 12402 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCRLToStore(
             HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
                                   const BYTE *pbCrlEncoded,
         DWORD cbCrlEncoded,
         DWORD dwAddDisposition,
                 PCCRL_CONTEXT *ppCrlContext
    );
#line 12435 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddCRLContextToStore(
             HCERTSTORE hCertStore,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwAddDisposition,
                 PCCRL_CONTEXT *ppStoreContext
    );
#line 12458 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCRLFromStore(
         PCCRL_CONTEXT pCrlContext
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCertificateStoreElement(
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags,
                                                        BYTE *pbElement,
            DWORD *pcbElement
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCRLStoreElement(
         PCCRL_CONTEXT pCrlContext,
         DWORD dwFlags,
                                                        BYTE *pbElement,
            DWORD *pcbElement
    );
#line 12502 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertDuplicateCTLContext(
             PCCTL_CONTEXT pCtlContext
    );
#line 12523 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertCreateCTLContext(
         DWORD dwMsgAndCertEncodingType,
                                   const BYTE *pbCtlEncoded,
         DWORD cbCtlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCTLContext(
             PCCTL_CONTEXT pCtlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCTLContextProperty(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 12568 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetCTLContextProperty(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );




__declspec(dllimport)
DWORD
__stdcall
CertEnumCTLContextProperties(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwPropId
    );
#line 12605 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertEnumCTLsInStore(
         HCERTSTORE hCertStore,
             PCCTL_CONTEXT pPrevCtlContext
    );
#line 12631 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCTL_ENTRY
__stdcall
CertFindSubjectInCTL(
         DWORD dwEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags
    );







typedef struct _CTL_ANY_SUBJECT_INFO {
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    CRYPT_DATA_BLOB SubjectIdentifier;
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;
#line 12676 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertFindCTLInStore(
         HCERTSTORE hCertStore,
         DWORD dwMsgAndCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCTL_CONTEXT pPrevCtlContext
    );
#line 12695 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CTL_FIND_USAGE_PARA {
    DWORD cbSize;
    CTL_USAGE SubjectUsage;
    CRYPT_DATA_BLOB ListIdentifier;
    PCERT_INFO pSigner;
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;







typedef struct _CTL_FIND_SUBJECT_PARA {
    DWORD cbSize;
    PCTL_FIND_USAGE_PARA pUsagePara;
    DWORD dwSubjectType;
    void *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;
#line 12782 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddEncodedCTLToStore(
             HCERTSTORE hCertStore,
         DWORD dwMsgAndCertEncodingType,
                                   const BYTE *pbCtlEncoded,
         DWORD cbCtlEncoded,
         DWORD dwAddDisposition,
                 PCCTL_CONTEXT *ppCtlContext
    );
#line 12815 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertAddCTLContextToStore(
             HCERTSTORE hCertStore,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwAddDisposition,
                 PCCTL_CONTEXT *ppStoreContext
    );




__declspec(dllimport)
BOOL
__stdcall
CertSerializeCTLStoreElement(
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags,
                                                        BYTE *pbElement,
            DWORD *pcbElement
    );
#line 12851 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertDeleteCTLFromStore(
         PCCTL_CONTEXT pCtlContext
    );


__declspec(dllimport)

BOOL
__stdcall
CertAddCertificateLinkToStore(
         HCERTSTORE hCertStore,
         PCCERT_CONTEXT pCertContext,
         DWORD dwAddDisposition,
                 PCCERT_CONTEXT *ppStoreContext
    );

__declspec(dllimport)

BOOL
__stdcall
CertAddCRLLinkToStore(
         HCERTSTORE hCertStore,
         PCCRL_CONTEXT pCrlContext,
         DWORD dwAddDisposition,
                 PCCRL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)

BOOL
__stdcall
CertAddCTLLinkToStore(
         HCERTSTORE hCertStore,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwAddDisposition,
                 PCCTL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
BOOL
__stdcall
CertAddStoreToCollection(
         HCERTSTORE hCollectionStore,
             HCERTSTORE hSiblingStore,
         DWORD dwUpdateFlags,
         DWORD dwPriority
    );

__declspec(dllimport)
void
__stdcall
CertRemoveStoreFromCollection(
         HCERTSTORE hCollectionStore,
         HCERTSTORE hSiblingStore
    );


__declspec(dllimport)
BOOL
__stdcall
CertControlStore(
         HCERTSTORE hCertStore,
         DWORD dwFlags,
         DWORD dwCtrlType,
             void const *pvCtrlPara
    );
#line 13047 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertSetStoreProperty(
         HCERTSTORE hCertStore,
         DWORD dwPropId,
         DWORD dwFlags,
             const void *pvData
    );
#line 13070 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertGetStoreProperty(
         HCERTSTORE hCertStore,
         DWORD dwPropId,
                                                  void *pvData,
            DWORD *pcbData
    );
#line 13093 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(
         DWORD cbTotalEncoded,
         DWORD cbRemainEncoded,
         DWORD cEntry,
                void *pvSort
    );

typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD cbSize;
    PFN_CRYPT_FREE pfnFree;
    void *pvFree;



    PFN_CERT_CREATE_CONTEXT_SORT_FUNC pfnSort;
    void *pvSort;
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;
#line 13144 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
const void *
__stdcall
CertCreateContext(
         DWORD dwContextType,
         DWORD dwEncodingType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         DWORD dwFlags,
             PCERT_CREATE_CONTEXT_PARA pCreatePara
    );
#line 13204 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;
#line 13250 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD cbSize;
    LPSTR pszOpenStoreProvider;
    DWORD dwOpenEncodingType;
    DWORD dwOpenFlags;
    CRYPT_DATA_BLOB OpenParameters;
    DWORD dwFlags;
    DWORD dwPriority;
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;
#line 13296 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertRegisterSystemStore(
         const void *pvSystemStore,
         DWORD dwFlags,
             PCERT_SYSTEM_STORE_INFO pStoreInfo,
               void *pvReserved
    );
#line 13322 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertRegisterPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName,
         PCERT_PHYSICAL_STORE_INFO pStoreInfo,
               void *pvReserved
    );
#line 13348 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertUnregisterSystemStore(
         const void *pvSystemStore,
         DWORD dwFlags
    );
#line 13371 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertUnregisterPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName
    );
#line 13397 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
         LPCWSTR pwszStoreLocation,
         DWORD dwFlags,
               void *pvReserved,
                void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(
         const void *pvSystemStore,
         DWORD dwFlags,
         PCERT_SYSTEM_STORE_INFO pStoreInfo,
               void *pvReserved,
                void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(
         const void *pvSystemStore,
         DWORD dwFlags,
         LPCWSTR pwszStoreName,
         PCERT_PHYSICAL_STORE_INFO pStoreInfo,
               void *pvReserved,
                void *pvArg
    );
#line 13440 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStoreLocation(
         DWORD dwFlags,
                void *pvArg,
               PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
    );
#line 13480 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStore(
         DWORD dwFlags,
             void *pvSystemStoreLocationPara,
                void *pvArg,
               PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
    );
#line 13506 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumPhysicalStore(
         const void *pvSystemStore,
         DWORD dwFlags,
                void *pvArg,
               PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
    );
#line 13569 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetEnhancedKeyUsage(
         PCCERT_CONTEXT pCertContext,
         DWORD dwFlags,
                                                    PCERT_ENHKEY_USAGE pUsage,
            DWORD *pcbUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertSetEnhancedKeyUsage(
         PCCERT_CONTEXT pCertContext,
             PCERT_ENHKEY_USAGE pUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertAddEnhancedKeyUsageIdentifier(
         PCCERT_CONTEXT pCertContext,
         LPCSTR pszUsageIdentifier
    );






__declspec(dllimport)
BOOL
__stdcall
CertRemoveEnhancedKeyUsageIdentifier(
         PCCERT_CONTEXT pCertContext,
         LPCSTR pszUsageIdentifier
    );
#line 13622 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertGetValidUsages(
         DWORD cCerts,
                       PCCERT_CONTEXT *rghCerts,
          int *cNumOIDs,
                                                  LPSTR *rghOIDs,
            DWORD *pcbOIDs);
#line 13661 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptMsgGetAndVerifySigner(
         HCRYPTMSG hCryptMsg,
         DWORD cSignerStore,
                                 HCERTSTORE *rghSignerStore,
         DWORD dwFlags,
                 PCCERT_CONTEXT *ppSigner,
                DWORD *pdwSignerIndex
    );
#line 13688 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgSignCTL(
         DWORD dwMsgEncodingType,
                                   BYTE *pbCtlContent,
         DWORD cbCtlContent,
         PCMSG_SIGNED_ENCODE_INFO pSignInfo,
         DWORD dwFlags,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 13717 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptMsgEncodeAndSignCTL(
         DWORD dwMsgEncodingType,
         PCTL_INFO pCtlInfo,
         PCMSG_SIGNED_ENCODE_INFO pSignInfo,
         DWORD dwFlags,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 13744 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertFindSubjectInSortedCTL(
         PCRYPT_DATA_BLOB pSubjectIdentifier,
         PCCTL_CONTEXT pCtlContext,
         DWORD dwFlags,
               void *pvReserved,
              PCRYPT_DER_BLOB pEncodedAttributes
    );
#line 13768 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertEnumSubjectInSortedCTL(
         PCCTL_CONTEXT pCtlContext,
            void **ppvNextSubject,
              PCRYPT_DER_BLOB pSubjectIdentifier,
              PCRYPT_DER_BLOB pEncodedAttributes
    );






typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD cbSize;
    CRYPT_DATA_BLOB ListIdentifier;
    DWORD cCtlStore;
    HCERTSTORE *rghCtlStore;
    DWORD cSignerStore;
    HCERTSTORE *rghSignerStore;
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;

typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD cbSize;
    DWORD dwError;
    DWORD dwFlags;
    PCCTL_CONTEXT *ppCtl;
    DWORD dwCtlEntryIndex;
    PCCERT_CONTEXT *ppSigner;
    DWORD dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;
#line 13858 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifyCTLUsage(
         DWORD dwEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         PCTL_USAGE pSubjectUsage,
         DWORD dwFlags,
             PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
            PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
    );
#line 13880 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD cbSize;
    PCCRL_CONTEXT pBaseCrlContext;
    PCCRL_CONTEXT pDeltaCrlContext;



    PCRL_ENTRY pCrlEntry;
    BOOL fDeltaCrlEntry;
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;
#line 13900 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_REVOCATION_CHAIN_PARA
    CERT_REVOCATION_CHAIN_PARA,
    *PCERT_REVOCATION_CHAIN_PARA;
#line 13921 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_REVOCATION_PARA {
    DWORD cbSize;
    PCCERT_CONTEXT pIssuerCert;
    DWORD cCertStore;
    HCERTSTORE *rgCertStore;
    HCERTSTORE hCrlStore;
    LPFILETIME pftTimeToUse;
#line 13964 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
#line 13982 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_REVOCATION_STATUS {
    DWORD cbSize;
    DWORD dwIndex;
    DWORD dwError;
    DWORD dwReason;
#line 13996 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;
#line 14077 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifyRevocation(
         DWORD dwEncodingType,
         DWORD dwRevType,
         DWORD cContext,
                         PVOID rgpvContext[],
         DWORD dwFlags,
             PCERT_REVOCATION_PARA pRevPara,
            PCERT_REVOCATION_STATUS pRevStatus
    );
#line 14155 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
BOOL
__stdcall
CertCompareIntegerBlob(
         PCRYPT_INTEGER_BLOB pInt1,
         PCRYPT_INTEGER_BLOB pInt2
    );
#line 14170 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificate(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId1,
         PCERT_INFO pCertId2
    );






__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificateName(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pCertName1,
         PCERT_NAME_BLOB pCertName2
    );
#line 14211 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertIsRDNAttrsInCertificateName(
         DWORD dwCertEncodingType,
         DWORD dwFlags,
         PCERT_NAME_BLOB pCertName,
         PCERT_RDN pRDN
    );
#line 14229 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertComparePublicKeyInfo(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPublicKey1,
         PCERT_PUBLIC_KEY_INFO pPublicKey2
    );






__declspec(dllimport)
DWORD
__stdcall
CertGetPublicKeyLength(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPublicKey
    );
#line 14260 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptVerifyCertificateSignature(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
         PCERT_PUBLIC_KEY_INFO pPublicKey
    );
#line 14297 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CryptVerifyCertificateSignatureEx(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
         DWORD dwSubjectType,
         void *pvSubject,
         DWORD dwIssuerType,
             void *pvIssuer,
         DWORD dwFlags,
                void *pvExtra
    );
#line 14373 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO {

    CRYPT_DATA_BLOB CertSignHashCNGAlgPropData;


    CRYPT_DATA_BLOB CertIssuerPubKeyBitLengthPropData;
} CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO,
    *PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;


typedef struct _CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO {
    DWORD cCNGHashAlgid;
    PCWSTR *rgpwszCNGHashAlgid;



    DWORD dwWeakIndex;
} CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO,
    *PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
#line 14411 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertIsStrongHashToSign(
         PCCERT_STRONG_SIGN_PARA pStrongSignPara,
         LPCWSTR pwszCNGHashAlgid,
             PCCERT_CONTEXT pSigningCert
    );
#line 14429 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptHashToBeSigned(
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwCertEncodingType,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
#line 14450 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptHashCertificate(
             HCRYPTPROV_LEGACY hCryptProv,
         ALG_ID Algid,
         DWORD dwFlags,
                                const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );






__declspec(dllimport)

BOOL
__stdcall
CryptHashCertificate2(
         LPCWSTR pwszCNGHashAlgid,
         DWORD dwFlags,
               void *pvReserved,
                                    const BYTE *pbEncoded,
         DWORD cbEncoded,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
#line 14495 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignCertificate(
             HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
                                          const BYTE *pbEncodedToBeSigned,
         DWORD cbEncodedToBeSigned,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             const void *pvHashAuxInfo,
                                                            BYTE *pbSignature,
            DWORD *pcbSignature
    );
#line 14522 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncodeCertificate(
             HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
         LPCSTR lpszStructType,
         const void *pvStructInfo,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             const void *pvHashAuxInfo,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded
    );
#line 14558 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(
         DWORD dwCertEncodingType,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
                              void **ppvDecodedSignPara,
             LPWSTR *ppwszCNGHashAlgid
    );




typedef BOOL (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(
         NCRYPT_KEY_HANDLE hKey,
         DWORD dwCertEncodingType,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             void *pvDecodedSignPara,
         LPCWSTR pwszCNGPubKeyAlgid,
         LPCWSTR pwszCNGHashAlgid,
                                     BYTE *pbComputedHash,
         DWORD cbComputedHash,
                                                            BYTE *pbSignature,
            DWORD *pcbSignature
    );





typedef BOOL (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pPubKeyInfo,
         PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
             void *pvDecodedSignPara,
         LPCWSTR pwszCNGPubKeyAlgid,
         LPCWSTR pwszCNGHashAlgid,
                                     BYTE *pbComputedHash,
         DWORD cbComputedHash,
                                  BYTE *pbSignature,
         DWORD cbSignature
    );
#line 14607 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
LONG
__stdcall
CertVerifyTimeValidity(
             LPFILETIME pTimeToVerify,
         PCERT_INFO pCertInfo
    );
#line 14624 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
LONG
__stdcall
CertVerifyCRLTimeValidity(
             LPFILETIME pTimeToVerify,
         PCRL_INFO pCrlInfo
    );







__declspec(dllimport)
BOOL
__stdcall
CertVerifyValidityNesting(
         PCERT_INFO pSubjectInfo,
         PCERT_INFO pIssuerInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CertVerifyCRLRevocation(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertId,

         DWORD cCrlInfo,
                         PCRL_INFO rgpCrlInfo[]
    );






__declspec(dllimport)
LPCSTR
__stdcall
CertAlgIdToOID(
         DWORD dwAlgId
    );






__declspec(dllimport)
DWORD
__stdcall
CertOIDToAlgId(
         LPCSTR pszObjId
    );






__declspec(dllimport)
PCERT_EXTENSION
__stdcall
CertFindExtension(
         LPCSTR pszObjId,
         DWORD cExtensions,
                            CERT_EXTENSION rgExtensions[]
    );






__declspec(dllimport)
PCRYPT_ATTRIBUTE
__stdcall
CertFindAttribute(
         LPCSTR pszObjId,
         DWORD cAttr,
                      CRYPT_ATTRIBUTE rgAttr[]
    );







__declspec(dllimport)
PCERT_RDN_ATTR
__stdcall
CertFindRDNAttr(
         LPCSTR pszObjId,
         PCERT_NAME_INFO pName
    );
#line 14736 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertGetIntendedKeyUsage(
         DWORD dwCertEncodingType,
         PCERT_INFO pCertInfo,
                                       BYTE *pbKeyUsage,
         DWORD cbKeyUsage
    );

typedef void *HCRYPTDEFAULTCONTEXT;
#line 14775 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptInstallDefaultContext(
         HCRYPTPROV hCryptProv,
         DWORD dwDefaultType,
             const void *pvDefaultPara,
         DWORD dwFlags,
               void *pvReserved,
          HCRYPTDEFAULTCONTEXT *phDefaultContext
    );
#line 14816 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
    DWORD cOID;
    LPSTR *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
#line 14830 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptUninstallDefaultContext(
             HCRYPTDEFAULTCONTEXT hDefaultContext,
         DWORD dwFlags,
               void *pvReserved
    );
#line 14846 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfo(
         HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14877 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoEx(
         HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
             DWORD dwKeySpec,
         DWORD dwCertEncodingType,
             LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14900 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
         NCRYPT_KEY_HANDLE hNCryptKey,
         DWORD dwCertEncodingType,
         LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14932 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoFromBCryptKeyHandle(
         BCRYPT_KEY_HANDLE hBCryptKey,
         DWORD dwCertEncodingType,
             LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );







typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC) (
         BCRYPT_KEY_HANDLE hBCryptKey,
         DWORD dwCertEncodingType,
         LPSTR pszPublicKeyObjId,
         DWORD dwFlags,
             void *pvAuxInfo,
                                                  PCERT_PUBLIC_KEY_INFO pInfo,
            DWORD *pcbInfo
    );
#line 14970 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfo(
         HCRYPTPROV hCryptProv,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
          HCRYPTKEY *phKey
    );
#line 14996 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx(
         HCRYPTPROV hCryptProv,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         ALG_ID aiKeyAlg,
         DWORD dwFlags,
             void *pvAuxInfo,
          HCRYPTKEY *phKey
    );
#line 15026 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx2(
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         DWORD dwFlags,
             void *pvAuxInfo,
          BCRYPT_KEY_HANDLE *phKey
    );






typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
         DWORD dwFlags,
             void *pvAuxInfo,
          BCRYPT_KEY_HANDLE *phKey
    );
#line 15129 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireCertificatePrivateKey(
         PCCERT_CONTEXT pCert,
         DWORD dwFlags,
             void *pvParameters,
          HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey,
              DWORD *pdwKeySpec,
              BOOL *pfCallerFreeProvOrNCryptKey
    );
#line 15178 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFindCertificateKeyProvInfo(
         PCCERT_CONTEXT pCert,
         DWORD dwFlags,
               void *pvReserved
    );
#line 15206 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC) (
         HCRYPTPROV hCryptProv,
         CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,
         DWORD dwFlags,
             void* pvAuxInfo
    );
#line 15233 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptImportPKCS8(
         CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,
         DWORD dwFlags,
              HCRYPTPROV *phCryptProv,
             void* pvAuxInfo
    );




typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC) (
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         LPSTR pszPrivateKeyObjId,
         DWORD dwFlags,
             void* pvAuxInfo,
                                                CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,
            DWORD* pcbPrivateKeyInfo
    );
#line 15264 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8(
         HCRYPTPROV hCryptProv,
         DWORD dwKeySpec,
         LPSTR pszPrivateKeyObjId,
         DWORD dwFlags,
             void* pvAuxInfo,
                                                BYTE* pbPrivateKeyBlob,
            DWORD *pcbPrivateKeyBlob
    );
#line 15299 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8Ex(
         CRYPT_PKCS8_EXPORT_PARAMS* psExportParams,
         DWORD dwFlags,
             void* pvAuxInfo,
                                                BYTE* pbPrivateKeyBlob,
            DWORD* pcbPrivateKeyBlob
    );






__declspec(dllimport)
BOOL
__stdcall
CryptHashPublicKeyInfo(
             HCRYPTPROV_LEGACY hCryptProv,
         ALG_ID Algid,
         DWORD dwFlags,
         DWORD dwCertEncodingType,
         PCERT_PUBLIC_KEY_INFO pInfo,
                                                                  BYTE *pbComputedHash,
            DWORD *pcbComputedHash
    );
#line 15339 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrA(
         DWORD dwValueType,
         PCERT_RDN_VALUE_BLOB pValue,
                                     LPSTR psz,
         DWORD csz
    );
#line 15359 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrW(
         DWORD dwValueType,
         PCERT_RDN_VALUE_BLOB pValue,
                                     LPWSTR psz,
         DWORD csz
    );
#line 15470 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertNameToStrA(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pName,
         DWORD dwStrType,
                                     LPSTR psz,
         DWORD csz
    );


__declspec(dllimport)
DWORD
__stdcall
CertNameToStrW(
         DWORD dwCertEncodingType,
         PCERT_NAME_BLOB pName,
         DWORD dwStrType,
                                     LPWSTR psz,
         DWORD csz
    );
#line 15637 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertStrToNameA(
         DWORD dwCertEncodingType,
         LPCSTR pszX500,
         DWORD dwStrType,
               void *pvReserved,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded,
                                  LPCSTR *ppszError
    );


__declspec(dllimport)
BOOL
__stdcall
CertStrToNameW(
         DWORD dwCertEncodingType,
         LPCWSTR pszX500,
         DWORD dwStrType,
               void *pvReserved,
                                                        BYTE *pbEncoded,
            DWORD *pcbEncoded,
                                  LPCWSTR *ppszError
    );
#line 15762 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringA(
         PCCERT_CONTEXT pCertContext,
         DWORD dwType,
         DWORD dwFlags,
             void *pvTypePara,
                                               LPSTR pszNameString,
         DWORD cchNameString
    );


__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringW(
         PCCERT_CONTEXT pCertContext,
         DWORD dwType,
         DWORD dwFlags,
             void *pvTypePara,
                                               LPWSTR pszNameString,
         DWORD cchNameString
    );
#line 15870 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
                void *pvGetArg,
         DWORD dwCertEncodingType,
         PCERT_INFO pSignerId,

         HCERTSTORE hMsgCertStore
    );
#line 15929 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    PCCERT_CONTEXT pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
    DWORD cMsgCert;
    PCCERT_CONTEXT *rgpMsgCert;
    DWORD cMsgCrl;
    PCCRL_CONTEXT *rgpMsgCrl;
    DWORD cAuthAttr;
    PCRYPT_ATTRIBUTE rgAuthAttr;
    DWORD cUnauthAttr;
    PCRYPT_ATTRIBUTE rgUnauthAttr;
    DWORD dwFlags;
    DWORD dwInnerContentType;






} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
#line 15981 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
    void *pvGetArg;
#line 16000 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;
#line 16041 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
    void *pvEncryptionAuxInfo;
    DWORD dwFlags;
    DWORD dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
#line 16075 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;
    DWORD cCertStore;
    HCERTSTORE *rghCertStore;
#line 16089 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;
#line 16102 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;
#line 16122 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgAndCertEncodingType;


    union {
        HCRYPTPROV hCryptProv;
        NCRYPT_KEY_HANDLE hNCryptKey;
    } ;


    DWORD dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    void *pvHashAuxInfo;

    CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;
#line 16152 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD cbSize;
    DWORD dwMsgEncodingType;
    HCRYPTPROV_LEGACY hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
#line 16165 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignMessage(
         PCRYPT_SIGN_MESSAGE_PARA pSignPara,
         BOOL fDetachedSignature,
         DWORD cToBeSigned,
                                const BYTE *rgpbToBeSigned[],
                            DWORD rgcbToBeSigned[],
                                                              BYTE *pbSignedBlob,
            DWORD *pcbSignedBlob
    );
#line 16214 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignature(
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob,
                                                        BYTE *pbDecoded,
                DWORD *pcbDecoded,
                                  PCCERT_CONTEXT *ppSignerCert
    );





__declspec(dllimport)
LONG
__stdcall
CryptGetMessageSignerCount(
         DWORD dwMsgEncodingType,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CryptGetMessageCertificates(
         DWORD dwMsgAndCertEncodingType,
             HCRYPTPROV_LEGACY hCryptProv,
         DWORD dwFlags,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob
    );






__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageSignature(
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                         const BYTE *pbDetachedSignBlob,
         DWORD cbDetachedSignBlob,
         DWORD cToBeSigned,
                            const BYTE *rgpbToBeSigned[],
                            DWORD rgcbToBeSigned[],
                                  PCCERT_CONTEXT *ppSignerCert
    );




__declspec(dllimport)
BOOL
__stdcall
CryptEncryptMessage(
         PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
         DWORD cRecipientCert,
                               PCCERT_CONTEXT rgpRecipientCert[],
                                          const BYTE *pbToBeEncrypted,
         DWORD cbToBeEncrypted,
                                                                    BYTE *pbEncryptedBlob,
            DWORD *pcbEncryptedBlob
    );
#line 16304 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptDecryptMessage(
         PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
                                      const BYTE *pbEncryptedBlob,
         DWORD cbEncryptedBlob,
                                                            BYTE *pbDecrypted,
                DWORD *pcbDecrypted,
                                  PCCERT_CONTEXT *ppXchgCert
    );
#line 16323 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncryptMessage(
         PCRYPT_SIGN_MESSAGE_PARA pSignPara,
         PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
         DWORD cRecipientCert,
                               PCCERT_CONTEXT rgpRecipientCert[],
                                               const BYTE *pbToBeSignedAndEncrypted,
         DWORD cbToBeSignedAndEncrypted,
                                                                                      BYTE *pbSignedAndEncryptedBlob,
            DWORD *pcbSignedAndEncryptedBlob
    );
#line 16364 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptDecryptAndVerifyMessageSignature(
         PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
         PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                      const BYTE *pbEncryptedBlob,
         DWORD cbEncryptedBlob,
                                                            BYTE *pbDecrypted,
                DWORD *pcbDecrypted,
                                  PCCERT_CONTEXT *ppXchgCert,
                                  PCCERT_CONTEXT *ppSignerCert
    );
#line 16411 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptDecodeMessage(
         DWORD dwMsgTypeFlags,
             PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
             PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
         DWORD dwSignerIndex,
                                    const BYTE *pbEncodedBlob,
         DWORD cbEncodedBlob,
         DWORD dwPrevInnerContentType,
              DWORD *pdwMsgType,
              DWORD *pdwInnerContentType,
                                                        BYTE *pbDecoded,
                DWORD *pcbDecoded,
                                  PCCERT_CONTEXT *ppXchgCert,
                                  PCCERT_CONTEXT *ppSignerCert
    );
#line 16440 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptHashMessage(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
         BOOL fDetachedHash,
         DWORD cToBeHashed,
                            const BYTE *rgpbToBeHashed[],
                            DWORD rgcbToBeHashed[],
                                                              BYTE *pbHashedBlob,
                DWORD *pcbHashedBlob,
                                                                  BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageHash(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
                                   BYTE *pbHashedBlob,
         DWORD cbHashedBlob,
                                                              BYTE *pbToBeHashed,
                DWORD *pcbToBeHashed,
                                                                  BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );
#line 16482 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageHash(
         PCRYPT_HASH_MESSAGE_PARA pHashPara,
                                         BYTE *pbDetachedHashBlob,
         DWORD cbDetachedHashBlob,
         DWORD cToBeHashed,
                            const BYTE *rgpbToBeHashed[],
                            DWORD rgcbToBeHashed[],
                                                                  BYTE *pbComputedHash,
                DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptSignMessageWithKey(
         PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
                                   const BYTE *pbToBeSigned,
         DWORD cbToBeSigned,
                                                              BYTE *pbSignedBlob,
            DWORD *pcbSignedBlob
    );
#line 16526 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignatureWithKey(
         PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
             PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
                                   const BYTE *pbSignedBlob,
         DWORD cbSignedBlob,
                                                        BYTE *pbDecoded,
                DWORD *pcbDecoded
    );
#line 16565 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreA(
             HCRYPTPROV_LEGACY hProv,
         LPCSTR szSubsystemProtocol
    );
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreW(
             HCRYPTPROV_LEGACY hProv,
         LPCWSTR szSubsystemProtocol
    );






__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreA(
         LPCSTR szCertStoreName,
                                    const BYTE * pbCertEncoded,
         DWORD cbCertEncoded
    );
__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreW(
         LPCWSTR szCertStoreName,
                                    const BYTE * pbCertEncoded,
         DWORD cbCertEncoded
    );
#line 16619 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_CHAIN {
    DWORD cCerts;
    PCERT_BLOB certs;

    CRYPT_KEY_PROV_INFO keyLocatorInfo;
} CERT_CHAIN, *PCERT_CHAIN;



HRESULT
__stdcall
FindCertsByIssuer(
                                                              PCERT_CHAIN pCertChains,
            DWORD *pcbCertChains,
          DWORD *pcCertChains,
                                              BYTE* pbEncodedIssuerName,
         DWORD cbEncodedIssuerName,
             LPCWSTR pwszPurpose,
         DWORD dwKeySpec

    );
#line 16771 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptQueryObject(
         DWORD dwObjectType,
         const void *pvObject,
         DWORD dwExpectedContentTypeFlags,
         DWORD dwExpectedFormatTypeFlags,
         DWORD dwFlags,
              DWORD *pdwMsgAndCertEncodingType,
              DWORD *pdwContentType,
              DWORD *pdwFormatType,
              HCERTSTORE *phCertStore,
              HCRYPTMSG *phMsg,
                                  const void **ppvContext
    );
#line 16954 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
LPVOID
__stdcall
CryptMemAlloc (
         ULONG cbSize
    );

__declspec(dllimport)
LPVOID
__stdcall
CryptMemRealloc (
             LPVOID pv,
         ULONG cbSize
    );

__declspec(dllimport)
void
__stdcall
CryptMemFree (
             LPVOID pv
    );
#line 16986 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;

typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (
         LPSTR pszParamOid,
         LPVOID pvParam
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateAsyncHandle (
         DWORD dwFlags,
          PHCRYPTASYNC phAsync
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetAsyncParam (
         HCRYPTASYNC hAsync,
         LPSTR pszParamOid,
             LPVOID pvParam,
               PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetAsyncParam (
         HCRYPTASYNC hAsync,
         LPSTR pszParamOid,
                                  LPVOID* ppvParam,
                                              PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCloseAsyncHandle (
             HCRYPTASYNC hAsync
    );
#line 17042 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_BLOB_ARRAY {
    DWORD cBlob;
    PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;

typedef struct _CRYPT_CREDENTIALS {
    DWORD cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;
#line 17062 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD cbSize;
    LPSTR pszUsername;
    LPSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD cbSize;
    LPWSTR pszUsername;
    LPWSTR pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;

typedef CRYPT_PASSWORD_CREDENTIALSW CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSW PCRYPT_PASSWORD_CREDENTIALS;
#line 17091 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC) (
             LPCSTR pszObjectOid,
            PCRYPT_BLOB_ARRAY pObject,
                LPVOID pvFreeContext
    );
#line 17288 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
    DWORD cbSize;
    DWORD dwObjectType;







    DWORD dwError;
    DWORD dwReserved;

    FILETIME ThisUpdateTime;
    FILETIME NextUpdateTime;
    FILETIME PublishTime;
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;
#line 17319 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
    DWORD cbSize;




    DWORD dwExemptSeconds;




    FILETIME ExpireTime;
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;
#line 17340 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
    DWORD cbSize;
    WORD wResponseType;
    WORD wResponseFlags;


    FILETIME LastModifiedTime;
    DWORD dwMaxAge;
    LPCWSTR pwszETag;
    DWORD dwProxyId;
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
#line 17367 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD cbSize;
    FILETIME *pLastSyncTime;


    DWORD dwMaxUrlRetrievalByteCount;





    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO pPreFetchInfo;





    PCRYPTNET_URL_CACHE_FLUSH_INFO pFlushInfo;





    PCRYPTNET_URL_CACHE_RESPONSE_INFO *ppResponseInfo;



    LPWSTR pwszCacheFileNamePrefix;





    LPFILETIME pftCacheResync;





    BOOL fProxyCacheRetrieval;
#line 17416 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
    DWORD dwHttpStatusCode;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;


__declspec(dllimport)

BOOL
__stdcall
CryptRetrieveObjectByUrlA (
         LPCSTR pszUrl,
             LPCSTR pszObjectOid,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
             LPVOID* ppvObject,
             HCRYPTASYNC hAsyncRetrieve,
             PCRYPT_CREDENTIALS pCredentials,
             LPVOID pvVerify,
                PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
__declspec(dllimport)

BOOL
__stdcall
CryptRetrieveObjectByUrlW (
         LPCWSTR pszUrl,
             LPCSTR pszObjectOid,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
             LPVOID* ppvObject,
             HCRYPTASYNC hAsyncRetrieve,
             PCRYPT_CREDENTIALS pCredentials,
             LPVOID pvVerify,
                PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
#line 17468 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(
         DWORD dwFlags,
                void *pvArg
    );
#line 17481 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptInstallCancelRetrieval(
               PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
             const void *pvArg,
         DWORD dwFlags,
               void *pvReserved
);


__declspec(dllimport)
BOOL
__stdcall
CryptUninstallCancelRetrieval(
             DWORD dwFlags,
                   void *pvReserved
        );


__declspec(dllimport)
BOOL
__stdcall
CryptCancelAsyncRetrieval (
             HCRYPTASYNC hAsyncRetrieval
    );
#line 17519 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (
                LPVOID pvCompletion,
         DWORD dwCompletionCode,
         LPCSTR pszUrl,
             LPSTR pszObjectOid,
         LPVOID pvObject
    );

typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
               PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
                LPVOID pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
#line 17539 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (
             HCRYPTASYNC hAsyncRetrieve
    );
#line 17552 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_URL_ARRAY {
    DWORD cUrl;
    LPWSTR* rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;

typedef struct _CRYPT_URL_INFO {
    DWORD cbSize;


    DWORD dwSyncDeltaTime;




    DWORD cGroup;
    DWORD *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

__declspec(dllimport)
BOOL
__stdcall
CryptGetObjectUrl (
         LPCSTR pszUrlOid,
         LPVOID pvPara,
         DWORD dwFlags,
                                                          PCRYPT_URL_ARRAY pUrlArray,
            DWORD* pcbUrlArray,
                                                        PCRYPT_URL_INFO pUrlInfo,
                DWORD* pcbUrlInfo,
               LPVOID pvReserved
    );
#line 17706 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_CRL_CONTEXT_PAIR {
    PCCERT_CONTEXT pCertContext;
    PCCRL_CONTEXT pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
#line 17724 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
    DWORD cbSize;



    int iDeltaCrlIndicator;



    LPFILETIME pftCacheResync;


    LPFILETIME pLastSyncTime;




    LPFILETIME pMaxAgeTime;



    PCERT_REVOCATION_CHAIN_PARA pChainPara;



    PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;

} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
    *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

__declspec(dllimport)

BOOL
__stdcall
CryptGetTimeValidObject (
         LPCSTR pszTimeValidOid,
         LPVOID pvPara,
         PCCERT_CONTEXT pIssuer,
             LPFILETIME pftValidFor,
         DWORD dwFlags,
         DWORD dwTimeout,
                 LPVOID* ppvObject,
             PCRYPT_CREDENTIALS pCredentials,
                PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo
    );
#line 17805 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptFlushTimeValidObject (
          LPCSTR pszFlushTimeValidOid,
          LPVOID pvPara,
          PCCERT_CONTEXT pIssuer,
          DWORD dwFlags,
                LPVOID pvReserved
     );
#line 17886 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateSelfSignCertificate(
              HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
              PCERT_NAME_BLOB pSubjectIssuerBlob,
              DWORD dwFlags,
              PCRYPT_KEY_PROV_INFO pKeyProvInfo,
              PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
              PSYSTEMTIME pStartTime,
              PSYSTEMTIME pEndTime,
              PCERT_EXTENSIONS pExtensions
    );
#line 17932 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyIdentifierProperty(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
                                                  void *pvData,
            DWORD *pcbData
    );
#line 17973 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyIdentifierProperty(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
             const void *pvData
    );
#line 18000 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(
         const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwFlags,
               void *pvReserved,
                void *pvArg,
         DWORD cProp,
                      DWORD *rgdwPropId,
                      void **rgpvData,
                      DWORD *rgcbData
    );
#line 18025 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptEnumKeyIdentifierProperties(
             const CRYPT_HASH_BLOB *pKeyIdentifier,
         DWORD dwPropId,
         DWORD dwFlags,
             LPCWSTR pwszComputerName,
               void *pvReserved,
                void *pvArg,
               PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
    );
#line 18049 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptCreateKeyIdentifierFromCSP(
         DWORD dwCertEncodingType,
             LPCSTR pszPubKeyOID,
                                    const PUBLICKEYSTRUC *pPubKeyStruc,
         DWORD cbPubKeyStruc,
         DWORD dwFlags,
               void *pvReserved,
                                                  BYTE *pbHash,
            DWORD *pcbHash
    );
#line 18744 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef HANDLE HCERTCHAINENGINE;
#line 18830 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_CHAIN_ENGINE_CONFIG {

    DWORD cbSize;
    HCERTSTORE hRestrictedRoot;
    HCERTSTORE hRestrictedTrust;
    HCERTSTORE hRestrictedOther;
    DWORD cAdditionalStore;
    HCERTSTORE* rghAdditionalStore;
    DWORD dwFlags;
    DWORD dwUrlRetrievalTimeout;
    DWORD MaximumCachedCertificates;
    DWORD CycleDetectionModulus;


    HCERTSTORE hExclusiveRoot;
    HCERTSTORE hExclusiveTrustedPeople;



    DWORD dwExclusiveFlags;


} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;
#line 18864 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertCreateCertificateChainEngine (
         PCERT_CHAIN_ENGINE_CONFIG pConfig,
          HCERTCHAINENGINE* phChainEngine
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainEngine (
             HCERTCHAINENGINE hChainEngine
    );






__declspec(dllimport)
BOOL
__stdcall
CertResyncCertificateChainEngine (
             HCERTCHAINENGINE hChainEngine
    );
#line 18910 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_TRUST_STATUS {

    DWORD dwErrorStatus;
    DWORD dwInfoStatus;

} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;
#line 19013 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_REVOCATION_INFO {

    DWORD cbSize;
    DWORD dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;



    BOOL fHasFreshnessTime;
    DWORD dwFreshnessTime;


    PCERT_REVOCATION_CRL_INFO pCrlInfo;

} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;





typedef struct _CERT_TRUST_LIST_INFO {

    DWORD cbSize;
    PCTL_ENTRY pCtlEntry;
    PCCTL_CONTEXT pCtlContext;

} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;





typedef struct _CERT_CHAIN_ELEMENT {

    DWORD cbSize;
    PCCERT_CONTEXT pCertContext;
    CERT_TRUST_STATUS TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;

    PCERT_ENHKEY_USAGE pIssuanceUsage;
    PCERT_ENHKEY_USAGE pApplicationUsage;

    LPCWSTR pwszExtendedErrorInfo;
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
typedef const CERT_CHAIN_ELEMENT* PCCERT_CHAIN_ELEMENT;
#line 19069 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_SIMPLE_CHAIN {

    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cElement;
    PCERT_CHAIN_ELEMENT* rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;







    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;

} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
typedef const CERT_SIMPLE_CHAIN* PCCERT_SIMPLE_CHAIN;
#line 19099 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

struct _CERT_CHAIN_CONTEXT {
    DWORD cbSize;
    CERT_TRUST_STATUS TrustStatus;
    DWORD cChain;
    PCERT_SIMPLE_CHAIN* rgpChain;



    DWORD cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT* rgpLowerQualityChainContext;







    BOOL fHasRevocationFreshnessTime;
    DWORD dwRevocationFreshnessTime;


    DWORD dwCreateFlags;


    GUID ChainId;
};
#line 19140 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_USAGE_MATCH {

    DWORD dwType;
    CERT_ENHKEY_USAGE Usage;

} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;

typedef struct _CTL_USAGE_MATCH {

    DWORD dwType;
    CTL_USAGE Usage;

} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;

typedef struct _CERT_CHAIN_PARA {

    DWORD cbSize;
    CERT_USAGE_MATCH RequestedUsage;
#line 19190 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;
#line 19302 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertGetCertificateChain (
             HCERTCHAINENGINE hChainEngine,
         PCCERT_CONTEXT pCertContext,
             LPFILETIME pTime,
             HCERTSTORE hAdditionalStore,
         PCERT_CHAIN_PARA pChainPara,
         DWORD dwFlags,
               LPVOID pvReserved,
          PCCERT_CHAIN_CONTEXT* ppChainContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChain (
         PCCERT_CHAIN_CONTEXT pChainContext
    );





__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertDuplicateCertificateChain (
         PCCERT_CHAIN_CONTEXT pChainContext
    );







struct _CERT_REVOCATION_CHAIN_PARA {
    DWORD cbSize;
    HCERTCHAINENGINE hChainEngine;
    HCERTSTORE hAdditionalStore;
    DWORD dwChainFlags;
    DWORD dwUrlRetrievalTimeout;
    LPFILETIME pftCurrentTime;
    LPFILETIME pftCacheResync;



    DWORD cbMaxUrlRetrievalByteCount;
};
#line 19377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRL_REVOCATION_INFO {

    PCRL_ENTRY pCrlEntry;
    PCCRL_CONTEXT pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;

} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;
#line 19406 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertFindChainInStore(
         HCERTSTORE hCertStore,
         DWORD dwCertEncodingType,
         DWORD dwFindFlags,
         DWORD dwFindType,
             const void *pvFindPara,
             PCCERT_CHAIN_CONTEXT pPrevChainContext
    );
#line 19465 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
         PCCERT_CONTEXT pCert,
                void *pvFindArg
    );

typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD cbSize;


    LPCSTR pszUsageIdentifier;


    DWORD dwKeySpec;






    DWORD dwAcquirePrivateKeyFlags;



    DWORD cIssuer;
    CERT_NAME_BLOB *rgIssuer;




    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void *pvFindArg;
#line 19517 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
    CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
#line 19557 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwFlags;
    void *pvExtraPolicyPara;
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;






typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwError;
    LONG lChainIndex;
    LONG lElementIndex;
    void *pvExtraPolicyStatus;
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;
#line 19635 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CertVerifyCertificateChainPolicy(
         LPCSTR pszPolicyOID,
         PCCERT_CHAIN_CONTEXT pChainContext,
         PCERT_CHAIN_POLICY_PARA pPolicyPara,
            PCERT_CHAIN_POLICY_STATUS pPolicyStatus
    );
#line 19684 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    PCMSG_SIGNER_INFO pSignerInfo;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    BOOL fCommercial;
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
#line 19709 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRegPolicySettings;
    BOOL fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
#line 19727 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _HTTPSPolicyCallbackData
{
    union {
        DWORD cbStruct;
        DWORD cbSize;
    } ;

    DWORD dwAuthType;



    DWORD fdwChecks;

    WCHAR *pwszServerName;

} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
    SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
#line 19844 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD cbSize;
    DWORD dwRootProgramQualifierFlags;
} EV_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize;
    DWORD dwQualifiers;
    DWORD dwIssuanceUsageIndex;
} EV_EXTRA_CERT_CHAIN_POLICY_STATUS, *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;
#line 19867 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryA(
                          LPCSTR pszString,
         DWORD cchString,
         DWORD dwFlags,
                                                      BYTE *pbBinary,
            DWORD *pcbBinary,
              DWORD *pdwSkip,
              DWORD *pdwFlags
    );
#line 19888 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryW(
                          LPCWSTR pszString,
         DWORD cchString,
         DWORD dwFlags,
                                                      BYTE *pbBinary,
            DWORD *pcbBinary,
              DWORD *pdwSkip,
              DWORD *pdwFlags
    );
#line 19913 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringA(
                               const BYTE *pbBinary,
         DWORD cbBinary,
         DWORD dwFlags,
                                                  LPSTR pszString,
            DWORD *pcchString
    );







__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringW(
                               const BYTE *pbBinary,
         DWORD cbBinary,
         DWORD dwFlags,
                                                  LPWSTR pszString,
            DWORD *pcchString
    );
#line 20024 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_PKCS12_PBE_PARAMS
{
    int iIterations;
    ULONG cbSalt;
}
CRYPT_PKCS12_PBE_PARAMS;
#line 20057 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
HCERTSTORE
__stdcall
PFXImportCertStore(
         CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
#line 20091 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXIsPFXBlob(
         CRYPT_DATA_BLOB* pPFX);
#line 20109 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXVerifyPassword(
         CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
#line 20157 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStoreEx(
         HCERTSTORE hStore,
            CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         void* pvPara,
         DWORD dwFlags);
#line 20186 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStore(
         HCERTSTORE hStore,
            CRYPT_DATA_BLOB* pPFX,
         LPCWSTR szPassword,
         DWORD dwFlags);
#line 20209 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void *HCERT_SERVER_OCSP_RESPONSE;
#line 20237 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
HCERT_SERVER_OCSP_RESPONSE
__stdcall
CertOpenServerOcspResponse(
         PCCERT_CHAIN_CONTEXT pChainContext,
         DWORD dwFlags,
               LPVOID pvReserved
    );
#line 20255 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponse(
             HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
    );







__declspec(dllimport)
void
__stdcall
CertCloseServerOcspResponse(
             HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
         DWORD dwFlags
    );





typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
    CERT_SERVER_OCSP_RESPONSE_CONTEXT,
    *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
    *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT {
    DWORD cbSize;
    BYTE *pbEncodedOcspResponse;
    DWORD cbEncodedOcspResponse;
};
#line 20304 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
__stdcall
CertGetServerOcspResponseContext(
         HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
         DWORD dwFlags,
               LPVOID pvReserved
    );






__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponseContext(
             PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeServerOcspResponseContext(
             PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );
#line 20386 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertRetrieveLogoOrBiometricInfo(
         PCCERT_CONTEXT pCertContext,
         LPCSTR lpszLogoOrBiometricType,
         DWORD dwRetrievalFlags,
         DWORD dwTimeout,
         DWORD dwFlags,
               void *pvReserved,
                                         BYTE **ppbData,
          DWORD *pcbData,
                                  LPWSTR *ppwszMimeType
    );
#line 20423 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CERT_SELECT_CHAIN_PARA
{
    HCERTCHAINENGINE hChainEngine;
    PFILETIME pTime;
    HCERTSTORE hAdditionalStore;
    PCERT_CHAIN_PARA pChainPara;
    DWORD dwFlags;
}
CERT_SELECT_CHAIN_PARA, *PCERT_SELECT_CHAIN_PARA;
typedef const CERT_SELECT_CHAIN_PARA* PCCERT_SELECT_CHAIN_PARA;



typedef struct _CERT_SELECT_CRITERIA
{
    DWORD dwType;
    DWORD cPara;
                        void** ppPara;
}
CERT_SELECT_CRITERIA, *PCERT_SELECT_CRITERIA;
typedef const CERT_SELECT_CRITERIA* PCCERT_SELECT_CRITERIA;
#line 20485 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
__declspec(dllimport)

BOOL
__stdcall
CertSelectCertificateChains(
             LPCGUID pSelectionContext,
         DWORD dwFlags,
             PCCERT_SELECT_CHAIN_PARA pChainParameters,
         DWORD cCriteria,
                              PCCERT_SELECT_CRITERIA rgpCriteria,
         HCERTSTORE hStore,
          PDWORD pcSelection,
                                         PCCERT_CHAIN_CONTEXT** pprgpSelection
    );






__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainList(
         PCCERT_CHAIN_CONTEXT* prgpSelection
    );
#line 20526 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_TIMESTAMP_REQUEST
{
    DWORD dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_DER_BLOB HashedMessage;
    LPSTR pszTSAPolicyId;
    CRYPT_INTEGER_BLOB Nonce;
    BOOL fCertReq;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_REQUEST, *PCRYPT_TIMESTAMP_REQUEST;





typedef struct _CRYPT_TIMESTAMP_RESPONSE
{
    DWORD dwStatus;
    DWORD cFreeText;

    LPWSTR* rgFreeText;
    CRYPT_BIT_BLOB FailureInfo;
    CRYPT_DER_BLOB ContentInfo;
} CRYPT_TIMESTAMP_RESPONSE, *PCRYPT_TIMESTAMP_RESPONSE;
#line 20573 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_TIMESTAMP_ACCURACY
{
    DWORD dwSeconds;
    DWORD dwMillis;
    DWORD dwMicros;
} CRYPT_TIMESTAMP_ACCURACY, *PCRYPT_TIMESTAMP_ACCURACY;





typedef struct _CRYPT_TIMESTAMP_INFO
{
    DWORD dwVersion;
    LPSTR pszTSAPolicyId;
    CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    CRYPT_DER_BLOB HashedMessage;
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME ftTime;
    PCRYPT_TIMESTAMP_ACCURACY pvAccuracy;
    BOOL fOrdering;
    CRYPT_DER_BLOB Nonce;
    CRYPT_DER_BLOB Tsa;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_INFO, *PCRYPT_TIMESTAMP_INFO;





typedef struct _CRYPT_TIMESTAMP_CONTEXT
{
    DWORD cbEncoded;

    BYTE *pbEncoded;
    PCRYPT_TIMESTAMP_INFO pTimeStamp;
} CRYPT_TIMESTAMP_CONTEXT, *PCRYPT_TIMESTAMP_CONTEXT;
#line 20632 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef struct _CRYPT_TIMESTAMP_PARA
{
    LPCSTR pszTSAPolicyId;
    BOOL fRequestCerts;
    CRYPT_INTEGER_BLOB Nonce;
    DWORD cExtension;

    PCERT_EXTENSION rgExtension;
} CRYPT_TIMESTAMP_PARA, *PCRYPT_TIMESTAMP_PARA;
#line 20686 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
BOOL
__stdcall
CryptRetrieveTimeStamp(
                                LPCWSTR wszUrl,
                                DWORD dwRetrievalFlags,
                                DWORD dwTimeout,
                                LPCSTR pszHashId,
                                const CRYPT_TIMESTAMP_PARA *pPara,

                                const BYTE *pbData,
                                DWORD cbData,
                             PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
                                          PCCERT_CONTEXT *ppTsSigner,
                                HCERTSTORE *phStore
    );
#line 20749 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
BOOL
__stdcall
CryptVerifyTimeStampSignature (

                                const BYTE *pbTSContentInfo,
                                DWORD cbTSContentInfo,

                                const BYTE *pbData,
                                DWORD cbData,
                                HCERTSTORE hAdditionalStore,
                             PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
                                          PCCERT_CONTEXT *ppTsSigner,
                                HCERTSTORE *phStore
    );
#line 20819 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH)(
         LPVOID pContext,
                                            PCERT_NAME_BLOB *rgIdentifierOrNameList,
         DWORD dwIdentifierOrNameListCount);
#line 20854 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET)(
             LPVOID pPluginContext,
             PCRYPT_DATA_BLOB pIdentifier,
         DWORD dwNameType,
         PCERT_NAME_BLOB pNameBlob,
                                            PBYTE *ppbContent,
          DWORD *pcbContent,
                              PCWSTR *ppwszPassword,
                              PCRYPT_DATA_BLOB *ppIdentifier);
#line 20880 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void (__stdcall * PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE)(
         DWORD dwReason,
             LPVOID pPluginContext);
#line 20897 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD)(
             LPVOID pPluginContext,
         PCWSTR pwszPassword
);
#line 20914 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE)(
             LPVOID pPluginContext,
          PBYTE pbData
);
#line 20935 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER)(
             LPVOID pPluginContext,
         PCRYPT_DATA_BLOB pIdentifier);


typedef struct _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
{
                                                                                                            DWORD cbSize;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET pfnGet;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE pfnRelease;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD pfnFreePassword;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE pfnFree;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER pfnFreeIdentifier;
} CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE, *PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;
#line 20978 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE)(
         PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pfnFlush,
         LPVOID pContext,
          DWORD *pdwExpectedObjectCount,
             PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *ppFuncTable,
                              void **ppPluginContext);
#line 20994 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
}






#pragma warning(pop)
#line 21020 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dpapi.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dpapi.h"
extern "C" {
#line 85 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dpapi.h"
typedef struct _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND hwndApp;
    LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;
#line 167 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dpapi.h"
BOOL
__stdcall
CryptProtectData(
                    DATA_BLOB* pDataIn,
                    LPCWSTR szDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,
                    DATA_BLOB* pDataOut
    );


BOOL
__stdcall
CryptUnprotectData(
                    DATA_BLOB* pDataIn,
                                  LPWSTR* ppszDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,
                    DATA_BLOB* pDataOut
    );


BOOL
__stdcall
CryptProtectDataNoUI(
                    DATA_BLOB* pDataIn,
                    LPCWSTR szDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,

                    const BYTE *pbOptionalPassword,
                    DWORD cbOptionalPassword,
                    DATA_BLOB* pDataOut
    );

BOOL
__stdcall
CryptUnprotectDataNoUI(
                    DATA_BLOB* pDataIn,
                                  LPWSTR* ppszDataDescr,
                    DATA_BLOB* pOptionalEntropy,
                    PVOID pvReserved,
                    CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct,
                    DWORD dwFlags,

                    const BYTE *pbOptionalPassword,
                    DWORD cbOptionalPassword,
                    DATA_BLOB* pDataOut
    );





BOOL
__stdcall
CryptUpdateProtectedState(
                    PSID pOldSid,
                    LPCWSTR pwszOldPassword,
                    DWORD dwFlags,
                    DWORD *pdwSuccessCount,
                    DWORD *pdwFailureCount);
#line 272 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\dpapi.h"
BOOL
__stdcall
CryptProtectMemory(
                    LPVOID pDataIn,
                    DWORD cbDataIn,
                    DWORD dwFlags
    );


BOOL
__stdcall
CryptUnprotectMemory(
                    LPVOID pDataIn,
                    DWORD cbDataIn,
                    DWORD dwFlags
    );





}
#line 21020 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\wincrypt.h"
#line 199 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
#line 26 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
extern "C" {
#line 57 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
typedef struct _CERTIFICATE_BLOB {

    DWORD dwCertEncodingType;





    DWORD cbData;




    PBYTE pbData;

} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;





typedef struct _EFS_HASH_BLOB {




    DWORD cbData;




    PBYTE pbData;

} EFS_HASH_BLOB, *PEFS_HASH_BLOB;
#line 100 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
typedef struct _EFS_RPC_BLOB {




    DWORD cbData;




    PBYTE pbData;

} EFS_RPC_BLOB, *PEFS_RPC_BLOB;






typedef struct _EFS_PIN_BLOB {




    DWORD cbPadding;




    DWORD cbData;




    PBYTE pbData;

} EFS_PIN_BLOB, *PEFS_PIN_BLOB;







typedef struct _EFS_KEY_INFO {

    DWORD dwVersion;
    ULONG Entropy;
    ALG_ID Algorithm;
    ULONG KeyLength;

} EFS_KEY_INFO, *PEFS_KEY_INFO;






typedef struct _EFS_COMPATIBILITY_INFO {

    DWORD EfsVersion;

} EFS_COMPATIBILITY_INFO, *PEFS_COMPATIBILITY_INFO;
#line 176 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
typedef struct _EFS_DECRYPTION_STATUS_INFO {

    DWORD dwDecryptionError;
    DWORD dwHashOffset;
    DWORD cbHash;

} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;

typedef struct _EFS_ENCRYPTION_STATUS_INFO {

    BOOL bHasCurrentKey;
    DWORD dwEncryptionError;

} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;







typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;




typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_HASH_BLOB pHash;




    LPWSTR lpDisplayInformation;

} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;

typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {



    DWORD nCert_Hash;



     PENCRYPTION_CERTIFICATE_HASH * pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;



typedef struct _ENCRYPTION_CERTIFICATE_LIST {



    DWORD nUsers;



     PENCRYPTION_CERTIFICATE * pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;
#line 250 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE {

 DWORD dwEfsAccessType;
 PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded;
    PENCRYPTION_CERTIFICATE pEncryptionCertificate;
    PEFS_RPC_BLOB pEfsStreamSignature;

} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;
#line 267 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
typedef struct _ENCRYPTION_PROTECTOR{
    DWORD cbTotalLength;
    SID * pUserSid;



    LPWSTR lpProtectorDescriptor;
} ENCRYPTION_PROTECTOR, *PENCRYPTION_PROTECTOR;

typedef struct _ENCRYPTION_PROTECTOR_LIST {
    DWORD nProtectors;



    PENCRYPTION_PROTECTOR *pProtectors;
} ENCRYPTION_PROTECTOR_LIST, *PENCRYPTION_PROTECTOR_LIST;
#line 295 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
__declspec(dllimport)
DWORD
__stdcall
QueryUsersOnEncryptedFile(
                    LPCWSTR lpFileName,
                 PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers
    );


__declspec(dllimport)
DWORD
__stdcall
QueryRecoveryAgentsOnEncryptedFile(
                    LPCWSTR lpFileName,
                 PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents
    );


__declspec(dllimport)
DWORD
__stdcall
RemoveUsersFromEncryptedFile(
            LPCWSTR lpFileName,
            PENCRYPTION_CERTIFICATE_HASH_LIST pHashes
    );

__declspec(dllimport)
DWORD
__stdcall
AddUsersToEncryptedFile(
            LPCWSTR lpFileName,
            PENCRYPTION_CERTIFICATE_LIST pEncryptionCertificates
    );







__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKey(
                PENCRYPTION_CERTIFICATE pEncryptionCertificate
    );
#line 356 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKeyEx(
                    PENCRYPTION_CERTIFICATE pEncryptionCertificate,
                    DWORD dwCapabilities,
                    DWORD dwFlags,
                    LPVOID pvReserved
    );



__declspec(dllimport)
void
__stdcall
FreeEncryptionCertificateHashList(
            PENCRYPTION_CERTIFICATE_HASH_LIST pUsers
    );

__declspec(dllimport)
BOOL
__stdcall
EncryptionDisable(
         LPCWSTR DirPath,
         BOOL Disable
    );







__declspec(dllimport)
DWORD
__stdcall
DuplicateEncryptionInfoFile(
                LPCWSTR SrcFileName,
                LPCWSTR DstFileName,
                DWORD dwCreationDistribution,
                DWORD dwAttributes,
                const LPSECURITY_ATTRIBUTES lpSecurityAttributes
     );
#line 421 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
GetEncryptedFileMetadata(
                                        LPCWSTR lpFileName,
                                        PDWORD pcbMetadata,
                                                PBYTE *ppbMetadata
    );

__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
SetEncryptedFileMetadata(
                LPCWSTR lpFileName,
                PBYTE pbOldMetadata,
                PBYTE pbNewMetadata,
                PENCRYPTION_CERTIFICATE_HASH pOwnerHash,
                DWORD dwOperation,
                PENCRYPTION_CERTIFICATE_HASH_LIST pCertificatesAdded
    );

__declspec(deprecated)
__declspec(dllimport)
void
__stdcall
FreeEncryptedFileMetadata(
            PBYTE pbMetadata
    );
#line 459 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winefs.h"
}
#line 200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
#line 30 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"








#pragma warning(disable: 4049)
#line 23 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
#line 39 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
#line 39 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\rpcnsip.h"
#line 26 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\rpcnsip.h"
extern "C" {





typedef struct
{
   RPC_NS_HANDLE LookupContext;
   RPC_BINDING_HANDLE ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsSendReceive(
       PRPC_MESSAGE Message,
        RPC_BINDING_HANDLE * Handle
    );

__declspec(dllimport)

void
__stdcall
I_RpcNsRaiseException(
       PRPC_MESSAGE Message,
       RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReBindBuffer(
       PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsServerBindSearch(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsClientBindSearch(
    void
    );

__declspec(dllimport)
void
__stdcall
I_NsClientBindDone(
    void
    );





}
#line 42 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"



#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\rpcsal.h"
#line 152 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\rpcsal.h"
extern "C" {
#line 498 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\rpcsal.h"
}
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"



extern "C" {
#line 176 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;
#line 223 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
void * __stdcall MIDL_user_allocate(size_t size);
void __stdcall MIDL_user_free( void * );



void * __stdcall I_RpcDefaultAllocate(
         handle_t bh, size_t size, void * (* RealAlloc)(size_t) );

void __stdcall I_RpcDefaultFree(
         handle_t bh, void *, void (*RealFree)(void *) );
#line 258 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef void * NDR_CCONTEXT;

typedef struct
    {
    void * pad[2];
    void * userContext;
    } * NDR_SCONTEXT;





typedef void (__stdcall * NDR_RUNDOWN)(void * context);

typedef void (__stdcall * NDR_NOTIFY_ROUTINE)(void);

typedef void (__stdcall * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT * ArrayOfObjects;
    } SCONTEXT_QUEUE, * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
         NDR_CCONTEXT CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
              NDR_CCONTEXT CContext,
          void *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall2 (
                NDR_CCONTEXT * pCContext,
          RPC_BINDING_HANDLE hBinding,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall2 (
          RPC_BINDING_HANDLE BindingHandle,
          NDR_SCONTEXT CContext,
          void * pBuff,
          NDR_RUNDOWN userRunDownIn,
              void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
          RPC_BINDING_HANDLE BindingHandle,
          void * pBuff,
          unsigned long DataRepresentation
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
          RPC_BINDING_HANDLE BindingHandle,
              void * pBuff,
          unsigned long DataRepresentation,
              void * CtxGuard,
         unsigned long Flags
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
         void * * ContextHandle
    );
#line 451 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef unsigned long error_status_t;
#line 534 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char * RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;


typedef void (__stdcall * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE * );

typedef const unsigned char * PFORMAT_STRING;




typedef struct
    {
    long Dimension;


    unsigned long * BufferConformanceMark;
    unsigned long * BufferVarianceMark;


    unsigned long * MaxCountArray;
    unsigned long * OffsetArray;
    unsigned long * ActualCountArray;
    } ARRAY_INFO, *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE * PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef const unsigned char * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {

    PRPC_MESSAGE RpcMsg;


    unsigned char * Buffer;





    unsigned char * BufferStart;
    unsigned char * BufferEnd;
#line 600 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
    unsigned char * BufferMark;


    unsigned long BufferLength;


    unsigned long MemorySize;


    unsigned char * Memory;


    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;


    int ReuseBuffer;


    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;






    int IgnoreEmbeddedPointers;





    unsigned char * PointerBufferMark;




    unsigned char CorrDespIncrement;

    unsigned char uFlags;
    unsigned short UniquePtrCount;





    ULONG_PTR MaxCount;





    unsigned long Offset;





    unsigned long ActualCount;


    void * ( __stdcall * pfnAllocate)( size_t );
    void ( __stdcall * pfnFree)(void *);







    unsigned char * StackTop;





    unsigned char * pPresentedType;
    unsigned char * pTransmitType;
#line 689 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
    handle_t SavedHandle;




    const struct _MIDL_STUB_DESC * StubDesc;




    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
    unsigned long FullPtrRefId;

    unsigned long PointerLength;

    int fInDontFree :1;
    int fDontCallFreeInst :1;
    int fInOnlyParam :1;
    int fHasReturn :1;
    int fHasExtensions :1;
    int fHasNewCorrDesc :1;
    int fIsIn :1;
    int fIsOut :1;
    int fIsOicf :1;
    int fBufferValid :1;
    int fHasMemoryValidateCallback: 1;
    int fInFree :1;
    int fNeedMCCP :1;
    int fUnused :3;
    int fUnused2 :16;


    unsigned long dwDestContext;
    void * pvDestContext;

    NDR_SCONTEXT * SavedContextHandles;

    long ParamNumber;

    struct IRpcChannelBuffer * pRpcChannelBuffer;

    PARRAY_INFO pArrayInfo;
    unsigned long * SizePtrCountArray;
    unsigned long * SizePtrOffsetArray;
    unsigned long * SizePtrLengthArray;




    void * pArgQueue;

    unsigned long dwStubPhase;

    void * LowStackMark;




    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char * pCorrMemory;

    void * pMemoryList;
#line 764 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
    INT_PTR pCSInfo;

    unsigned char * ConformanceMark;
    unsigned char * VarianceMark;




    INT_PTR Unused;


    struct _NDR_PROC_CONTEXT * pContext;
#line 787 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
    void * ContextHandleHash;
    void * pUserMarshalList;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;






    } MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;


typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;




typedef void *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void * pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
#line 837 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long *,
     unsigned long,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char * ,
     void * );

typedef unsigned char *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char *,
     void * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long *,
     void * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;
#line 907 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef struct _MALLOC_FREE_STRUCT
    {
    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short CommOffset;
    short FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulLocalBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulNetworkBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     unsigned long ulNetworkBufferSize,
     IDL_CS_CONVERT * conversionType,
     unsigned long * pulLocalBufferSize,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     void * pLocalData,
     unsigned long ulLocalDataLength,
     byte * pNetworkData,
     unsigned long * pulNetworkDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     unsigned long ulNetworkCodeSet,
     byte * pNetworkData,
     unsigned long ulNetworkDataLength,
     unsigned long ulLocalBufferSize,
     void * pLocalData,
     unsigned long * pulLocalDataLength,
     error_status_t * pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE hBinding,
     int fServerSide,
     unsigned long * pulSendingTag,
     unsigned long * pulDesiredReceivingTag,
     unsigned long * pulReceivingTag,
     error_status_t * pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
    } NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short * pOffset;
    PFORMAT_STRING pFormatExpr;
} NDR_EXPR_DESC;




typedef struct _MIDL_STUB_DESC
    {
    void * RpcInterfaceInformation;

    void * ( __stdcall * pfnAllocate)(size_t);
    void ( __stdcall * pfnFree)(void *);

    union
        {
        handle_t * pAutoHandle;
        handle_t * pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN * apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs;
    const EXPR_EVAL * apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple;

    const unsigned char * pFormatTypes;

    int fCheckBounds;


    unsigned long Version;

    MALLOC_FREE_STRUCT * pMallocFreeStruct;

    long MIDLVersion;

    const COMM_FAULT_OFFSETS * CommFaultOffsets;


    const USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple;


    const NDR_NOTIFY_ROUTINE * NotifyRoutineTable;





    ULONG_PTR mFlags;


    const NDR_CS_ROUTINES * CsRoutineTables;

    void * ProxyServerInfo;
    const NDR_EXPR_DESC * pExprInfo;



    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC * PMIDL_STUB_DESC;

typedef void * PMIDL_XMIT_TYPE;







#pragma warning(push)

#pragma warning(disable: 4200)

typedef struct _MIDL_FORMAT_STRING
    {
    short Pad;
    unsigned char Format[];
    } MIDL_FORMAT_STRING;


#pragma warning(pop)
#line 1096 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );


typedef long ( __stdcall * SERVER_ROUTINE)();







typedef struct _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE * DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short * FmtStringOffset;
    const STUB_THUNK * ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short * FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER TransferSyntax;
RPC_DISPATCH_TABLE * DispatchTable;
PFORMAT_STRING ProcString;
const unsigned short * FmtStringOffset;
PFORMAT_STRING TypeString;
const void * aUserMarshalQuadruple;
ULONG_PTR pReserved1;
ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;




typedef union _CLIENT_CALL_RETURN
    {
    void * Pointer;
    LONG_PTR Simple;
    } CLIENT_CALL_RETURN;


typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;

typedef struct _FULL_PTR_XLAT_TABLES
{
    void * RefIdToPointer;
    void * PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;





typedef enum _system_handle_t
{
     SYSTEM_HANDLE_FILE = 0
    ,SYSTEM_HANDLE_SEMAPHORE = 1
    ,SYSTEM_HANDLE_EVENT = 2
    ,SYSTEM_HANDLE_MUTEX = 3
    ,SYSTEM_HANDLE_PROCESS = 4
    ,SYSTEM_HANDLE_TOKEN = 5
    ,SYSTEM_HANDLE_INVALID = 0xFF
} system_handle_t;






RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
         RPC_CLIENT_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
         RPC_SERVER_INTERFACE * pInf,
          unsigned long * pCount,
          MIDL_SYNTAX_INFO ** pArr,
          unsigned long * pPreferSyntaxIndex);




#pragma warning(push)

#pragma warning(disable: 28740)

__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT ContextHandle,
    int fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char ** ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory,
    unsigned long CacheSize,
    unsigned long flags
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
unsigned char *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT * pContextHandle,
    RPC_BINDING_HANDLE BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg
    );



__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
          PMIDL_STUB_MESSAGE pStubMsg,
                                   PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrContextHandleMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );




__declspec(dllimport)
unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    long NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );
#line 2349 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
__declspec(dllimport)
unsigned char *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned long RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd
    );

__declspec(dllimport)
unsigned char *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd,
    RPC_BINDING_HANDLE * pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE pStubMsg,
    RPC_VERSION * pVersion );

#pragma warning(pop)







CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );







CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );
#line 2525 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;



__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );
#line 2569 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
__declspec(dllimport)
long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );







__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    void * pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    void * pThis,
    void * pChannel,
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long * pCommStatus,
    unsigned long * pFaultStatus,
    RPC_STATUS Status
    );







typedef void * RPC_SS_THREAD_HANDLE;

typedef void * __stdcall
RPC_CLIENT_ALLOC (
         size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
         void * Ptr
    );





__declspec(dllimport)
void *
__stdcall
RpcSsAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void *
__stdcall
RpcSmAllocate (
          size_t Size,
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
          void * pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
         void * * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
         void * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
          RPC_STATUS * pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
         RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
         RPC_CLIENT_ALLOC * ClientAlloc,
         RPC_CLIENT_FREE * ClientFree,
          RPC_CLIENT_ALLOC * * OldClientAlloc,
          RPC_CLIENT_FREE * * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE pMessage );

__declspec(dllimport)
void *
__stdcall
NdrRpcSmClientAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
         void * NodeToFree
    );

__declspec(dllimport)
void *
__stdcall
NdrRpcSsDefaultAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
         void * NodeToFree
    );
#line 2872 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long NumberOfPointers,
    XLAT_SIDE XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES pXlatTables
    );


__declspec(dllimport)
void *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE pStubMsg,
    size_t Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    void * ArgAddr
    );






__declspec(dllimport)
void *
__stdcall
NdrOleAllocate (
         size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
         void * NodeToFree
    );
#line 2971 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void * Buffer;
    unsigned long BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer * pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;



#pragma warning(push)

#pragma warning(disable: 4201)


typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;



#pragma warning(pop)






RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
         unsigned long * pFlags,
         unsigned long InformationLevel,
          NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
                 struct IRpcStubBuffer* pStub,
                    RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );







CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO *pProxyInfo,
    unsigned long nProcNum,
    void * pReturnValue,
    ...
    );







struct IRpcStubBuffer;


__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );
#line 3101 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
__declspec(dllimport)
long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );







__declspec(dllimport)
long
__stdcall
NdrStubCall3 (
    void * pThis,
    void * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE pRpcMsg
    );


__declspec(dllimport)
void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE pRpcMsg
    );



__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void * pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    void ** ppMemory,
    PFORMAT_STRING pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );





}



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 3195 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/rpcndr.h"
#line 23 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"








#pragma warning(disable: 4049)
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"



extern "C"{
#line 62 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec;
#line 114 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
typedef WCHAR OLECHAR;

typedef OLECHAR *LPOLESTR;

typedef const OLECHAR *LPCOLESTR;
#line 139 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;
#line 259 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
typedef struct _COAUTHIDENTITY
    {
                    USHORT *User;
                  ULONG UserLength;
                    USHORT *Domain;
                  ULONG DomainLength;
                    USHORT *Password;
                  ULONG PasswordLength;
    ULONG Flags;
    } COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;
#line 313 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
typedef
enum tagMEMCTX
    {
        MEMCTX_TASK = 1,
        MEMCTX_SHARED = 2,
        MEMCTX_MACSYSTEM = 3,
        MEMCTX_UNKNOWN = -1,
        MEMCTX_SAME = -2
    } MEMCTX;
#line 346 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
typedef
enum tagCLSCTX
    {
        CLSCTX_INPROC_SERVER = 0x1,
        CLSCTX_INPROC_HANDLER = 0x2,
        CLSCTX_LOCAL_SERVER = 0x4,
        CLSCTX_INPROC_SERVER16 = 0x8,
        CLSCTX_REMOTE_SERVER = 0x10,
        CLSCTX_INPROC_HANDLER16 = 0x20,
        CLSCTX_RESERVED1 = 0x40,
        CLSCTX_RESERVED2 = 0x80,
        CLSCTX_RESERVED3 = 0x100,
        CLSCTX_RESERVED4 = 0x200,
        CLSCTX_NO_CODE_DOWNLOAD = 0x400,
        CLSCTX_RESERVED5 = 0x800,
        CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
        CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
        CLSCTX_NO_FAILURE_LOG = 0x4000,
        CLSCTX_DISABLE_AAA = 0x8000,
        CLSCTX_ENABLE_AAA = 0x10000,
        CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
        CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
        CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
        CLSCTX_ENABLE_CLOAKING = 0x100000,
        CLSCTX_APPCONTAINER = 0x400000,
        CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
        CLSCTX_PS_DLL = ( int )0x80000000
    } CLSCTX;
#line 394 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
typedef
enum tagMSHLFLAGS
    {
        MSHLFLAGS_NORMAL = 0,
        MSHLFLAGS_TABLESTRONG = 1,
        MSHLFLAGS_TABLEWEAK = 2,
        MSHLFLAGS_NOPING = 4,
        MSHLFLAGS_RESERVED1 = 8,
        MSHLFLAGS_RESERVED2 = 16,
        MSHLFLAGS_RESERVED3 = 32,
        MSHLFLAGS_RESERVED4 = 64
    } MSHLFLAGS;

typedef
enum tagMSHCTX
    {
        MSHCTX_LOCAL = 0,
        MSHCTX_NOSHAREDMEM = 1,
        MSHCTX_DIFFERENTMACHINE = 2,
        MSHCTX_INPROC = 3,
        MSHCTX_CROSSCTX = 4
    } MSHCTX;

typedef struct _BYTE_BLOB
    {
    ULONG clSize;
                    byte abData[ 1 ];
    } BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    ULONG clSize;
                    ULONG alData[ 1 ];
    } DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    byte abData[ 1 ];
    } FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    ULONG fFlags;
    ULONG clSize;
                    unsigned short asData[ 1 ];
    } FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    ULONG clSize;
                    byte *pData;
    } BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    ULONG clSize;
                    unsigned short *pData;
    } WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    ULONG clSize;
                    ULONG *pData;
    } DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    ULONG clSize;
                    __int64 *pData;
    } HYPER_SIZEDARR;



extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;





typedef boolean BOOLEAN;





typedef struct tagBLOB
    {
    ULONG cbSize;
                    BYTE *pBlobData;
    } BLOB;

typedef struct tagBLOB *LPBLOB;
#line 540 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/wtypesbase.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec;






}
#line 40 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"



extern "C"{
#line 61 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;







typedef struct tagRemHGLOBAL
    {
    LONG fNullHGlobal;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
                    byte data[ 1 ];
    } RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHPALETTE;

typedef struct tagRemBRUSH
    {
    ULONG cbData;
                    byte data[ 1 ];
    } RemHBRUSH;
#line 342 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
typedef
enum tagDVASPECT
    {
        DVASPECT_CONTENT = 1,
        DVASPECT_THUMBNAIL = 2,
        DVASPECT_ICON = 4,
        DVASPECT_DOCPRINT = 8
    } DVASPECT;

typedef
enum tagSTGC
    {
        STGC_DEFAULT = 0,
        STGC_OVERWRITE = 1,
        STGC_ONLYIFCURRENT = 2,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
        STGC_CONSOLIDATE = 8
    } STGC;

typedef
enum tagSTGMOVE
    {
        STGMOVE_MOVE = 0,
        STGMOVE_COPY = 1,
        STGMOVE_SHALLOWCOPY = 2
    } STGMOVE;

typedef
enum tagSTATFLAG
    {
        STATFLAG_DEFAULT = 0,
        STATFLAG_NONAME = 1,
        STATFLAG_NOOPEN = 2
    } STATFLAG;

typedef void *HCONTEXT;



typedef DWORD LCID;




typedef USHORT LANGID;
#line 395 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
typedef struct _userCLIPFORMAT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0001
        {
                       DWORD dwValue;
                               wchar_t *pwszName;
        } u;
    } userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;

typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0002
        {
                       LONG hInproc;
                       DWORD_BLOB *hRemote;
        } u;
    } GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0003
        {
                       LONG hInproc;
                       FLAGGED_BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0004
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
    } remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0005
        {
                       LONG hInproc;
                       remoteMETAFILEPICT *hRemote;
                       __int64 hInproc64;
        } u;
    } userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0006
        {
                       LONG hInproc;
                       BYTE_BLOB *hRemote;
                       __int64 hInproc64;
        } u;
    } userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
                    byte pBuffer[ 1 ];
    } userBITMAP;

typedef struct _userHBITMAP
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0007
        {
                       LONG hInproc;
                       userBITMAP *hRemote;
                       __int64 hInproc64;
        } u;
    } userHBITMAP;

typedef struct _userHPALETTE
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0008
        {
                       LONG hInproc;
                       LOGPALETTE *hRemote;
                       __int64 hInproc64;
        } u;
    } userHPALETTE;

typedef struct _RemotableHandle
    {
    LONG fContext;
                                          union __MIDL_IWinTypes_0009
        {
                       LONG hInproc;
                       LONG hRemote;
        } u;
    } RemotableHandle;

typedef RemotableHandle *wireHWND;

typedef RemotableHandle *wireHMENU;

typedef RemotableHandle *wireHACCEL;

typedef RemotableHandle *wireHBRUSH;

typedef RemotableHandle *wireHFONT;

typedef RemotableHandle *wireHDC;

typedef RemotableHandle *wireHICON;

typedef RemotableHandle *wireHRGN;

typedef RemotableHandle *wireHMONITOR;
#line 611 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
typedef userHBITMAP *wireHBITMAP;

typedef userHPALETTE *wireHPALETTE;

typedef userHENHMETAFILE *wireHENHMETAFILE;

typedef userHMETAFILE *wireHMETAFILE;

typedef userHMETAFILEPICT *wireHMETAFILEPICT;
#line 635 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
typedef void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;







#pragma warning(push)

#pragma warning(disable: 4201)

typedef double DATE;
#line 667 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
typedef union tagCY {
    struct {
        ULONG Lo;
        LONG Hi;
    } ;
    LONGLONG int64;
} CY;


typedef CY *LPCY;
#line 692 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        } ;
        USHORT signscale;
    } ;
    ULONG Hi32;
    union {
        struct {
            ULONG Lo32;
            ULONG Mid32;
        } ;
        ULONGLONG Lo64;
    } ;
} DECIMAL;




typedef DECIMAL *LPDECIMAL;



#pragma warning(pop)




typedef FLAGGED_WORD_BLOB *wireBSTR;


typedef OLECHAR *BSTR;




typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;
#line 749 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
                    BYTE *pData;
    } BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;




typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    LONG ulClipFmt;
                    BYTE *pClipData;
    } CLIPDATA;



typedef unsigned short VARTYPE;
#line 830 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\wtypes.h"
enum VARENUM
    {
        VT_EMPTY = 0,
        VT_NULL = 1,
        VT_I2 = 2,
        VT_I4 = 3,
        VT_R4 = 4,
        VT_R8 = 5,
        VT_CY = 6,
        VT_DATE = 7,
        VT_BSTR = 8,
        VT_DISPATCH = 9,
        VT_ERROR = 10,
        VT_BOOL = 11,
        VT_VARIANT = 12,
        VT_UNKNOWN = 13,
        VT_DECIMAL = 14,
        VT_I1 = 16,
        VT_UI1 = 17,
        VT_UI2 = 18,
        VT_UI4 = 19,
        VT_I8 = 20,
        VT_UI8 = 21,
        VT_INT = 22,
        VT_UINT = 23,
        VT_VOID = 24,
        VT_HRESULT = 25,
        VT_PTR = 26,
        VT_SAFEARRAY = 27,
        VT_CARRAY = 28,
        VT_USERDEFINED = 29,
        VT_LPSTR = 30,
        VT_LPWSTR = 31,
        VT_RECORD = 36,
        VT_INT_PTR = 37,
        VT_UINT_PTR = 38,
        VT_FILETIME = 64,
        VT_BLOB = 65,
        VT_STREAM = 66,
        VT_STORAGE = 67,
        VT_STREAMED_OBJECT = 68,
        VT_STORED_OBJECT = 69,
        VT_BLOB_OBJECT = 70,
        VT_CF = 71,
        VT_CLSID = 72,
        VT_VERSIONED_STREAM = 73,
        VT_BSTR_BLOB = 0xfff,
        VT_VECTOR = 0x1000,
        VT_ARRAY = 0x2000,
        VT_BYREF = 0x4000,
        VT_RESERVED = 0x8000,
        VT_ILLEGAL = 0xffff,
        VT_ILLEGALMASKED = 0xfff,
        VT_TYPEMASK = 0xfff
    } ;
typedef ULONG PROPID;



typedef struct _tagpropertykey
    {
    GUID fmtid;
    DWORD pid;
    } PROPERTYKEY;


typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } QUERYCONTEXT;

typedef
enum tagTYSPEC
    {
        TYSPEC_CLSID = 0,
        TYSPEC_FILEEXT = ( TYSPEC_CLSID + 1 ) ,
        TYSPEC_MIMETYPE = ( TYSPEC_FILEEXT + 1 ) ,
        TYSPEC_FILENAME = ( TYSPEC_MIMETYPE + 1 ) ,
        TYSPEC_PROGID = ( TYSPEC_FILENAME + 1 ) ,
        TYSPEC_PACKAGENAME = ( TYSPEC_PROGID + 1 ) ,
        TYSPEC_OBJECTID = ( TYSPEC_PACKAGENAME + 1 )
    } TYSPEC;

typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
    {
    DWORD tyspec;
                                          union __MIDL___MIDL_itf_wtypes_0000_0001_0005
        {
                       CLSID clsid;
                       LPOLESTR pFileExt;
                       LPOLESTR pMimeType;
                       LPOLESTR pProgId;
                       LPOLESTR pFileName;
                       struct
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } ByName;
                       struct
            {
            GUID ObjectId;
            GUID PolicyId;
            } ByObjectId;
        } tagged_union;
    } uCLSSPEC;



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;






}
#line 30 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 39 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
extern "C" const GUID GUID_DEVINTERFACE_DISK;
extern "C" const GUID GUID_DEVINTERFACE_CDROM;
extern "C" const GUID GUID_DEVINTERFACE_PARTITION;
extern "C" const GUID GUID_DEVINTERFACE_TAPE;
extern "C" const GUID GUID_DEVINTERFACE_WRITEONCEDISK;
extern "C" const GUID GUID_DEVINTERFACE_VOLUME;
extern "C" const GUID GUID_DEVINTERFACE_MEDIUMCHANGER;
extern "C" const GUID GUID_DEVINTERFACE_FLOPPY;
extern "C" const GUID GUID_DEVINTERFACE_CDCHANGER;
extern "C" const GUID GUID_DEVINTERFACE_STORAGEPORT;
extern "C" const GUID GUID_DEVINTERFACE_VMLUN;
extern "C" const GUID GUID_DEVINTERFACE_SES;
#line 59 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
extern "C" const GUID GUID_DEVINTERFACE_HIDDEN_VOLUME;

extern "C" const GUID GUID_DEVINTERFACE_COMPORT;
extern "C" const GUID GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;
#line 267 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
extern "C" {
#line 396 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_HOTPLUG_INFO {
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
} STORAGE_HOTPLUG_INFO, *PSTORAGE_HOTPLUG_INFO;
#line 415 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_DEVICE_NUMBER {





    DWORD DeviceType;





    DWORD DeviceNumber;






    DWORD PartitionNumber;
} STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;





typedef struct _STORAGE_BUS_RESET_REQUEST {
    BYTE PathId;
} STORAGE_BUS_RESET_REQUEST, *PSTORAGE_BUS_RESET_REQUEST;





typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
        DWORD Length;
        BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
} STORAGE_BREAK_RESERVATION_REQUEST, *PSTORAGE_BREAK_RESERVATION_REQUEST;
#line 468 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _PREVENT_MEDIA_REMOVAL {
    BOOLEAN PreventMediaRemoval;
} PREVENT_MEDIA_REMOVAL, *PPREVENT_MEDIA_REMOVAL;







typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
        DWORD MediaChangeCount;
        DWORD NewState;
} CLASS_MEDIA_CHANGE_CONTEXT, *PCLASS_MEDIA_CHANGE_CONTEXT;





typedef struct _TAPE_STATISTICS {
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
} TAPE_STATISTICS, *PTAPE_STATISTICS;
#line 505 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TAPE_GET_STATISTICS {
    DWORD Operation;
} TAPE_GET_STATISTICS, *PTAPE_GET_STATISTICS;
#line 518 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _STORAGE_MEDIA_TYPE {
#line 548 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DDS_4mm = 0x20,
    MiniQic,
    Travan,
    QIC,
    MP_8mm,
    AME_8mm,
    AIT1_8mm,
    DLT,
    NCTP,
    IBM_3480,
    IBM_3490E,
    IBM_Magstar_3590,
    IBM_Magstar_MP,
    STK_DATA_D3,
    SONY_DTF,
    DV_6mm,
    DMI,
    SONY_D2,
    CLEANER_CARTRIDGE,
    CD_ROM,
    CD_R,
    CD_RW,
    DVD_ROM,
    DVD_R,
    DVD_RW,
    MO_3_RW,
    MO_5_WO,
    MO_5_RW,
    MO_5_LIMDOW,
    PC_5_WO,
    PC_5_RW,
    PD_5_RW,
    ABL_5_WO,
    PINNACLE_APEX_5_RW,
    SONY_12_WO,
    PHILIPS_12_WO,
    HITACHI_12_WO,
    CYGNET_12_WO,
    KODAK_14_WO,
    MO_NFR_525,
    NIKON_12_RW,
    IOMEGA_ZIP,
    IOMEGA_JAZ,
    SYQUEST_EZ135,
    SYQUEST_EZFLYER,
    SYQUEST_SYJET,
    AVATAR_F2,
    MP2_8mm,
    DST_S,
    DST_M,
    DST_L,
    VXATape_1,
    VXATape_2,



    STK_9840,

    LTO_Ultrium,
    LTO_Accelis,
    DVD_RAM,
    AIT_8mm,
    ADR_1,
    ADR_2,
    STK_9940,
    SAIT,
    VXATape
}STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;
#line 630 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _STORAGE_BUS_TYPE {
    BusTypeUnknown = 0x00,
    BusTypeScsi,
    BusTypeAtapi,
    BusTypeAta,
    BusType1394,
    BusTypeSsa,
    BusTypeFibre,
    BusTypeUsb,
    BusTypeRAID,
    BusTypeiScsi,
    BusTypeSas,
    BusTypeSata,
    BusTypeSd,
    BusTypeMmc,
    BusTypeVirtual,
    BusTypeFileBackedVirtual,
    BusTypeSpaces,
    BusTypeNvme,
    BusTypeMax,
    BusTypeMaxReserved = 0x7F
} STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;
#line 665 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_MEDIA_INFO {
    union {
        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } DiskInfo;

        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } RemovableDiskInfo;

        struct {
            STORAGE_MEDIA_TYPE MediaType;
            DWORD MediaCharacteristics;
            DWORD CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;





            union {
                struct {
                    BYTE MediumType;
                    BYTE DensityCode;
                } ScsiInformation;
            } BusSpecificData;

        } TapeInfo;
    } DeviceSpecific;
} DEVICE_MEDIA_INFO, *PDEVICE_MEDIA_INFO;

typedef struct _GET_MEDIA_TYPES {
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
} GET_MEDIA_TYPES, *PGET_MEDIA_TYPES;
#line 727 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE VendorSpecific[512];
} STORAGE_PREDICT_FAILURE, *PSTORAGE_PREDICT_FAILURE;
#line 744 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_FAILURE_PREDICTION_CONFIG {
    DWORD Version;
    DWORD Size;
    BOOLEAN Set;
    BOOLEAN Enabled;
    WORD Reserved;
} STORAGE_FAILURE_PREDICTION_CONFIG, *PSTORAGE_FAILURE_PREDICTION_CONFIG;
#line 780 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _STORAGE_QUERY_TYPE {
    PropertyStandardQuery = 0,
    PropertyExistsQuery,
    PropertyMaskQuery,
    PropertyQueryMaxDefined
} STORAGE_QUERY_TYPE, *PSTORAGE_QUERY_TYPE;





typedef enum _STORAGE_PROPERTY_ID {
    StorageDeviceProperty = 0,
    StorageAdapterProperty,
    StorageDeviceIdProperty,
    StorageDeviceUniqueIdProperty,
    StorageDeviceWriteCacheProperty,
    StorageMiniportProperty,
    StorageAccessAlignmentProperty,
    StorageDeviceSeekPenaltyProperty,
    StorageDeviceTrimProperty,
    StorageDeviceWriteAggregationProperty,
    StorageDeviceDeviceTelemetryProperty,
    StorageDeviceLBProvisioningProperty,
    StorageDevicePowerProperty,
    StorageDeviceCopyOffloadProperty,
    StorageDeviceResiliencyProperty,
    StorageDeviceMediumProductType,
} STORAGE_PROPERTY_ID, *PSTORAGE_PROPERTY_ID;






typedef struct _STORAGE_PROPERTY_QUERY {





    STORAGE_PROPERTY_ID PropertyId;





    STORAGE_QUERY_TYPE QueryType;





    BYTE AdditionalParameters[1];

} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;






typedef struct _STORAGE_DESCRIPTOR_HEADER {

    DWORD Version;

    DWORD Size;

} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;
#line 858 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_DEVICE_DESCRIPTOR {





    DWORD Version;






    DWORD Size;





    BYTE DeviceType;





    BYTE DeviceTypeModifier;






    BOOLEAN RemovableMedia;







    BOOLEAN CommandQueueing;






    DWORD VendorIdOffset;






    DWORD ProductIdOffset;







    DWORD ProductRevisionOffset;






    DWORD SerialNumberOffset;







    STORAGE_BUS_TYPE BusType;






    DWORD RawPropertiesLength;





    BYTE RawDeviceProperties[1];

} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;
#line 961 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_ADAPTER_DESCRIPTOR {

    DWORD Version;

    DWORD Size;

    DWORD MaximumTransferLength;

    DWORD MaximumPhysicalPages;

    DWORD AlignmentMask;

    BOOLEAN AdapterUsesPio;

    BOOLEAN AdapterScansDown;

    BOOLEAN CommandQueueing;

    BOOLEAN AcceleratedTransfer;




    BYTE BusType;


    WORD BusMajorVersion;

    WORD BusMinorVersion;


    BYTE SrbType;

    BYTE AddressType;


} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;
#line 1019 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {





    DWORD Version;






    DWORD Size;





    DWORD BytesPerCacheLine;





    DWORD BytesOffsetForCacheAlignment;





    DWORD BytesPerLogicalSector;





    DWORD BytesPerPhysicalSector;





    DWORD BytesOffsetForSectorAlignment;

} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR, *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;

typedef struct _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR {





    DWORD Version;





    DWORD Size;





    DWORD MediumProductType;

} STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR, *PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;


typedef enum _STORAGE_PORT_CODE_SET {
    StoragePortCodeSetReserved = 0,
    StoragePortCodeSetStorport = 1,
    StoragePortCodeSetSCSIport = 2,
    StoragePortCodeSetSpaceport = 3,
    StoragePortCodeSetATAport = 4,
    StoragePortCodeSetUSBport = 5,
    StoragePortCodeSetSBP2port = 6,
    StoragePortCodeSetSDport = 7
} STORAGE_PORT_CODE_SET, *PSTORAGE_PORT_CODE_SET;





typedef struct _STORAGE_MINIPORT_DESCRIPTOR {

    DWORD Version;

    DWORD Size;

    STORAGE_PORT_CODE_SET Portdriver;

    BOOLEAN LUNResetSupported;

    BOOLEAN TargetResetSupported;


    WORD IoTimeoutValue;



    BOOLEAN ExtraIoInfoSupported;
    BYTE Reserved0[3];
    DWORD Reserved1;


} STORAGE_MINIPORT_DESCRIPTOR, *PSTORAGE_MINIPORT_DESCRIPTOR;







typedef enum _STORAGE_IDENTIFIER_CODE_SET {
    StorageIdCodeSetReserved = 0,
    StorageIdCodeSetBinary = 1,
    StorageIdCodeSetAscii = 2,
    StorageIdCodeSetUtf8 = 3
} STORAGE_IDENTIFIER_CODE_SET, *PSTORAGE_IDENTIFIER_CODE_SET;

typedef enum _STORAGE_IDENTIFIER_TYPE {
    StorageIdTypeVendorSpecific = 0,
    StorageIdTypeVendorId = 1,
    StorageIdTypeEUI64 = 2,
    StorageIdTypeFCPHName = 3,
    StorageIdTypePortRelative = 4,
    StorageIdTypeTargetPortGroup = 5,
    StorageIdTypeLogicalUnitGroup = 6,
    StorageIdTypeMD5LogicalUnitIdentifier = 7,
    StorageIdTypeScsiNameString = 8
} STORAGE_IDENTIFIER_TYPE, *PSTORAGE_IDENTIFIER_TYPE;





typedef enum _STORAGE_ID_NAA_FORMAT {
        StorageIdNAAFormatIEEEExtended = 2,
        StorageIdNAAFormatIEEERegistered = 3,
        StorageIdNAAFormatIEEEERegisteredExtended = 5
} STORAGE_ID_NAA_FORMAT, *PSTORAGE_ID_NAA_FORMAT;

typedef enum _STORAGE_ASSOCIATION_TYPE {
    StorageIdAssocDevice = 0,
    StorageIdAssocPort = 1,
    StorageIdAssocTarget = 2
} STORAGE_ASSOCIATION_TYPE, *PSTORAGE_ASSOCIATION_TYPE;

typedef struct _STORAGE_IDENTIFIER {
    STORAGE_IDENTIFIER_CODE_SET CodeSet;
    STORAGE_IDENTIFIER_TYPE Type;
    WORD IdentifierSize;
    WORD NextOffset;






    STORAGE_ASSOCIATION_TYPE Association;





    BYTE Identifier[1];
} STORAGE_IDENTIFIER, *PSTORAGE_IDENTIFIER;

typedef struct _STORAGE_DEVICE_ID_DESCRIPTOR {

    DWORD Version;

    DWORD Size;





    DWORD NumberOfIdentifiers;







    BYTE Identifiers[1];
} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;


typedef struct _DEVICE_SEEK_PENALTY_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    BOOLEAN IncursSeekPenalty;
} DEVICE_SEEK_PENALTY_DESCRIPTOR, *PDEVICE_SEEK_PENALTY_DESCRIPTOR;


typedef struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    BOOLEAN BenefitsFromWriteAggregation;
} DEVICE_WRITE_AGGREGATION_DESCRIPTOR, *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;


typedef struct _DEVICE_TRIM_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    BOOLEAN TrimEnabled;
} DEVICE_TRIM_DESCRIPTOR, *PDEVICE_TRIM_DESCRIPTOR;

#pragma warning(push)
#pragma warning(disable: 4214)



typedef struct _DEVICE_LB_PROVISIONING_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    BYTE ThinProvisioningEnabled : 1;
    BYTE ThinProvisioningReadZeros : 1;
    BYTE AnchorSupported : 3;
    BYTE UnmapGranularityAlignmentValid : 1;
    BYTE Reserved0 : 2;
    BYTE Reserved1[7];
    DWORDLONG OptimalUnmapGranularity;
    DWORDLONG UnmapGranularityAlignment;
} DEVICE_LB_PROVISIONING_DESCRIPTOR, *PDEVICE_LB_PROVISIONING_DESCRIPTOR;
#line 1264 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES {
    DWORD Size;
    DWORD Version;
    BYTE AvailableMappingResourcesValid : 1;
    BYTE UsedMappingResourcesValid : 1;
    BYTE Reserved0 : 6;
    BYTE Reserved1[3];
    BYTE AvailableMappingResourcesScope : 2;
    BYTE UsedMappingResourcesScope : 2;
    BYTE Reserved2 : 4;
    BYTE Reserved3[3];
    DWORDLONG AvailableMappingResources;
    DWORDLONG UsedMappingResources;
} STORAGE_LB_PROVISIONING_MAP_RESOURCES, *PSTORAGE_LB_PROVISIONING_MAP_RESOURCES;

#pragma warning(pop)


typedef struct _DEVICE_POWER_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    BOOLEAN DeviceAttentionSupported;
    BOOLEAN AsynchronousNotificationSupported;
    BOOLEAN IdlePowerManagementEnabled;
    BOOLEAN D3ColdEnabled;
    BOOLEAN D3ColdSupported;
    BOOLEAN NoVerifyDuringIdlePower;
    BYTE Reserved[2];
    DWORD IdleTimeoutInMS;
} DEVICE_POWER_DESCRIPTOR, *PDEVICE_POWER_DESCRIPTOR;




typedef struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR {
    DWORD Version;
    DWORD Size;

    DWORD MaximumTokenLifetime;
    DWORD DefaultTokenLifetime;
    DWORDLONG MaximumTransferSize;
    DWORDLONG OptimalTransferCount;
    DWORD MaximumDataDescriptors;
    DWORD MaximumTransferLengthPerDescriptor;
    DWORD OptimalTransferLengthPerDescriptor;
    WORD OptimalTransferLengthGranularity;
    BYTE Reserved[2];
} DEVICE_COPY_OFFLOAD_DESCRIPTOR, *PDEVICE_COPY_OFFLOAD_DESCRIPTOR;





typedef struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {






    DWORD Version;






    DWORD Size;






    DWORD NameOffset;






    DWORD NumberOfLogicalCopies;






    DWORD NumberOfPhysicalCopies;






    DWORD PhysicalDiskRedundancy;






    DWORD NumberOfColumns;






    DWORD Interleave;

} STORAGE_DEVICE_RESILIENCY_DESCRIPTOR, *PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
#line 1416 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef DWORD DEVICE_DATA_MANAGEMENT_SET_ACTION;
#line 1480 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_DATA_SET_RANGE {
    LONGLONG StartingOffset;
    DWORDLONG LengthInBytes;
} DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE;
#line 1493 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
    DWORD Size;
    DEVICE_DATA_MANAGEMENT_SET_ACTION Action;

    DWORD Flags;

    DWORD ParameterBlockOffset;
    DWORD ParameterBlockLength;

    DWORD DataSetRangesOffset;
    DWORD DataSetRangesLength;

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;






typedef struct _DEVICE_DSM_NOTIFICATION_PARAMETERS {

    DWORD Size;

    DWORD Flags;

    DWORD NumFileTypeIDs;

    GUID FileTypeID[1];

} DEVICE_DSM_NOTIFICATION_PARAMETERS, *PDEVICE_DSM_NOTIFICATION_PARAMETERS;
#line 1534 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS {
    DWORD Size;

    BYTE TargetPriority;

    BYTE Reserved[3];
} DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS, *PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
#line 1561 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(push)
#pragma warning(disable: 4201)
typedef struct _STORAGE_OFFLOAD_TOKEN {
    BYTE TokenType[4];
    BYTE Reserved[2];
    BYTE TokenIdLength[2];
    union {
        struct {
            BYTE Reserved2[0x1F8];
        } StorageOffloadZeroDataToken;
        BYTE Token[0x1F8];
    };
} STORAGE_OFFLOAD_TOKEN, *PSTORAGE_OFFLOAD_TOKEN;
#pragma warning(pop)
#line 1594 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS {
    DWORD Flags;
    DWORD TimeToLive;
    DWORD Reserved[2];
} DEVICE_DSM_OFFLOAD_READ_PARAMETERS, *PDEVICE_DSM_OFFLOAD_READ_PARAMETERS;

typedef struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS {
    DWORD Flags;
    DWORD Reserved;
    DWORDLONG TokenOffset;
    STORAGE_OFFLOAD_TOKEN Token;
} DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS, *PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;





typedef struct _DEVICE_DATA_SET_REPAIR_PARAMETERS {

    DWORD NumberOfRepairCopies;
    DWORD SourceCopy;
    DWORD RepairCopies[1];

} DEVICE_DATA_SET_REPAIR_PARAMETERS, *PDEVICE_DATA_SET_REPAIR_PARAMETERS;






typedef struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS {
    DWORD Version;
    DWORD Size;
    DWORD Flags;






    DWORD OutputVersion;
} DEVICE_DATA_SET_LBP_STATE_PARAMETERS, *PDEVICE_DATA_SET_LBP_STATE_PARAMETERS;
#line 1653 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {

    DWORD Size;

    DEVICE_DATA_MANAGEMENT_SET_ACTION Action;

    DWORD Flags;
    DWORD OperationStatus;
    DWORD ExtendedError;
    DWORD TargetDetailedError;
    DWORD ReservedStatus;

    DWORD OutputBlockOffset;
    DWORD OutputBlockLength;

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;





typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {

    DWORD Size;
    DWORD Version;
    DWORDLONG SlabSizeInBytes;
    DWORD SlabOffsetDeltaInBytes;
    DWORD SlabAllocationBitMapBitCount;
    DWORD SlabAllocationBitMapLength;
    DWORD SlabAllocationBitMap[1];

} DEVICE_DATA_SET_LB_PROVISIONING_STATE, *PDEVICE_DATA_SET_LB_PROVISIONING_STATE;





typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 {

    DWORD Size;
    DWORD Version;
    DWORDLONG SlabSizeInBytes;
    DWORDLONG SlabOffsetDeltaInBytes;
    DWORD SlabAllocationBitMapBitCount;
    DWORD SlabAllocationBitMapLength;
    DWORD SlabAllocationBitMap[1];

} DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2, *PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;





typedef struct _STORAGE_OFFLOAD_READ_OUTPUT {

    DWORD OffloadReadFlags;
    DWORD Reserved;
    DWORDLONG LengthProtected;
    DWORD TokenLength;
    STORAGE_OFFLOAD_TOKEN Token;

} STORAGE_OFFLOAD_READ_OUTPUT, *PSTORAGE_OFFLOAD_READ_OUTPUT;







typedef struct _STORAGE_OFFLOAD_WRITE_OUTPUT {

    DWORD OffloadWriteFlags;
    DWORD Reserved;
    DWORDLONG LengthCopied;

} STORAGE_OFFLOAD_WRITE_OUTPUT, *PSTORAGE_OFFLOAD_WRITE_OUTPUT;
#line 1741 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {

    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;

} DEVICE_DATA_SET_SCRUB_OUTPUT, *PDEVICE_DATA_SET_SCRUB_OUTPUT;
#line 1756 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {

    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;

    DEVICE_DATA_SET_RANGE ParityExtent;

} DEVICE_DATA_SET_SCRUB_EX_OUTPUT, *PDEVICE_DATA_SET_SCRUB_EX_OUTPUT;
#line 1773 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICE_DATA_SET_REPAIR_OUTPUT {

    DEVICE_DATA_SET_RANGE ParityExtent;

} DEVICE_DATA_SET_REPAIR_OUTPUT, *PDEVICE_DATA_SET_REPAIR_OUTPUT;
#line 1795 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {





    DWORD MaximumRequestsPerPeriod;





    DWORD MinimumPeriod;







    DWORDLONG MaximumRequestSize;






    DWORD EstimatedTimePerRequest;
#line 1831 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORD NumOutStandingRequests;






    DWORDLONG RequestSize;

} STORAGE_GET_BC_PROPERTIES_OUTPUT, *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;
#line 1859 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {




    DWORD Version;





    DWORD RequestsPerPeriod;





    DWORD Period;





    BOOLEAN RetryFailures;





    BOOLEAN Discardable;




    BOOLEAN Reserved1[2];





    DWORD AccessType;





    DWORD AccessMode;

} STORAGE_ALLOCATE_BC_STREAM_INPUT, *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;

typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {





    DWORDLONG RequestSize;






    DWORD NumOutStandingRequests;

} STORAGE_ALLOCATE_BC_STREAM_OUTPUT, *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
#line 1948 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_PRIORITY_HINT_SUPPORT {
    DWORD SupportFlags;
} STORAGE_PRIORITY_HINT_SUPPORT, *PSTORAGE_PRIORITY_HINT_SUPPORT;



#pragma warning(push)
#pragma warning(disable: 4200)



typedef struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {

    WORD Reserved;







    WORD SerialNumberLength;
#line 1978 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    BYTE SerialNumber[0];


} STORAGE_MEDIA_SERIAL_NUMBER_DATA, *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;



typedef struct _STORAGE_READ_CAPACITY {




    DWORD Version;




    DWORD Size;





    DWORD BlockLength;






    LARGE_INTEGER NumberOfBlocks;





    LARGE_INTEGER DiskLength;

} STORAGE_READ_CAPACITY, *PSTORAGE_READ_CAPACITY;

#pragma warning(pop)








typedef enum _WRITE_CACHE_TYPE {
    WriteCacheTypeUnknown,
    WriteCacheTypeNone,
    WriteCacheTypeWriteBack,
    WriteCacheTypeWriteThrough
} WRITE_CACHE_TYPE;

typedef enum _WRITE_CACHE_ENABLE {
    WriteCacheEnableUnknown,
    WriteCacheDisabled,
    WriteCacheEnabled
} WRITE_CACHE_ENABLE;

typedef enum _WRITE_CACHE_CHANGE {
    WriteCacheChangeUnknown,
    WriteCacheNotChangeable,
    WriteCacheChangeable
} WRITE_CACHE_CHANGE;

typedef enum _WRITE_THROUGH {
    WriteThroughUnknown,
    WriteThroughNotSupported,
    WriteThroughSupported
} WRITE_THROUGH;

typedef struct _STORAGE_WRITE_CACHE_PROPERTY {





    DWORD Version;





    DWORD Size;




    WRITE_CACHE_TYPE WriteCacheType;




    WRITE_CACHE_ENABLE WriteCacheEnabled;




    WRITE_CACHE_CHANGE WriteCacheChangeable;




    WRITE_THROUGH WriteThroughSupported;




    BOOLEAN FlushCacheSupported;




    BOOLEAN UserDefinedPowerProtection;




    BOOLEAN NVCacheEnabled;

} STORAGE_WRITE_CACHE_PROPERTY, *PSTORAGE_WRITE_CACHE_PROPERTY;

#pragma warning(push)
#pragma warning(disable: 4200)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)




typedef struct _PERSISTENT_RESERVE_COMMAND {

    DWORD Version;
    DWORD Size;

    union {

        struct {





            BYTE ServiceAction : 5;
            BYTE Reserved1 : 3;





            WORD AllocationLength;

        } PR_IN;

        struct {





            BYTE ServiceAction : 5;
            BYTE Reserved1 : 3;





            BYTE Type : 4;
            BYTE Scope : 4;






            BYTE ParameterList[0];


        } PR_OUT;
    };

} PERSISTENT_RESERVE_COMMAND, *PPERSISTENT_RESERVE_COMMAND;


#pragma warning(pop)
#line 2176 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(push)
#line 2200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _DEVICEDUMP_COLLECTION_TYPE {
    TCCollectionBugCheck = 1,
    TCCollectionApplicationRequested,
    TCCollectionDeviceRequested
} DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE, *PDEVICEDUMP_COLLECTION_TYPE;
#line 2218 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 2218 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 2237 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICEDUMP_SUBSECTION_POINTER {
        DWORD dwSize;
        DWORD dwFlags;
        DWORD dwOffset;
} DEVICEDUMP_SUBSECTION_POINTER,*PDEVICEDUMP_SUBSECTION_POINTER;




typedef struct _DEVICEDUMP_STRUCTURE_VERSION {



        DWORD dwSignature;




        DWORD dwVersion;




        DWORD dwSize;

} DEVICEDUMP_STRUCTURE_VERSION, *PDEVICEDUMP_STRUCTURE_VERSION;




typedef struct _DEVICEDUMP_SECTION_HEADER {



        GUID guidDeviceDataId;
#line 2283 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
        BYTE sOrganizationID[16];




        DWORD dwFirmwareRevision;




        BYTE sModelNumber[32];




        BYTE szDeviceManufacturingID[32];






        DWORD dwFlags;




        DWORD bRestrictedPrivateDataVersion;





        DWORD dwFirmwareIssueId;




        BYTE szIssueDescriptionString[132];

} DEVICEDUMP_SECTION_HEADER, *PDEVICEDUMP_SECTION_HEADER;
#line 2350 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _GP_LOG_PAGE_DESCRIPTOR {
        WORD LogAddress;
        WORD LogSectors;
} GP_LOG_PAGE_DESCRIPTOR,*PGP_LOG_PAGE_DESCRIPTOR;

typedef struct _DEVICEDUMP_PUBLIC_SUBSECTION {
        DWORD dwFlags;
        GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
        CHAR szDescription[16];
        BYTE bData[1];
} DEVICEDUMP_PUBLIC_SUBSECTION, *PDEVICEDUMP_PUBLIC_SUBSECTION;




typedef struct _DEVICEDUMP_RESTRICTED_SUBSECTION {

        BYTE bData[1];

} DEVICEDUMP_RESTRICTED_SUBSECTION, *PDEVICEDUMP_RESTRICTED_SUBSECTION;




typedef struct _DEVICEDUMP_PRIVATE_SUBSECTION {

        DWORD dwFlags;
        GP_LOG_PAGE_DESCRIPTOR GPLogId;

        BYTE bData[1];

} DEVICEDUMP_PRIVATE_SUBSECTION, *PDEVICEDUMP_PRIVATE_SUBSECTION;




typedef struct _DEVICEDUMP_STORAGEDEVICE_DATA {




        DEVICEDUMP_STRUCTURE_VERSION Descriptor;




        DEVICEDUMP_SECTION_HEADER SectionHeader;




        DWORD dwBufferSize;




        DWORD dwReasonForCollection;




        DEVICEDUMP_SUBSECTION_POINTER PublicData;
        DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
        DEVICEDUMP_SUBSECTION_POINTER PrivateData;

} DEVICEDUMP_STORAGEDEVICE_DATA, *PDEVICEDUMP_STORAGEDEVICE_DATA;
#line 2435 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {

        BYTE Cdb[16];


        BYTE Command[16];


        DWORDLONG StartTime;


        DWORDLONG EndTime;


        DWORD OperationStatus;


        DWORD OperationError;


        union {
         struct {
                DWORD dwReserved;
                } ExternalStack;

         struct {
                DWORD dwAtaPortSpecific;
         } AtaPort;

         struct {
                DWORD SrbTag ;
         } StorPort;

        } StackSpecific;

} DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD,*PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;


typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {




        DEVICEDUMP_STRUCTURE_VERSION Descriptor;




        DWORD dwReasonForCollection;




        BYTE cDriverName[16];





        DWORD uiNumRecords;

        DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];

} DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP,*PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 2501 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 2513 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(push)
#pragma warning(disable: 4214)
#line 2526 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_IDLE_POWER {
    DWORD Version;
    DWORD Size;
    DWORD WakeCapableHint : 1;
    DWORD D3ColdSupported : 1;
    DWORD Reserved : 30;
    DWORD D3IdleTimeout;
} STORAGE_IDLE_POWER, *PSTORAGE_IDLE_POWER;

#pragma warning(pop)
#line 2546 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _STORAGE_POWERUP_REASON_TYPE {
  StoragePowerupUnknown = 0,
  StoragePowerupIO,
  StoragePowerupDeviceAttention
} STORAGE_POWERUP_REASON_TYPE, *PSTORAGE_POWERUP_REASON_TYPE;

typedef struct _STORAGE_IDLE_POWERUP_REASON {
    DWORD Version;
    DWORD Size;
    STORAGE_POWERUP_REASON_TYPE PowerupReason;
} STORAGE_IDLE_POWERUP_REASON, *PSTORAGE_IDLE_POWERUP_REASON;
#line 2569 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STORAGE_EVENT_NOTIFICATION {
    DWORD Version;
    DWORD Size;
    DWORDLONG Events;
} STORAGE_EVENT_NOTIFICATION, *PSTORAGE_EVENT_NOTIFICATION;
#line 2583 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(pop)
#line 2595 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
}
#line 2612 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(push)
#pragma warning(disable: 4201)
#pragma warning(disable: 4214)
#line 2874 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _MEDIA_TYPE {
    Unknown,
    F5_1Pt2_512,
    F3_1Pt44_512,
    F3_2Pt88_512,
    F3_20Pt8_512,
    F3_720_512,
    F5_360_512,
    F5_320_512,
    F5_320_1024,
    F5_180_512,
    F5_160_512,
    RemovableMedia,
    FixedMedia,
    F3_120M_512,
    F3_640_512,
    F5_640_512,
    F5_720_512,
    F3_1Pt2_512,
    F3_1Pt23_1024,
    F5_1Pt23_1024,
    F3_128Mb_512,
    F3_230Mb_512,
    F8_256_128,
    F3_200Mb_512,
    F3_240M_512,
    F3_32M_512
} MEDIA_TYPE, *PMEDIA_TYPE;






typedef struct _FORMAT_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
} FORMAT_PARAMETERS, *PFORMAT_PARAMETERS;
#line 2923 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef WORD BAD_TRACK_NUMBER;
typedef WORD *PBAD_TRACK_NUMBER;






typedef struct _FORMAT_EX_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
   WORD FormatGapLength;
   WORD SectorsPerTrack;
   WORD SectorNumber[1];
} FORMAT_EX_PARAMETERS, *PFORMAT_EX_PARAMETERS;







typedef struct _DISK_GEOMETRY {
    LARGE_INTEGER Cylinders;
    MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
} DISK_GEOMETRY, *PDISK_GEOMETRY;
#line 2971 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _PARTITION_INFORMATION {
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
} PARTITION_INFORMATION, *PPARTITION_INFORMATION;







typedef struct _SET_PARTITION_INFORMATION {
    BYTE PartitionType;
} SET_PARTITION_INFORMATION, *PSET_PARTITION_INFORMATION;






typedef struct _DRIVE_LAYOUT_INFORMATION {
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION, *PDRIVE_LAYOUT_INFORMATION;






typedef struct _VERIFY_INFORMATION {
    LARGE_INTEGER StartingOffset;
    DWORD Length;
} VERIFY_INFORMATION, *PVERIFY_INFORMATION;






typedef struct _REASSIGN_BLOCKS {
    WORD Reserved;
    WORD Count;
    DWORD BlockNumber[1];
} REASSIGN_BLOCKS, *PREASSIGN_BLOCKS;







#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 3029 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"

typedef struct _REASSIGN_BLOCKS_EX {
    WORD Reserved;
    WORD Count;
    LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX, *PREASSIGN_BLOCKS_EX;

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 3035 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 3052 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _PARTITION_STYLE {
    PARTITION_STYLE_MBR,
    PARTITION_STYLE_GPT,
    PARTITION_STYLE_RAW
} PARTITION_STYLE;







typedef struct _PARTITION_INFORMATION_GPT {
    GUID PartitionType;
    GUID PartitionId;
    DWORD64 Attributes;
    WCHAR Name [36];
} PARTITION_INFORMATION_GPT, *PPARTITION_INFORMATION_GPT;
#line 3093 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _PARTITION_INFORMATION_MBR {
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    DWORD HiddenSectors;
} PARTITION_INFORMATION_MBR, *PPARTITION_INFORMATION_MBR;
#line 3109 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;


typedef struct _SET_PARTITION_INFORMATION_EX {
    PARTITION_STYLE PartitionStyle;
    union {
        SET_PARTITION_INFORMATION_MBR Mbr;
        SET_PARTITION_INFORMATION_GPT Gpt;
    } ;
} SET_PARTITION_INFORMATION_EX, *PSET_PARTITION_INFORMATION_EX;







typedef struct _CREATE_DISK_GPT {
    GUID DiskId;
    DWORD MaxPartitionCount;
} CREATE_DISK_GPT, *PCREATE_DISK_GPT;






typedef struct _CREATE_DISK_MBR {
    DWORD Signature;
} CREATE_DISK_MBR, *PCREATE_DISK_MBR;


typedef struct _CREATE_DISK {
    PARTITION_STYLE PartitionStyle;
    union {
        CREATE_DISK_MBR Mbr;
        CREATE_DISK_GPT Gpt;
    } ;
} CREATE_DISK, *PCREATE_DISK;
#line 3157 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _GET_LENGTH_INFORMATION {
    LARGE_INTEGER Length;
} GET_LENGTH_INFORMATION, *PGET_LENGTH_INFORMATION;







typedef struct _PARTITION_INFORMATION_EX {
    PARTITION_STYLE PartitionStyle;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD PartitionNumber;
    BOOLEAN RewritePartition;
    union {
        PARTITION_INFORMATION_MBR Mbr;
        PARTITION_INFORMATION_GPT Gpt;
    } ;
} PARTITION_INFORMATION_EX, *PPARTITION_INFORMATION_EX;






typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
    GUID DiskId;
    LARGE_INTEGER StartingUsableOffset;
    LARGE_INTEGER UsableLength;
    DWORD MaxPartitionCount;
} DRIVE_LAYOUT_INFORMATION_GPT, *PDRIVE_LAYOUT_INFORMATION_GPT;






typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
    DWORD Signature;
} DRIVE_LAYOUT_INFORMATION_MBR, *PDRIVE_LAYOUT_INFORMATION_MBR;






typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
    DWORD PartitionStyle;
    DWORD PartitionCount;
    union {
        DRIVE_LAYOUT_INFORMATION_MBR Mbr;
        DRIVE_LAYOUT_INFORMATION_GPT Gpt;
    } ;
    PARTITION_INFORMATION_EX PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION_EX, *PDRIVE_LAYOUT_INFORMATION_EX;
#line 3226 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _DETECTION_TYPE {
        DetectNone,
        DetectInt13,
        DetectExInt13
} DETECTION_TYPE;

typedef struct _DISK_INT13_INFO {
        WORD DriveSelect;
        DWORD MaxCylinders;
        WORD SectorsPerTrack;
        WORD MaxHeads;
        WORD NumberDrives;
} DISK_INT13_INFO, *PDISK_INT13_INFO;

typedef struct _DISK_EX_INT13_INFO {
        WORD ExBufferSize;
        WORD ExFlags;
        DWORD ExCylinders;
        DWORD ExHeads;
        DWORD ExSectorsPerTrack;
        DWORD64 ExSectorsPerDrive;
        WORD ExSectorSize;
        WORD ExReserved;
} DISK_EX_INT13_INFO, *PDISK_EX_INT13_INFO;


#pragma warning(push)
#pragma warning(disable: 4201)


typedef struct _DISK_DETECTION_INFO {
        DWORD SizeOfDetectInfo;
        DETECTION_TYPE DetectionType;
        union {
                struct {






                        DISK_INT13_INFO Int13;






                        DISK_EX_INT13_INFO ExInt13;
                } ;
        } ;
} DISK_DETECTION_INFO, *PDISK_DETECTION_INFO;


typedef struct _DISK_PARTITION_INFO {
        DWORD SizeOfPartitionInfo;
        PARTITION_STYLE PartitionStyle;
        union {
                struct {
                        DWORD Signature;
                        DWORD CheckSum;
                } Mbr;
                struct {
                        GUID DiskId;
                } Gpt;
        } ;
} DISK_PARTITION_INFO, *PDISK_PARTITION_INFO;


#pragma warning(pop)
#line 3319 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DISK_GEOMETRY_EX {
        DISK_GEOMETRY Geometry;
        LARGE_INTEGER DiskSize;
        BYTE Data[1];
} DISK_GEOMETRY_EX, *PDISK_GEOMETRY_EX;
#line 3334 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DISK_CONTROLLER_NUMBER {
    DWORD ControllerNumber;
    DWORD DiskNumber;
} DISK_CONTROLLER_NUMBER, *PDISK_CONTROLLER_NUMBER;
#line 3364 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum {
    EqualPriority,
    KeepPrefetchedData,
    KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;
#line 3378 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DISK_CACHE_INFORMATION {







    BOOLEAN ParametersSavable;





    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;
#line 3402 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;






    WORD DisablePrefetchTransferLength;







    BOOLEAN PrefetchScalar;
#line 3428 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    union {
        struct {
            WORD Minimum;
            WORD Maximum;






            WORD MaximumBlocks;
        } ScalarPrefetch;

        struct {
            WORD Minimum;
            WORD Maximum;
        } BlockPrefetch;
    } ;

} DISK_CACHE_INFORMATION, *PDISK_CACHE_INFORMATION;
#line 3456 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DISK_GROW_PARTITION {
    DWORD PartitionNumber;
    LARGE_INTEGER BytesToGrow;
} DISK_GROW_PARTITION, *PDISK_GROW_PARTITION;
#line 3480 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _HISTOGRAM_BUCKET {
    DWORD Reads;
    DWORD Writes;
} HISTOGRAM_BUCKET, *PHISTOGRAM_BUCKET;



typedef struct _DISK_HISTOGRAM {
    LARGE_INTEGER DiskSize;
    LARGE_INTEGER Start;
    LARGE_INTEGER End;
    LARGE_INTEGER Average;
    LARGE_INTEGER AverageRead;
    LARGE_INTEGER AverageWrite;
    DWORD Granularity;
    DWORD Size;
    DWORD ReadCount;
    DWORD WriteCount;
    PHISTOGRAM_BUCKET Histogram;
} DISK_HISTOGRAM, *PDISK_HISTOGRAM;
#line 3523 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DISK_PERFORMANCE {
        LARGE_INTEGER BytesRead;
        LARGE_INTEGER BytesWritten;
        LARGE_INTEGER ReadTime;
        LARGE_INTEGER WriteTime;
        LARGE_INTEGER IdleTime;
        DWORD ReadCount;
        DWORD WriteCount;
        DWORD QueueDepth;
        DWORD SplitCount;
        LARGE_INTEGER QueryTime;
        DWORD StorageDeviceNumber;
        WCHAR StorageManagerName[8];
} DISK_PERFORMANCE, *PDISK_PERFORMANCE;







typedef struct _DISK_RECORD {
   LARGE_INTEGER ByteOffset;
   LARGE_INTEGER StartTime;
   LARGE_INTEGER EndTime;
   PVOID VirtualAddress;
   DWORD NumberOfBytes;
   BYTE DeviceNumber;
   BOOLEAN ReadRequest;
} DISK_RECORD, *PDISK_RECORD;






typedef struct _DISK_LOGGING {
    BYTE Function;
    PVOID BufferAddress;
    DWORD BufferSize;
} DISK_LOGGING, *PDISK_LOGGING;
#line 3601 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _BIN_TYPES {
    RequestSize,
    RequestLocation
} BIN_TYPES;





typedef struct _BIN_RANGE {
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
} BIN_RANGE, *PBIN_RANGE;





typedef struct _PERF_BIN {
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE BinsRanges[1];
} PERF_BIN, *PPERF_BIN ;





typedef struct _BIN_COUNT {
    BIN_RANGE BinRange;
    DWORD BinCount;
} BIN_COUNT, *PBIN_COUNT;





typedef struct _BIN_RESULTS {
    DWORD NumberOfBins;
    BIN_COUNT BinCounts[1];
} BIN_RESULTS, *PBIN_RESULTS;
#line 3651 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 3651 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"

typedef struct _GETVERSIONINPARAMS {
        BYTE bVersion;
        BYTE bRevision;
        BYTE bReserved;
        BYTE bIDEDeviceMap;
        DWORD fCapabilities;
        DWORD dwReserved[4];
} GETVERSIONINPARAMS, *PGETVERSIONINPARAMS, *LPGETVERSIONINPARAMS;

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 3660 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 3674 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 3674 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"

typedef struct _IDEREGS {
        BYTE bFeaturesReg;
        BYTE bSectorCountReg;
        BYTE bSectorNumberReg;
        BYTE bCylLowReg;
        BYTE bCylHighReg;
        BYTE bDriveHeadReg;
        BYTE bCommandReg;
        BYTE bReserved;
} IDEREGS, *PIDEREGS, *LPIDEREGS;

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 3685 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 3710 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 3710 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"

typedef struct _SENDCMDINPARAMS {
        DWORD cBufferSize;
        IDEREGS irDriveRegs;
        BYTE bDriveNumber;

        BYTE bReserved[3];
        DWORD dwReserved[4];
        BYTE bBuffer[1];
} SENDCMDINPARAMS, *PSENDCMDINPARAMS, *LPSENDCMDINPARAMS;

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 3720 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"






#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 3726 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"

typedef struct _DRIVERSTATUS {
        BYTE bDriverError;

        BYTE bIDEError;


        BYTE bReserved[2];
        DWORD dwReserved[2];
} DRIVERSTATUS, *PDRIVERSTATUS, *LPDRIVERSTATUS;

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 3736 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 3765 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 3765 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"

typedef struct _SENDCMDOUTPARAMS {
        DWORD cBufferSize;
        DRIVERSTATUS DriverStatus;
        BYTE bBuffer[1];
} SENDCMDOUTPARAMS, *PSENDCMDOUTPARAMS, *LPSENDCMDOUTPARAMS;

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 3771 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#line 3817 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _GET_DISK_ATTRIBUTES {





    DWORD Version;




    DWORD Reserved1;





    DWORDLONG Attributes;

} GET_DISK_ATTRIBUTES, *PGET_DISK_ATTRIBUTES;
#line 3848 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _SET_DISK_ATTRIBUTES {





    DWORD Version;






    BOOLEAN Persist;




    BYTE Reserved1[3];




    DWORDLONG Attributes;





    DWORDLONG AttributesMask;




    DWORD Reserved2[4];

} SET_DISK_ATTRIBUTES, *PSET_DISK_ATTRIBUTES;






#pragma warning(pop)
#line 3930 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _ELEMENT_TYPE {
    AllElements,
    ChangerTransport,
    ChangerSlot,
    ChangerIEPort,
    ChangerDrive,
    ChangerDoor,
    ChangerKeypad,
    ChangerMaxElement
} ELEMENT_TYPE, *PELEMENT_TYPE;

typedef struct _CHANGER_ELEMENT {
    ELEMENT_TYPE ElementType;
    DWORD ElementAddress;
} CHANGER_ELEMENT, *PCHANGER_ELEMENT;

typedef struct _CHANGER_ELEMENT_LIST {
    CHANGER_ELEMENT Element;
    DWORD NumberOfElements;
} CHANGER_ELEMENT_LIST , *PCHANGER_ELEMENT_LIST;
#line 4040 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _GET_CHANGER_PARAMETERS {





    DWORD Size;





    WORD NumberTransportElements;
    WORD NumberStorageElements;
    WORD NumberCleanerSlots;
    WORD NumberIEElements;
    WORD NumberDataTransferElements;





    WORD NumberOfDoors;






    WORD FirstSlotNumber;
    WORD FirstDriveNumber;
    WORD FirstTransportNumber;
    WORD FirstIEPortNumber;
    WORD FirstCleanerSlotAddress;





    WORD MagazineSize;






    DWORD DriveCleanTimeout;





    DWORD Features0;
    DWORD Features1;






    BYTE MoveFromTransport;
    BYTE MoveFromSlot;
    BYTE MoveFromIePort;
    BYTE MoveFromDrive;






    BYTE ExchangeFromTransport;
    BYTE ExchangeFromSlot;
    BYTE ExchangeFromIePort;
    BYTE ExchangeFromDrive;






    BYTE LockUnlockCapabilities;






    BYTE PositionCapabilities;





    BYTE Reserved1[2];
    DWORD Reserved2[2];

} GET_CHANGER_PARAMETERS, * PGET_CHANGER_PARAMETERS;






typedef struct _CHANGER_PRODUCT_DATA {





    BYTE VendorId[8];





    BYTE ProductId[16];





    BYTE Revision[4];






    BYTE SerialNumber[32];





    BYTE DeviceType;

} CHANGER_PRODUCT_DATA, *PCHANGER_PRODUCT_DATA;
#line 4188 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _CHANGER_SET_ACCESS {





    CHANGER_ELEMENT Element;





    DWORD Control;
} CHANGER_SET_ACCESS, *PCHANGER_SET_ACCESS;
#line 4212 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _CHANGER_READ_ELEMENT_STATUS {





    CHANGER_ELEMENT_LIST ElementList;





    BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS, *PCHANGER_READ_ELEMENT_STATUS;





typedef struct _CHANGER_ELEMENT_STATUS {





    CHANGER_ELEMENT Element;







    CHANGER_ELEMENT SrcElementAddress;





    DWORD Flags;





    DWORD ExceptionCode;






    BYTE TargetId;






    BYTE Lun;
    WORD Reserved;






    BYTE PrimaryVolumeID[36];







    BYTE AlternateVolumeID[36];

} CHANGER_ELEMENT_STATUS, *PCHANGER_ELEMENT_STATUS;







typedef struct _CHANGER_ELEMENT_STATUS_EX {





    CHANGER_ELEMENT Element;







    CHANGER_ELEMENT SrcElementAddress;





    DWORD Flags;





    DWORD ExceptionCode;






    BYTE TargetId;






    BYTE Lun;
    WORD Reserved;






    BYTE PrimaryVolumeID[36];







    BYTE AlternateVolumeID[36];




    BYTE VendorIdentification[8];




    BYTE ProductIdentification[16];




    BYTE SerialNumber[32];

} CHANGER_ELEMENT_STATUS_EX, *PCHANGER_ELEMENT_STATUS_EX;
#line 4411 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {





    CHANGER_ELEMENT_LIST ElementList;






    BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS, *PCHANGER_INITIALIZE_ELEMENT_STATUS;






typedef struct _CHANGER_SET_POSITION {






    CHANGER_ELEMENT Transport;





    CHANGER_ELEMENT Destination;





    BOOLEAN Flip;
} CHANGER_SET_POSITION, *PCHANGER_SET_POSITION;






typedef struct _CHANGER_EXCHANGE_MEDIUM {





    CHANGER_ELEMENT Transport;





    CHANGER_ELEMENT Source;





    CHANGER_ELEMENT Destination1;





    CHANGER_ELEMENT Destination2;





    BOOLEAN Flip1;
    BOOLEAN Flip2;
} CHANGER_EXCHANGE_MEDIUM, *PCHANGER_EXCHANGE_MEDIUM;






typedef struct _CHANGER_MOVE_MEDIUM {





    CHANGER_ELEMENT Transport;





    CHANGER_ELEMENT Source;





    CHANGER_ELEMENT Destination;





    BOOLEAN Flip;
} CHANGER_MOVE_MEDIUM, *PCHANGER_MOVE_MEDIUM;
#line 4535 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {





    CHANGER_ELEMENT StartingElement;





    DWORD ActionCode;





    BYTE VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION, *PCHANGER_SEND_VOLUME_TAG_INFORMATION;






typedef struct _READ_ELEMENT_ADDRESS_INFO {





    DWORD NumberOfElements;






    CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO, *PREAD_ELEMENT_ADDRESS_INFO;
#line 4602 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
   DeviceProblemNone,
   DeviceProblemHardware,
   DeviceProblemCHMError,
   DeviceProblemDoorOpen,
   DeviceProblemCalibrationError,
   DeviceProblemTargetFailure,
   DeviceProblemCHMMoveError,
   DeviceProblemCHMZeroError,
   DeviceProblemCartridgeInsertError,
   DeviceProblemPositionError,
   DeviceProblemSensorError,
   DeviceProblemCartridgeEjectError,
   DeviceProblemGripperError,
   DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE, *PCHANGER_DEVICE_PROBLEM_TYPE;
#line 4942 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _PATHNAME_BUFFER {

    DWORD PathNameLength;
    WCHAR Name[1];

} PATHNAME_BUFFER, *PPATHNAME_BUFFER;







typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {

    BYTE First0x24BytesOfBootSector[0x24];

} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;
#line 4972 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;

} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;

typedef struct {

    DWORD ByteCount;

    WORD MajorVersion;
    WORD MinorVersion;

    DWORD BytesPerPhysicalSector;

    WORD LfsMajorVersion;
    WORD LfsMinorVersion;

} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA;
#line 5015 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    DWORD ByteCount;
    DWORD MajorVersion;
    DWORD MinorVersion;

    DWORD BytesPerPhysicalSector;

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    LARGE_INTEGER MaximumSizeOfResidentFile;

    LARGE_INTEGER Reserved[10];

} REFS_VOLUME_DATA_BUFFER, *PREFS_VOLUME_DATA_BUFFER;
#line 5046 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    LARGE_INTEGER StartingLcn;

} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;

typedef struct {

    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE Buffer[1];

} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;
#line 5068 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    LARGE_INTEGER StartingVcn;

} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER {

    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    } Extents[1];

} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;
#line 5093 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    LARGE_INTEGER FileReferenceNumber;

} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct {

    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE FileRecordBuffer[1];

} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
#line 5115 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;

} MOVE_FILE_DATA, *PMOVE_FILE_DATA;

typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER SourceFileRecord;
    LARGE_INTEGER TargetFileRecord;

} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA;
#line 5156 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {
    DWORD Restart;
    SID Sid;
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA;

typedef struct {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT;
#line 5181 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;

} MFT_ENUM_DATA_V0, *PMFT_ENUM_DATA_V0;

typedef struct {

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} MFT_ENUM_DATA_V1, *PMFT_ENUM_DATA_V1;


typedef MFT_ENUM_DATA_V1 MFT_ENUM_DATA, *PMFT_ENUM_DATA;
#line 5211 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA;
#line 5230 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} READ_FILE_USN_DATA, *PREAD_FILE_USN_DATA;
#line 5244 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;

} READ_USN_JOURNAL_DATA_V0, *PREAD_USN_JOURNAL_DATA_V0;

typedef struct {

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;

} READ_USN_JOURNAL_DATA_V1, *PREAD_USN_JOURNAL_DATA_V1;


typedef READ_USN_JOURNAL_DATA_V1 READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA;
#line 5280 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {
    DWORD Flags;
    DWORD Unused;
    DWORDLONG ChunkSize;
    LONGLONG FileSizeThreshold;
} USN_TRACK_MODIFIED_RANGES, *PUSN_TRACK_MODIFIED_RANGES;

typedef struct {
    USN Usn;
} USN_RANGE_TRACK_OUTPUT, *PUSN_RANGE_TRACK_OUTPUT;
#line 5313 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V2, *PUSN_RECORD_V2;

typedef struct {

    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V3, *PUSN_RECORD_V3;

typedef USN_RECORD_V2 USN_RECORD, *PUSN_RECORD;

typedef struct {
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
} USN_RECORD_COMMON_HEADER, *PUSN_RECORD_COMMON_HEADER;

typedef struct {
    LONGLONG Offset;
    LONGLONG Length;
} USN_RECORD_EXTENT, *PUSN_RECORD_EXTENT;

typedef struct {
    USN_RECORD_COMMON_HEADER Header;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD RemainingExtents;
    WORD NumberOfExtents;
    WORD ExtentSize;
    USN_RECORD_EXTENT Extents[1];
} USN_RECORD_V4, *PUSN_RECORD_V4;

typedef union {
    USN_RECORD_COMMON_HEADER Header;
    USN_RECORD_V2 V2;
    USN_RECORD_V3 V3;
    USN_RECORD_V4 V4;
} USN_RECORD_UNION, *PUSN_RECORD_UNION;
#line 5416 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} USN_JOURNAL_DATA_V0, *PUSN_JOURNAL_DATA_V0;

typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;

} USN_JOURNAL_DATA_V1, *PUSN_JOURNAL_DATA_V1;

typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;
    DWORD Flags;
    DWORDLONG RangeTrackChunkSize;
    LONGLONG RangeTrackFileSizeThreshold;

} USN_JOURNAL_DATA_V2, *PUSN_JOURNAL_DATA_V2;



typedef USN_JOURNAL_DATA_V1 USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;
#line 5472 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;

} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA;
#line 5491 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct {


    union {
        DWORD UsnSourceInfo;
        DWORD CopyNumber;
    };




    HANDLE VolumeHandle;
    DWORD HandleInfo;

} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO;
#line 5533 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(pop)
#line 5625 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct {

    ACCESS_MASK DesiredAccess;
    DWORD SecurityIds[1];

} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA;
#line 5650 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_PREFETCH {
    DWORD Type;
    DWORD Count;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH, *PFILE_PREFETCH;

typedef struct _FILE_PREFETCH_EX {
    DWORD Type;
    DWORD Count;
    PVOID Context;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH_EX, *PFILE_PREFETCH_EX;
#line 5680 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILESYSTEM_STATISTICS {

    WORD FileSystemType;
    WORD Version;

    DWORD SizeOfCompleteStructure;

    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;

    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;





} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;
#line 5718 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FAT_STATISTICS {
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS;

typedef struct _EXFAT_STATISTICS {
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;

typedef struct _NTFS_STATISTICS {

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;





    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftWritesUserLevel;

    WORD MftWritesFlushForLogFileFull;
    WORD MftWritesLazyWriter;
    WORD MftWritesUserRequest;

    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } Mft2WritesUserLevel;

    WORD Mft2WritesFlushForLogFileFull;
    WORD Mft2WritesLazyWriter;
    WORD Mft2WritesUserRequest;

    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;

    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;

    WORD BitmapWritesFlushForLogFileFull;
    WORD BitmapWritesLazyWriter;
    WORD BitmapWritesUserRequest;

    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
    } BitmapWritesUserLevel;

    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;

    WORD MftBitmapWritesFlushForLogFileFull;
    WORD MftBitmapWritesLazyWriter;
    WORD MftBitmapWritesUserRequest;

    struct {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftBitmapWritesUserLevel;

    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;





    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;

    struct {
        DWORD Calls;
        DWORD Clusters;
        DWORD Hints;

        DWORD RunsReturned;

        DWORD HintsHonored;
        DWORD HintsClusters;
        DWORD Cache;
        DWORD CacheClusters;
        DWORD CacheMiss;
        DWORD CacheMissClusters;
    } Allocate;





    DWORD DiskResourcesExhausted;

} NTFS_STATISTICS, *PNTFS_STATISTICS;
#line 5867 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct _FILE_OBJECTID_BUFFER {





    BYTE ObjectId[16];






    union {
        struct {
            BYTE BirthVolumeId[16];
            BYTE BirthObjectId[16];
            BYTE DomainId[16];
        } ;
        BYTE ExtendedInfo[48];
    } ;

} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;


#pragma warning(pop)
#line 5911 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_SET_SPARSE_BUFFER {
    BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER, *PFILE_SET_SPARSE_BUFFER;
#line 5926 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_ZERO_DATA_INFORMATION {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;

} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION;
#line 5948 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_ALLOCATED_RANGE_BUFFER {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;

} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER;
#line 5971 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _ENCRYPTION_BUFFER {

    DWORD EncryptionOperation;
    BYTE Private[1];

} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER;
#line 5990 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DECRYPTION_STATUS_BUFFER {

    BOOLEAN NoEncryptedStreams;

} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER;
#line 6004 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
#line 6013 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    LONGLONG FileOffset;
    DWORD Length;

} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA;
#line 6042 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _ENCRYPTED_DATA_INFO {
#line 6051 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORDLONG StartingFileOffset;
#line 6061 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORD OutputBufferOffset;
#line 6072 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORD BytesWithinFileSize;
#line 6083 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORD BytesWithinValidDataLength;
#line 6092 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    WORD CompressionFormat;
#line 6113 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    BYTE DataUnitShift;
    BYTE ChunkShift;
    BYTE ClusterShift;





    BYTE EncryptionFormat;






    WORD NumberOfDataBlocks;
#line 6156 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORD DataBlockSize[1];

} ENCRYPTED_DATA_INFO, *PENCRYPTED_DATA_INFO;
#line 6171 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {
#line 6180 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORD ExtendedCode;





    DWORD Length;





    DWORD Flags;
    DWORD Reserved;

} EXTENDED_ENCRYPTED_DATA_INFO, *PEXTENDED_ENCRYPTED_DATA_INFO;
#line 6208 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _PLEX_READ_DATA_REQUEST {
#line 6220 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;

} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST;
#line 6237 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _SI_COPYFILE {
    DWORD SourceFileNameLength;
    DWORD DestinationFileNameLength;
    DWORD Flags;
    WCHAR FileNameBuffer[1];
} SI_COPYFILE, *PSI_COPYFILE;
#line 6256 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
    BOOLEAN CloseDisc;
} FILE_MAKE_COMPATIBLE_BUFFER, *PFILE_MAKE_COMPATIBLE_BUFFER;







typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
    BOOLEAN Disable;
} FILE_SET_DEFECT_MGMT_BUFFER, *PFILE_SET_DEFECT_MGMT_BUFFER;







typedef struct _FILE_QUERY_SPARING_BUFFER {
    DWORD SparingUnitBytes;
    BOOLEAN SoftwareSparing;
    DWORD TotalSpareBlocks;
    DWORD FreeSpareBlocks;
} FILE_QUERY_SPARING_BUFFER, *PFILE_QUERY_SPARING_BUFFER;







typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
    LARGE_INTEGER DirectoryCount;
    LARGE_INTEGER FileCount;
    WORD FsFormatMajVersion;
    WORD FsFormatMinVersion;
    WCHAR FsFormatName[ 12];
    LARGE_INTEGER FormatTime;
    LARGE_INTEGER LastUpdateTime;
    WCHAR CopyrightInfo[ 34];
    WCHAR AbstractInfo[ 34];
    WCHAR FormattingImplementationInfo[ 34];
    WCHAR LastModifyingImplementationInfo[ 34];
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER, *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
#line 6368 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef DWORDLONG CLSN;

typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
    DWORDLONG Hint1;
    DWORDLONG Hint2;
    CLSN Clsn;
    DWORD Status;
} FILE_INITIATE_REPAIR_OUTPUT_BUFFER, *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;







typedef enum _SHRINK_VOLUME_REQUEST_TYPES
{
    ShrinkPrepare = 1,
    ShrinkCommit,
    ShrinkAbort

} SHRINK_VOLUME_REQUEST_TYPES, *PSHRINK_VOLUME_REQUEST_TYPES;

typedef struct _SHRINK_VOLUME_INFORMATION
{
    SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
    DWORDLONG Flags;
    LONGLONG NewNumberOfSectors;

} SHRINK_VOLUME_INFORMATION, *PSHRINK_VOLUME_INFORMATION;
#line 6468 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_MODIFY_RM {





    DWORD Flags;





    DWORD LogContainerCountMax;





    DWORD LogContainerCountMin;





    DWORD LogContainerCount;







    DWORD LogGrowthIncrement;






    DWORD LogAutoShrinkPercentage;





    DWORDLONG Reserved;






    WORD LoggingMode;

} TXFS_MODIFY_RM,
 *PTXFS_MODIFY_RM;
#line 6570 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_QUERY_RM_INFORMATION {






    DWORD BytesRequired;





    DWORDLONG TailLsn;





    DWORDLONG CurrentLsn;





    DWORDLONG ArchiveTailLsn;





    DWORDLONG LogContainerSize;





    LARGE_INTEGER HighestVirtualClock;





    DWORD LogContainerCount;





    DWORD LogContainerCountMax;





    DWORD LogContainerCountMin;







    DWORD LogGrowthIncrement;







    DWORD LogAutoShrinkPercentage;






    DWORD Flags;





    WORD LoggingMode;





    WORD Reserved;





    DWORD RmState;





    DWORDLONG LogCapacity;





    DWORDLONG LogFree;





    DWORDLONG TopsSize;





    DWORDLONG TopsUsed;





    DWORDLONG TransactionCount;





    DWORDLONG OnePCCount;





    DWORDLONG TwoPCCount;





    DWORDLONG NumberLogFileFull;





    DWORDLONG OldestTransactionAge;





    GUID RMName;






    DWORD TmLogPathOffset;

} TXFS_QUERY_RM_INFORMATION,
 *PTXFS_QUERY_RM_INFORMATION;
#line 6751 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
    LARGE_INTEGER LastVirtualClock;
    DWORDLONG LastRedoLsn;
    DWORDLONG HighestRecoveryLsn;
    DWORD Flags;
} TXFS_ROLLFORWARD_REDO_INFORMATION,
 *PTXFS_ROLLFORWARD_REDO_INFORMATION;



#pragma deprecated(TXFS_ROLLFORWARD_REDO_INFORMATION)
#pragma deprecated(PTXFS_ROLLFORWARD_REDO_INFORMATION)
#line 6817 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_START_RM_INFORMATION {





    DWORD Flags;





    DWORDLONG LogContainerSize;





    DWORD LogContainerCountMin;





    DWORD LogContainerCountMax;







    DWORD LogGrowthIncrement;





    DWORD LogAutoShrinkPercentage;







    DWORD TmLogPathOffset;






    WORD TmLogPathLength;







    WORD LoggingMode;






    WORD LogPathLength;





    WORD Reserved;






    WCHAR LogPath[1];

} TXFS_START_RM_INFORMATION,
 *PTXFS_START_RM_INFORMATION;



#pragma deprecated(TXFS_START_RM_INFORMATION)
#pragma deprecated(PTXFS_START_RM_INFORMATION)
#line 6916 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_GET_METADATA_INFO_OUT {





    struct {
        LONGLONG LowPart;
        LONGLONG HighPart;
    } TxfFileId;





    GUID LockingTransaction;





    DWORDLONG LastLsn;





    DWORD TransactionState;

} TXFS_GET_METADATA_INFO_OUT, *PTXFS_GET_METADATA_INFO_OUT;
#line 6966 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {






    DWORDLONG Offset;






    DWORD NameFlags;





    LONGLONG FileId;





    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;





    WCHAR FileName[1];
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;


typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {





    GUID KtmTransaction;





    DWORDLONG NumberOfFiles;






    DWORDLONG BufferSizeRequired;






    DWORDLONG Offset;
} TXFS_LIST_TRANSACTION_LOCKED_FILES, *PTXFS_LIST_TRANSACTION_LOCKED_FILES;







typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {





    GUID TransactionId;





    DWORD TransactionState;





    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;
} TXFS_LIST_TRANSACTIONS_ENTRY, *PTXFS_LIST_TRANSACTIONS_ENTRY;

typedef struct _TXFS_LIST_TRANSACTIONS {





    DWORDLONG NumberOfTransactions;







    DWORDLONG BufferSizeRequired;
} TXFS_LIST_TRANSACTIONS, *PTXFS_LIST_TRANSACTIONS;
#line 7087 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
    union {





        DWORD BufferLength;





        BYTE Buffer[1];
    } ;
} TXFS_READ_BACKUP_INFORMATION_OUT, *PTXFS_READ_BACKUP_INFORMATION_OUT;


#pragma warning(pop)
#line 7120 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_WRITE_BACKUP_INFORMATION {






    BYTE Buffer[1];
} TXFS_WRITE_BACKUP_INFORMATION, *PTXFS_WRITE_BACKUP_INFORMATION;
#line 7139 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_GET_TRANSACTED_VERSION {







    DWORD ThisBaseVersion;





    DWORD LatestVersion;






    WORD ThisMiniVersion;






    WORD FirstMiniVersion;






    WORD LatestMiniVersion;

} TXFS_GET_TRANSACTED_VERSION, *PTXFS_GET_TRANSACTED_VERSION;
#line 7213 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_SAVEPOINT_INFORMATION {





    HANDLE KtmTransaction;





    DWORD ActionCode;
#line 7237 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORD SavepointId;

} TXFS_SAVEPOINT_INFORMATION, *PTXFS_SAVEPOINT_INFORMATION;



#pragma deprecated(TXFS_SAVEPOINT_INFORMATION)
#pragma deprecated(PTXFS_SAVEPOINT_INFORMATION)
#line 7256 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_CREATE_MINIVERSION_INFO {

    WORD StructureVersion;

    WORD StructureLength;





    DWORD BaseVersion;





    WORD MiniVersion;

} TXFS_CREATE_MINIVERSION_INFO, *PTXFS_CREATE_MINIVERSION_INFO;



#pragma deprecated(TXFS_CREATE_MINIVERSION_INFO)
#pragma deprecated(PTXFS_CREATE_MINIVERSION_INFO)
#line 7289 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {





    BOOLEAN TransactionsActiveAtSnapshot;

} TXFS_TRANSACTION_ACTIVE_INFO, *PTXFS_TRANSACTION_ACTIVE_INFO;
#line 7310 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _BOOT_AREA_INFO {

    DWORD BootSectorCount;
    struct {
        LARGE_INTEGER Offset;
    } BootSectors[2];

} BOOT_AREA_INFO, *PBOOT_AREA_INFO;







typedef struct _RETRIEVAL_POINTER_BASE {

    LARGE_INTEGER FileAreaOffset;
} RETRIEVAL_POINTER_BASE, *PRETRIEVAL_POINTER_BASE;
#line 7338 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {

    DWORD VolumeFlags;
    DWORD FlagMask;
    DWORD Version;
    DWORD Reserved;

} FILE_FS_PERSISTENT_VOLUME_INFORMATION, *PFILE_FS_PERSISTENT_VOLUME_INFORMATION;
#line 7376 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {

    CHAR FileSystem[9];

} FILE_SYSTEM_RECOGNITION_INFORMATION, *PFILE_SYSTEM_RECOGNITION_INFORMATION;
#line 7398 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {





    WORD StructureVersion;

    WORD StructureLength;





    DWORD RequestedOplockLevel;





    DWORD Flags;

} REQUEST_OPLOCK_INPUT_BUFFER, *PREQUEST_OPLOCK_INPUT_BUFFER;




typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {





    WORD StructureVersion;

    WORD StructureLength;






    DWORD OriginalOplockLevel;







    DWORD NewOplockLevel;





    DWORD Flags;







    ACCESS_MASK AccessMode;

    WORD ShareMode;

} REQUEST_OPLOCK_OUTPUT_BUFFER, *PREQUEST_OPLOCK_OUTPUT_BUFFER;





#pragma warning(push)
#pragma warning(disable: 4200)
#pragma warning(disable: 4201)



typedef struct _VIRTUAL_STORAGE_TYPE
{
    DWORD DeviceId;
    GUID VendorId;
} VIRTUAL_STORAGE_TYPE, *PVIRTUAL_STORAGE_TYPE;






typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
    DWORD RequestLevel;
    DWORD RequestFlags;
} STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST, *PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;




typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
    DWORD EntryLength;
    DWORD DependencyTypeFlags;
    DWORD ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
    DWORD EntryLength;
    DWORD DependencyTypeFlags;
    DWORD ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
    DWORD AncestorLevel;
    DWORD HostVolumeNameOffset;
    DWORD HostVolumeNameSize;
    DWORD DependentVolumeNameOffset;
    DWORD DependentVolumeNameSize;
    DWORD RelativePathOffset;
    DWORD RelativePathSize;
    DWORD DependentDeviceNameOffset;
    DWORD DependentDeviceNameSize;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
    DWORD ResponseLevel;
    DWORD NumberEntries;
    union {
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
    };
} STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE, *PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;

#pragma warning(pop)
#line 7550 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _SD_CHANGE_MACHINE_SID_INPUT {
#line 7560 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    WORD CurrentMachineSIDOffset;
    WORD CurrentMachineSIDLength;
#line 7571 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    WORD NewMachineSIDOffset;
    WORD NewMachineSIDLength;

} SD_CHANGE_MACHINE_SID_INPUT, *PSD_CHANGE_MACHINE_SID_INPUT;

typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {





    DWORDLONG NumSDChangedSuccess;





    DWORDLONG NumSDChangedFail;





    DWORDLONG NumSDUnused;





    DWORDLONG NumSDTotal;





    DWORDLONG NumMftSDChangedSuccess;





    DWORDLONG NumMftSDChangedFail;





    DWORDLONG NumMftSDTotal;

} SD_CHANGE_MACHINE_SID_OUTPUT, *PSD_CHANGE_MACHINE_SID_OUTPUT;





typedef struct _SD_QUERY_STATS_INPUT {

    DWORD Reserved;

} SD_QUERY_STATS_INPUT, *PSD_QUERY_STATS_INPUT;

typedef struct _SD_QUERY_STATS_OUTPUT {






    DWORDLONG SdsStreamSize;
    DWORDLONG SdsAllocationSize;






    DWORDLONG SiiStreamSize;
    DWORDLONG SiiAllocationSize;






    DWORDLONG SdhStreamSize;
    DWORDLONG SdhAllocationSize;






    DWORDLONG NumSDTotal;






    DWORDLONG NumSDUnused;

} SD_QUERY_STATS_OUTPUT, *PSD_QUERY_STATS_OUTPUT;





typedef struct _SD_ENUM_SDS_INPUT {
#line 7690 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORDLONG StartingOffset;







    DWORDLONG MaxSDEntriesToReturn;

} SD_ENUM_SDS_INPUT, *PSD_ENUM_SDS_INPUT;

typedef struct _SD_ENUM_SDS_ENTRY {





    DWORD Hash;





    DWORD SecurityId;






    DWORDLONG Offset;






    DWORD Length;





    BYTE Descriptor[1];

} SD_ENUM_SDS_ENTRY, *PSD_ENUM_SDS_ENTRY;

typedef struct _SD_ENUM_SDS_OUTPUT {
#line 7748 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    DWORDLONG NextOffset;





    DWORDLONG NumSDEntriesReturned;





    DWORDLONG NumSDBytesReturned;
#line 7770 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    SD_ENUM_SDS_ENTRY SDEntry[1];

} SD_ENUM_SDS_OUTPUT, *PSD_ENUM_SDS_OUTPUT;






#pragma warning(push)

#pragma warning(disable: 4201)

typedef struct _SD_GLOBAL_CHANGE_INPUT
{




    DWORD Flags;






    DWORD ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_INPUT SdChange;
        SD_QUERY_STATS_INPUT SdQueryStats;
        SD_ENUM_SDS_INPUT SdEnumSds;
    };

} SD_GLOBAL_CHANGE_INPUT, *PSD_GLOBAL_CHANGE_INPUT;

typedef struct _SD_GLOBAL_CHANGE_OUTPUT
{





    DWORD Flags;





    DWORD ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
        SD_QUERY_STATS_OUTPUT SdQueryStats;
        SD_ENUM_SDS_OUTPUT SdEnumSds;
    };

} SD_GLOBAL_CHANGE_OUTPUT, *PSD_GLOBAL_CHANGE_OUTPUT;


#pragma warning(pop)








typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {




    DWORD Flags;






    DWORD NumberOfClusters;




    LARGE_INTEGER Cluster[1];
} LOOKUP_STREAM_FROM_CLUSTER_INPUT, *PLOOKUP_STREAM_FROM_CLUSTER_INPUT;

typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {




    DWORD Offset;






    DWORD NumberOfMatches;





    DWORD BufferSizeRequired;
} LOOKUP_STREAM_FROM_CLUSTER_OUTPUT, *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
#line 7892 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {




    DWORD OffsetToNext;




    DWORD Flags;




    LARGE_INTEGER Reserved;





    LARGE_INTEGER Cluster;







    WCHAR FileName[1];
} LOOKUP_STREAM_FROM_CLUSTER_ENTRY, *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;
#line 7932 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_TYPE_NOTIFICATION_INPUT {






    DWORD Flags;





    DWORD NumFileTypeIDs;





    GUID FileTypeID[1];

} FILE_TYPE_NOTIFICATION_INPUT, *PFILE_TYPE_NOTIFICATION_INPUT;
#line 7966 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
extern "C" const GUID FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE;
extern "C" const GUID FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE;
extern "C" const GUID FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE;





typedef struct _CSV_MGMT_LOCK {
    DWORD Flags;
}CSV_MGMT_LOCK, *PCSV_MGMT_LOCK;







typedef struct _CSV_NAMESPACE_INFO {

    DWORD Version;
    DWORD DeviceNumber;
    LARGE_INTEGER StartingOffset;
    DWORD SectorSize;

} CSV_NAMESPACE_INFO, *PCSV_NAMESPACE_INFO;
#line 8000 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _CSV_CONTROL_OP {
    CsvControlStartRedirectFile = 0x02,
    CsvControlStopRedirectFile = 0x03,
    CsvControlQueryRedirectState = 0x04,
    CsvControlQueryFileRevision = 0x06,
    CsvControlQueryMdsPath = 0x08,
    CsvControlQueryFileRevisionFileId128 = 0x09,
    CsvControlQueryVolumeRedirectState = 0x0a,
    CsvControlEnableUSNRangeModificationTracking = 0x0d,
    CsvControlMarkHandleLocalVolumeMount = 0x0e,
    CsvControlUnmarkHandleLocalVolumeMount = 0x0f,

} CSV_CONTROL_OP, *PCSV_CONTROL_OP;

typedef struct _CSV_CONTROL_PARAM {
    CSV_CONTROL_OP Operation;
    LONGLONG Unused;
} CSV_CONTROL_PARAM, *PCSV_CONTROL_PARAM;




typedef struct _CSV_QUERY_REDIRECT_STATE {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    BOOLEAN FileRedirected;
} CSV_QUERY_REDIRECT_STATE, *PCSV_QUERY_REDIRECT_STATE;







typedef struct _CSV_QUERY_FILE_REVISION {



    LONGLONG FileId;
#line 8057 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    LONGLONG FileRevision[3];

} CSV_QUERY_FILE_REVISION, *PCSV_QUERY_FILE_REVISION;







typedef struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {



    FILE_ID_128 FileId;
#line 8090 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
    LONGLONG FileRevision[3];

} CSV_QUERY_FILE_REVISION_FILE_ID_128, *PCSV_QUERY_FILE_REVISION_FILE_ID_128;







typedef struct _CSV_QUERY_MDS_PATH {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    DWORD PathLength;
    WCHAR Path[1];
} CSV_QUERY_MDS_PATH, *PCSV_QUERY_MDS_PATH;

typedef enum _CSVFS_DISK_CONNECTIVITY
{
    CsvFsDiskConnectivityNone = 0,
    CsvFsDiskConnectivityMdsNodeOnly = 1,
    CsvFsDiskConnectivitySubsetOfNodes = 2,
    CsvFsDiskConnectivityAllNodes = 3
} CSVFS_DISK_CONNECTIVITY, *PCSVFS_DISK_CONNECTIVITY;




typedef struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    BOOLEAN IsDiskConnected;
    BOOLEAN ClusterEnableDirectIo;
    CSVFS_DISK_CONNECTIVITY DiskConnectivity;
} CSV_QUERY_VOLUME_REDIRECT_STATE, *PCSV_QUERY_VOLUME_REDIRECT_STATE;
#line 8136 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
    DWORDLONG VetoedFromAltitudeIntegral;
    DWORDLONG VetoedFromAltitudeDecimal;
    WCHAR Reason[256];
} CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT, *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
#line 8151 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _CSV_IS_OWNED_BY_CSVFS {
    BOOLEAN OwnedByCSVFS;
}CSV_IS_OWNED_BY_CSVFS, *PCSV_IS_OWNED_BY_CSVFS;







typedef struct _FILE_LEVEL_TRIM_RANGE {





    DWORDLONG Offset;





    DWORDLONG Length;
} FILE_LEVEL_TRIM_RANGE, *PFILE_LEVEL_TRIM_RANGE;





typedef struct _FILE_LEVEL_TRIM {






    DWORD Key;





    DWORD NumRanges;





    FILE_LEVEL_TRIM_RANGE Ranges[1];

} FILE_LEVEL_TRIM, *PFILE_LEVEL_TRIM;





typedef struct _FILE_LEVEL_TRIM_OUTPUT {






    DWORD NumRangesProcessed;

} FILE_LEVEL_TRIM_OUTPUT, *PFILE_LEVEL_TRIM_OUTPUT;
#line 8262 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _QUERY_FILE_LAYOUT_FILTER_TYPE {
    QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
    QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
    QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
    QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 3,
} QUERY_FILE_LAYOUT_FILTER_TYPE;

typedef struct _CLUSTER_RANGE {





    LARGE_INTEGER StartingCluster;




    LARGE_INTEGER ClusterCount;

} CLUSTER_RANGE, *PCLUSTER_RANGE;

typedef struct _FILE_REFERENCE_RANGE {





    DWORDLONG StartingFileReferenceNumber;





    DWORDLONG EndingFileReferenceNumber;

} FILE_REFERENCE_RANGE, *PFILE_REFERENCE_RANGE;

typedef struct _QUERY_FILE_LAYOUT_INPUT {






    DWORD NumberOfPairs;




    DWORD Flags;





    QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;





    DWORD Reserved;






    union {
#line 8340 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
        CLUSTER_RANGE ClusterRanges[1];
#line 8349 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
        FILE_REFERENCE_RANGE FileReferenceRanges[1];

    } Filter;
} QUERY_FILE_LAYOUT_INPUT, *PQUERY_FILE_LAYOUT_INPUT;







typedef struct _QUERY_FILE_LAYOUT_OUTPUT {






    DWORD FileEntryCount;





    DWORD FirstFileOffset;





    DWORD Flags;




    DWORD Reserved;

} QUERY_FILE_LAYOUT_OUTPUT, *PQUERY_FILE_LAYOUT_OUTPUT;

typedef struct _FILE_LAYOUT_ENTRY {





    DWORD Version;





    DWORD NextFileOffset;





    DWORD Flags;




    DWORD FileAttributes;




    DWORDLONG FileReferenceNumber;






    DWORD FirstNameOffset;






    DWORD FirstStreamOffset;







    DWORD ExtraInfoOffset;




    DWORD Reserved;
#line 8453 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
} FILE_LAYOUT_ENTRY, *PFILE_LAYOUT_ENTRY;
#line 8462 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_LAYOUT_NAME_ENTRY {





    DWORD NextNameOffset;




    DWORD Flags;




    DWORDLONG ParentFileReferenceNumber;




    DWORD FileNameLength;




    DWORD Reserved;






    WCHAR FileName[1];

} FILE_LAYOUT_NAME_ENTRY, *PFILE_LAYOUT_NAME_ENTRY;

typedef struct _FILE_LAYOUT_INFO_ENTRY {




    struct {
        LARGE_INTEGER CreationTime;
        LARGE_INTEGER LastAccessTime;
        LARGE_INTEGER LastWriteTime;
        LARGE_INTEGER ChangeTime;
        DWORD FileAttributes;
    } BasicInformation;




    DWORD OwnerId;




    DWORD SecurityId;




    USN Usn;

} FILE_LAYOUT_INFO_ENTRY, *PFILE_LAYOUT_INFO_ENTRY;
#line 8550 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STREAM_LAYOUT_ENTRY {




    DWORD Version;




    DWORD NextStreamOffset;




    DWORD Flags;







    DWORD ExtentInformationOffset;





    LARGE_INTEGER AllocationSize;




    LARGE_INTEGER EndOfFile;





    DWORDLONG Reserved;




    DWORD AttributeFlags;




    DWORD StreamIdentifierLength;






    WCHAR StreamIdentifier[1];

} STREAM_LAYOUT_ENTRY, *PSTREAM_LAYOUT_ENTRY;
#line 8625 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _STREAM_EXTENT_ENTRY {




    DWORD Flags;

    union {






        RETRIEVAL_POINTERS_BUFFER RetrievalPointers;

    } ExtentInformation;

} STREAM_EXTENT_ENTRY, *PSTREAM_EXTENT_ENTRY;
#line 8659 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
    WORD ChecksumAlgorithm;
    WORD Reserved;
    DWORD Flags;
    DWORD ChecksumChunkSizeInBytes;
    DWORD ClusterSizeInBytes;
} FSCTL_GET_INTEGRITY_INFORMATION_BUFFER, *PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER;

typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
    WORD ChecksumAlgorithm;
    WORD Reserved;
    DWORD Flags;
} FSCTL_SET_INTEGRITY_INFORMATION_BUFFER, *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
#line 8680 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FSCTL_OFFLOAD_READ_INPUT {
    DWORD Size;
    DWORD Flags;
    DWORD TokenTimeToLive;
    DWORD Reserved;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
} FSCTL_OFFLOAD_READ_INPUT, *PFSCTL_OFFLOAD_READ_INPUT;

typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG TransferLength;
    BYTE Token[512];
} FSCTL_OFFLOAD_READ_OUTPUT, *PFSCTL_OFFLOAD_READ_OUTPUT;
#line 8705 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
    DWORDLONG TransferOffset;
    BYTE Token[512];
} FSCTL_OFFLOAD_WRITE_INPUT, *PFSCTL_OFFLOAD_WRITE_INPUT;

typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG LengthWritten;
} FSCTL_OFFLOAD_WRITE_OUTPUT, *PFSCTL_OFFLOAD_WRITE_OUTPUT;
#line 8727 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
    DWORD Flags;
} SET_PURGE_FAILURE_MODE_INPUT, *PSET_PURGE_FAILURE_MODE_INPUT;
#line 8740 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER {
    DWORD Version;
    DWORD QueryFlags;
    DWORD HashAlgorithm;
    LARGE_INTEGER RangeOffsetInFile;
    LARGE_INTEGER RangeLength;
} DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER, *PDEDUP_QUERY_FILE_HASHES_INPUT_BUFFER;


typedef struct _DEDUP_CHUNK_INFORMATION_HASH32 {
    DWORD ChunkFlags;
    LONGLONG ChunkOffsetInFile;
    LONGLONG ChunkSize;
    BYTE HashVal[32];
} DEDUP_CHUNK_INFORMATION_HASH32, *PDEDUP_CHUNK_INFORMATION_HASH32;


typedef struct _DEDUP_FILE_OPERATION {
    DWORD Code;
} DEDUP_FILE_OPERATION, *PDEDUP_FILE_OPERATION;
#line 8777 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _REPAIR_COPIES_INPUT {

    DWORD Size;

    DWORD Flags;

    LARGE_INTEGER FileOffset;

    DWORD Length;

    DWORD SourceCopy;

    DWORD NumberOfRepairCopies;

    DWORD RepairCopies[1];

} REPAIR_COPIES_INPUT, *PREPAIR_COPIES_INPUT;

typedef struct _REPAIR_COPIES_OUTPUT {

    DWORD Size;

    DWORD Status;

    LARGE_INTEGER ResumeFileOffset;

} REPAIR_COPIES_OUTPUT, *PREPAIR_COPIES_OUTPUT;
#line 8821 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FILE_REGION_INFO {
    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD Usage;
    DWORD Reserved;
} FILE_REGION_INFO, *PFILE_REGION_INFO;

typedef struct _FILE_REGION_OUTPUT {
    DWORD Flags;
    DWORD TotalRegionEntryCount;
    DWORD RegionEntryCount;
    DWORD Reserved;
    FILE_REGION_INFO Region[1];
} FILE_REGION_OUTPUT, *PFILE_REGION_OUTPUT;






typedef struct _FILE_REGION_INPUT {

    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD DesiredUsage;

} FILE_REGION_INPUT, *PFILE_REGION_INPUT;
#line 8866 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _WRITE_USN_REASON_INPUT {

    DWORD Flags;
    DWORD UsnReasonToWrite;

} WRITE_USN_REASON_INPUT, *PWRITE_USN_REASON_INPUT;
#line 8894 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef enum _FILE_STORAGE_TIER_MEDIA_TYPE {

    FileStorageTierMediaTypeUnspecified = 0,
    FileStorageTierMediaTypeDisk,
    FileStorageTierMediaTypeSsd

} FILE_STORAGE_TIER_MEDIA_TYPE, *PFILE_STORAGE_TIER_MEDIA_TYPE;

typedef struct _FILE_STORAGE_TIER {





    GUID Id;





    WCHAR Name[(256)];





    WCHAR Description[(256)];





    DWORDLONG Flags;





    DWORDLONG ProvisionedCapacity;





    FILE_STORAGE_TIER_MEDIA_TYPE MediaType;

} FILE_STORAGE_TIER, *PFILE_STORAGE_TIER;
#line 8956 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {







    DWORD Version;






    DWORD Size;





    DWORD Flags;





    DWORD TotalNumberOfTiers;





    DWORD NumberOfTiersReturned;





    FILE_STORAGE_TIER Tiers[1];

} FSCTL_QUERY_STORAGE_CLASSES_OUTPUT, *PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
#line 9010 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FSCTL_QUERY_REGION_INFO_INPUT {

    DWORD Version;
    DWORD Size;

    DWORD Flags;

    DWORD NumberOfTierIds;
    GUID TierIds[1];

} FSCTL_QUERY_REGION_INFO_INPUT, *PFSCTL_QUERY_REGION_INFO_INPUT;







typedef struct _FILE_STORAGE_TIER_REGION {

    GUID TierId;

    DWORDLONG Offset;
    DWORDLONG Length;

} FILE_STORAGE_TIER_REGION, *PFILE_STORAGE_TIER_REGION;
#line 9044 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _FSCTL_QUERY_REGION_INFO_OUTPUT {

    DWORD Version;
    DWORD Size;

    DWORD Flags;
    DWORD Reserved;

    DWORDLONG Alignment;

    DWORD TotalNumberOfRegions;
    DWORD NumberOfRegionsReturned;

    FILE_STORAGE_TIER_REGION Regions[1];

} FSCTL_QUERY_REGION_INFO_OUTPUT, *PFSCTL_QUERY_REGION_INFO_OUTPUT;
#line 9097 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _DISK_EXTENT {





    DWORD DiskNumber;






    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER ExtentLength;

} DISK_EXTENT, *PDISK_EXTENT;

typedef struct _VOLUME_DISK_EXTENTS {





    DWORD NumberOfDiskExtents;
    DISK_EXTENT Extents[1];

} VOLUME_DISK_EXTENTS, *PVOLUME_DISK_EXTENTS;
#line 9185 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winioctl.h"
typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {





    DWORDLONG GptAttributes;

} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
#line 31 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/winsmcrd.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/winsmcrd.h"
extern "C" {



typedef DWORD ULONG;
typedef WORD UWORD;
typedef BYTE UCHAR;
#line 54 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/winsmcrd.h"
extern "C" const GUID GUID_DEVINTERFACE_SMARTCARD_READER;
#line 262 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/winsmcrd.h"
typedef struct _SCARD_IO_REQUEST{
    DWORD dwProtocol;
    DWORD cbPciLength;
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;






typedef struct {
    BYTE
        bCla,
        bIns,
        bP1,
        bP2,
        bP3;
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND;

typedef struct {
    SCARD_IO_REQUEST ioRequest;
    BYTE
        bSw1,
        bSw2;
    union
    {
        SCARD_T0_COMMAND CmdBytes;
        BYTE rgbHeader[5];
    } ;
} SCARD_T0_REQUEST;

typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST, *LPSCARD_T0_REQUEST;






typedef struct {
    SCARD_IO_REQUEST ioRequest;
} SCARD_T1_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST, *LPSCARD_T1_REQUEST;
#line 338 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/winsmcrd.h"
}
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"







extern "C" {







typedef const BYTE *LPCBYTE;



typedef const void *LPCVOID;
#line 66 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
__declspec(dllimport) extern const SCARD_IO_REQUEST
    g_rgSCardT0Pci,
    g_rgSCardT1Pci,
    g_rgSCardRawPci;
#line 84 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef ULONG_PTR SCARDCONTEXT;
typedef SCARDCONTEXT *PSCARDCONTEXT, *LPSCARDCONTEXT;

typedef ULONG_PTR SCARDHANDLE;
typedef SCARDHANDLE *PSCARDHANDLE, *LPSCARDHANDLE;
#line 106 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardEstablishContext(
          DWORD dwScope,
                LPCVOID pvReserved1,
                LPCVOID pvReserved2,
          LPSCARDCONTEXT phContext);

extern LONG __stdcall
SCardReleaseContext(
              SCARDCONTEXT hContext);

extern LONG __stdcall
SCardIsValidContext(
              SCARDCONTEXT hContext);
#line 144 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardListReaderGroupsA(
            SCARDCONTEXT hContext,
                                                                LPSTR mszGroups,
            LPDWORD pcchGroups);
extern LONG __stdcall
SCardListReaderGroupsW(
            SCARDCONTEXT hContext,
                                                                LPWSTR mszGroups,
            LPDWORD pcchGroups);







extern LONG __stdcall
SCardListReadersA(
             SCARDCONTEXT hContext,
             LPCSTR mszGroups,


             LPSTR mszReaders,
             LPDWORD pcchReaders);

extern LONG __stdcall
SCardListReadersW(
             SCARDCONTEXT hContext,
             LPCWSTR mszGroups,


             LPWSTR mszReaders,
             LPDWORD pcchReaders);







extern LONG __stdcall
SCardListCardsA(
              SCARDCONTEXT hContext,
              LPCBYTE pbAtr,
                                         LPCGUID rgquidInterfaces,
              DWORD cguidInterfaceCount,


              CHAR *mszCards,
              LPDWORD pcchCards);

extern LONG __stdcall
SCardListCardsW(
              SCARDCONTEXT hContext,
              LPCBYTE pbAtr,
                                         LPCGUID rgquidInterfaces,
              DWORD cguidInterfaceCount,


              WCHAR *mszCards,
              LPDWORD pcchCards);
#line 227 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardListInterfacesA(
             SCARDCONTEXT hContext,
             LPCSTR szCard,
             LPGUID pguidInterfaces,
             LPDWORD pcguidInterfaces);
extern LONG __stdcall
SCardListInterfacesW(
             SCARDCONTEXT hContext,
             LPCWSTR szCard,
             LPGUID pguidInterfaces,
             LPDWORD pcguidInterfaces);






extern LONG __stdcall
SCardGetProviderIdA(
             SCARDCONTEXT hContext,
             LPCSTR szCard,
             LPGUID pguidProviderId);
extern LONG __stdcall
SCardGetProviderIdW(
             SCARDCONTEXT hContext,
             LPCWSTR szCard,
             LPGUID pguidProviderId);
#line 266 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardGetCardTypeProviderNameA(
              SCARDCONTEXT hContext,
              LPCSTR szCardName,
              DWORD dwProviderId,


              CHAR *szProvider,
              LPDWORD pcchProvider);

extern LONG __stdcall
SCardGetCardTypeProviderNameW(
              SCARDCONTEXT hContext,
              LPCWSTR szCardName,
              DWORD dwProviderId,


              WCHAR *szProvider,
              LPDWORD pcchProvider);
#line 299 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardIntroduceReaderGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardIntroduceReaderGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardForgetReaderGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardForgetReaderGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardIntroduceReaderA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName,
         LPCSTR szDeviceName);
extern LONG __stdcall
SCardIntroduceReaderW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName,
         LPCWSTR szDeviceName);






extern LONG __stdcall
SCardForgetReaderA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName);
extern LONG __stdcall
SCardForgetReaderW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName);






extern LONG __stdcall
SCardAddReaderToGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardAddReaderToGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardRemoveReaderFromGroupA(
         SCARDCONTEXT hContext,
         LPCSTR szReaderName,
         LPCSTR szGroupName);
extern LONG __stdcall
SCardRemoveReaderFromGroupW(
         SCARDCONTEXT hContext,
         LPCWSTR szReaderName,
         LPCWSTR szGroupName);






extern LONG __stdcall
SCardIntroduceCardTypeA(
             SCARDCONTEXT hContext,
             LPCSTR szCardName,
             LPCGUID pguidPrimaryProvider,
             LPCGUID rgguidInterfaces,
             DWORD dwInterfaceCount,
             LPCBYTE pbAtr,
             LPCBYTE pbAtrMask,
             DWORD cbAtrLen);
extern LONG __stdcall
SCardIntroduceCardTypeW(
             SCARDCONTEXT hContext,
             LPCWSTR szCardName,
             LPCGUID pguidPrimaryProvider,
             LPCGUID rgguidInterfaces,
             DWORD dwInterfaceCount,
             LPCBYTE pbAtr,
             LPCBYTE pbAtrMask,
             DWORD cbAtrLen);
#line 433 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardSetCardTypeProviderNameA(
         SCARDCONTEXT hContext,
         LPCSTR szCardName,
         DWORD dwProviderId,
         LPCSTR szProvider);
extern LONG __stdcall
SCardSetCardTypeProviderNameW(
         SCARDCONTEXT hContext,
         LPCWSTR szCardName,
         DWORD dwProviderId,
         LPCWSTR szProvider);
#line 454 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardForgetCardTypeA(
         SCARDCONTEXT hContext,
         LPCSTR szCardName);
extern LONG __stdcall
SCardForgetCardTypeW(
         SCARDCONTEXT hContext,
         LPCWSTR szCardName);
#line 478 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardFreeMemory(
         SCARDCONTEXT hContext,
         LPCVOID pvMem);


extern HANDLE __stdcall
SCardAccessStartedEvent(void);

extern void __stdcall
SCardReleaseStartedEvent(void);
#line 499 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef struct {
    LPCSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA;
typedef struct {
    LPCWSTR szReader;
    LPVOID pvUserData;
    DWORD dwCurrentState;
    DWORD dwEventState;
    DWORD cbAtr;
    BYTE rgbAtr[36];
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW;

typedef SCARD_READERSTATEW SCARD_READERSTATE;
typedef PSCARD_READERSTATEW PSCARD_READERSTATE;
typedef LPSCARD_READERSTATEW LPSCARD_READERSTATE;
#line 595 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardLocateCardsA(
            SCARDCONTEXT hContext,
            LPCSTR mszCards,
            LPSCARD_READERSTATEA rgReaderStates,
            DWORD cReaders);
extern LONG __stdcall
SCardLocateCardsW(
            SCARDCONTEXT hContext,
            LPCWSTR mszCards,
            LPSCARD_READERSTATEW rgReaderStates,
            DWORD cReaders);







typedef struct _SCARD_ATRMASK {
    DWORD cbAtr;
    BYTE rgbAtr[36];
    BYTE rgbMask[36];
} SCARD_ATRMASK, *PSCARD_ATRMASK, *LPSCARD_ATRMASK;


extern LONG __stdcall
SCardLocateCardsByATRA(
            SCARDCONTEXT hContext,
            LPSCARD_ATRMASK rgAtrMasks,
            DWORD cAtrs,
            LPSCARD_READERSTATEA rgReaderStates,
            DWORD cReaders);
extern LONG __stdcall
SCardLocateCardsByATRW(
            SCARDCONTEXT hContext,
            LPSCARD_ATRMASK rgAtrMasks,
            DWORD cAtrs,
            LPSCARD_READERSTATEW rgReaderStates,
            DWORD cReaders);







extern LONG __stdcall
SCardGetStatusChangeA(
            SCARDCONTEXT hContext,
            DWORD dwTimeout,
            LPSCARD_READERSTATEA rgReaderStates,
            DWORD cReaders);
extern LONG __stdcall
SCardGetStatusChangeW(
            SCARDCONTEXT hContext,
            DWORD dwTimeout,
            LPSCARD_READERSTATEW rgReaderStates,
            DWORD cReaders);






extern LONG __stdcall
SCardCancel(
            SCARDCONTEXT hContext);
#line 686 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardConnectA(
            SCARDCONTEXT hContext,
            LPCSTR szReader,
            DWORD dwShareMode,
            DWORD dwPreferredProtocols,
            LPSCARDHANDLE phCard,
            LPDWORD pdwActiveProtocol);
extern LONG __stdcall
SCardConnectW(
            SCARDCONTEXT hContext,
            LPCWSTR szReader,
            DWORD dwShareMode,
            DWORD dwPreferredProtocols,
            LPSCARDHANDLE phCard,
            LPDWORD pdwActiveProtocol);






extern LONG __stdcall
SCardReconnect(
              SCARDHANDLE hCard,
              DWORD dwShareMode,
              DWORD dwPreferredProtocols,
              DWORD dwInitialization,
              LPDWORD pdwActiveProtocol);

extern LONG __stdcall
SCardDisconnect(
            SCARDHANDLE hCard,
            DWORD dwDisposition);

extern LONG __stdcall
SCardBeginTransaction(
            SCARDHANDLE hCard);

extern LONG __stdcall
SCardEndTransaction(
            SCARDHANDLE hCard,
            DWORD dwDisposition);

extern LONG __stdcall
SCardCancelTransaction(
            SCARDHANDLE hCard);






extern LONG __stdcall
SCardState(
            SCARDHANDLE hCard,
            LPDWORD pdwState,
            LPDWORD pdwProtocol,
                                     LPBYTE pbAtr,
            LPDWORD pcbAtrLen);





extern LONG __stdcall
SCardStatusA(
                SCARDHANDLE hCard,


                LPSTR mszReaderNames,
                LPDWORD pcchReaderLen,
                LPDWORD pdwState,
                LPDWORD pdwProtocol,


                LPBYTE pbAtr,
                LPDWORD pcbAtrLen);
extern LONG __stdcall
SCardStatusW(
                SCARDHANDLE hCard,


                LPWSTR mszReaderNames,
                LPDWORD pcchReaderLen,
                LPDWORD pdwState,
                LPDWORD pdwProtocol,


                LPBYTE pbAtr,
                LPDWORD pcbAtrLen);






extern LONG __stdcall
SCardTransmit(
                SCARDHANDLE hCard,
                LPCSCARD_IO_REQUEST pioSendPci,
                                   LPCBYTE pbSendBuffer,
                DWORD cbSendLength,
                LPSCARD_IO_REQUEST pioRecvPci,
                                       LPBYTE pbRecvBuffer,
                LPDWORD pcbRecvLength);


extern LONG __stdcall
SCardGetTransmitCount(
         SCARDHANDLE hCard,
          LPDWORD pcTransmitCount);
#line 810 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardControl(
            SCARDHANDLE hCard,
            DWORD dwControlCode,
                                     LPCVOID lpInBuffer,
            DWORD cbInBufferSize,
                                        LPVOID lpOutBuffer,
            DWORD cbOutBufferSize,
            LPDWORD lpBytesReturned);

extern LONG __stdcall
SCardGetAttrib(
            SCARDHANDLE hCard,
            DWORD dwAttrId,
                                        LPBYTE pbAttr,
            LPDWORD pcbAttrLen);
#line 840 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardSetAttrib(
         SCARDHANDLE hCard,
         DWORD dwAttrId,
                                LPCBYTE pbAttr,
         DWORD cbAttrLen);
#line 879 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA) ( SCARDCONTEXT, LPSTR, LPSTR, PVOID);
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW) ( SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);





typedef BOOL (__stdcall *LPOCNCHKPROC) ( SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef void (__stdcall *LPOCNDSCPROC) ( SCARDCONTEXT, SCARDHANDLE, PVOID);
#line 899 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef struct {
    DWORD dwStructSize;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;

    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct {
    DWORD dwStructSize;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;

    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPOCNCHKPROC lpfnCheck;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNDSCPROC lpfnDisconnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW;

typedef OPENCARD_SEARCH_CRITERIAW OPENCARD_SEARCH_CRITERIA;
typedef POPENCARD_SEARCH_CRITERIAW POPENCARD_SEARCH_CRITERIA;
typedef LPOPENCARD_SEARCH_CRITERIAW LPOPENCARD_SEARCH_CRITERIA;
#line 946 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCSTR lpstrTitle;
    LPCSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
    LPOCNCONNPROCA lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;

    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA;
typedef struct {
    DWORD dwStructSize;
    SCARDCONTEXT hSCardContext;
    HWND hwndOwner;
    DWORD dwFlags;
    LPCWSTR lpstrTitle;
    LPCWSTR lpstrSearchDesc;
    HICON hIcon;
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
    LPOCNCONNPROCW lpfnConnect;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;

    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    DWORD dwActiveProtocol;
    SCARDHANDLE hCardHandle;
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW;

typedef OPENCARDNAME_EXW OPENCARDNAME_EX;
typedef POPENCARDNAME_EXW POPENCARDNAME_EX;
typedef LPOPENCARDNAME_EXW LPOPENCARDNAME_EX;
#line 1079 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef enum {
    RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
    RSR_MATCH_TYPE_SERIAL_NUMBER,
    RSR_MATCH_TYPE_ALL_CARDS
} READER_SEL_REQUEST_MATCH_TYPE;

typedef struct {
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    READER_SEL_REQUEST_MATCH_TYPE MatchType;
    union {
        struct {
            DWORD cbReaderNameOffset;
            DWORD cchReaderNameLength;
            DWORD cbContainerNameOffset;
            DWORD cchContainerNameLength;
            DWORD dwDesiredCardModuleVersion;
            DWORD dwCspFlags;
        } ReaderAndContainerParameter;
        struct {
            DWORD cbSerialNumberOffset;
            DWORD cbSerialNumberLength;
            DWORD dwDesiredCardModuleVersion;
        } SerialNumberParameter;
    };
} READER_SEL_REQUEST, *PREADER_SEL_REQUEST;
#line 1125 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef struct {
    DWORD cbReaderNameOffset;
    DWORD cchReaderNameLength;
    DWORD cbCardNameOffset;
    DWORD cchCardNameLength;
} READER_SEL_RESPONSE, *PREADER_SEL_RESPONSE;






extern LONG __stdcall
SCardUIDlgSelectCardA(
    LPOPENCARDNAME_EXA);
extern LONG __stdcall
SCardUIDlgSelectCardW(
    LPOPENCARDNAME_EXW);
#line 1155 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPSTR lpstrRdr;
    DWORD nMaxRdr;
    LPSTR lpstrCard;
    DWORD nMaxCard;
    LPCSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCA lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA;
typedef struct {
    DWORD dwStructSize;
    HWND hwndOwner;
    SCARDCONTEXT hSCardContext;
    LPWSTR lpstrGroupNames;
    DWORD nMaxGroupNames;
    LPWSTR lpstrCardNames;
    DWORD nMaxCardNames;
    LPCGUID rgguidInterfaces;
    DWORD cguidInterfaces;
    LPWSTR lpstrRdr;
    DWORD nMaxRdr;
    LPWSTR lpstrCard;
    DWORD nMaxCard;
    LPCWSTR lpstrTitle;
    DWORD dwFlags;
    LPVOID pvUserData;
    DWORD dwShareMode;
    DWORD dwPreferredProtocols;
    DWORD dwActiveProtocol;
    LPOCNCONNPROCW lpfnConnect;
    LPOCNCHKPROC lpfnCheck;
    LPOCNDSCPROC lpfnDisconnect;
    SCARDHANDLE hCardHandle;
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW;

typedef OPENCARDNAMEW OPENCARDNAME;
typedef POPENCARDNAMEW POPENCARDNAME;
typedef LPOPENCARDNAMEW LPOPENCARDNAME;
#line 1223 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
GetOpenCardNameA(
    LPOPENCARDNAMEA);
extern LONG __stdcall
GetOpenCardNameW(
    LPOPENCARDNAMEW);






extern LONG __stdcall
SCardDlgExtendedError (void);







extern LONG __stdcall
SCardReadCacheA(
          SCARDCONTEXT hContext,
          UUID *CardIdentifier,
          DWORD FreshnessCounter,
          LPSTR LookupName,
                                 PBYTE Data,
          DWORD *DataLen);
extern LONG __stdcall
SCardReadCacheW(
          SCARDCONTEXT hContext,
          UUID *CardIdentifier,
          DWORD FreshnessCounter,
          LPWSTR LookupName,
                                 PBYTE Data,
          DWORD *DataLen);






extern LONG __stdcall
SCardWriteCacheA(
         SCARDCONTEXT hContext,
         UUID *CardIdentifier,
         DWORD FreshnessCounter,
         LPSTR LookupName,
                              PBYTE Data,
         DWORD DataLen);
extern LONG __stdcall
SCardWriteCacheW(
         SCARDCONTEXT hContext,
         UUID *CardIdentifier,
         DWORD FreshnessCounter,
         LPWSTR LookupName,
                              PBYTE Data,
         DWORD DataLen);
#line 1293 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardGetReaderIconA(
           SCARDCONTEXT hContext,
           LPCSTR szReaderName,


           LPBYTE pbIcon,
           LPDWORD pcbIcon);

extern LONG __stdcall
SCardGetReaderIconW(
           SCARDCONTEXT hContext,
           LPCWSTR szReaderName,


           LPBYTE pbIcon,
           LPDWORD pcbIcon);







extern LONG __stdcall
SCardGetDeviceTypeIdA(
           SCARDCONTEXT hContext,
           LPCSTR szReaderName,
           LPDWORD pdwDeviceTypeId);

extern LONG __stdcall
SCardGetDeviceTypeIdW(
           SCARDCONTEXT hContext,
           LPCWSTR szReaderName,
           LPDWORD pdwDeviceTypeId);







extern LONG __stdcall
SCardGetReaderDeviceInstanceIdA(
          SCARDCONTEXT hContext,
          LPCSTR szReaderName,


          LPSTR szDeviceInstanceId,
          LPDWORD pcchDeviceInstanceId);

extern LONG __stdcall
SCardGetReaderDeviceInstanceIdW(
          SCARDCONTEXT hContext,
          LPCWSTR szReaderName,


          LPWSTR szDeviceInstanceId,
          LPDWORD pcchDeviceInstanceId);







extern LONG __stdcall
SCardListReadersWithDeviceInstanceIdA(
          SCARDCONTEXT hContext,
          LPCSTR szDeviceInstanceId,


          LPSTR mszReaders,
          LPDWORD pcchReaders);

extern LONG __stdcall
SCardListReadersWithDeviceInstanceIdW(
          SCARDCONTEXT hContext,
          LPCWSTR szDeviceInstanceId,


          LPWSTR mszReaders,
          LPDWORD pcchReaders);
#line 1395 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winscard.h"
extern LONG __stdcall
SCardAudit(
       SCARDCONTEXT hContext,
       DWORD dwEvent);







}
#line 201 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
#line 23 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
#line 48 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
#pragma warning(push)
#pragma warning(disable: 4201)







#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack4.h"
#pragma warning(disable: 4103)

#pragma pack(push,4)
#line 56 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"




extern "C" {
#line 94 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;


typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
#line 138 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;
#line 194 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

typedef struct _PROPSHEETPAGEA_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

typedef struct _PROPSHEETPAGEA_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;


typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR pszHeaderTitle;
    LPCSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } ;

} PROPSHEETPAGEA_V4, *LPPROPSHEETPAGEA_V4;
typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4;


typedef struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

typedef struct _PROPSHEETPAGEW_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

typedef struct _PROPSHEETPAGEW_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;


typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;

    HANDLE hActCtx;

    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } ;

} PROPSHEETPAGEW_V4, *LPPROPSHEETPAGEW_V4;
typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4;
#line 302 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA_LATEST;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW_LATEST;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST;
#line 319 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef PROPSHEETPAGEA_V4 PROPSHEETPAGEA;
typedef PROPSHEETPAGEW_V4 PROPSHEETPAGEW;
typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA;
typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW;
#line 443 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
#line 469 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef struct _PROPSHEETHEADERA_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERA_V1, *LPPROPSHEETHEADERA_V1;
typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;

typedef struct _PROPSHEETHEADERA_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCSTR pszbmHeader;
    } ;
} PROPSHEETHEADERA_V2, *LPPROPSHEETHEADERA_V2;
typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;
#line 516 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef struct _PROPSHEETHEADERW_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERW_V1, *LPPROPSHEETHEADERW_V1;
typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;

typedef struct _PROPSHEETHEADERW_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        LPCWSTR pszbmHeader;
    } ;
} PROPSHEETHEADERW_V2, *LPPROPSHEETHEADERW_V2;
typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;
#line 547 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef PROPSHEETHEADERA_V2 PROPSHEETHEADERA;
typedef PROPSHEETHEADERW_V2 PROPSHEETHEADERW;
typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA;
typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW;
typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA;
typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW;
#line 583 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
__declspec(dllimport) BOOL __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);

__declspec(dllimport) INT_PTR __stdcall PropertySheetA(LPCPROPSHEETHEADERA);

__declspec(dllimport) INT_PTR __stdcall PropertySheetW(LPCPROPSHEETHEADERW);
#line 601 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;
#line 885 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
#pragma warning(pop)
#line 901 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
}



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 904 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
#line 23 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"




extern "C" {






typedef struct _PRINTER_INFO_1A {
    DWORD Flags;
    LPSTR pDescription;
    LPSTR pName;
    LPSTR pComment;
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
    DWORD Flags;
    LPWSTR pDescription;
    LPWSTR pName;
    LPWSTR pComment;
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;

typedef PRINTER_INFO_1W PRINTER_INFO_1;
typedef PPRINTER_INFO_1W PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1W LPPRINTER_INFO_1;






typedef struct _PRINTER_INFO_2A {
    LPSTR pServerName;
    LPSTR pPrinterName;
    LPSTR pShareName;
    LPSTR pPortName;
    LPSTR pDriverName;
    LPSTR pComment;
    LPSTR pLocation;
    LPDEVMODEA pDevMode;
    LPSTR pSepFile;
    LPSTR pPrintProcessor;
    LPSTR pDatatype;
    LPSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
    LPWSTR pServerName;
    LPWSTR pPrinterName;
    LPWSTR pShareName;
    LPWSTR pPortName;
    LPWSTR pDriverName;
    LPWSTR pComment;
    LPWSTR pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR pSepFile;
    LPWSTR pPrintProcessor;
    LPWSTR pDatatype;
    LPWSTR pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD Attributes;
    DWORD Priority;
    DWORD DefaultPriority;
    DWORD StartTime;
    DWORD UntilTime;
    DWORD Status;
    DWORD cJobs;
    DWORD AveragePPM;
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;

typedef PRINTER_INFO_2W PRINTER_INFO_2;
typedef PPRINTER_INFO_2W PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2W LPPRINTER_INFO_2;






typedef struct _PRINTER_INFO_3 {
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;

typedef struct _PRINTER_INFO_4A {
    LPSTR pPrinterName;
    LPSTR pServerName;
    DWORD Attributes;
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
    LPWSTR pPrinterName;
    LPWSTR pServerName;
    DWORD Attributes;
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;

typedef PRINTER_INFO_4W PRINTER_INFO_4;
typedef PPRINTER_INFO_4W PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4W LPPRINTER_INFO_4;






typedef struct _PRINTER_INFO_5A {
    LPSTR pPrinterName;
    LPSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
    LPWSTR pPrinterName;
    LPWSTR pPortName;
    DWORD Attributes;
    DWORD DeviceNotSelectedTimeout;
    DWORD TransmissionRetryTimeout;
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;

typedef PRINTER_INFO_5W PRINTER_INFO_5;
typedef PPRINTER_INFO_5W PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5W LPPRINTER_INFO_5;






typedef struct _PRINTER_INFO_6 {
    DWORD dwStatus;
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;


typedef struct _PRINTER_INFO_7A {
  LPSTR pszObjectGUID;
  DWORD dwAction;
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W {
  LPWSTR pszObjectGUID;
  DWORD dwAction;
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;

typedef PRINTER_INFO_7W PRINTER_INFO_7;
typedef PPRINTER_INFO_7W PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7W LPPRINTER_INFO_7;
#line 189 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _PRINTER_INFO_8A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;

typedef PRINTER_INFO_8W PRINTER_INFO_8;
typedef PPRINTER_INFO_8W PPRINTER_INFO_8;
typedef LPPRINTER_INFO_8W LPPRINTER_INFO_8;






typedef struct _PRINTER_INFO_9A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;

typedef PRINTER_INFO_9W PRINTER_INFO_9;
typedef PPRINTER_INFO_9W PPRINTER_INFO_9;
typedef LPPRINTER_INFO_9W LPPRINTER_INFO_9;
#line 311 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _JOB_INFO_1A {
   DWORD JobId;
   LPSTR pPrinterName;
   LPSTR pMachineName;
   LPSTR pUserName;
   LPSTR pDocument;
   LPSTR pDatatype;
   LPSTR pStatus;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD TotalPages;
   DWORD PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
   DWORD JobId;
   LPWSTR pPrinterName;
   LPWSTR pMachineName;
   LPWSTR pUserName;
   LPWSTR pDocument;
   LPWSTR pDatatype;
   LPWSTR pStatus;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD TotalPages;
   DWORD PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;

typedef JOB_INFO_1W JOB_INFO_1;
typedef PJOB_INFO_1W PJOB_INFO_1;
typedef LPJOB_INFO_1W LPJOB_INFO_1;






typedef struct _JOB_INFO_2A {
   DWORD JobId;
   LPSTR pPrinterName;
   LPSTR pMachineName;
   LPSTR pUserName;
   LPSTR pDocument;
   LPSTR pNotifyName;
   LPSTR pDatatype;
   LPSTR pPrintProcessor;
   LPSTR pParameters;
   LPSTR pDriverName;
   LPDEVMODEA pDevMode;
   LPSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
   DWORD JobId;
   LPWSTR pPrinterName;
   LPWSTR pMachineName;
   LPWSTR pUserName;
   LPWSTR pDocument;
   LPWSTR pNotifyName;
   LPWSTR pDatatype;
   LPWSTR pPrintProcessor;
   LPWSTR pParameters;
   LPWSTR pDriverName;
   LPDEVMODEW pDevMode;
   LPWSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;

typedef JOB_INFO_2W JOB_INFO_2;
typedef PJOB_INFO_2W PJOB_INFO_2;
typedef LPJOB_INFO_2W LPJOB_INFO_2;






typedef struct _JOB_INFO_3 {
    DWORD JobId;
    DWORD NextJobId;
    DWORD Reserved;
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;

typedef struct _JOB_INFO_4A {
   DWORD JobId;
   LPSTR pPrinterName;
   LPSTR pMachineName;
   LPSTR pUserName;
   LPSTR pDocument;
   LPSTR pNotifyName;
   LPSTR pDatatype;
   LPSTR pPrintProcessor;
   LPSTR pParameters;
   LPSTR pDriverName;
   LPDEVMODEA pDevMode;
   LPSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
   LONG SizeHigh;
} JOB_INFO_4A, *PJOB_INFO_4A, *LPJOB_INFO_4A;
typedef struct _JOB_INFO_4W {
   DWORD JobId;
   LPWSTR pPrinterName;
   LPWSTR pMachineName;
   LPWSTR pUserName;
   LPWSTR pDocument;
   LPWSTR pNotifyName;
   LPWSTR pDatatype;
   LPWSTR pPrintProcessor;
   LPWSTR pParameters;
   LPWSTR pDriverName;
   LPDEVMODEW pDevMode;
   LPWSTR pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD Status;
   DWORD Priority;
   DWORD Position;
   DWORD StartTime;
   DWORD UntilTime;
   DWORD TotalPages;
   DWORD Size;
   SYSTEMTIME Submitted;
   DWORD Time;
   DWORD PagesPrinted;
   LONG SizeHigh;
} JOB_INFO_4W, *PJOB_INFO_4W, *LPJOB_INFO_4W;

typedef JOB_INFO_4W JOB_INFO_4;
typedef PJOB_INFO_4W PJOB_INFO_4;
typedef LPJOB_INFO_4W LPJOB_INFO_4;
#line 516 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _ADDJOB_INFO_1A {
    LPSTR Path;
    DWORD JobId;
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
    LPWSTR Path;
    DWORD JobId;
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;

typedef ADDJOB_INFO_1W ADDJOB_INFO_1;
typedef PADDJOB_INFO_1W PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1W LPADDJOB_INFO_1;







typedef struct _DRIVER_INFO_1A {
    LPSTR pName;
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {
    LPWSTR pName;
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;

typedef DRIVER_INFO_1W DRIVER_INFO_1;
typedef PDRIVER_INFO_1W PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1W LPDRIVER_INFO_1;






typedef struct _DRIVER_INFO_2A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;

typedef DRIVER_INFO_2W DRIVER_INFO_2;
typedef PDRIVER_INFO_2W PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2W LPDRIVER_INFO_2;






typedef struct _DRIVER_INFO_3A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;

typedef DRIVER_INFO_3W DRIVER_INFO_3;
typedef PDRIVER_INFO_3W PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3W LPDRIVER_INFO_3;






typedef struct _DRIVER_INFO_4A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;

typedef DRIVER_INFO_4W DRIVER_INFO_4;
typedef PDRIVER_INFO_4W PDRIVER_INFO_4;
typedef LPDRIVER_INFO_4W LPDRIVER_INFO_4;






typedef struct _DRIVER_INFO_5A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    DWORD dwDriverAttributes;
    DWORD dwConfigVersion;
    DWORD dwDriverVersion;
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;

typedef DRIVER_INFO_5W DRIVER_INFO_5;
typedef PDRIVER_INFO_5W PDRIVER_INFO_5;
typedef LPDRIVER_INFO_5W LPDRIVER_INFO_5;






typedef struct _DRIVER_INFO_6A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;

typedef DRIVER_INFO_6W DRIVER_INFO_6;
typedef PDRIVER_INFO_6W PDRIVER_INFO_6;
typedef LPDRIVER_INFO_6W LPDRIVER_INFO_6;
#line 741 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _DRIVER_INFO_8A {
    DWORD cVersion;
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDriverPath;
    LPSTR pDataFile;
    LPSTR pConfigFile;
    LPSTR pHelpFile;
    LPSTR pDependentFiles;
    LPSTR pMonitorName;
    LPSTR pDefaultDataType;
    LPSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR pszMfgName;
    LPSTR pszOEMUrl;
    LPSTR pszHardwareID;
    LPSTR pszProvider;
    LPSTR pszPrintProcessor;
    LPSTR pszVendorSetup;
    LPSTR pszzColorProfiles;
    LPSTR pszInfPath;
    DWORD dwPrinterDriverAttributes;
    LPSTR pszzCoreDriverDependencies;
    FILETIME ftMinInboxDriverVerDate;
    DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8A, *PDRIVER_INFO_8A, *LPDRIVER_INFO_8A;
typedef struct _DRIVER_INFO_8W {
    DWORD cVersion;
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDriverPath;
    LPWSTR pDataFile;
    LPWSTR pConfigFile;
    LPWSTR pHelpFile;
    LPWSTR pDependentFiles;
    LPWSTR pMonitorName;
    LPWSTR pDefaultDataType;
    LPWSTR pszzPreviousNames;
    FILETIME ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR pszMfgName;
    LPWSTR pszOEMUrl;
    LPWSTR pszHardwareID;
    LPWSTR pszProvider;
    LPWSTR pszPrintProcessor;
    LPWSTR pszVendorSetup;
    LPWSTR pszzColorProfiles;
    LPWSTR pszInfPath;
    DWORD dwPrinterDriverAttributes;
    LPWSTR pszzCoreDriverDependencies;
    FILETIME ftMinInboxDriverVerDate;
    DWORDLONG dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8W, *PDRIVER_INFO_8W, *LPDRIVER_INFO_8W;

typedef DRIVER_INFO_8W DRIVER_INFO_8;
typedef PDRIVER_INFO_8W PDRIVER_INFO_8;
typedef LPDRIVER_INFO_8W LPDRIVER_INFO_8;
#line 828 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _DOC_INFO_1A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;

typedef DOC_INFO_1W DOC_INFO_1;
typedef PDOC_INFO_1W PDOC_INFO_1;
typedef LPDOC_INFO_1W LPDOC_INFO_1;






typedef struct _FORM_INFO_1A {
    DWORD Flags;
    LPSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
    DWORD Flags;
    LPWSTR pName;
    SIZEL Size;
    RECTL ImageableArea;
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;

typedef FORM_INFO_1W FORM_INFO_1;
typedef PFORM_INFO_1W PFORM_INFO_1;
typedef LPFORM_INFO_1W LPFORM_INFO_1;
#line 877 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
    typedef struct _FORM_INFO_2A {
        DWORD Flags;
        LPCSTR pName;
        SIZEL Size;
        RECTL ImageableArea;
        LPCSTR pKeyword;
        DWORD StringType;
        LPCSTR pMuiDll;
        DWORD dwResourceId;
        LPCSTR pDisplayName;
        LANGID wLangId;
    } FORM_INFO_2A, *PFORM_INFO_2A, *LPFORM_INFO_2A;
    typedef struct _FORM_INFO_2W {
        DWORD Flags;
        LPCWSTR pName;
        SIZEL Size;
        RECTL ImageableArea;
        LPCSTR pKeyword;
        DWORD StringType;
        LPCWSTR pMuiDll;
        DWORD dwResourceId;
        LPCWSTR pDisplayName;
        LANGID wLangId;
    } FORM_INFO_2W, *PFORM_INFO_2W, *LPFORM_INFO_2W;

typedef FORM_INFO_2W FORM_INFO_2;
typedef PFORM_INFO_2W PFORM_INFO_2;
typedef LPFORM_INFO_2W LPFORM_INFO_2;







typedef struct _DOC_INFO_2A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwMode;
    DWORD JobId;
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;

typedef DOC_INFO_2W DOC_INFO_2;
typedef PDOC_INFO_2W PDOC_INFO_2;
typedef LPDOC_INFO_2W LPDOC_INFO_2;
#line 941 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _DOC_INFO_3A {
    LPSTR pDocName;
    LPSTR pOutputFile;
    LPSTR pDatatype;
    DWORD dwFlags;
} DOC_INFO_3A, *PDOC_INFO_3A, *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W {
    LPWSTR pDocName;
    LPWSTR pOutputFile;
    LPWSTR pDatatype;
    DWORD dwFlags;
} DOC_INFO_3W, *PDOC_INFO_3W, *LPDOC_INFO_3W;

typedef DOC_INFO_3W DOC_INFO_3;
typedef PDOC_INFO_3W PDOC_INFO_3;
typedef LPDOC_INFO_3W LPDOC_INFO_3;
#line 969 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _PRINTPROCESSOR_INFO_1A {
    LPSTR pName;
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {
    LPWSTR pName;
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;

typedef PRINTPROCESSOR_INFO_1W PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1W PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1W LPPRINTPROCESSOR_INFO_1;







    typedef struct _PRINTPROCESSOR_CAPS_1 {
        DWORD dwLevel;
        DWORD dwNupOptions;
        DWORD dwPageOrderFlags;
        DWORD dwNumberOfCopies;
    } PRINTPROCESSOR_CAPS_1, *PPRINTPROCESSOR_CAPS_1;






    typedef struct _PRINTPROCESSOR_CAPS_2 {
        DWORD dwLevel;
        DWORD dwNupOptions;
        DWORD dwPageOrderFlags;
        DWORD dwNumberOfCopies;


        DWORD dwDuplexHandlingCaps;
        DWORD dwNupDirectionCaps;
        DWORD dwNupBorderCaps;
        DWORD dwBookletHandlingCaps;
        DWORD dwScalingCaps;

    } PRINTPROCESSOR_CAPS_2, *PPRINTPROCESSOR_CAPS_2;
#line 1038 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _PORT_INFO_1A {
    LPSTR pName;
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {
    LPWSTR pName;
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;

typedef PORT_INFO_1W PORT_INFO_1;
typedef PPORT_INFO_1W PPORT_INFO_1;
typedef LPPORT_INFO_1W LPPORT_INFO_1;






typedef struct _PORT_INFO_2A {
    LPSTR pPortName;
    LPSTR pMonitorName;
    LPSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
    LPWSTR pPortName;
    LPWSTR pMonitorName;
    LPWSTR pDescription;
    DWORD fPortType;
    DWORD Reserved;
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;

typedef PORT_INFO_2W PORT_INFO_2;
typedef PPORT_INFO_2W PPORT_INFO_2;
typedef LPPORT_INFO_2W LPPORT_INFO_2;
#line 1083 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _PORT_INFO_3A {
    DWORD dwStatus;
    LPSTR pszStatus;
    DWORD dwSeverity;
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
    DWORD dwStatus;
    LPWSTR pszStatus;
    DWORD dwSeverity;
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;

typedef PORT_INFO_3W PORT_INFO_3;
typedef PPORT_INFO_3W PPORT_INFO_3;
typedef LPPORT_INFO_3W LPPORT_INFO_3;
#line 1123 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _MONITOR_INFO_1A{
    LPSTR pName;
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W{
    LPWSTR pName;
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;

typedef MONITOR_INFO_1W MONITOR_INFO_1;
typedef PMONITOR_INFO_1W PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1W LPMONITOR_INFO_1;






typedef struct _MONITOR_INFO_2A{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;

typedef MONITOR_INFO_2W MONITOR_INFO_2;
typedef PMONITOR_INFO_2W PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2W LPMONITOR_INFO_2;






typedef struct _DATATYPES_INFO_1A{
    LPSTR pName;
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W{
    LPWSTR pName;
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;

typedef DATATYPES_INFO_1W DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1W PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1W LPDATATYPES_INFO_1;






typedef struct _PRINTER_DEFAULTSA{
    LPSTR pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW{
    LPWSTR pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;

typedef PRINTER_DEFAULTSW PRINTER_DEFAULTS;
typedef PPRINTER_DEFAULTSW PPRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSW LPPRINTER_DEFAULTS;






typedef struct _PRINTER_ENUM_VALUESA {
    LPSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW {
    LPWSTR pValueName;
    DWORD cbValueName;
    DWORD dwType;
    LPBYTE pData;
    DWORD cbData;
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;

typedef PRINTER_ENUM_VALUESW PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESW PPRINTER_ENUM_VALUES;
typedef LPPRINTER_ENUM_VALUESW LPPRINTER_ENUM_VALUES;







BOOL
__stdcall
EnumPrintersA(
              DWORD Flags,
              LPSTR Name,
              DWORD Level,

              LPBYTE pPrinterEnum,
              DWORD cbBuf,
              LPDWORD pcbNeeded,
              LPDWORD pcReturned
);

BOOL
__stdcall
EnumPrintersW(
              DWORD Flags,
              LPWSTR Name,
              DWORD Level,

              LPBYTE pPrinterEnum,
              DWORD cbBuf,
              LPDWORD pcbNeeded,
              LPDWORD pcReturned
);
#line 1281 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
HANDLE
__stdcall
GetSpoolFileHandle(
        HANDLE hPrinter
);

HANDLE
__stdcall
CommitSpoolData(
        HANDLE hPrinter,
        HANDLE hSpoolFile,
        DWORD cbCommit
);

BOOL
__stdcall
CloseSpoolFileHandle(
        HANDLE hPrinter,
        HANDLE hSpoolFile
);

BOOL
__stdcall
OpenPrinterA(
            LPSTR pPrinterName,
            LPHANDLE phPrinter,
            LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
OpenPrinterW(
            LPWSTR pPrinterName,
            LPHANDLE phPrinter,
            LPPRINTER_DEFAULTSW pDefault
);






BOOL
__stdcall
ResetPrinterA(
            HANDLE hPrinter,
            LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
ResetPrinterW(
            HANDLE hPrinter,
            LPPRINTER_DEFAULTSW pDefault
);






BOOL
__stdcall
SetJobA(
                 HANDLE hPrinter,
                 DWORD JobId,
                 DWORD Level,





                 LPBYTE pJob,
                 DWORD Command
);
BOOL
__stdcall
SetJobW(
                 HANDLE hPrinter,
                 DWORD JobId,
                 DWORD Level,





                 LPBYTE pJob,
                 DWORD Command
);






BOOL
__stdcall
GetJobA(
      HANDLE hPrinter,
      DWORD JobId,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);
BOOL
__stdcall
GetJobW(
      HANDLE hPrinter,
      DWORD JobId,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);






BOOL
__stdcall
EnumJobsA(
      HANDLE hPrinter,
      DWORD FirstJob,
      DWORD NoJobs,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded,
      LPDWORD pcReturned
);
BOOL
__stdcall
EnumJobsW(
      HANDLE hPrinter,
      DWORD FirstJob,
      DWORD NoJobs,
      DWORD Level,

      LPBYTE pJob,
      DWORD cbBuf,
      LPDWORD pcbNeeded,
      LPDWORD pcReturned
);






HANDLE
__stdcall
AddPrinterA(
            LPSTR pName,

            DWORD Level,


            LPBYTE pPrinter
);
HANDLE
__stdcall
AddPrinterW(
            LPWSTR pName,

            DWORD Level,


            LPBYTE pPrinter
);






BOOL
__stdcall
DeletePrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
SetPrinterA(
                     HANDLE hPrinter,
                     DWORD Level,
#line 1482 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
                     LPBYTE pPrinter,
                     DWORD Command
    );
BOOL
__stdcall
SetPrinterW(
                     HANDLE hPrinter,
                     DWORD Level,
#line 1501 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
                     LPBYTE pPrinter,
                     DWORD Command
    );






BOOL
__stdcall
GetPrinterA(
      HANDLE hPrinter,
      DWORD Level,

      LPBYTE pPrinter,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterW(
      HANDLE hPrinter,
      DWORD Level,

      LPBYTE pPrinter,
      DWORD cbBuf,
      LPDWORD pcbNeeded
);






BOOL
__stdcall
AddPrinterDriverA(
            LPSTR pName,
            DWORD Level,
            LPBYTE pDriverInfo
);
BOOL
__stdcall
AddPrinterDriverW(
            LPWSTR pName,
            DWORD Level,
            LPBYTE pDriverInfo
);






BOOL
__stdcall
AddPrinterDriverExA(
                 LPSTR pName,
                 DWORD Level,





                 PBYTE lpbDriverInfo,
                 DWORD dwFileCopyFlags
);
BOOL
__stdcall
AddPrinterDriverExW(
                 LPWSTR pName,
                 DWORD Level,





                 PBYTE lpbDriverInfo,
                 DWORD dwFileCopyFlags
);






BOOL
__stdcall
EnumPrinterDriversA(
            LPSTR pName,
            LPSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrinterDriversW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);






BOOL
__stdcall
GetPrinterDriverA(
            HANDLE hPrinter,
            LPSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverW(
            HANDLE hPrinter,
            LPWSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverInfo,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);






BOOL
__stdcall
GetPrinterDriverDirectoryA(
            LPSTR pName,
            LPSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverDirectory,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverDirectoryW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            DWORD Level,

            LPBYTE pDriverDirectory,
            DWORD cbBuf,
            LPDWORD pcbNeeded
);






BOOL
__stdcall
DeletePrinterDriverA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pDriverName
);
BOOL
__stdcall
DeletePrinterDriverW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pDriverName
);






BOOL
__stdcall
DeletePrinterDriverExA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pDriverName,
            DWORD dwDeleteFlag,
            DWORD dwVersionFlag
);
BOOL
__stdcall
DeletePrinterDriverExW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pDriverName,
            DWORD dwDeleteFlag,
            DWORD dwVersionFlag
);
#line 1720 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
AddPrintProcessorA(
           LPSTR pName,
           LPSTR pEnvironment,
           LPSTR pPathName,
           LPSTR pPrintProcessorName
);
BOOL
__stdcall
AddPrintProcessorW(
           LPWSTR pName,
           LPWSTR pEnvironment,
           LPWSTR pPathName,
           LPWSTR pPrintProcessorName
);






BOOL
__stdcall
EnumPrintProcessorsA(
           LPSTR pName,
           LPSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded,
           LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintProcessorsW(
           LPWSTR pName,
           LPWSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded,
           LPDWORD pcReturned
);
#line 1774 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
GetPrintProcessorDirectoryA(
           LPSTR pName,
           LPSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrintProcessorDirectoryW(
           LPWSTR pName,
           LPWSTR pEnvironment,
           DWORD Level,

           LPBYTE pPrintProcessorInfo,
           DWORD cbBuf,
           LPDWORD pcbNeeded
);







BOOL
__stdcall
EnumPrintProcessorDatatypesA(
            LPSTR pName,
            LPSTR pPrintProcessorName,
            DWORD Level,

            LPBYTE pDatatypes,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);

BOOL
__stdcall
EnumPrintProcessorDatatypesW(
            LPWSTR pName,
            LPWSTR pPrintProcessorName,
            DWORD Level,

            LPBYTE pDatatypes,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);






BOOL
__stdcall
DeletePrintProcessorA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pPrintProcessorName
);
BOOL
__stdcall
DeletePrintProcessorW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pPrintProcessorName
);






DWORD
__stdcall
StartDocPrinterA(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pDocInfo
);
DWORD
__stdcall
StartDocPrinterW(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pDocInfo
);






BOOL
__stdcall
StartPagePrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
WritePrinter(
        HANDLE hPrinter,

        LPVOID pBuf,
        DWORD cbBuf,
        LPDWORD pcWritten
);


BOOL
__stdcall
FlushPrinter(
        HANDLE hPrinter,

        LPVOID pBuf,
        DWORD cbBuf,
        LPDWORD pcWritten,
        DWORD cSleep
);

BOOL
__stdcall
EndPagePrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
AbortPrinter(
        HANDLE hPrinter
);

BOOL
__stdcall
ReadPrinter(
        HANDLE hPrinter,

        LPVOID pBuf,
        DWORD cbBuf,
        LPDWORD pNoBytesRead
);

BOOL
__stdcall
EndDocPrinter(
          HANDLE hPrinter
    );

BOOL
__stdcall
AddJobA(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pData,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);
BOOL
__stdcall
AddJobW(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pData,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);






BOOL
__stdcall
ScheduleJob(
        HANDLE hPrinter,
        DWORD JobId
);

BOOL
__stdcall
PrinterProperties(
        HWND hWnd,
        HANDLE hPrinter
);

LONG
__stdcall
DocumentPropertiesA(
                HWND hWnd,
                HANDLE hPrinter,
                LPSTR pDeviceName,
                PDEVMODEA pDevModeOutput,
                PDEVMODEA pDevModeInput,
                DWORD fMode
);
LONG
__stdcall
DocumentPropertiesW(
                HWND hWnd,
                HANDLE hPrinter,
                LPWSTR pDeviceName,
                PDEVMODEW pDevModeOutput,
                PDEVMODEW pDevModeInput,
                DWORD fMode
);






LONG
__stdcall
AdvancedDocumentPropertiesA(
                HWND hWnd,
                HANDLE hPrinter,
                LPSTR pDeviceName,
                PDEVMODEA pDevModeOutput,
                PDEVMODEA pDevModeInput
);
LONG
__stdcall
AdvancedDocumentPropertiesW(
                HWND hWnd,
                HANDLE hPrinter,
                LPWSTR pDeviceName,
                PDEVMODEW pDevModeOutput,
                PDEVMODEW pDevModeInput
);







    LONG
    ExtDeviceMode(
                    HWND hWnd,
                    HANDLE hInst,
                    LPDEVMODEA pDevModeOutput,
                    LPSTR pDeviceName,
                    LPSTR pPort,
                    LPDEVMODEA pDevModeInput,
                    LPSTR pProfile,
                    DWORD fMode
    );



DWORD
__stdcall
GetPrinterDataA(
             HANDLE hPrinter,
             LPSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);
DWORD
__stdcall
GetPrinterDataW(
             HANDLE hPrinter,
             LPWSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);






DWORD
__stdcall
GetPrinterDataExA(
             HANDLE hPrinter,
             LPCSTR pKeyName,
             LPCSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);
DWORD
__stdcall
GetPrinterDataExW(
             HANDLE hPrinter,
             LPCWSTR pKeyName,
             LPCWSTR pValueName,
             LPDWORD pType,

             LPBYTE pData,
             DWORD nSize,
             LPDWORD pcbNeeded
);






DWORD
__stdcall
EnumPrinterDataA(
            HANDLE hPrinter,
            DWORD dwIndex,

            LPSTR pValueName,
            DWORD cbValueName,
            LPDWORD pcbValueName,
            LPDWORD pType,

            LPBYTE pData,
            DWORD cbData,

            LPDWORD pcbData
);
DWORD
__stdcall
EnumPrinterDataW(
            HANDLE hPrinter,
            DWORD dwIndex,

            LPWSTR pValueName,
            DWORD cbValueName,
            LPDWORD pcbValueName,
            LPDWORD pType,

            LPBYTE pData,
            DWORD cbData,

            LPDWORD pcbData
);






DWORD
__stdcall
EnumPrinterDataExA(
        HANDLE hPrinter,
        LPCSTR pKeyName,

        LPBYTE pEnumValues,
        DWORD cbEnumValues,
        LPDWORD pcbEnumValues,
        LPDWORD pnEnumValues
);
DWORD
__stdcall
EnumPrinterDataExW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,

        LPBYTE pEnumValues,
        DWORD cbEnumValues,
        LPDWORD pcbEnumValues,
        LPDWORD pnEnumValues
);






DWORD
__stdcall
EnumPrinterKeyA(
        HANDLE hPrinter,
        LPCSTR pKeyName,

        LPSTR pSubkey,
        DWORD cbSubkey,
        LPDWORD pcbSubkey
);
DWORD
__stdcall
EnumPrinterKeyW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,

        LPWSTR pSubkey,
        DWORD cbSubkey,
        LPDWORD pcbSubkey
);







DWORD
__stdcall
SetPrinterDataA(
        HANDLE hPrinter,
        LPSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);
DWORD
__stdcall
SetPrinterDataW(
        HANDLE hPrinter,
        LPWSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);







DWORD
__stdcall
SetPrinterDataExA(
        HANDLE hPrinter,
        LPCSTR pKeyName,
        LPCSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);
DWORD
__stdcall
SetPrinterDataExW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,
        LPCWSTR pValueName,
        DWORD Type,

        LPBYTE pData,
        DWORD cbData
);
#line 2247 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
DWORD
__stdcall
DeletePrinterDataA(
        HANDLE hPrinter,
        LPSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataW(
        HANDLE hPrinter,
        LPWSTR pValueName
);







DWORD
__stdcall
DeletePrinterDataExA(
        HANDLE hPrinter,
        LPCSTR pKeyName,
        LPCSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataExW(
        HANDLE hPrinter,
        LPCWSTR pKeyName,
        LPCWSTR pValueName
);







DWORD
__stdcall
DeletePrinterKeyA(
        HANDLE hPrinter,
        LPCSTR pKeyName
);
DWORD
__stdcall
DeletePrinterKeyW(
        HANDLE hPrinter,
        LPCWSTR pKeyName
);
#line 2377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;




typedef struct _PRINTER_NOTIFY_OPTIONS {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;





typedef struct _PRINTER_NOTIFY_INFO_DATA {
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union {
        DWORD adwData[2];
        struct {
            DWORD cbBuf;
            LPVOID pBuf;
        } Data;
    } NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;

typedef struct _PRINTER_NOTIFY_INFO {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;


    typedef struct _BINARY_CONTAINER{
        DWORD cbBuf;
        LPBYTE pData;
    } BINARY_CONTAINER, *PBINARY_CONTAINER;


    typedef struct _BIDI_DATA{
        DWORD dwBidiType;
        union {
            BOOL bData;
            LONG iData;
            LPWSTR sData;
            FLOAT fData;
            BINARY_CONTAINER biData;
            }u;
    } BIDI_DATA, *PBIDI_DATA, *LPBIDI_DATA;


    typedef struct _BIDI_REQUEST_DATA{
        DWORD dwReqNumber;
        LPWSTR pSchema;
        BIDI_DATA data;
    } BIDI_REQUEST_DATA , *PBIDI_REQUEST_DATA , *LPBIDI_REQUEST_DATA;


    typedef struct _BIDI_REQUEST_CONTAINER{
        DWORD Version;
        DWORD Flags;
        DWORD Count;
        BIDI_REQUEST_DATA aData[ 1 ];
    }BIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER;

    typedef struct _BIDI_RESPONSE_DATA{
        DWORD dwResult;
        DWORD dwReqNumber;
        LPWSTR pSchema;
        BIDI_DATA data;
    } BIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA;

    typedef struct _BIDI_RESPONSE_CONTAINER{
        DWORD Version;
        DWORD Flags;
        DWORD Count;
        BIDI_RESPONSE_DATA aData[ 1 ];
    } BIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER;






    typedef enum {
        BIDI_NULL = 0,
        BIDI_INT = 1,
        BIDI_FLOAT = 2,
        BIDI_BOOL = 3,
        BIDI_STRING = 4,
        BIDI_TEXT = 5,
        BIDI_ENUM = 6,
        BIDI_BLOB = 7
    } BIDI_TYPE;
#line 2508 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
DWORD
__stdcall
WaitForPrinterChange(
     HANDLE hPrinter,
     DWORD Flags
);

HANDLE
__stdcall
FindFirstPrinterChangeNotification(
         HANDLE hPrinter,
         DWORD fdwFilter,
         DWORD fdwOptions,
         PVOID pPrinterNotifyOptions
    );


BOOL
__stdcall
FindNextPrinterChangeNotification(
            HANDLE hChange,
            PDWORD pdwChange,
            LPVOID pvReserved,
            LPVOID *ppPrinterNotifyInfo
    );

BOOL
__stdcall
FreePrinterNotifyInfo(
       PPRINTER_NOTIFY_INFO pPrinterNotifyInfo
    );

BOOL
__stdcall
FindClosePrinterChangeNotification(
       HANDLE hChange
    );
#line 2582 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
DWORD
__stdcall
PrinterMessageBoxA(
       HANDLE hPrinter,
       DWORD Error,
       HWND hWnd,
       LPSTR pText,
       LPSTR pCaption,
       DWORD dwType
);
DWORD
__stdcall
PrinterMessageBoxW(
       HANDLE hPrinter,
       DWORD Error,
       HWND hWnd,
       LPWSTR pText,
       LPWSTR pCaption,
       DWORD dwType
);
#line 2618 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
ClosePrinter(
     HANDLE hPrinter
);

BOOL
__stdcall
AddFormA(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pForm
);
BOOL
__stdcall
AddFormW(
                 HANDLE hPrinter,
                 DWORD Level,


                 LPBYTE pForm
);






BOOL
__stdcall
DeleteFormA(
        HANDLE hPrinter,
        LPSTR pFormName
);
BOOL
__stdcall
DeleteFormW(
        HANDLE hPrinter,
        LPWSTR pFormName
);
#line 2668 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
GetFormA(
        HANDLE hPrinter,
        LPSTR pFormName,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);
BOOL
__stdcall
GetFormW(
        HANDLE hPrinter,
        LPWSTR pFormName,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);
#line 2698 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
SetFormA(
                 HANDLE hPrinter,
                 LPSTR pFormName,
                 DWORD Level,


                 LPBYTE pForm
);
BOOL
__stdcall
SetFormW(
                 HANDLE hPrinter,
                 LPWSTR pFormName,
                 DWORD Level,


                 LPBYTE pForm
);






BOOL
__stdcall
EnumFormsA(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded,
        LPDWORD pcReturned
);
BOOL
__stdcall
EnumFormsW(
        HANDLE hPrinter,
        DWORD Level,

        LPBYTE pForm,
        DWORD cbBuf,
        LPDWORD pcbNeeded,
        LPDWORD pcReturned
);







BOOL
__stdcall
EnumMonitorsA(
            LPSTR pName,
            DWORD Level,

            LPBYTE pMonitor,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
BOOL
__stdcall
EnumMonitorsW(
            LPWSTR pName,
            DWORD Level,

            LPBYTE pMonitor,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
#line 2783 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
AddMonitorA(
            LPSTR pName,
            DWORD Level,

            LPBYTE pMonitors
);
BOOL
__stdcall
AddMonitorW(
            LPWSTR pName,
            DWORD Level,

            LPBYTE pMonitors
);
#line 2807 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
DeleteMonitorA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pMonitorName
);
BOOL
__stdcall
DeleteMonitorW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pMonitorName
);
#line 2829 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
EnumPortsA(
            LPSTR pName,
            DWORD Level,

            LPBYTE pPort,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);
BOOL
__stdcall
EnumPortsW(
            LPWSTR pName,
            DWORD Level,

            LPBYTE pPort,
            DWORD cbBuf,
            LPDWORD pcbNeeded,
            LPDWORD pcReturned
);







BOOL
__stdcall
AddPortA(
            LPSTR pName,
            HWND hWnd,
            LPSTR pMonitorName
);
BOOL
__stdcall
AddPortW(
            LPWSTR pName,
            HWND hWnd,
            LPWSTR pMonitorName
);
#line 2880 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
ConfigurePortA(
            LPSTR pName,
            HWND hWnd,
            LPSTR pPortName
);
BOOL
__stdcall
ConfigurePortW(
            LPWSTR pName,
            HWND hWnd,
            LPWSTR pPortName
);






BOOL
__stdcall
DeletePortA(
            LPSTR pName,
            HWND hWnd,
            LPSTR pPortName
);
BOOL
__stdcall
DeletePortW(
            LPWSTR pName,
            HWND hWnd,
            LPWSTR pPortName
);






BOOL
__stdcall
XcvDataW(
            HANDLE hXcv,
            PCWSTR pszDataName,

            PBYTE pInputData,
            DWORD cbInputData,

            PBYTE pOutputData,
            DWORD cbOutputData,
            PDWORD pcbOutputNeeded,
            PDWORD pdwStatus
);


BOOL
__stdcall
GetDefaultPrinterA(
                                    LPSTR pszBuffer,
                                    LPDWORD pcchBuffer
    );
BOOL
__stdcall
GetDefaultPrinterW(
                                    LPWSTR pszBuffer,
                                    LPDWORD pcchBuffer
    );






BOOL
__stdcall
SetDefaultPrinterA(
            LPCSTR pszPrinter
    );
BOOL
__stdcall
SetDefaultPrinterW(
            LPCWSTR pszPrinter
    );







BOOL
__stdcall
SetPortA(
            LPSTR pName,
            LPSTR pPortName,
            DWORD dwLevel,

            LPBYTE pPortInfo
);
BOOL
__stdcall
SetPortW(
            LPWSTR pName,
            LPWSTR pPortName,
            DWORD dwLevel,

            LPBYTE pPortInfo
);
#line 2997 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
AddPrinterConnectionA(
     LPSTR pName
);
BOOL
__stdcall
AddPrinterConnectionW(
     LPWSTR pName
);
#line 3015 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
BOOL
__stdcall
DeletePrinterConnectionA(
     LPSTR pName
);
BOOL
__stdcall
DeletePrinterConnectionW(
     LPWSTR pName
);
#line 3033 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
HANDLE
__stdcall
ConnectToPrinterDlg(
        HWND hwnd,
       DWORD Flags
);

typedef struct _PROVIDOR_INFO_1A{
    LPSTR pName;
    LPSTR pEnvironment;
    LPSTR pDLLName;
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W{
    LPWSTR pName;
    LPWSTR pEnvironment;
    LPWSTR pDLLName;
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;

typedef PROVIDOR_INFO_1W PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1W PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1W LPPROVIDOR_INFO_1;






typedef struct _PROVIDOR_INFO_2A{
    LPSTR pOrder;
} PROVIDOR_INFO_2A, *PPROVIDOR_INFO_2A, *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W{
    LPWSTR pOrder;
} PROVIDOR_INFO_2W, *PPROVIDOR_INFO_2W, *LPPROVIDOR_INFO_2W;

typedef PROVIDOR_INFO_2W PROVIDOR_INFO_2;
typedef PPROVIDOR_INFO_2W PPROVIDOR_INFO_2;
typedef LPPROVIDOR_INFO_2W LPPROVIDOR_INFO_2;






BOOL
__stdcall
AddPrintProvidorA(
                 LPSTR pName,
                 DWORD Level,


                 LPBYTE pProvidorInfo
);
BOOL
__stdcall
AddPrintProvidorW(
                 LPWSTR pName,
                 DWORD Level,


                 LPBYTE pProvidorInfo
);






BOOL
__stdcall
DeletePrintProvidorA(
            LPSTR pName,
            LPSTR pEnvironment,
            LPSTR pPrintProvidorName
);
BOOL
__stdcall
DeletePrintProvidorW(
            LPWSTR pName,
            LPWSTR pEnvironment,
            LPWSTR pPrintProvidorName
);







    BOOL
    __stdcall
    IsValidDevmodeA(
                    PDEVMODEA pDevmode,
                    size_t DevmodeSize
        );
    BOOL
    __stdcall
    IsValidDevmodeW(
                    PDEVMODEW pDevmode,
                    size_t DevmodeSize
        );
#line 3358 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
    typedef enum _PRINTER_OPTION_FLAGS
    {
        PRINTER_OPTION_NO_CACHE = 1 << 0,
        PRINTER_OPTION_CACHE = 1 << 1,
        PRINTER_OPTION_CLIENT_CHANGE = 1 << 2,
        PRINTER_OPTION_NO_CLIENT_DATA = 1 << 3,
    } PRINTER_OPTION_FLAGS;


    typedef struct _PRINTER_OPTIONSA
    {
        UINT cbSize;
        DWORD dwFlags;
    } PRINTER_OPTIONSA, *PPRINTER_OPTIONSA, *LPPRINTER_OPTIONSA;
    typedef struct _PRINTER_OPTIONSW
    {
        UINT cbSize;
        DWORD dwFlags;
    } PRINTER_OPTIONSW, *PPRINTER_OPTIONSW, *LPPRINTER_OPTIONSW;

typedef PRINTER_OPTIONSW PRINTER_OPTIONS;
typedef PPRINTER_OPTIONSW PPRINTER_OPTIONS;
typedef LPPRINTER_OPTIONSW LPPRINTER_OPTIONS;






    BOOL
    __stdcall
    OpenPrinter2A(
                  LPCSTR pPrinterName,
                  LPHANDLE phPrinter,
                  PPRINTER_DEFAULTSA pDefault,
                  PPRINTER_OPTIONSA pOptions
    );
    BOOL
    __stdcall
    OpenPrinter2W(
                  LPCWSTR pPrinterName,
                  LPHANDLE phPrinter,
                  PPRINTER_DEFAULTSW pDefault,
                  PPRINTER_OPTIONSW pOptions
    );
#line 3412 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
    typedef struct _PRINTER_CONNECTION_INFO_1A
    {
        DWORD dwFlags;
        LPSTR pszDriverName;
    } PRINTER_CONNECTION_INFO_1A, *PPRINTER_CONNECTION_INFO_1A;
    typedef struct _PRINTER_CONNECTION_INFO_1W
    {
        DWORD dwFlags;
        LPWSTR pszDriverName;
    } PRINTER_CONNECTION_INFO_1W, *PPRINTER_CONNECTION_INFO_1W;

typedef PRINTER_CONNECTION_INFO_1W PRINTER_CONNECTION_INFO_1;
typedef PPRINTER_CONNECTION_INFO_1W PPRINTER_CONNECTION_INFO_1;





    BOOL
    __stdcall
    AddPrinterConnection2A(
                HWND hWnd,
                LPCSTR pszName,
                DWORD dwLevel,
                PVOID pConnectionInfo
        );
    BOOL
    __stdcall
    AddPrinterConnection2W(
                HWND hWnd,
                LPCWSTR pszName,
                DWORD dwLevel,
                PVOID pConnectionInfo
        );
#line 3459 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
    HRESULT
    __stdcall
    InstallPrinterDriverFromPackageA(
               LPCSTR pszServer,
               LPCSTR pszInfPath,
               LPCSTR pszDriverName,
               LPCSTR pszEnvironment,
               DWORD dwFlags
    );
    HRESULT
    __stdcall
    InstallPrinterDriverFromPackageW(
               LPCWSTR pszServer,
               LPCWSTR pszInfPath,
               LPCWSTR pszDriverName,
               LPCWSTR pszEnvironment,
               DWORD dwFlags
    );
#line 3488 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
    HRESULT
    __stdcall
    UploadPrinterDriverPackageA(
               LPCSTR pszServer,
               LPCSTR pszInfPath,
               LPCSTR pszEnvironment,
               DWORD dwFlags,
               HWND hwnd,

               LPSTR pszDestInfPath,
               PULONG pcchDestInfPath
    );
    HRESULT
    __stdcall
    UploadPrinterDriverPackageW(
               LPCWSTR pszServer,
               LPCWSTR pszInfPath,
               LPCWSTR pszEnvironment,
               DWORD dwFlags,
               HWND hwnd,

               LPWSTR pszDestInfPath,
               PULONG pcchDestInfPath
    );






    typedef struct _CORE_PRINTER_DRIVERA
    {
        GUID CoreDriverGUID;
        FILETIME ftDriverDate;
        DWORDLONG dwlDriverVersion;
        CHAR szPackageID[260];
    } CORE_PRINTER_DRIVERA, *PCORE_PRINTER_DRIVERA;
    typedef struct _CORE_PRINTER_DRIVERW
    {
        GUID CoreDriverGUID;
        FILETIME ftDriverDate;
        DWORDLONG dwlDriverVersion;
        WCHAR szPackageID[260];
    } CORE_PRINTER_DRIVERW, *PCORE_PRINTER_DRIVERW;

typedef CORE_PRINTER_DRIVERW CORE_PRINTER_DRIVER;
typedef PCORE_PRINTER_DRIVERW PCORE_PRINTER_DRIVER;





    HRESULT
    __stdcall
    GetCorePrinterDriversA(
                                      LPCSTR pszServer,
                                      LPCSTR pszEnvironment,
                                      LPCSTR pszzCoreDriverDependencies,
                                      DWORD cCorePrinterDrivers,
                                      PCORE_PRINTER_DRIVERA pCorePrinterDrivers
    );
    HRESULT
    __stdcall
    GetCorePrinterDriversW(
                                      LPCWSTR pszServer,
                                      LPCWSTR pszEnvironment,
                                      LPCWSTR pszzCoreDriverDependencies,
                                      DWORD cCorePrinterDrivers,
                                      PCORE_PRINTER_DRIVERW pCorePrinterDrivers
    );






    HRESULT
    __stdcall
    CorePrinterDriverInstalledA(
                        LPCSTR pszServer,
                        LPCSTR pszEnvironment,
                        GUID CoreDriverGUID,
                        FILETIME ftDriverDate,
                        DWORDLONG dwlDriverVersion,
                        BOOL *pbDriverInstalled
    );
    HRESULT
    __stdcall
    CorePrinterDriverInstalledW(
                        LPCWSTR pszServer,
                        LPCWSTR pszEnvironment,
                        GUID CoreDriverGUID,
                        FILETIME ftDriverDate,
                        DWORDLONG dwlDriverVersion,
                        BOOL *pbDriverInstalled
    );






    HRESULT
    __stdcall
    GetPrinterDriverPackagePathA(
                                               LPCSTR pszServer,
                                               LPCSTR pszEnvironment,
                                               LPCSTR pszLanguage,
                                               LPCSTR pszPackageID,
                                                LPSTR pszDriverPackageCab,
                                               DWORD cchDriverPackageCab,
                                               LPDWORD pcchRequiredSize
    );
    HRESULT
    __stdcall
    GetPrinterDriverPackagePathW(
                                               LPCWSTR pszServer,
                                               LPCWSTR pszEnvironment,
                                               LPCWSTR pszLanguage,
                                               LPCWSTR pszPackageID,
                                                LPWSTR pszDriverPackageCab,
                                               DWORD cchDriverPackageCab,
                                               LPDWORD pcchRequiredSize
    );






    HRESULT
    __stdcall
    DeletePrinterDriverPackageA(
               LPCSTR pszServer,
               LPCSTR pszInfPath,
               LPCSTR pszEnvironment
    );
    HRESULT
    __stdcall
    DeletePrinterDriverPackageW(
               LPCWSTR pszServer,
               LPCWSTR pszInfPath,
               LPCWSTR pszEnvironment
    );






    typedef enum
    {
        kPropertyTypeString = 1,
        kPropertyTypeInt32,
        kPropertyTypeInt64,
        kPropertyTypeByte,
        kPropertyTypeTime,
        kPropertyTypeDevMode,
        kPropertyTypeSD,
        kPropertyTypeNotificationReply,
        kPropertyTypeNotificationOptions,
        kPropertyTypeBuffer

    } EPrintPropertyType;

    typedef enum
    {
        kAddingDocumentSequence = 0,
        kDocumentSequenceAdded = 1,
        kAddingFixedDocument = 2,
        kFixedDocumentAdded = 3,
        kAddingFixedPage = 4,
        kFixedPageAdded = 5,
        kResourceAdded = 6,
        kFontAdded = 7,
        kImageAdded = 8,
        kXpsDocumentCommitted = 9

    } EPrintXPSJobProgress;

    typedef enum
    {
        kJobProduction = 1,
        kJobConsumption

    } EPrintXPSJobOperation;

    typedef struct
    {
        EPrintPropertyType ePropertyType;
        union
        {
            BYTE propertyByte;
            PWSTR propertyString;
            LONG propertyInt32;
            LONGLONG propertyInt64;
            struct {
                DWORD cbBuf;
                LPVOID pBuf;
            } propertyBlob;
        } value;

    }PrintPropertyValue;

    typedef struct
    {
        WCHAR* propertyName;
        PrintPropertyValue propertyValue;

    }PrintNamedProperty;

    typedef struct
    {
        ULONG numberOfProperties;
        PrintNamedProperty* propertiesCollection;

    }PrintPropertiesCollection;

    HRESULT
    __stdcall
    ReportJobProcessingProgress(
                HANDLE printerHandle,
                ULONG jobId,
                EPrintXPSJobOperation jobOperation,
                EPrintXPSJobProgress jobProgress
        );

    BOOL
    __stdcall
    GetPrinterDriver2A(
                    HWND hWnd,
                    HANDLE hPrinter,
                    LPSTR pEnvironment,
                    DWORD Level,

                    LPBYTE pDriverInfo,
                    DWORD cbBuf,
                    LPDWORD pcbNeeded
    );
    BOOL
    __stdcall
    GetPrinterDriver2W(
                    HWND hWnd,
                    HANDLE hPrinter,
                    LPWSTR pEnvironment,
                    DWORD Level,

                    LPBYTE pDriverInfo,
                    DWORD cbBuf,
                    LPDWORD pcbNeeded
    );
#line 3749 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
typedef enum
{
    PRINT_EXECUTION_CONTEXT_APPLICATION = 0,
    PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1,
    PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2,
    PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3,
    PRINT_EXECUTION_CONTEXT_WOW64 = 4
}
PRINT_EXECUTION_CONTEXT;

typedef struct
{
    PRINT_EXECUTION_CONTEXT context;
    DWORD clientAppPID;
}
PRINT_EXECUTION_DATA;

BOOL
__stdcall
GetPrintExecutionData(
          PRINT_EXECUTION_DATA *pData
    );






DWORD
__stdcall
GetJobNamedPropertyValue(
          HANDLE hPrinter,
          DWORD JobId,
          PCWSTR pszName,
          PrintPropertyValue *pValue
    );

void
__stdcall
FreePrintPropertyValue(
            PrintPropertyValue *pValue
    );

void
__stdcall
FreePrintNamedPropertyArray(
                                      DWORD cProperties,


                                      PrintNamedProperty **ppProperties
    );

DWORD
__stdcall
SetJobNamedProperty(
          HANDLE hPrinter,
          DWORD JobId,
          const PrintNamedProperty *pProperty
    );

DWORD
__stdcall
DeleteJobNamedProperty(
          HANDLE hPrinter,
          DWORD JobId,
          PCWSTR pszName
    );

DWORD
__stdcall
EnumJobNamedProperties(
          HANDLE hPrinter,
          DWORD JobId,
          DWORD *pcProperties,

          PrintNamedProperty **ppProperties
    );

HRESULT
__stdcall
GetPrintOutputInfo(
                HWND hWnd,
                PCWSTR pszPrinter,
             HANDLE *phFile,
             PWSTR *ppszOutputFile
    );
#line 3846 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winspool.h"
}
#line 206 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
#line 22 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
#line 26 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
#line 26 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
#line 61 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
#line 61 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
#line 224 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
extern "C++"
{
    template<typename T> void** IID_PPV_ARGS_Helper(T** pp)
    {
#pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
 static_cast<IUnknown*>(*pp);
        return reinterpret_cast<void**>(pp);
    }
}
#line 313 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits.h"
#line 17 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 17 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits.h"
#line 22 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"






#pragma pack(push,8)


extern "C" {
#line 52 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
typedef int (__cdecl * _onexit_t)(void);
#line 75 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;
#line 102 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()
#line 122 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {



        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()
#line 215 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void);


__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler( _purecall_handler _Handler);
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);



extern "C++"
{





}




typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);


__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler( _invalid_parameter_handler _Handler);
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);





__declspec(dllimport) extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno( int _Value);
errno_t __cdecl _get_errno( int * _Value);


__declspec(dllimport) unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno( unsigned long _Value);
errno_t __cdecl _get_doserrno( unsigned long * _Value);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char ** __cdecl __sys_errlist(void);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int * __cdecl __sys_nerr(void);





__declspec(dllimport) int * __cdecl __p___argc(void);
__declspec(dllimport) char *** __cdecl __p___argv(void);
__declspec(dllimport) wchar_t *** __cdecl __p___wargv(void);
__declspec(dllimport) char *** __cdecl __p__environ(void);
__declspec(dllimport) wchar_t *** __cdecl __p__wenviron(void);


__declspec(dllimport) char ** __cdecl __p__pgmptr(void);
__declspec(dllimport) wchar_t ** __cdecl __p__wpgmptr(void);
#line 288 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
__declspec(dllimport) extern int __argc;
__declspec(dllimport) extern char ** __argv;
__declspec(dllimport) extern wchar_t ** __wargv;
#line 306 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
__declspec(dllimport) extern char ** _environ;
__declspec(dllimport) extern wchar_t ** _wenviron;



__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern char * _pgmptr;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern wchar_t * _wpgmptr;
#line 339 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
errno_t __cdecl _get_pgmptr( char ** _Value);
errno_t __cdecl _get_wpgmptr( wchar_t ** _Value);





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern int _fmode;






__declspec(dllimport) errno_t __cdecl _set_fmode( int _Mode);
__declspec(dllimport) errno_t __cdecl _get_fmode( int * _PMode);






extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}
#line 376 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);

__declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);


__declspec(dllimport) unsigned int __cdecl _set_abort_behavior( unsigned int _Flags, unsigned int _Mask);

int __cdecl abs( int _X);
long __cdecl labs( long _X);
long long __cdecl llabs( long long _X);

        __int64 __cdecl _abs64(__int64);
#line 426 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
        int __cdecl atexit(void (__cdecl *)(void));

               __declspec(dllimport) double __cdecl atof( const char *_String);
               __declspec(dllimport) double __cdecl _atof_l( const char *_String, _locale_t _Locale);
               __declspec(dllimport) int __cdecl atoi( const char *_Str);
               __declspec(dllimport) int __cdecl _atoi_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) long __cdecl atol( const char *_Str);
               __declspec(dllimport) long __cdecl _atol_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl atoll( const char *_Str);
               __declspec(dllimport) long long __cdecl _atoll_l( const char *_Str, _locale_t _Locale);



               __declspec(dllimport) void * __cdecl bsearch_s( const void * _Key, const void * _Base,
             rsize_t _NumOfElements, rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);

               __declspec(dllimport) void * __cdecl bsearch( const void * _Key, const void * _Base,
             size_t _NumOfElements, size_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(const void *, const void *));


__declspec(dllimport) void __cdecl qsort_s( void * _Base,
             rsize_t _NumOfElements, rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);

__declspec(dllimport) void __cdecl qsort( void * _Base,
             size_t _NumOfElements, size_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(const void *, const void *));

                       unsigned short __cdecl _byteswap_ushort( unsigned short _Short);
                       unsigned long __cdecl _byteswap_ulong ( unsigned long _Long);
                       unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Int64);
               __declspec(dllimport) div_t __cdecl div( int _Numerator, int _Denominator);


               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl getenv( const char * _VarName);

                   __declspec(dllimport) errno_t __cdecl getenv_s( size_t * _ReturnSize, char * _DstBuf, rsize_t _DstSize, const char * _VarName);

extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t * _ReturnSize, char (&_Dest)[_Size], const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }





                   __declspec(dllimport) errno_t __cdecl _dupenv_s( char **_PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName);






                   __declspec(dllimport) errno_t __cdecl _itoa_s( int _Value, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Dest)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _itoa(int _Value, char *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _i64toa_s( __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _i64toa( __int64 _Val, char * _DstBuf, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ui64toa_s( unsigned __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ui64toa( unsigned __int64 _Val, char * _DstBuf, int _Radix);
               __declspec(dllimport) __int64 __cdecl _atoi64( const char * _String);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( const char * _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _strtoi64( const char * _String, char ** _EndPtr, int _Radix);
               __declspec(dllimport) __int64 __cdecl _strtoi64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned __int64 __cdecl _strtoui64( const char * _String, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) ldiv_t __cdecl ldiv( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);

extern "C++"
{
    inline long abs(long _X) throw()
    {
        return labs(_X);
    }
    inline long long abs(long long _X) throw()
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2) throw()
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}

                   __declspec(dllimport) errno_t __cdecl _ltoa_s( long _Val, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Dest)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _ltoa(long _Value, char *_Dest, int _Radix);
               __declspec(dllimport) int __cdecl mblen( const char * _Ch, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _mblen_l( const char * _Ch, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl _mbstrlen( const char * _Str);
               __declspec(dllimport) size_t __cdecl _mbstrlen_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl _mbstrnlen( const char *_Str, size_t _MaxCount);
               __declspec(dllimport) size_t __cdecl _mbstrnlen_l( const char *_Str, size_t _MaxCount, _locale_t _Locale);
__declspec(dllimport) int __cdecl mbtowc( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes);
__declspec(dllimport) int __cdecl _mbtowc_l( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl mbstowcs_s( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], const char * _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, const char * _Source, size_t _MaxCount);

                   __declspec(dllimport) errno_t __cdecl _mbstowcs_s_l( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], const char * _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale);

               __declspec(dllimport) int __cdecl rand(void);




                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);

__declspec(dllimport) void __cdecl srand( unsigned int _Seed);
               __declspec(dllimport) double __cdecl strtod( const char * _Str, char ** _EndPtr);
               __declspec(dllimport) double __cdecl _strtod_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) long __cdecl strtol( const char * _Str, char ** _EndPtr, int _Radix );
               __declspec(dllimport) long __cdecl _strtol_l( const char *_Str, char **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl strtoll( const char * _Str, char ** _EndPtr, int _Radix );
               __declspec(dllimport) long long __cdecl _strtoll_l( const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale );
               __declspec(dllimport) unsigned long __cdecl strtoul( const char * _Str, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _Str, char **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long long __cdecl strtoull( const char * _Str, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long long __cdecl _strtoull_l( const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long double __cdecl strtold( const char * _Str, char ** _EndPtr);
               __declspec(dllimport) long double __cdecl _strtold_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) float __cdecl strtof( const char * _Str, char ** _EndPtr);
               __declspec(dllimport) float __cdecl _strtof_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);




__declspec(dllimport) int __cdecl system( const char * _Command);



                   __declspec(dllimport) errno_t __cdecl _ultoa_s( unsigned long _Val, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Dest)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _ultoa(unsigned long _Value, char *_Dest, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int __cdecl wctomb( char * _MbCh, wchar_t _WCh);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int __cdecl _wctomb_l( char * _MbCh, wchar_t _WCh, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl wctomb_s( int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, wchar_t _WCh);

                   __declspec(dllimport) errno_t __cdecl _wctomb_s_l( int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl wcstombs_s( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char (&_Dest)[_Size], const wchar_t * _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, const wchar_t * _Source, size_t _MaxCount);
                   __declspec(dllimport) errno_t __cdecl _wcstombs_s_l( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char (&_Dest)[_Size], const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale);
#line 640 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl calloc( size_t _Count, size_t _Size);
__declspec(dllimport) __declspec(noalias) void __cdecl free( void * _Memory);
                                                                __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl malloc( size_t _Size);

                                                                   __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl realloc( void * _Memory, size_t _NewSize);

                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _recalloc( void * _Memory, size_t _Count, size_t _Size);
__declspec(dllimport) __declspec(noalias) void __cdecl _aligned_free( void * _Memory);
                                                                __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_malloc( size_t _Size, size_t _Alignment);
                                                                __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_malloc( size_t _Size, size_t _Alignment, size_t _Offset);

                                                                   __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_realloc( void * _Memory, size_t _NewSize, size_t _Alignment);

                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment);

                                                                   __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_realloc( void * _Memory, size_t _NewSize, size_t _Alignment, size_t _Offset);

                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
               __declspec(dllimport) size_t __cdecl _aligned_msize( void * _Memory, size_t _Alignment, size_t _Offset);
#line 685 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
                   __declspec(dllimport) errno_t __cdecl _itow_s ( int _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _itow(int _Value, wchar_t *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ltow_s ( long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _ltow(long _Value, wchar_t *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ultow_s ( unsigned long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _ultow(unsigned long _Value, wchar_t *_Dest, int _Radix);
               __declspec(dllimport) double __cdecl wcstod( const wchar_t * _Str, wchar_t ** _EndPtr);
               __declspec(dllimport) double __cdecl _wcstod_l( const wchar_t *_Str, wchar_t ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) long __cdecl wcstol( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) long __cdecl _wcstol_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl wcstoll( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix);
               __declspec(dllimport) long long __cdecl _wcstoll_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long __cdecl wcstoul( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long __cdecl _wcstoul_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long long __cdecl wcstoull( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long long __cdecl _wcstoull_l( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long double __cdecl wcstold( const wchar_t * _Str, wchar_t ** _EndPtr);
               __declspec(dllimport) long double __cdecl _wcstold_l( const wchar_t * _Str, wchar_t ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) float __cdecl wcstof( const wchar_t * _Str, wchar_t ** _EndPtr);
               __declspec(dllimport) float __cdecl _wcstof_l( const wchar_t * _Str, wchar_t ** _EndPtr, _locale_t _Locale);



               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _wgetenv( const wchar_t * _VarName);
                   __declspec(dllimport) errno_t __cdecl _wgetenv_s( size_t * _ReturnSize, wchar_t * _DstBuf, size_t _DstSizeInWords, const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t * _ReturnSize, wchar_t (&_Dest)[_Size], const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }






                   __declspec(dllimport) errno_t __cdecl _wdupenv_s( wchar_t **_Buffer, size_t *_BufferSizeInWords, const wchar_t *_VarName);







__declspec(dllimport) int __cdecl _wsystem( const wchar_t * _Command);




               __declspec(dllimport) double __cdecl _wtof( const wchar_t *_Str);
               __declspec(dllimport) double __cdecl _wtof_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wtoi( const wchar_t *_Str);
               __declspec(dllimport) int __cdecl _wtoi_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _wtol( const wchar_t *_Str);
               __declspec(dllimport) long __cdecl _wtol_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl _wtoll( const wchar_t *_Str);
               __declspec(dllimport) long long __cdecl _wtoll_l( const wchar_t *_Str, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl _i64tow_s( __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _i64tow( __int64 _Val, wchar_t * _DstBuf, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ui64tow_s( unsigned __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _ui64tow( unsigned __int64 _Val, wchar_t * _DstBuf, int _Radix);
               __declspec(dllimport) __int64 __cdecl _wtoi64( const wchar_t *_Str);
               __declspec(dllimport) __int64 __cdecl _wtoi64_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _wcstoi64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) __int64 __cdecl _wcstoi64_l( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l( const wchar_t *_Str , wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
#line 770 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
               __declspec(dllimport) char * __cdecl _fullpath( char * _FullPath, const char * _Path, size_t _SizeInBytes);







                   __declspec(dllimport) errno_t __cdecl _ecvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDights, int * _PtDec, int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ecvt( double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign);
                   __declspec(dllimport) errno_t __cdecl _fcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _fcvt( double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
__declspec(dllimport) errno_t __cdecl _gcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _gcvt( double _Val, int _NumOfDigits, char * _DstBuf);

               __declspec(dllimport) int __cdecl _atodbl( _CRT_DOUBLE * _Result, char * _Str);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE * _Result, char * _Str);
               __declspec(dllimport) int __cdecl _atoflt( _CRT_FLOAT * _Result, const char * _Str);
               __declspec(dllimport) int __cdecl _atodbl_l( _CRT_DOUBLE * _Result, char * _Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoldbl_l( _LDOUBLE * _Result, char * _Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoflt_l( _CRT_FLOAT * _Result, const char * _Str, _locale_t _Locale);
                       unsigned long __cdecl _lrotl( unsigned long _Val, int _Shift);
                       unsigned long __cdecl _lrotr( unsigned long _Val, int _Shift);
                   __declspec(dllimport) errno_t __cdecl _makepath_s( char * _PathResult, size_t _SizeInWords, const char * _Drive, const char * _Dir, const char * _Filename,
                   const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size], const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _makepath( char *_Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext);
#line 826 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
        _onexit_t __cdecl _onexit( _onexit_t _Func);




__declspec(dllimport) void __cdecl perror( const char * _ErrMsg);


#pragma warning(push)
#pragma warning(disable: 6540)


 __declspec(dllimport) int __cdecl _putenv( const char * _EnvString);
                   __declspec(dllimport) errno_t __cdecl _putenv_s( const char * _Name, const char * _Value);


        unsigned int __cdecl _rotl( unsigned int _Val, int _Shift);
        unsigned __int64 __cdecl _rotl64( unsigned __int64 _Val, int _Shift);
        unsigned int __cdecl _rotr( unsigned int _Val, int _Shift);
        unsigned __int64 __cdecl _rotr64( unsigned __int64 _Val, int _Shift);
#pragma warning(pop)


__declspec(dllimport) errno_t __cdecl _searchenv_s( const char * _Filename, const char * _EnvVar, char * _ResultPath, size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(const char * _Filename, const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _EnvVar, char *_ResultPath);


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _splitpath( const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext);
                   __declspec(dllimport) errno_t __cdecl _splitpath_s( const char * _FullPath,
                                               char * _Drive, size_t _DriveSize,
                                             char * _Dir, size_t _DirSize,
                                                  char * _Filename, size_t _FilenameSize,
                                             char * _Ext, size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

__declspec(dllimport) void __cdecl _swab( char * _Buf1, char * _Buf2, int _SizeInBytes);
#line 873 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
               __declspec(dllimport) wchar_t * __cdecl _wfullpath( wchar_t * _FullPath, const wchar_t * _Path, size_t _SizeInWords);





                   __declspec(dllimport) errno_t __cdecl _wmakepath_s( wchar_t * _PathResult, size_t _SIZE, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename,
                   const wchar_t * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_ResultPath)[_Size], const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath( wchar_t *_ResultPath, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext);


__declspec(dllimport) void __cdecl _wperror( const wchar_t * _ErrMsg);



               __declspec(dllimport) int __cdecl _wputenv( const wchar_t * _EnvString);
                   __declspec(dllimport) errno_t __cdecl _wputenv_s( const wchar_t * _Name, const wchar_t * _Value);
__declspec(dllimport) errno_t __cdecl _wsearchenv_s( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t * _ResultPath, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t *_ResultPath);


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _wsplitpath( const wchar_t * _FullPath, wchar_t * _Drive, wchar_t * _Dir, wchar_t * _Filename, wchar_t * _Ext);
__declspec(dllimport) errno_t __cdecl _wsplitpath_s( const wchar_t * _FullPath,
                                               wchar_t * _Drive, size_t _DriveSize,
                                             wchar_t * _Dir, size_t _DirSize,
                                                  wchar_t * _Filename, size_t _FilenameSize,
                                             wchar_t * _Ext, size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( const wchar_t *_Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }






__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _seterrormode( int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _beep( unsigned _Frequency, unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _sleep( unsigned long _Duration);
#line 932 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl ecvt( double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl fcvt( double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl gcvt( double _Val, int _NumOfDigits, char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl itoa( int _Val, char * _DstBuf, int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl ltoa( long _Val, char * _DstBuf, int _Radix);


               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details.")) __declspec(dllimport) int __cdecl putenv( const char * _EnvString);


__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details.")) __declspec(dllimport) void __cdecl swab( char * _Buf1, char * _Buf2, int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl ultoa( unsigned long _Val, char * _Dstbuf, int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit( _onexit_t _Func);





}



#pragma pack(pop)
#line 313 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
#line 345 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,

    REGCLS_MULTI_SEPARATE = 2,

    REGCLS_SUSPENDED = 4,

    REGCLS_SURROGATE = 8


} REGCLS;



typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;


typedef enum tagCOINITBASE
{



  COINITBASE_MULTITHREADED = 0x0,

} COINITBASE;



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
typedef struct IUnknown IUnknown;






typedef struct AsyncIUnknown AsyncIUnknown;






typedef struct IClassFactory IClassFactory;
#line 68 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
extern "C"{
#line 89 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec;







typedef IUnknown *LPUNKNOWN;







    extern "C" const IID IID_IUnknown;
    extern "C++"
    {
        struct __declspec(uuid("00000000-0000-0000-C000-000000000046")) __declspec(novtable)
        IUnknown
        {
        public:

            virtual HRESULT __stdcall QueryInterface(
                           const IID & riid,
                                                 void * *ppvObject) = 0;

            virtual ULONG __stdcall AddRef( void) = 0;

            virtual ULONG __stdcall Release( void) = 0;

            template<class Q>
            HRESULT



            __stdcall

            QueryInterface( Q** pp)
            {
                return QueryInterface(__uuidof(Q), (void **)pp);
            }


        };
    }
    HRESULT __stdcall IUnknown_QueryInterface_Proxy(
        IUnknown * This,
                   const IID & riid,
                                             void * *ppvObject);

    void __stdcall IUnknown_QueryInterface_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

    ULONG __stdcall IUnknown_AddRef_Proxy(
        IUnknown * This);

    void __stdcall IUnknown_AddRef_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

    ULONG __stdcall IUnknown_Release_Proxy(
        IUnknown * This);

    void __stdcall IUnknown_Release_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
#line 286 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec;
#line 296 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
extern "C" const IID IID_AsyncIUnknown;



    struct __declspec(uuid("000e0000-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryInterface(
                       const IID & riid) = 0;

        virtual HRESULT __stdcall Finish_QueryInterface(

                              void **ppvObject) = 0;

        virtual HRESULT __stdcall Begin_AddRef( void) = 0;

        virtual ULONG __stdcall Finish_AddRef( void) = 0;

        virtual HRESULT __stdcall Begin_Release( void) = 0;

        virtual ULONG __stdcall Finish_Release( void) = 0;

    };
#line 422 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec;







typedef IClassFactory *LPCLASSFACTORY;


extern "C" const IID IID_IClassFactory;



    struct __declspec(uuid("00000001-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateInstance(

                      IUnknown *pUnkOuter,

                  const IID & riid,

                          void **ppvObject) = 0;

        virtual HRESULT __stdcall LockServer(
                       BOOL fLock) = 0;

    };
#line 523 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
                HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy(
              IClassFactory * This,
               BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 559 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\unknwnbase.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID & riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);






}
#line 375 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef struct IMarshal IMarshal;






typedef struct INoMarshal INoMarshal;






typedef struct IAgileObject IAgileObject;






typedef struct IActivationFilter IActivationFilter;






typedef struct IMarshal2 IMarshal2;






typedef struct IMalloc IMalloc;






typedef struct IStdMarshalInfo IStdMarshalInfo;






typedef struct IExternalConnection IExternalConnection;






typedef struct IMultiQI IMultiQI;






typedef struct AsyncIMultiQI AsyncIMultiQI;






typedef struct IInternalUnknown IInternalUnknown;






typedef struct IEnumUnknown IEnumUnknown;






typedef struct IEnumString IEnumString;






typedef struct ISequentialStream ISequentialStream;






typedef struct IStream IStream;






typedef struct IRpcChannelBuffer IRpcChannelBuffer;






typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;






typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;






typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;






typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;






typedef struct IRpcProxyBuffer IRpcProxyBuffer;






typedef struct IRpcStubBuffer IRpcStubBuffer;






typedef struct IPSFactoryBuffer IPSFactoryBuffer;






typedef struct IChannelHook IChannelHook;






typedef struct IClientSecurity IClientSecurity;






typedef struct IServerSecurity IServerSecurity;






typedef struct IRpcOptions IRpcOptions;






typedef struct IGlobalOptions IGlobalOptions;






typedef struct ISurrogate ISurrogate;






typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;






typedef struct ISynchronize ISynchronize;






typedef struct ISynchronizeHandle ISynchronizeHandle;






typedef struct ISynchronizeEvent ISynchronizeEvent;






typedef struct ISynchronizeContainer ISynchronizeContainer;






typedef struct ISynchronizeMutex ISynchronizeMutex;






typedef struct ICancelMethodCalls ICancelMethodCalls;






typedef struct IAsyncManager IAsyncManager;






typedef struct ICallFactory ICallFactory;






typedef struct IRpcHelper IRpcHelper;






typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;






typedef struct IWaitMultiple IWaitMultiple;






typedef struct IAddrTrackingControl IAddrTrackingControl;






typedef struct IAddrExclusionControl IAddrExclusionControl;






typedef struct IPipeByte IPipeByte;






typedef struct AsyncIPipeByte AsyncIPipeByte;






typedef struct IPipeLong IPipeLong;






typedef struct AsyncIPipeLong AsyncIPipeLong;






typedef struct IPipeDouble IPipeDouble;






typedef struct AsyncIPipeDouble AsyncIPipeDouble;






typedef struct IEnumContextProps IEnumContextProps;






typedef struct IContext IContext;






typedef struct IObjContext IObjContext;






typedef struct IComThreadingInfo IComThreadingInfo;






typedef struct IProcessInitControl IProcessInitControl;






typedef struct IFastRundown IFastRundown;






typedef struct IMarshalingStream IMarshalingStream;






typedef struct IAgileReference IAgileReference;
#line 446 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C"{
#line 478 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#line 502 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } COSERVERINFO;




extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec;







typedef IMarshal *LPMARSHAL;


extern "C" const IID IID_IMarshal;



    struct __declspec(uuid("00000003-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUnmarshalClass(

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   CLSID *pCid) = 0;

        virtual HRESULT __stdcall GetMarshalSizeMax(

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags,

                   DWORD *pSize) = 0;

        virtual HRESULT __stdcall MarshalInterface(

                  IStream *pStm,

                  const IID & riid,

                      void *pv,

                  DWORD dwDestContext,

                        void *pvDestContext,

                  DWORD mshlflags) = 0;

        virtual HRESULT __stdcall UnmarshalInterface(

                  IStream *pStm,

                  const IID & riid,

                      void **ppv) = 0;

        virtual HRESULT __stdcall ReleaseMarshalData(

                  IStream *pStm) = 0;

        virtual HRESULT __stdcall DisconnectObject(

                  DWORD dwReserved) = 0;

    };
#line 735 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_INoMarshal;



    struct __declspec(uuid("ecc8691b-c1db-4dc0-855e-65f6c551af49")) __declspec(novtable)
    INoMarshal : public IUnknown
    {
    public:
    };
#line 805 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IAgileObject;



    struct __declspec(uuid("94ea2b94-e9cc-49e0-c0ff-ee64ca8f5b90")) __declspec(novtable)
    IAgileObject : public IUnknown
    {
    public:
    };
#line 877 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec;







typedef
enum tagACTIVATIONTYPE
    {
        ACTIVATIONTYPE_UNCATEGORIZED = 0,
        ACTIVATIONTYPE_FROM_MONIKER = 0x1,
        ACTIVATIONTYPE_FROM_DATA = 0x2,
        ACTIVATIONTYPE_FROM_STORAGE = 0x4,
        ACTIVATIONTYPE_FROM_STREAM = 0x8,
        ACTIVATIONTYPE_FROM_FILE = 0x10
    } ACTIVATIONTYPE;


extern "C" const IID IID_IActivationFilter;



    struct __declspec(uuid("00000017-0000-0000-C000-000000000046")) __declspec(novtable)
    IActivationFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall HandleActivation(
                       DWORD dwActivationType,
                       const IID & rclsid,
                        CLSID *pReplacementClsId) = 0;

    };
#line 981 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IMarshal2 *LPMARSHAL2;


extern "C" const IID IID_IMarshal2;



    struct __declspec(uuid("000001cf-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal2 : public IMarshal
    {
    public:
    };
#line 1136 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IMalloc *LPMALLOC;


extern "C" const IID IID_IMalloc;



    struct __declspec(uuid("00000002-0000-0000-C000-000000000046")) __declspec(novtable)
    IMalloc : public IUnknown
    {
    public:
        virtual void *__stdcall Alloc(

                  SIZE_T cb) = 0;

        virtual void *__stdcall Realloc(

                      void *pv,

                  SIZE_T cb) = 0;

        virtual void __stdcall Free(

                      void *pv) = 0;

        virtual SIZE_T __stdcall GetSize(

                      void *pv) = 0;

        virtual int __stdcall DidAlloc(

                      void *pv) = 0;

        virtual void __stdcall HeapMinimize( void) = 0;

    };
#line 1280 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IStdMarshalInfo *LPSTDMARSHALINFO;


extern "C" const IID IID_IStdMarshalInfo;



    struct __declspec(uuid("00000018-0000-0000-C000-000000000046")) __declspec(novtable)
    IStdMarshalInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassForHandler(

                  DWORD dwDestContext,

                        void *pvDestContext,

                   CLSID *pClsid) = 0;

    };
#line 1372 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef
enum tagEXTCONN
    {
        EXTCONN_STRONG = 0x1,
        EXTCONN_WEAK = 0x2,
        EXTCONN_CALLABLE = 0x4
    } EXTCONN;


extern "C" const IID IID_IExternalConnection;



    struct __declspec(uuid("00000019-0000-0000-C000-000000000046")) __declspec(novtable)
    IExternalConnection : public IUnknown
    {
    public:
        virtual DWORD __stdcall AddConnection(

                  DWORD extconn,

                  DWORD reserved) = 0;

        virtual DWORD __stdcall ReleaseConnection(

                  DWORD extconn,

                  DWORD reserved,

                  BOOL fLastReleaseCloses) = 0;

    };
#line 1485 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IMultiQI *LPMULTIQI;





typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } MULTI_QI;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec;
#line 1510 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IMultiQI;



    struct __declspec(uuid("00000020-0000-0000-C000-000000000046")) __declspec(novtable)
    IMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryMultipleInterfaces(

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs) = 0;

    };
#line 1596 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_AsyncIMultiQI;



    struct __declspec(uuid("000e0020-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryMultipleInterfaces(

                  ULONG cMQIs,

                                    MULTI_QI *pMQIs) = 0;

        virtual HRESULT __stdcall Finish_QueryMultipleInterfaces(

                                    MULTI_QI *pMQIs) = 0;

    };
#line 1696 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec;
#line 1706 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IInternalUnknown;



    struct __declspec(uuid("00000021-0000-0000-C000-000000000046")) __declspec(novtable)
    IInternalUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryInternalInterface(

                  const IID & riid,

                      void **ppv) = 0;

    };
#line 1794 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec;







typedef IEnumUnknown *LPENUMUNKNOWN;


extern "C" const IID IID_IEnumUnknown;



    struct __declspec(uuid("00000100-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(

                  ULONG celt,

                                                 IUnknown **rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumUnknown **ppenum) = 0;

    };
#line 1913 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
                HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1937 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IEnumString *LPENUMSTRING;


extern "C" const IID IID_IEnumString;



    struct __declspec(uuid("00000101-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumString : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 LPOLESTR *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumString **ppenum) = 0;

    };
#line 2045 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
                HRESULT __stdcall IEnumString_RemoteNext_Proxy(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2070 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_ISequentialStream;



    struct __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ISequentialStream : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(

                                                 void *pv,

                  ULONG cb,

                       ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Write(

                                  const void *pv,

                  ULONG cb,

                       ULONG *pcbWritten) = 0;

    };
#line 2169 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
                HRESULT __stdcall ISequentialStream_RemoteRead_Proxy(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2207 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IStream *LPSTREAM;

typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } STATSTG;

typedef
enum tagSTGTY
    {
        STGTY_STORAGE = 1,
        STGTY_STREAM = 2,
        STGTY_LOCKBYTES = 3,
        STGTY_PROPERTY = 4
    } STGTY;

typedef
enum tagSTREAM_SEEK
    {
        STREAM_SEEK_SET = 0,
        STREAM_SEEK_CUR = 1,
        STREAM_SEEK_END = 2
    } STREAM_SEEK;

typedef
enum tagLOCKTYPE
    {
        LOCK_WRITE = 1,
        LOCK_EXCLUSIVE = 2,
        LOCK_ONLYONCE = 4
    } LOCKTYPE;


extern "C" const IID IID_IStream;



    struct __declspec(uuid("0000000c-0000-0000-C000-000000000046")) __declspec(novtable)
    IStream : public ISequentialStream
    {
    public:
        virtual HRESULT __stdcall Seek(
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,

                       ULARGE_INTEGER *plibNewPosition) = 0;

        virtual HRESULT __stdcall SetSize(
                       ULARGE_INTEGER libNewSize) = 0;

        virtual HRESULT __stdcall CopyTo(

                  IStream *pstm,
                       ULARGE_INTEGER cb,

                       ULARGE_INTEGER *pcbRead,

                       ULARGE_INTEGER *pcbWritten) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall LockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall UnlockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

        virtual HRESULT __stdcall Clone(
                                             IStream **ppstm) = 0;

    };
#line 2450 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
                HRESULT __stdcall IStream_RemoteSeek_Proxy(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStream_RemoteCopyTo_Proxy(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2489 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef ULONG RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern "C" const IID IID_IRpcChannelBuffer;



    struct __declspec(uuid("D5F56B60-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBuffer(

                     RPCOLEMESSAGE *pMessage,

                  const IID & riid) = 0;

        virtual HRESULT __stdcall SendReceive(

                     RPCOLEMESSAGE *pMessage,

                       ULONG *pStatus) = 0;

        virtual HRESULT __stdcall FreeBuffer(

                     RPCOLEMESSAGE *pMessage) = 0;

        virtual HRESULT __stdcall GetDestCtx(

                   DWORD *pdwDestContext,

                                       void **ppvDestContext) = 0;

        virtual HRESULT __stdcall IsConnected( void) = 0;

    };
#line 2645 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec;
#line 2655 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IRpcChannelBuffer2;



    struct __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) __declspec(novtable)
    IRpcChannelBuffer2 : public IRpcChannelBuffer
    {
    public:
        virtual HRESULT __stdcall GetProtocolVersion(

                   DWORD *pdwVersion) = 0;

    };
#line 2782 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IAsyncRpcChannelBuffer;



    struct __declspec(uuid("a5029fb6-3c34-11d1-9c99-00c04fb998aa")) __declspec(novtable)
    IAsyncRpcChannelBuffer : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send(

                     RPCOLEMESSAGE *pMsg,

                  ISynchronize *pSync,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Receive(

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall GetDestCtxEx(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                      void **ppvDestContext) = 0;

    };
#line 2962 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IRpcChannelBuffer3;



    struct __declspec(uuid("25B15600-0115-11d0-BF0D-00AA00B8DFD2")) __declspec(novtable)
    IRpcChannelBuffer3 : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send(

                     RPCOLEMESSAGE *pMsg,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Receive(

                     RPCOLEMESSAGE *pMsg,

                  ULONG ulSize,

                   ULONG *pulStatus) = 0;

        virtual HRESULT __stdcall Cancel(

                     RPCOLEMESSAGE *pMsg) = 0;

        virtual HRESULT __stdcall GetCallContext(

                  RPCOLEMESSAGE *pMsg,

                  const IID & riid,

                      void **pInterface) = 0;

        virtual HRESULT __stdcall GetDestCtxEx(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pdwDestContext,

                      void **ppvDestContext) = 0;

        virtual HRESULT __stdcall GetState(

                  RPCOLEMESSAGE *pMsg,

                   DWORD *pState) = 0;

        virtual HRESULT __stdcall RegisterAsync(

                     RPCOLEMESSAGE *pMsg,

                  IAsyncManager *pAsyncMgr) = 0;

    };
#line 3206 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IRpcSyntaxNegotiate;



    struct __declspec(uuid("58a08519-24c8-4935-b482-3fd823333a4f")) __declspec(novtable)
    IRpcSyntaxNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall NegotiateSyntax(

                     RPCOLEMESSAGE *pMsg) = 0;

    };
#line 3288 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IRpcProxyBuffer;



    struct __declspec(uuid("D5F56A34-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect(

                  IRpcChannelBuffer *pRpcChannelBuffer) = 0;

        virtual void __stdcall Disconnect( void) = 0;

    };
#line 3380 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec;
#line 3390 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IRpcStubBuffer;



    struct __declspec(uuid("D5F56AFC-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect(

                  IUnknown *pUnkServer) = 0;

        virtual void __stdcall Disconnect( void) = 0;

        virtual HRESULT __stdcall Invoke(

                     RPCOLEMESSAGE *_prpcmsg,

                  IRpcChannelBuffer *_pRpcChannelBuffer) = 0;

        virtual IRpcStubBuffer *__stdcall IsIIDSupported(

                  const IID & riid) = 0;

        virtual ULONG __stdcall CountRefs( void) = 0;

        virtual HRESULT __stdcall DebugServerQueryInterface(

                      void **ppv) = 0;

        virtual void __stdcall DebugServerRelease(

                  void *pv) = 0;

    };
#line 3540 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IPSFactoryBuffer;



    struct __declspec(uuid("D5F569D0-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateProxy(

                  IUnknown *pUnkOuter,

                  const IID & riid,

                      IRpcProxyBuffer **ppProxy,

                      void **ppv) = 0;

        virtual HRESULT __stdcall CreateStub(

                  const IID & riid,

                      IUnknown *pUnkServer,

                      IRpcStubBuffer **ppStub) = 0;

    };
#line 3656 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef struct SChannelHookCallInfo
    {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
    } SChannelHookCallInfo;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec;
#line 3678 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IChannelHook;



    struct __declspec(uuid("1008c4a0-7613-11cf-9af1-0020af6e72f4")) __declspec(novtable)
    IChannelHook : public IUnknown
    {
    public:
        virtual void __stdcall ClientGetSize(

                  const GUID & uExtent,

                  const IID & riid,

                   ULONG *pDataSize) = 0;

        virtual void __stdcall ClientFillBuffer(

                  const GUID & uExtent,

                  const IID & riid,

                     ULONG *pDataSize,

                  void *pDataBuffer) = 0;

        virtual void __stdcall ClientNotify(

                  const GUID & uExtent,

                  const IID & riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep,

                  HRESULT hrFault) = 0;

        virtual void __stdcall ServerNotify(

                  const GUID & uExtent,

                  const IID & riid,

                  ULONG cbDataSize,

                  void *pDataBuffer,

                  DWORD lDataRep) = 0;

        virtual void __stdcall ServerGetSize(

                  const GUID & uExtent,

                  const IID & riid,

                  HRESULT hrFault,

                   ULONG *pDataSize) = 0;

        virtual void __stdcall ServerFillBuffer(

                  const GUID & uExtent,

                  const IID & riid,

                     ULONG *pDataSize,

                  void *pDataBuffer,

                  HRESULT hrFault) = 0;

    };
#line 3909 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec;







typedef struct tagSOLE_AUTHENTICATION_SERVICE
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
    } SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {
        EOAC_NONE = 0,
        EOAC_MUTUAL_AUTH = 0x1,
        EOAC_STATIC_CLOAKING = 0x20,
        EOAC_DYNAMIC_CLOAKING = 0x40,
        EOAC_ANY_AUTHORITY = 0x80,
        EOAC_MAKE_FULLSIC = 0x100,
        EOAC_DEFAULT = 0x800,
        EOAC_SECURE_REFS = 0x2,
        EOAC_ACCESS_CONTROL = 0x4,
        EOAC_APPID = 0x8,
        EOAC_DYNAMIC = 0x10,
        EOAC_REQUIRE_FULLSIC = 0x200,
        EOAC_AUTO_IMPERSONATE = 0x400,
        EOAC_NO_CUSTOM_MARSHAL = 0x2000,
        EOAC_DISABLE_AAA = 0x1000
    } EOLE_AUTHENTICATION_CAPABILITIES;





typedef struct tagSOLE_AUTHENTICATION_INFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
    } SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST
    {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
    } SOLE_AUTHENTICATION_LIST;

typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;


extern "C" const IID IID_IClientSecurity;



    struct __declspec(uuid("0000013D-0000-0000-C000-000000000046")) __declspec(novtable)
    IClientSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket(

                  IUnknown *pProxy,

                   DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pAuthInfo,

                       DWORD *pCapabilites) = 0;

        virtual HRESULT __stdcall SetBlanket(

                  IUnknown *pProxy,

                  DWORD dwAuthnSvc,

                  DWORD dwAuthzSvc,

                           OLECHAR *pServerPrincName,

                  DWORD dwAuthnLevel,

                  DWORD dwImpLevel,

                      void *pAuthInfo,

                  DWORD dwCapabilities) = 0;

        virtual HRESULT __stdcall CopyProxy(

                  IUnknown *pProxy,

                      IUnknown **ppCopy) = 0;

    };
#line 4138 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec;
#line 4148 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IServerSecurity;



    struct __declspec(uuid("0000013E-0000-0000-C000-000000000046")) __declspec(novtable)
    IServerSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket(

                       DWORD *pAuthnSvc,

                       DWORD *pAuthzSvc,

                                  OLECHAR **pServerPrincName,

                       DWORD *pAuthnLevel,

                       DWORD *pImpLevel,

                                       void **pPrivs,

                         DWORD *pCapabilities) = 0;

        virtual HRESULT __stdcall ImpersonateClient( void) = 0;

        virtual HRESULT __stdcall RevertToSelf( void) = 0;

        virtual BOOL __stdcall IsImpersonating( void) = 0;

    };
#line 4274 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef
enum tagRPCOPT_PROPERTIES
    {
        COMBND_RPCTIMEOUT = 0x1,
        COMBND_SERVER_LOCALITY = 0x2,
        COMBND_RESERVED1 = 0x4,
        COMBND_RESERVED2 = 0x5
    } RPCOPT_PROPERTIES;

typedef
enum tagRPCOPT_SERVER_LOCALITY_VALUES
    {
        SERVER_LOCALITY_PROCESS_LOCAL = 0,
        SERVER_LOCALITY_MACHINE_LOCAL = 1,
        SERVER_LOCALITY_REMOTE = 2
    } RPCOPT_SERVER_LOCALITY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec;
#line 4303 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IRpcOptions;



    struct __declspec(uuid("00000144-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set(

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue) = 0;

        virtual HRESULT __stdcall Query(

                  IUnknown *pPrx,

                  RPCOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue) = 0;

    };
#line 4413 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef
enum tagGLOBALOPT_PROPERTIES
    {
        COMGLB_EXCEPTION_HANDLING = 1,
        COMGLB_APPID = 2,
        COMGLB_RPC_THREADPOOL_SETTING = 3,
        COMGLB_RO_SETTINGS = 4,
        COMGLB_UNMARSHALING_POLICY = 5
    } GLOBALOPT_PROPERTIES;

typedef
enum tagGLOBALOPT_EH_VALUES
    {
        COMGLB_EXCEPTION_HANDLE = 0,
        COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
        COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
        COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
    } GLOBALOPT_EH_VALUES;

typedef
enum tagGLOBALOPT_RPCTP_VALUES
    {
        COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
        COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
    } GLOBALOPT_RPCTP_VALUES;

typedef
enum tagGLOBALOPT_RO_FLAGS
    {
        COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
        COMGLB_FAST_RUNDOWN = 0x8,
        COMGLB_RESERVED1 = 0x10,
        COMGLB_RESERVED2 = 0x20,
        COMGLB_RESERVED3 = 0x40,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
        COMGLB_RESERVED4 = 0x100,
        COMGLB_RESERVED5 = 0x200
    } GLOBALOPT_RO_FLAGS;

typedef
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
    {
        COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
        COMGLB_UNMARSHALING_POLICY_STRONG = 1,
        COMGLB_UNMARSHALING_POLICY_HYBRID = 2
    } GLOBALOPT_UNMARSHALING_POLICY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec;
#line 4474 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IGlobalOptions;



    struct __declspec(uuid("0000015B-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set(

                  GLOBALOPT_PROPERTIES dwProperty,

                  ULONG_PTR dwValue) = 0;

        virtual HRESULT __stdcall Query(

                  GLOBALOPT_PROPERTIES dwProperty,

                   ULONG_PTR *pdwValue) = 0;

    };
#line 4579 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec;







typedef ISurrogate *LPSURROGATE;


extern "C" const IID IID_ISurrogate;



    struct __declspec(uuid("00000022-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LoadDllServer(
                                 const IID & Clsid) = 0;

        virtual HRESULT __stdcall FreeSurrogate( void) = 0;

    };
#line 4678 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


extern "C" const IID IID_IGlobalInterfaceTable;



    struct __declspec(uuid("00000146-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalInterfaceTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterInterfaceInGlobal(

                  IUnknown *pUnk,

                  const IID & riid,

                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall RevokeInterfaceFromGlobal(

                  DWORD dwCookie) = 0;

        virtual HRESULT __stdcall GetInterfaceFromGlobal(

                  DWORD dwCookie,

                  const IID & riid,

                      void **ppv) = 0;

    };
#line 4805 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec;
#line 4815 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_ISynchronize;



    struct __declspec(uuid("00000030-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronize : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Wait(
                       DWORD dwFlags,
                       DWORD dwMilliseconds) = 0;

        virtual HRESULT __stdcall Signal( void) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

    };
#line 4913 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeHandle;



    struct __declspec(uuid("00000031-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetHandle(

                   HANDLE *ph) = 0;

    };
#line 4995 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeEvent;



    struct __declspec(uuid("00000032-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeEvent : public ISynchronizeHandle
    {
    public:
        virtual HRESULT __stdcall SetEventHandle(

                  HANDLE *ph) = 0;

    };
#line 5086 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeContainer;



    struct __declspec(uuid("00000033-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddSynchronize(

                  ISynchronize *pSync) = 0;

        virtual HRESULT __stdcall WaitMultiple(

                  DWORD dwFlags,

                  DWORD dwTimeOut,

                      ISynchronize **ppSync) = 0;

    };
#line 5188 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_ISynchronizeMutex;



    struct __declspec(uuid("00000025-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeMutex : public ISynchronize
    {
    public:
        virtual HRESULT __stdcall ReleaseMutex( void) = 0;

    };
#line 5286 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;


extern "C" const IID IID_ICancelMethodCalls;



    struct __declspec(uuid("00000029-0000-0000-C000-000000000046")) __declspec(novtable)
    ICancelMethodCalls : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cancel(

                  ULONG ulSeconds) = 0;

        virtual HRESULT __stdcall TestCancel( void) = 0;

    };
#line 5378 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef
enum tagDCOM_CALL_STATE
    {
        DCOM_NONE = 0,
        DCOM_CALL_COMPLETE = 0x1,
        DCOM_CALL_CANCELED = 0x2
    } DCOM_CALL_STATE;


extern "C" const IID IID_IAsyncManager;



    struct __declspec(uuid("0000002A-0000-0000-C000-000000000046")) __declspec(novtable)
    IAsyncManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CompleteCall(

                  HRESULT Result) = 0;

        virtual HRESULT __stdcall GetCallContext(

                  const IID & riid,

                      void **pInterface) = 0;

        virtual HRESULT __stdcall GetState(

                   ULONG *pulStateFlags) = 0;

    };
#line 5497 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_ICallFactory;



    struct __declspec(uuid("1c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ICallFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateCall(

                  const IID & riid,

                      IUnknown *pCtrlUnk,

                  const IID & riid2,

                      IUnknown **ppv) = 0;

    };
#line 5591 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IRpcHelper;



    struct __declspec(uuid("00000149-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcHelper : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDCOMProtocolVersion(

                   DWORD *pComVersion) = 0;

        virtual HRESULT __stdcall GetIIDFromOBJREF(

                  void *pObjRef,

                      IID **piid) = 0;

    };
#line 5689 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IReleaseMarshalBuffers;



    struct __declspec(uuid("eb0cb9e8-7996-11d2-872e-0000f8080859")) __declspec(novtable)
    IReleaseMarshalBuffers : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReleaseMarshalBuffer(

                     RPCOLEMESSAGE *pMsg,

                  DWORD dwFlags,

                      IUnknown *pChnl) = 0;

    };
#line 5779 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IWaitMultiple;



    struct __declspec(uuid("0000002B-0000-0000-C000-000000000046")) __declspec(novtable)
    IWaitMultiple : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitMultiple(

                  DWORD timeout,

                      ISynchronize **pSync) = 0;

        virtual HRESULT __stdcall AddSynchronize(

                  ISynchronize *pSync) = 0;

    };
#line 5876 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;


extern "C" const IID IID_IAddrTrackingControl;



    struct __declspec(uuid("00000147-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrTrackingControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnableCOMDynamicAddrTracking( void) = 0;

        virtual HRESULT __stdcall DisableCOMDynamicAddrTracking( void) = 0;

    };
#line 5964 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;


extern "C" const IID IID_IAddrExclusionControl;



    struct __declspec(uuid("00000148-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrExclusionControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentAddrExclusionList(

                  const IID & riid,

                      void **ppEnumerator) = 0;

        virtual HRESULT __stdcall UpdateAddrExclusionList(

                  IUnknown *pEnumerator) = 0;

    };
#line 6065 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IPipeByte;



    struct __declspec(uuid("DB2F3ACA-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          BYTE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             BYTE *buf,
                       ULONG cSent) = 0;

    };
#line 6161 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_AsyncIPipeByte;



    struct __declspec(uuid("DB2F3ACB-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          BYTE *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             BYTE *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
#line 6273 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IPipeLong;



    struct __declspec(uuid("DB2F3ACC-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          LONG *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             LONG *buf,
                       ULONG cSent) = 0;

    };
#line 6369 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_AsyncIPipeLong;



    struct __declspec(uuid("DB2F3ACD-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          LONG *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             LONG *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
#line 6481 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IPipeDouble;



    struct __declspec(uuid("DB2F3ACE-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull(
                                                                                          DOUBLE *buf,
                       ULONG cRequest,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Push(
                                                             DOUBLE *buf,
                       ULONG cSent) = 0;

    };
#line 6577 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_AsyncIPipeDouble;



    struct __declspec(uuid("DB2F3ACF-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull(
                       ULONG cRequest) = 0;

        virtual HRESULT __stdcall Finish_Pull(
                                                                                          DOUBLE *buf,
                                   ULONG *pcReturned) = 0;

        virtual HRESULT __stdcall Begin_Push(
                                                             DOUBLE *buf,
                       ULONG cSent) = 0;

        virtual HRESULT __stdcall Finish_Push( void) = 0;

    };
#line 7155 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef
enum _APTTYPEQUALIFIER
    {
        APTTYPEQUALIFIER_NONE = 0,
        APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
        APTTYPEQUALIFIER_NA_ON_MTA = 2,
        APTTYPEQUALIFIER_NA_ON_STA = 3,
        APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
        APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
        APTTYPEQUALIFIER_APPLICATION_STA = 6
    } APTTYPEQUALIFIER;

typedef
enum _APTTYPE
    {
        APTTYPE_CURRENT = -1,
        APTTYPE_STA = 0,
        APTTYPE_MTA = 1,
        APTTYPE_NA = 2,
        APTTYPE_MAINSTA = 3
    } APTTYPE;





typedef
enum _THDTYPE
    {
        THDTYPE_BLOCKMESSAGES = 0,
        THDTYPE_PROCESSMESSAGES = 1
    } THDTYPE;

typedef DWORD APARTMENTID;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec;
#line 7202 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IComThreadingInfo;



    struct __declspec(uuid("000001ce-0000-0000-C000-000000000046")) __declspec(novtable)
    IComThreadingInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentApartmentType(

                   APTTYPE *pAptType) = 0;

        virtual HRESULT __stdcall GetCurrentThreadType(

                   THDTYPE *pThreadType) = 0;

        virtual HRESULT __stdcall GetCurrentLogicalThreadId(

                   GUID *pguidLogicalThreadId) = 0;

        virtual HRESULT __stdcall SetCurrentLogicalThreadId(

                  const GUID & rguid) = 0;

    };
#line 7320 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IProcessInitControl;



    struct __declspec(uuid("72380d55-8d2b-43a3-8513-2b6ef31434e9")) __declspec(novtable)
    IProcessInitControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ResetInitializerTimeout(
                       DWORD dwSecondsRemaining) = 0;

    };
#line 7400 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IFastRundown;



    struct __declspec(uuid("00000040-0000-0000-C000-000000000046")) __declspec(novtable)
    IFastRundown : public IUnknown
    {
    public:
    };
#line 7466 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
typedef
enum CO_MARSHALING_CONTEXT_ATTRIBUTES
    {
        CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = 0x80000000,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = 0x80000001
    } CO_MARSHALING_CONTEXT_ATTRIBUTES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec;
#line 7486 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const IID IID_IMarshalingStream;



    struct __declspec(uuid("D8F2F5E6-6102-4863-9F26-389A4676EFDE")) __declspec(novtable)
    IMarshalingStream : public IStream
    {
    public:
        virtual HRESULT __stdcall GetMarshalingContextAttribute(
                       CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
                        ULONG_PTR *pAttributeValue) = 0;

    };
#line 7672 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec;
#line 7682 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
    extern "C" const IID IID_IAgileReference;
    extern "C++"
    {
        struct __declspec(uuid("C03F6A43-65A4-9818-987E-E0B810D2A6F2")) __declspec(novtable)
        IAgileReference : public IUnknown
        {
        public:
            virtual HRESULT __stdcall Resolve(
                           const IID & riid,
                                            void **ppvObjectReference) = 0;

            template<class Q>
            HRESULT



            __stdcall

            Resolve( Q** pp)
            {
                return Resolve(__uuidof(Q), (void **)pp);
            }

        };
    }
#line 7792 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidlbase.h"
extern "C" const GUID IID_ICallbackWithNoReentrancyToApplicationSTA;






#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec;



              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);






}
#line 376 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"


#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\guiddef.h"
#line 378 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\cguid.h"
#line 21 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\cguid.h"
#pragma warning(push)

#pragma warning(disable: 4001)



extern "C" {





extern const IID GUID_NULL;
#line 42 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\cguid.h"
extern const IID CATID_MARSHALER;


extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;







extern const CLSID CLSID_GlobalOptions;
extern const CLSID CLSID_StdGlobalInterfaceTable;







extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;


extern const CLSID CLSID_AddrControl;



extern const CLSID CLSID_ContextSwitcher;
#line 117 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\cguid.h"
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;







extern const CLSID CLSID_InProcFreeMarshaler;







extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;





}




#pragma warning(pop)
#line 382 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
#line 394 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMalloc(
         DWORD dwMemContext,
             LPMALLOC * ppMalloc
    );
#line 408 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CreateStreamOnHGlobal(
    HGLOBAL hGlobal,
         BOOL fDeleteOnRelease,
             LPSTREAM * ppstm
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
GetHGlobalFromStream(
         LPSTREAM pstm,
          HGLOBAL * phglobal
    );




extern "C" __declspec(dllimport) void __stdcall
CoUninitialize(
    void
    );
#line 438 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
extern "C" __declspec(dllimport) DWORD __stdcall
CoGetCurrentProcess(
    void
    );
#line 454 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeEx(
             LPVOID pvReserved,
         DWORD dwCoInit
    );
#line 468 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallerTID(
          LPDWORD lpdwTID
    );
#line 482 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCurrentLogicalThreadId(
          GUID * pguid
    );
#line 500 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetContextToken(
          ULONG_PTR * pToken
    );
#line 513 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetDefaultContext(
         APTTYPE aptType,
         const IID & riid,
             void ** ppv
    );
#line 535 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetApartmentType(
          APTTYPE * pAptType,
          APTTYPEQUALIFIER * pAptQualifier
    );
#line 556 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
typedef struct tagServerInformation
{
    DWORD dwServerPid;
    DWORD dwServerTid;
    UINT64 ui64ServerAddress;
} ServerInformation, *PServerInformation;
#line 570 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecodeProxy(
         DWORD dwClientPid,
         UINT64 ui64ProxyAddress,
          PServerInformation pServerInformation
    );
#line 585 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
struct CO_MTA_USAGE_COOKIE__{int unused;}; typedef struct CO_MTA_USAGE_COOKIE__ *CO_MTA_USAGE_COOKIE;
#line 594 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoIncrementMTAUsage(
          CO_MTA_USAGE_COOKIE * pCookie
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecrementMTAUsage(
         CO_MTA_USAGE_COOKIE Cookie
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
CoAllowUnmarshalerCLSID(
         const IID & clsid
    );
#line 620 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetObjectContext(
         const IID & riid,
             LPVOID * ppv
    );
#line 636 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetClassObject(
         const IID & rclsid,
         DWORD dwClsContext,
             LPVOID pvReserved,
         const IID & riid,
             LPVOID * ppv
    );
#line 652 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterClassObject(
         const IID & rclsid,
         LPUNKNOWN pUnk,
         DWORD dwClsContext,
         DWORD flags,
          LPDWORD lpdwRegister
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevokeClassObject(
         DWORD dwRegister
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoResumeClassObjects(
    void
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSuspendClassObjects(
    void
    );
#line 684 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
extern "C" __declspec(dllimport) ULONG __stdcall
CoAddRefServerProcess(
    void
    );


extern "C" __declspec(dllimport) ULONG __stdcall
CoReleaseServerProcess(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetPSClsid(
         const IID & riid,
          CLSID * pClsid
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterPSClsid(
         const IID & riid,
         const IID & rclsid
    );



               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterSurrogate(
         LPSURROGATE pSurrogate
    );
#line 725 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMarshalSizeMax(
          ULONG * pulSize,
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterface(
         LPSTREAM pStm,
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalInterface(
         LPSTREAM pStm,
         const IID & riid,
                 LPVOID * ppv
    );
#line 760 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalHresult(
         LPSTREAM pstm,
         HRESULT hresult
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalHresult(
         LPSTREAM pstm,
          HRESULT * phresult
    );
#line 780 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoReleaseMarshalData(
         LPSTREAM pStm
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectObject(
         LPUNKNOWN pUnk,
         DWORD dwReserved
    );
#line 799 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoLockObjectExternal(
         LPUNKNOWN pUnk,
         BOOL fLock,
         BOOL fLastUnlockReleases
    );
#line 814 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStandardMarshal(
         const IID & riid,
         LPUNKNOWN pUnk,
         DWORD dwDestContext,
             LPVOID pvDestContext,
         DWORD mshlflags,
             LPMARSHAL * ppMarshal
    );
#line 833 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStdMarshalEx(
         LPUNKNOWN pUnkOuter,
         DWORD smexflags,
             LPUNKNOWN * ppUnkInner
    );
#line 849 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER = 0x01,
    SMEXF_HANDLER = 0x02
} STDMSHLFLAGS;
#line 863 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall
CoIsHandlerConnected(
         LPUNKNOWN pUnk
    );
#line 878 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterThreadInterfaceInStream(
         const IID & riid,
         LPUNKNOWN pUnk,
             LPSTREAM * ppStm
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetInterfaceAndReleaseStream(
         LPSTREAM pStm,
         const IID & iid,
                 LPVOID * ppv
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateFreeThreadedMarshaler(
             LPUNKNOWN punkOuter,
             LPUNKNOWN * ppunkMarshal
    );


extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibraries(
    void
    );



extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibrariesEx(
         DWORD dwUnloadDelay,
         DWORD dwReserved
    );
#line 926 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectContext(
    DWORD dwTimeout
    );
#line 946 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeSecurity(
             PSECURITY_DESCRIPTOR pSecDesc,
         LONG cAuthSvc,
                             SOLE_AUTHENTICATION_SERVICE * asAuthSvc,
             void * pReserved1,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             void * pAuthList,
         DWORD dwCapabilities,
             void * pReserved3
    );
#line 967 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallContext(
         const IID & riid,
             void ** ppInterface
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryProxyBlanket(
         IUnknown * pProxy,
              DWORD * pwAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
              RPC_AUTH_IDENTITY_HANDLE * pAuthInfo,
              DWORD * pCapabilites
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetProxyBlanket(
         IUnknown * pProxy,
         DWORD dwAuthnSvc,
         DWORD dwAuthzSvc,
             OLECHAR * pServerPrincName,
         DWORD dwAuthnLevel,
         DWORD dwImpLevel,
             RPC_AUTH_IDENTITY_HANDLE pAuthInfo,
         DWORD dwCapabilities
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCopyProxy(
         IUnknown * pProxy,
             IUnknown ** ppCopy
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryClientBlanket(
              DWORD * pAuthnSvc,
              DWORD * pAuthzSvc,
                 LPOLESTR * pServerPrincName,
              DWORD * pAuthnLevel,
              DWORD * pImpLevel,
                                                                        RPC_AUTHZ_HANDLE * pPrivs,
                DWORD * pCapabilities
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoImpersonateClient(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevertToSelf(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryAuthenticationServices(
          DWORD * pcAuthSvc,
                                       SOLE_AUTHENTICATION_SERVICE ** asAuthSvc
    );
#line 1045 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSwitchCallContext(
             IUnknown * pNewObject,
             IUnknown ** ppOldObject
    );
#line 1070 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstance(
         const IID & rclsid,
             LPUNKNOWN pUnkOuter,
         DWORD dwClsContext,
         const IID & riid,
                                                                           LPVOID * ppv
    );






               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceEx(
         const IID & Clsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
             COSERVERINFO * pServerInfo,
         DWORD dwCount,
                             MULTI_QI * pResults
    );







extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterActivationFilter(
         IActivationFilter * pActivationFilter
    );
#line 1118 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceFromApp(
         const IID & Clsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
             PVOID reserved,
         DWORD dwCount,
                             MULTI_QI * pResults
    );
#line 1192 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCancelObject(
         DWORD dwThreadId,
         const IID & iid,
             void ** ppUnk
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetCancelObject(
             IUnknown * pUnk
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCancelCall(
         DWORD dwThreadId,
         ULONG ulTimeout
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoTestCancel(
    void
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoEnableCallCancellation(
             LPVOID pReserved
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisableCallCancellation(
             LPVOID pReserved
    );
#line 1242 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromCLSID(
         const IID & rclsid,
             LPOLESTR * lplpsz
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromString(
         LPCOLESTR lpsz,
          LPCLSID pclsid
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromIID(
         const IID & rclsid,
             LPOLESTR * lplpsz
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
IIDFromString(
         LPCOLESTR lpsz,
          LPIID lpiid
    );
#line 1274 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
ProgIDFromCLSID(
         const IID & clsid,
             LPOLESTR * lplpszProgID
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromProgID(
         LPCOLESTR lpszProgID,
          LPCLSID lpclsid
    );
#line 1294 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) int __stdcall
StringFromGUID2(
         const GUID & rguid,
                                    LPOLESTR lpsz,
         int cchMax
    );


               extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateGuid(
          GUID * pguid
    );




typedef struct tagPROPVARIANT PROPVARIANT;


extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantCopy(
          PROPVARIANT * pvarDest,
         const PROPVARIANT * pvarSrc
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantClear(
            PROPVARIANT * pvar
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
FreePropVariantArray(
         ULONG cVariants,
                               PROPVARIANT * rgvars
    );
#line 1356 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleHandles(
         DWORD dwFlags,
         DWORD dwTimeout,
         ULONG cHandles,
                         LPHANDLE pHandles,
          LPDWORD lpdwindex
    );




typedef enum tagCOWAIT_FLAGS
{
  COWAIT_DEFAULT = 0,
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4,
  COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10,
}COWAIT_FLAGS;




typedef enum CWMO_FLAGS
{
  CWMO_DEFAULT = 0,
  CWMO_DISPATCH_CALLS = 1,
  CWMO_DISPATCH_WINDOW_MESSAGES = 2,
} CWMO_FLAGS;

extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleObjects(
         DWORD dwFlags,
         DWORD dwTimeout,
         ULONG cHandles,
                         const HANDLE * pHandles,
          LPDWORD lpdwindex
    );
#line 1411 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetTreatAsClass(
         const IID & clsidOld,
          LPCLSID pClsidNew
    );
#line 1430 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall
CoInvalidateRemoteMachineBindings(
         LPOLESTR pszMachineName
    );
#line 1448 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
enum AgileReferenceOptions
{
    AGILEREFERENCE_DEFAULT = 0,
    AGILEREFERENCE_DELAYEDMARSHAL = 1,
};




               extern "C" __declspec(dllimport) HRESULT __stdcall
RoGetAgileReference(
         enum AgileReferenceOptions options,
         const IID & riid,
         IUnknown * pUnk,
                 IAgileReference ** ppAgileReference
    );
#line 1482 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID &, const IID &, LPVOID *);
typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern "C" HRESULT __stdcall DllGetClassObject( const IID & rclsid, const IID & riid, LPVOID * ppv);

extern "C" HRESULT __stdcall DllCanUnloadNow(void);



extern "C" __declspec(dllimport) LPVOID __stdcall
CoTaskMemAlloc(
         SIZE_T cb
    );

extern "C" __declspec(dllimport) LPVOID __stdcall
CoTaskMemRealloc(
                                                       LPVOID pv,
         SIZE_T cb
    );

extern "C" __declspec(dllimport) void __stdcall
CoTaskMemFree(
                                                       LPVOID pv
    );




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 1510 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\combaseapi.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"



typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED = 0x2,



  COINIT_MULTITHREADED = COINITBASE_MULTITHREADED,
  COINIT_DISABLE_OLE1DDE = 0x4,
  COINIT_SPEED_OVER_MEMORY = 0x8,

} COINIT;
#line 96 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
typedef DWORD STGFMT;
#line 107 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"








#pragma warning(disable: 4049)
#line 444 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef struct IMallocSpy IMallocSpy;






typedef struct IBindCtx IBindCtx;






typedef struct IEnumMoniker IEnumMoniker;






typedef struct IRunnableObject IRunnableObject;






typedef struct IRunningObjectTable IRunningObjectTable;






typedef struct IPersist IPersist;






typedef struct IPersistStream IPersistStream;






typedef struct IMoniker IMoniker;






typedef struct IROTData IROTData;






typedef struct IEnumSTATSTG IEnumSTATSTG;






typedef struct IStorage IStorage;






typedef struct IPersistFile IPersistFile;






typedef struct IPersistStorage IPersistStorage;






typedef struct ILockBytes ILockBytes;






typedef struct IEnumFORMATETC IEnumFORMATETC;






typedef struct IEnumSTATDATA IEnumSTATDATA;






typedef struct IRootStorage IRootStorage;






typedef struct IAdviseSink IAdviseSink;






typedef struct AsyncIAdviseSink AsyncIAdviseSink;






typedef struct IAdviseSink2 IAdviseSink2;






typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;






typedef struct IDataObject IDataObject;






typedef struct IDataAdviseHolder IDataAdviseHolder;






typedef struct IMessageFilter IMessageFilter;






typedef struct IClassActivator IClassActivator;






typedef struct IFillLockBytes IFillLockBytes;






typedef struct IProgressNotify IProgressNotify;






typedef struct ILayoutStorage ILayoutStorage;






typedef struct IBlockingLock IBlockingLock;






typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;






typedef struct IOplockStorage IOplockStorage;






typedef struct IDirectWriterLock IDirectWriterLock;






typedef struct IUrlMon IUrlMon;






typedef struct IForegroundTransfer IForegroundTransfer;






typedef struct IThumbnailExtractor IThumbnailExtractor;






typedef struct IDummyHICONIncluder IDummyHICONIncluder;






typedef struct IProcessLock IProcessLock;






typedef struct ISurrogateService ISurrogateService;






typedef struct IInitializeSpy IInitializeSpy;






typedef struct IApartmentShutdown IApartmentShutdown;






#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/unknwn.h"








#pragma warning(disable: 4049)
#line 68 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/unknwn.h"
extern "C"{
#line 89 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;
#line 286 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;
#line 422 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec;
#line 559 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/unknwn.h"
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec;



              HRESULT __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,

              IUnknown *pUnkOuter,

          const IID & riid,

                  void **ppvObject);


                HRESULT __stdcall IClassFactory_CreateInstance_Stub(
              IClassFactory * This,
                         const IID & riid,
                                             IUnknown **ppvObject);

              HRESULT __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
              IClassFactory * This,
               BOOL fLock);






}
#line 723 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"



extern "C"{
#line 758 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#line 790 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#line 8111 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
#pragma warning(pop)
#line 8129 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0053_v0_0_s_ifspec;







typedef IMallocSpy *LPMALLOCSPY;


extern "C" const IID IID_IMallocSpy;



    struct __declspec(uuid("0000001d-0000-0000-C000-000000000046")) __declspec(novtable)
    IMallocSpy : public IUnknown
    {
    public:
        virtual SIZE_T __stdcall PreAlloc(

                  SIZE_T cbRequest) = 0;

        virtual void *__stdcall PostAlloc(

                  void *pActual) = 0;

        virtual void *__stdcall PreFree(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual void __stdcall PostFree(

                  BOOL fSpyed) = 0;

        virtual SIZE_T __stdcall PreRealloc(

                  void *pRequest,

                  SIZE_T cbRequest,

                      void **ppNewRequest,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PostRealloc(

                  void *pActual,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PreGetSize(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual SIZE_T __stdcall PostGetSize(

                  SIZE_T cbActual,

                  BOOL fSpyed) = 0;

        virtual void *__stdcall PreDidAlloc(

                  void *pRequest,

                  BOOL fSpyed) = 0;

        virtual int __stdcall PostDidAlloc(

                  void *pRequest,

                  BOOL fSpyed,

                  int fActual) = 0;

        virtual void __stdcall PreHeapMinimize( void) = 0;

        virtual void __stdcall PostHeapMinimize( void) = 0;

    };
#line 8389 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec;







typedef IBindCtx *LPBC;

typedef IBindCtx *LPBINDCTX;


    typedef struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    } BIND_OPTS, * LPBIND_OPTS;
#line 8422 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
    typedef struct tagBIND_OPTS2 : tagBIND_OPTS {
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO * pServerInfo;
    } BIND_OPTS2, * LPBIND_OPTS2;
#line 8446 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
    typedef struct tagBIND_OPTS3 : tagBIND_OPTS2 {
   HWND hwnd;
    } BIND_OPTS3, * LPBIND_OPTS3;
#line 8466 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef
enum tagBIND_FLAGS
    {
        BIND_MAYBOTHERUSER = 1,
        BIND_JUSTTESTEXISTENCE = 2
    } BIND_FLAGS;


extern "C" const IID IID_IBindCtx;



    struct __declspec(uuid("0000000e-0000-0000-C000-000000000046")) __declspec(novtable)
    IBindCtx : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterObjectBound(
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall RevokeObjectBound(
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall ReleaseBoundObjects( void) = 0;

        virtual HRESULT __stdcall SetBindOptions(

                  BIND_OPTS *pbindopts) = 0;

        virtual HRESULT __stdcall GetBindOptions(

                     BIND_OPTS *pbindopts) = 0;

        virtual HRESULT __stdcall GetRunningObjectTable(
                                             IRunningObjectTable **pprot) = 0;

        virtual HRESULT __stdcall RegisterObjectParam(
                                 LPOLESTR pszKey,
                                             IUnknown *punk) = 0;

        virtual HRESULT __stdcall GetObjectParam(
                                 LPOLESTR pszKey,
                                             IUnknown **ppunk) = 0;

        virtual HRESULT __stdcall EnumObjectParam(
                                             IEnumString **ppenum) = 0;

        virtual HRESULT __stdcall RevokeObjectParam(
                                 LPOLESTR pszKey) = 0;

    };
#line 8639 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 8673 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IEnumMoniker *LPENUMMONIKER;


extern "C" const IID IID_IEnumMoniker;



    struct __declspec(uuid("00000102-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 IMoniker **rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumMoniker **ppenum) = 0;

    };
#line 8781 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 8808 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec;







typedef IRunnableObject *LPRUNNABLEOBJECT;


extern "C" const IID IID_IRunnableObject;



    struct __declspec(uuid("00000126-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunnableObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRunningClass(
                                   LPCLSID lpClsid) = 0;

        virtual HRESULT __stdcall Run(
                                     LPBINDCTX pbc) = 0;

        virtual BOOL __stdcall IsRunning( void) = 0;

        virtual HRESULT __stdcall LockRunning(
                       BOOL fLock,
                       BOOL fLastUnlockCloses) = 0;

        virtual HRESULT __stdcall SetContainedObject(
                       BOOL fContained) = 0;

    };
#line 8929 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy(
              IRunnableObject * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 8950 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern "C" const IID IID_IRunningObjectTable;



    struct __declspec(uuid("00000010-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Register(
                       DWORD grfFlags,
                                             IUnknown *punkObject,
                                             IMoniker *pmkObjectName,
                                   DWORD *pdwRegister) = 0;

        virtual HRESULT __stdcall Revoke(
                       DWORD dwRegister) = 0;

        virtual HRESULT __stdcall IsRunning(
                                             IMoniker *pmkObjectName) = 0;

        virtual HRESULT __stdcall GetObjectW(
                                             IMoniker *pmkObjectName,
                                             IUnknown **ppunkObject) = 0;

        virtual HRESULT __stdcall NoteChangeTime(
                       DWORD dwRegister,
                                 FILETIME *pfiletime) = 0;

        virtual HRESULT __stdcall GetTimeOfLastChange(
                                             IMoniker *pmkObjectName,
                                   FILETIME *pfiletime) = 0;

        virtual HRESULT __stdcall EnumRunning(
                                             IEnumMoniker **ppenumMoniker) = 0;

    };
#line 9107 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec;







typedef IPersist *LPPERSIST;


extern "C" const IID IID_IPersist;



    struct __declspec(uuid("0000010c-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersist : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID(
                                   CLSID *pClassID) = 0;

    };
#line 9198 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IPersistStream *LPPERSISTSTREAM;


extern "C" const IID IID_IPersistStream;



    struct __declspec(uuid("00000109-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStream : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                             IStream *pStm) = 0;

        virtual HRESULT __stdcall Save(
                                             IStream *pStm,
                       BOOL fClearDirty) = 0;

        virtual HRESULT __stdcall GetSizeMax(
                                   ULARGE_INTEGER *pcbSize) = 0;

    };
#line 9318 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IMoniker *LPMONIKER;

typedef
enum tagMKSYS
    {
        MKSYS_NONE = 0,
        MKSYS_GENERICCOMPOSITE = 1,
        MKSYS_FILEMONIKER = 2,
        MKSYS_ANTIMONIKER = 3,
        MKSYS_ITEMMONIKER = 4,
        MKSYS_POINTERMONIKER = 5,
        MKSYS_CLASSMONIKER = 7,
        MKSYS_OBJREFMONIKER = 8,
        MKSYS_SESSIONMONIKER = 9,
        MKSYS_LUAMONIKER = 10
    } MKSYS;

typedef
enum tagMKREDUCE
    {
        MKRREDUCE_ONE = ( 3 << 16 ) ,
        MKRREDUCE_TOUSER = ( 2 << 16 ) ,
        MKRREDUCE_THROUGHUSER = ( 1 << 16 ) ,
        MKRREDUCE_ALL = 0
    } MKRREDUCE;


extern "C" const IID IID_IMoniker;



    struct __declspec(uuid("0000000f-0000-0000-C000-000000000046")) __declspec(novtable)
    IMoniker : public IPersistStream
    {
    public:
        virtual HRESULT __stdcall BindToObject(

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID & riidResult,

                      void **ppvResult) = 0;

        virtual HRESULT __stdcall BindToStorage(

                  IBindCtx *pbc,

                      IMoniker *pmkToLeft,

                  const IID & riid,

                      void **ppvObj) = 0;

        virtual HRESULT __stdcall Reduce(
                                             IBindCtx *pbc,
                       DWORD dwReduceHowFar,
                                                               IMoniker **ppmkToLeft,
                                             IMoniker **ppmkReduced) = 0;

        virtual HRESULT __stdcall ComposeWith(
                                             IMoniker *pmkRight,
                       BOOL fOnlyIfNotGeneric,
                                             IMoniker **ppmkComposite) = 0;

        virtual HRESULT __stdcall Enum(
                       BOOL fForward,
                                             IEnumMoniker **ppenumMoniker) = 0;

        virtual HRESULT __stdcall IsEqual(
                                             IMoniker *pmkOtherMoniker) = 0;

        virtual HRESULT __stdcall Hash(
                                   DWORD *pdwHash) = 0;

        virtual HRESULT __stdcall IsRunning(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             IMoniker *pmkNewlyRunning) = 0;

        virtual HRESULT __stdcall GetTimeOfLastChange(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                   FILETIME *pFileTime) = 0;

        virtual HRESULT __stdcall Inverse(
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall CommonPrefixWith(
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkPrefix) = 0;

        virtual HRESULT __stdcall RelativePathTo(
                                             IMoniker *pmkOther,
                                             IMoniker **ppmkRelPath) = 0;

        virtual HRESULT __stdcall GetDisplayName(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                             LPOLESTR *ppszDisplayName) = 0;

        virtual HRESULT __stdcall ParseDisplayName(
                                             IBindCtx *pbc,
                                             IMoniker *pmkToLeft,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut) = 0;

        virtual HRESULT __stdcall IsSystemMoniker(
                                   DWORD *pdwMksys) = 0;

    };
#line 9655 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riidResult,
                                             IUnknown **ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 9698 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0061_v0_0_s_ifspec;
#line 9708 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IROTData;



    struct __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) __declspec(novtable)
    IROTData : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetComparisonData(
                                                               byte *pbData,
                       ULONG cbMax,
                                   ULONG *pcbData) = 0;

    };
#line 9794 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec;







typedef IEnumSTATSTG *LPENUMSTATSTG;


extern "C" const IID IID_IEnumSTATSTG;



    struct __declspec(uuid("0000000d-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 STATSTG *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATSTG **ppenum) = 0;

    };
#line 9911 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 9935 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    ULONG ulCntStr;
    ULONG ulCntChar;
                    OLECHAR rgString[ 1 ];
    } RemSNB;

typedef RemSNB *wireSNB;

typedef LPOLESTR *SNB;


extern "C" const IID IID_IStorage;



    struct __declspec(uuid("0000000b-0000-0000-C000-000000000046")) __declspec(novtable)
    IStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStream(
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStream **ppstm) = 0;

        virtual HRESULT __stdcall OpenStream(

                    const OLECHAR *pwcsName,

                        void *reserved1,
                       DWORD grfMode,
                       DWORD reserved2,

                      IStream **ppstm) = 0;

        virtual HRESULT __stdcall CreateStorage(
                                                const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                                             IStorage **ppstg) = 0;

        virtual HRESULT __stdcall OpenStorage(
                                                            const OLECHAR *pwcsName,
                                             IStorage *pstgPriority,
                       DWORD grfMode,
                                                       SNB snbExclude,
                       DWORD reserved,
                                             IStorage **ppstg) = 0;

        virtual HRESULT __stdcall CopyTo(
                       DWORD ciidExclude,

                                         const IID *rgiidExclude,

                      SNB snbExclude,

                  IStorage *pstgDest) = 0;

        virtual HRESULT __stdcall MoveElementTo(
                                                const OLECHAR *pwcsName,
                                             IStorage *pstgDest,
                                                const OLECHAR *pwcsNewName,
                       DWORD grfFlags) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall EnumElements(

                        DWORD reserved1,

                        void *reserved2,

                        DWORD reserved3,

                      IEnumSTATSTG **ppenum) = 0;

        virtual HRESULT __stdcall DestroyElement(
                                                const OLECHAR *pwcsName) = 0;

        virtual HRESULT __stdcall RenameElement(
                                                const OLECHAR *pwcsOldName,
                                                const OLECHAR *pwcsNewName) = 0;

        virtual HRESULT __stdcall SetElementTimes(
                                                            const OLECHAR *pwcsName,
                                             const FILETIME *pctime,
                                             const FILETIME *patime,
                                             const FILETIME *pmtime) = 0;

        virtual HRESULT __stdcall SetClass(
                                 const IID & clsid) = 0;

        virtual HRESULT __stdcall SetStateBits(
                       DWORD grfStateBits,
                       DWORD grfMask) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

    };
#line 10240 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IStorage_RemoteOpenStream_Proxy(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteCopyTo_Proxy(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);


void __stdcall IStorage_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IStorage_RemoteEnumElements_Proxy(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 10301 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec;







typedef IPersistFile *LPPERSISTFILE;


extern "C" const IID IID_IPersistFile;



    struct __declspec(uuid("0000010b-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistFile : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                 LPCOLESTR pszFileName,
                       DWORD dwMode) = 0;

        virtual HRESULT __stdcall Save(
                                             LPCOLESTR pszFileName,
                       BOOL fRemember) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                             LPCOLESTR pszFileName) = 0;

        virtual HRESULT __stdcall GetCurFile(
                                             LPOLESTR *ppszFileName) = 0;

    };
#line 10442 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IPersistStorage *LPPERSISTSTORAGE;


extern "C" const IID IID_IPersistStorage;



    struct __declspec(uuid("0000010a-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall InitNew(
                                             IStorage *pStg) = 0;

        virtual HRESULT __stdcall Load(
                                             IStorage *pStg) = 0;

        virtual HRESULT __stdcall Save(
                                             IStorage *pStgSave,
                       BOOL fSameAsLoad) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                             IStorage *pStgNew) = 0;

        virtual HRESULT __stdcall HandsOffStorage( void) = 0;

    };
#line 10583 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec;







typedef ILockBytes *LPLOCKBYTES;


extern "C" const IID IID_ILockBytes;



    struct __declspec(uuid("0000000a-0000-0000-C000-000000000046")) __declspec(novtable)
    ILockBytes : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadAt(
                       ULARGE_INTEGER ulOffset,

                                                 void *pv,
                       ULONG cb,

                       ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall WriteAt(
                       ULARGE_INTEGER ulOffset,

                                  const void *pv,
                       ULONG cb,

                       ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall Flush( void) = 0;

        virtual HRESULT __stdcall SetSize(
                       ULARGE_INTEGER cb) = 0;

        virtual HRESULT __stdcall LockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall UnlockRegion(
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATSTG *pstatstg,
                       DWORD grfStatFlag) = 0;

    };
#line 10752 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 10792 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IEnumFORMATETC *LPENUMFORMATETC;


typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
                    BYTE tdData[ 1 ];
    } DVTARGETDEVICE;


typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
                   DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern "C" const IID IID_IEnumFORMATETC;



    struct __declspec(uuid("00000103-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumFORMATETC : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 FORMATETC *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumFORMATETC **ppenum) = 0;

    };
#line 10925 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 10949 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IEnumSTATDATA *LPENUMSTATDATA;

typedef
enum tagADVF
    {
        ADVF_NODATA = 1,
        ADVF_PRIMEFIRST = 2,
        ADVF_ONLYONCE = 4,
        ADVF_DATAONSTOP = 64,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32
    } ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
                   IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } STATDATA;

typedef STATDATA *LPSTATDATA;


extern "C" const IID IID_IEnumSTATDATA;



    struct __declspec(uuid("00000105-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATDATA : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                 STATDATA *rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATDATA **ppenum) = 0;

    };
#line 11079 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11103 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IRootStorage *LPROOTSTORAGE;


extern "C" const IID IID_IRootStorage;



    struct __declspec(uuid("00000012-0000-0000-C000-000000000046")) __declspec(novtable)
    IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchToFile(
                                 LPOLESTR pszFile) = 0;

    };
#line 11185 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IAdviseSink *LPADVISESINK;

typedef
enum tagTYMED
    {
        TYMED_HGLOBAL = 1,
        TYMED_FILE = 2,
        TYMED_ISTREAM = 4,
        TYMED_ISTORAGE = 8,
        TYMED_GDI = 16,
        TYMED_MFPICT = 32,
        TYMED_ENHMF = 64,
        TYMED_NULL = 0
    } TYMED;



#pragma warning(push)

#pragma warning(disable: 4200)

typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
                    byte data[ 1 ];
    } RemSTGMEDIUM;



#pragma warning(pop)
#line 11238 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
                                   union
        {
                       HBITMAP hBitmap;
                       HMETAFILEPICT hMetaFilePict;
                       HENHMETAFILE hEnhMetaFile;
                       HGLOBAL hGlobal;
                       LPOLESTR lpszFileName;
                       IStream *pstm;
                       IStorage *pstg;

        } ;
                   IUnknown *pUnkForRelease;
    } uSTGMEDIUM;


typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
                                          union __MIDL_IAdviseSink_0002
        {
                       wireHBITMAP hBitmap;
                       wireHPALETTE hPalette;
                        wireHGLOBAL hGeneric;
        } u;
    } GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
                                              union __MIDL_IAdviseSink_0003
            {

                           wireHMETAFILEPICT hMetaFilePict;
                           wireHENHMETAFILE hHEnhMetaFile;
                           GDI_OBJECT *hGdiHandle;
                           wireHGLOBAL hGlobal;
                           LPOLESTR lpszFileName;
                           BYTE_BLOB *pstm;
                           BYTE_BLOB *pstg;
            } u;
        } ;
    IUnknown *pUnkForRelease;
    } userSTGMEDIUM;

typedef userSTGMEDIUM *wireSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
    } userFLAG_STGMEDIUM;

typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef struct _FLAG_STGMEDIUM
    {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
    } FLAG_STGMEDIUM;


extern "C" const IID IID_IAdviseSink;



    struct __declspec(uuid("0000010f-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink : public IUnknown
    {
    public:
        virtual void __stdcall OnDataChange(

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed) = 0;

        virtual void __stdcall OnViewChange(
                       DWORD dwAspect,
                       LONG lindex) = 0;

        virtual void __stdcall OnRename(

                  IMoniker *pmk) = 0;

        virtual void __stdcall OnSave( void) = 0;

        virtual void __stdcall OnClose( void) = 0;

    };
#line 11429 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy(
              IAdviseSink * This,
                             IMoniker *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy(
              IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11500 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_AsyncIAdviseSink;



    struct __declspec(uuid("00000150-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink : public IUnknown
    {
    public:
        virtual void __stdcall Begin_OnDataChange(

                  FORMATETC *pFormatetc,

                  STGMEDIUM *pStgmed) = 0;

        virtual void __stdcall Finish_OnDataChange( void) = 0;

        virtual void __stdcall Begin_OnViewChange(
                       DWORD dwAspect,
                       LONG lindex) = 0;

        virtual void __stdcall Finish_OnViewChange( void) = 0;

        virtual void __stdcall Begin_OnRename(

                  IMoniker *pmk) = 0;

        virtual void __stdcall Finish_OnRename( void) = 0;

        virtual void __stdcall Begin_OnSave( void) = 0;

        virtual void __stdcall Finish_OnSave( void) = 0;

        virtual void __stdcall Begin_OnClose( void) = 0;

        virtual void __stdcall Finish_OnClose( void) = 0;

    };
#line 11655 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
              AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11783 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec;







typedef IAdviseSink2 *LPADVISESINK2;


extern "C" const IID IID_IAdviseSink2;



    struct __declspec(uuid("00000125-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual void __stdcall OnLinkSrcChange(

                  IMoniker *pmk) = 0;

    };
#line 11905 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
              IAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 11928 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_AsyncIAdviseSink2;



    struct __declspec(uuid("00000151-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink2 : public AsyncIAdviseSink
    {
    public:
        virtual void __stdcall Begin_OnLinkSrcChange(

                  IMoniker *pmk) = 0;

        virtual void __stdcall Finish_OnLinkSrcChange( void) = 0;

    };
#line 12076 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);


void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
              AsyncIAdviseSink2 * This);


void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 12112 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0072_v0_0_s_ifspec;







typedef IDataObject *LPDATAOBJECT;

typedef
enum tagDATADIR
    {
        DATADIR_GET = 1,
        DATADIR_SET = 2
    } DATADIR;


extern "C" const IID IID_IDataObject;



    struct __declspec(uuid("0000010e-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetData(

                  FORMATETC *pformatetcIn,

                   STGMEDIUM *pmedium) = 0;

        virtual HRESULT __stdcall GetDataHere(

                  FORMATETC *pformatetc,

                     STGMEDIUM *pmedium) = 0;

        virtual HRESULT __stdcall QueryGetData(
                                             FORMATETC *pformatetc) = 0;

        virtual HRESULT __stdcall GetCanonicalFormatEtc(
                                             FORMATETC *pformatectIn,
                                   FORMATETC *pformatetcOut) = 0;

        virtual HRESULT __stdcall SetData(

                  FORMATETC *pformatetc,

                  STGMEDIUM *pmedium,
                       BOOL fRelease) = 0;

        virtual HRESULT __stdcall EnumFormatEtc(
                       DWORD dwDirection,
                                             IEnumFORMATETC **ppenumFormatEtc) = 0;

        virtual HRESULT __stdcall DAdvise(
                                 FORMATETC *pformatetc,
                       DWORD advf,
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall DUnadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumDAdvise(
                                             IEnumSTATDATA **ppenumAdvise) = 0;

    };
#line 12310 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IDataObject_RemoteGetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IDataObject_RemoteSetData_Proxy(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 12363 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec;







typedef IDataAdviseHolder *LPDATAADVISEHOLDER;


extern "C" const IID IID_IDataAdviseHolder;



    struct __declspec(uuid("00000110-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise(

                      IDataObject *pDataObject,

                  FORMATETC *pFetc,

                  DWORD advf,

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(

                  DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(

                      IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall SendOnDataChange(

                  IDataObject *pDataObject,

                        DWORD dwReserved,

                  DWORD advf) = 0;

    };
#line 12516 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef IMessageFilter *LPMESSAGEFILTER;

typedef
enum tagCALLTYPE
    {
        CALLTYPE_TOPLEVEL = 1,
        CALLTYPE_NESTED = 2,
        CALLTYPE_ASYNC = 3,
        CALLTYPE_TOPLEVEL_CALLPENDING = 4,
        CALLTYPE_ASYNC_CALLPENDING = 5
    } CALLTYPE;

typedef
enum tagSERVERCALL
    {
        SERVERCALL_ISHANDLED = 0,
        SERVERCALL_REJECTED = 1,
        SERVERCALL_RETRYLATER = 2
    } SERVERCALL;

typedef
enum tagPENDINGTYPE
    {
        PENDINGTYPE_TOPLEVEL = 1,
        PENDINGTYPE_NESTED = 2
    } PENDINGTYPE;

typedef
enum tagPENDINGMSG
    {
        PENDINGMSG_CANCELCALL = 0,
        PENDINGMSG_WAITNOPROCESS = 1,
        PENDINGMSG_WAITDEFPROCESS = 2
    } PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern "C" const IID IID_IMessageFilter;



    struct __declspec(uuid("00000016-0000-0000-C000-000000000046")) __declspec(novtable)
    IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD __stdcall HandleInComingCall(

                  DWORD dwCallType,

                  HTASK htaskCaller,

                  DWORD dwTickCount,

                      LPINTERFACEINFO lpInterfaceInfo) = 0;

        virtual DWORD __stdcall RetryRejectedCall(

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwRejectType) = 0;

        virtual DWORD __stdcall MessagePending(

                  HTASK htaskCallee,

                  DWORD dwTickCount,

                  DWORD dwPendingType) = 0;

    };
#line 12693 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec;
#line 12721 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IClassActivator;



    struct __declspec(uuid("00000140-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassActivator : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassObject(
                                 const IID & rclsid,
                       DWORD dwClassContext,
                       LCID locale,
                                 const IID & riid,
                                                     void **ppv) = 0;

    };
#line 12811 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec;
#line 12821 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IFillLockBytes;



    struct __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) __declspec(novtable)
    IFillLockBytes : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FillAppend(

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall FillAt(

                  ULARGE_INTEGER ulOffset,

                                  const void *pv,

                  ULONG cb,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall SetFillSize(
                       ULARGE_INTEGER ulSize) = 0;

        virtual HRESULT __stdcall Terminate(
                       BOOL bCanceled) = 0;

    };
#line 12944 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
                HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 12986 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec;
#line 12996 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IProgressNotify;



    struct __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) __declspec(novtable)
    IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnProgress(
                       DWORD dwProgressCurrent,
                       DWORD dwProgressMaximum,
                       BOOL fAccurate,
                       BOOL fOwner) = 0;

    };
#line 13084 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec;







typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } StorageLayout;


extern "C" const IID IID_ILayoutStorage;



    struct __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LayoutScript(

                                  StorageLayout *pStorageLayout,

                  DWORD nEntries,

                        DWORD glfInterleavedFlag) = 0;

        virtual HRESULT __stdcall BeginMonitor( void) = 0;

        virtual HRESULT __stdcall EndMonitor( void) = 0;

        virtual HRESULT __stdcall ReLayoutDocfile(

                       OLECHAR *pwcsNewDfName) = 0;

        virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes(

                  ILockBytes *pILockBytes) = 0;

    };
#line 13234 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec;
#line 13244 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IBlockingLock;



    struct __declspec(uuid("30f3d47a-6447-11d1-8e3c-00c04fb9386d")) __declspec(novtable)
    IBlockingLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Lock(
                       DWORD dwTimeout) = 0;

        virtual HRESULT __stdcall Unlock( void) = 0;

    };
#line 13332 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_ITimeAndNoticeControl;



    struct __declspec(uuid("bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    ITimeAndNoticeControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SuppressChanges(
                       DWORD res1,
                       DWORD res2) = 0;

    };
#line 13414 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IOplockStorage;



    struct __declspec(uuid("8d19c834-8879-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    IOplockStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStorageEx(
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID & riid,
                                                     void **ppstgOpen) = 0;

        virtual HRESULT __stdcall OpenStorageEx(
                                 LPCWSTR pwcsName,
                       DWORD grfMode,
                       DWORD stgfmt,
                       DWORD grfAttrs,
                                 const IID & riid,
                                                     void **ppstgOpen) = 0;

    };
#line 13526 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0082_v0_0_s_ifspec;
#line 13536 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IDirectWriterLock;



    struct __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    IDirectWriterLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitForWriteAccess(
                       DWORD dwTimeout) = 0;

        virtual HRESULT __stdcall ReleaseWriteAccess( void) = 0;

        virtual HRESULT __stdcall HaveWriteAccess( void) = 0;

    };
#line 13634 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0083_v0_0_s_ifspec;
#line 13644 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IUrlMon;



    struct __declspec(uuid("00000026-0000-0000-C000-000000000046")) __declspec(novtable)
    IUrlMon : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AsyncGetClassBits(
                                 const IID & rclsid,
                                             LPCWSTR pszTYPE,
                                             LPCWSTR pszExt,
                       DWORD dwFileVersionMS,
                       DWORD dwFileVersionLS,
                                             LPCWSTR pszCodeBase,
                                     IBindCtx *pbc,
                       DWORD dwClassContext,
                                 const IID & riid,
                       DWORD flags) = 0;

    };
#line 13742 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IForegroundTransfer;



    struct __declspec(uuid("00000145-0000-0000-C000-000000000046")) __declspec(novtable)
    IForegroundTransfer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AllowForegroundTransfer(

                        void *lpvReserved) = 0;

    };
#line 13824 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IThumbnailExtractor;



    struct __declspec(uuid("969dc708-5c76-11d1-8d86-0000f804b057")) __declspec(novtable)
    IThumbnailExtractor : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ExtractThumbnail(
                                     IStorage *pStg,
                       ULONG ulLength,
                       ULONG ulHeight,
                                   ULONG *pulOutputLength,
                                   ULONG *pulOutputHeight,
                                             HBITMAP *phOutputBitmap) = 0;

        virtual HRESULT __stdcall OnFileUpdated(
                                     IStorage *pStg) = 0;

    };
#line 13924 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IDummyHICONIncluder;



    struct __declspec(uuid("947990de-cc28-11d2-a0f7-00805f858fb1")) __declspec(novtable)
    IDummyHICONIncluder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Dummy(
                                 HICON h1,
                                 HDC h2) = 0;

    };
#line 14002 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
typedef
enum tagApplicationType
    {
        ServerApplication = 0,
        LibraryApplication = ( ServerApplication + 1 )
    } ApplicationType;

typedef
enum tagShutdownType
    {
        IdleShutdown = 0,
        ForcedShutdown = ( IdleShutdown + 1 )
    } ShutdownType;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec;
#line 14028 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IProcessLock;



    struct __declspec(uuid("000001d5-0000-0000-C000-000000000046")) __declspec(novtable)
    IProcessLock : public IUnknown
    {
    public:
        virtual ULONG __stdcall AddRefOnProcess( void) = 0;

        virtual ULONG __stdcall ReleaseRefOnProcess( void) = 0;

    };
#line 14114 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_ISurrogateService;



    struct __declspec(uuid("000001d4-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogateService : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Init(

                  const GUID & rguidProcessID,

                  IProcessLock *pProcessLock,

                   BOOL *pfApplicationAware) = 0;

        virtual HRESULT __stdcall ApplicationLaunch(

                  const GUID & rguidApplID,

                  ApplicationType appType) = 0;

        virtual HRESULT __stdcall ApplicationFree(

                  const GUID & rguidApplID) = 0;

        virtual HRESULT __stdcall CatalogRefresh(

                        ULONG ulReserved) = 0;

        virtual HRESULT __stdcall ProcessShutdown(

                  ShutdownType shutdownType) = 0;

    };
#line 14255 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec;







typedef IInitializeSpy *LPINITIALIZESPY;


extern "C" const IID IID_IInitializeSpy;



    struct __declspec(uuid("00000034-0000-0000-C000-000000000046")) __declspec(novtable)
    IInitializeSpy : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreInitialize(

                  DWORD dwCoInit,

                  DWORD dwCurThreadAptRefs) = 0;

        virtual HRESULT __stdcall PostInitialize(

                  HRESULT hrCoInit,

                  DWORD dwCoInit,

                  DWORD dwNewThreadAptRefs) = 0;

        virtual HRESULT __stdcall PreUninitialize(

                  DWORD dwCurThreadAptRefs) = 0;

        virtual HRESULT __stdcall PostUninitialize(

                  DWORD dwNewThreadAptRefs) = 0;

    };
#line 14400 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0090_v0_0_s_ifspec;
#line 14410 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
extern "C" const IID IID_IApartmentShutdown;



    struct __declspec(uuid("A2F05A09-27A2-42B5-BC0E-AC163EF49D9B")) __declspec(novtable)
    IApartmentShutdown : public IUnknown
    {
    public:
        virtual void __stdcall OnUninitialize(

                  UINT64 ui64ApartmentIdentifier) = 0;

    };
#line 14492 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objidl.h"
#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec;



unsigned long __stdcall ASYNC_STGMEDIUM_UserSize( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall ASYNC_STGMEDIUM_UserSize64( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * __stdcall ASYNC_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void __stdcall ASYNC_STGMEDIUM_UserFree64( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall FLAG_STGMEDIUM_UserSize64( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * __stdcall FLAG_STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void __stdcall FLAG_STGMEDIUM_UserFree64( unsigned long *, FLAG_STGMEDIUM * );

unsigned long __stdcall HBITMAP_UserSize64( unsigned long *, unsigned long , HBITMAP * );
unsigned char * __stdcall HBITMAP_UserMarshal64( unsigned long *, unsigned char *, HBITMAP * );
unsigned char * __stdcall HBITMAP_UserUnmarshal64( unsigned long *, unsigned char *, HBITMAP * );
void __stdcall HBITMAP_UserFree64( unsigned long *, HBITMAP * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HICON_UserSize64( unsigned long *, unsigned long , HICON * );
unsigned char * __stdcall HICON_UserMarshal64( unsigned long *, unsigned char *, HICON * );
unsigned char * __stdcall HICON_UserUnmarshal64( unsigned long *, unsigned char *, HICON * );
void __stdcall HICON_UserFree64( unsigned long *, HICON * );

unsigned long __stdcall SNB_UserSize64( unsigned long *, unsigned long , SNB * );
unsigned char * __stdcall SNB_UserMarshal64( unsigned long *, unsigned char *, SNB * );
unsigned char * __stdcall SNB_UserUnmarshal64( unsigned long *, unsigned char *, SNB * );
void __stdcall SNB_UserFree64( unsigned long *, SNB * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,

          ULONG celt,

                                         IUnknown **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumUnknown_Next_Stub(
              IEnumUnknown * This,
               ULONG celt,
                                                                                IUnknown **rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,

                                         LPOLESTR *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumString_Next_Stub(
              IEnumString * This,
               ULONG celt,
                                                                                LPOLESTR *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,

                                         void *pv,

          ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ISequentialStream_Read_Stub(
              ISequentialStream * This,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,

                          const void *pv,

          ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ISequentialStream_Write_Stub(
              ISequentialStream * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,

               ULARGE_INTEGER *plibNewPosition);


                HRESULT __stdcall IStream_Seek_Stub(
              IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                           ULARGE_INTEGER *plibNewPosition);

              HRESULT __stdcall IStream_CopyTo_Proxy(
    IStream * This,

          IStream *pstm,
               ULARGE_INTEGER cb,

               ULARGE_INTEGER *pcbRead,

               ULARGE_INTEGER *pcbWritten);


                HRESULT __stdcall IStream_CopyTo_Stub(
              IStream * This,
                                     IStream *pstm,
               ULARGE_INTEGER cb,
                           ULARGE_INTEGER *pcbRead,
                           ULARGE_INTEGER *pcbWritten);

              HRESULT __stdcall IBindCtx_SetBindOptions_Proxy(
    IBindCtx * This,

          BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_SetBindOptions_Stub(
              IBindCtx * This,
                         BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IBindCtx_GetBindOptions_Proxy(
    IBindCtx * This,

             BIND_OPTS *pbindopts);


                HRESULT __stdcall IBindCtx_GetBindOptions_Stub(
              IBindCtx * This,
                                 BIND_OPTS2 *pbindopts);

              HRESULT __stdcall IEnumMoniker_Next_Proxy(
    IEnumMoniker * This,
               ULONG celt,

                                         IMoniker **rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumMoniker_Next_Stub(
              IEnumMoniker * This,
               ULONG celt,
                                                                                IMoniker **rgelt,
                           ULONG *pceltFetched);

              BOOL __stdcall IRunnableObject_IsRunning_Proxy(
    IRunnableObject * This);


                HRESULT __stdcall IRunnableObject_IsRunning_Stub(
              IRunnableObject * This);

              HRESULT __stdcall IMoniker_BindToObject_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID & riidResult,

              void **ppvResult);


                HRESULT __stdcall IMoniker_BindToObject_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riidResult,
                                             IUnknown **ppvResult);

              HRESULT __stdcall IMoniker_BindToStorage_Proxy(
    IMoniker * This,

          IBindCtx *pbc,

              IMoniker *pmkToLeft,

          const IID & riid,

              void **ppvObj);


                HRESULT __stdcall IMoniker_BindToStorage_Stub(
              IMoniker * This,
                                     IBindCtx *pbc,
                                     IMoniker *pmkToLeft,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG * This,
               ULONG celt,

                                         STATSTG *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATSTG_Next_Stub(
              IEnumSTATSTG * This,
               ULONG celt,
                                                                                STATSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IStorage_OpenStream_Proxy(
    IStorage * This,

            const OLECHAR *pwcsName,

                void *reserved1,
               DWORD grfMode,
               DWORD reserved2,

              IStream **ppstm);


                HRESULT __stdcall IStorage_OpenStream_Stub(
              IStorage * This,
                                        const OLECHAR *pwcsName,
               ULONG cbReserved1,
                                                                       byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                                     IStream **ppstm);

              HRESULT __stdcall IStorage_CopyTo_Proxy(
    IStorage * This,
               DWORD ciidExclude,

                                 const IID *rgiidExclude,

              SNB snbExclude,

          IStorage *pstgDest);


                HRESULT __stdcall IStorage_CopyTo_Stub(
              IStorage * This,
               DWORD ciidExclude,
                                                                       const IID *rgiidExclude,
                                               SNB snbExclude,
                                     IStorage *pstgDest);

              HRESULT __stdcall IStorage_EnumElements_Proxy(
    IStorage * This,

                DWORD reserved1,

                void *reserved2,

                DWORD reserved3,

              IEnumSTATSTG **ppenum);


                HRESULT __stdcall IStorage_EnumElements_Stub(
              IStorage * This,
               DWORD reserved1,
               ULONG cbReserved2,
                                                                       byte *reserved2,
               DWORD reserved3,
                                     IEnumSTATSTG **ppenum);

              HRESULT __stdcall ILockBytes_ReadAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                                         void *pv,
               ULONG cb,

               ULONG *pcbRead);


                HRESULT __stdcall ILockBytes_ReadAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                                         byte *pv,
               ULONG cb,
                           ULONG *pcbRead);

              HRESULT __stdcall ILockBytes_WriteAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,

                          const void *pv,
               ULONG cb,

               ULONG *pcbWritten);


                HRESULT __stdcall ILockBytes_WriteAt_Stub(
              ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC * This,
               ULONG celt,

                                         FORMATETC *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumFORMATETC_Next_Stub(
              IEnumFORMATETC * This,
               ULONG celt,
                                                                                FORMATETC *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA * This,
               ULONG celt,

                                         STATDATA *rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATDATA_Next_Stub(
              IEnumSTATDATA * This,
               ULONG celt,
                                                                                STATDATA *rgelt,
                           ULONG *pceltFetched);

              void __stdcall IAdviseSink_OnDataChange_Proxy(
    IAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall IAdviseSink_OnDataChange_Stub(
              IAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall IAdviseSink_OnViewChange_Proxy(
    IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall IAdviseSink_OnViewChange_Stub(
              IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall IAdviseSink_OnRename_Proxy(
    IAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink_OnRename_Stub(
              IAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall IAdviseSink_OnSave_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnSave_Stub(
              IAdviseSink * This);

              void __stdcall IAdviseSink_OnClose_Proxy(
    IAdviseSink * This);


                HRESULT __stdcall IAdviseSink_OnClose_Stub(
              IAdviseSink * This);

              void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub(
              IAdviseSink2 * This,
                                     IMoniker *pmk);

              HRESULT __stdcall IDataObject_GetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetcIn,

           STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetcIn,
                           STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_GetDataHere_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

             STGMEDIUM *pmedium);


                HRESULT __stdcall IDataObject_GetDataHere_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                 STGMEDIUM *pRemoteMedium);

              HRESULT __stdcall IDataObject_SetData_Proxy(
    IDataObject * This,

          FORMATETC *pformatetc,

          STGMEDIUM *pmedium,
               BOOL fRelease);


                HRESULT __stdcall IDataObject_SetData_Stub(
              IDataObject * This,
                                     FORMATETC *pformatetc,
                                     FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);

              HRESULT __stdcall IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes * This,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAppend_Stub(
              IFillLockBytes * This,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              HRESULT __stdcall IFillLockBytes_FillAt_Proxy(
    IFillLockBytes * This,

          ULARGE_INTEGER ulOffset,

                          const void *pv,

          ULONG cb,

           ULONG *pcbWritten);


                HRESULT __stdcall IFillLockBytes_FillAt_Stub(
              IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                                                  const byte *pv,
               ULONG cb,
                           ULONG *pcbWritten);

              void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    AsyncIAdviseSink * This,

          FORMATETC *pFormatetc,

          STGMEDIUM *pStgmed);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub(
              AsyncIAdviseSink * This,
                                     FORMATETC *pFormatetc,
                                     ASYNC_STGMEDIUM *pStgmed);

              void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub(
              AsyncIAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy(
    AsyncIAdviseSink * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub(
              AsyncIAdviseSink * This,
                             IMoniker *pmk);

              void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy(
    AsyncIAdviseSink * This);


                HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub(
              AsyncIAdviseSink * This);

              void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This,

          IMoniker *pmk);


                HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This,
                                     IMoniker *pmk);

              void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    AsyncIAdviseSink2 * This);


                HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
              AsyncIAdviseSink2 * This);






}
#line 107 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
#line 124 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
extern "C" __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



               extern "C" __declspec(dllimport) HRESULT __stdcall CoInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy);
extern "C" __declspec(dllimport) HRESULT __stdcall CoRevokeMallocSpy(void);
extern "C" __declspec(dllimport) HRESULT __stdcall CoCreateStandardMalloc( DWORD memctx, IMalloc * * ppMalloc);




               extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterInitializeSpy( LPINITIALIZESPY pSpy, ULARGE_INTEGER *puliCookie);
               extern "C" __declspec(dllimport) HRESULT __stdcall CoRevokeInitializeSpy( ULARGE_INTEGER uliCookie);



typedef enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,
    SD_ACCESSPERMISSIONS = 1,
    SD_LAUNCHRESTRICTIONS = 2,
    SD_ACCESSRESTRICTIONS = 3

} COMSD;
               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);





extern "C" __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary( LPOLESTR lpszLibName, BOOL bAutoFree);
extern "C" __declspec(dllimport) void __stdcall CoFreeLibrary( HINSTANCE hInst);
extern "C" __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);





               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromFile(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         DWORD grfMode,
                           OLECHAR * pwszName,
         DWORD dwCount,
                             MULTI_QI * pResults );


               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromIStorage(
             COSERVERINFO * pServerInfo,
             CLSID * pClsid,
             IUnknown * punkOuter,
         DWORD dwClsCtx,
         struct IStorage * pstg,
         DWORD dwCount,
                             MULTI_QI * pResults );







extern "C" __declspec(dllimport) HRESULT __stdcall CoAllowSetForegroundWindow( IUnknown *pUnk, LPVOID lpvReserved);


extern "C" __declspec(dllimport) HRESULT __stdcall DcomChannelSetHResult( LPVOID pvReserved, ULONG* pulReserved, HRESULT appsHR);




extern "C" __declspec(dllimport) BOOL __stdcall CoIsOle1Class( const IID & rclsid);
               extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgIDEx ( LPCOLESTR lpszProgID, LPCLSID lpclsid);

extern "C" __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                      FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern "C" __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                            WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern "C" __declspec(dllimport) HRESULT __stdcall CoFileTimeNow( FILETIME * lpFileTime );

               extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                                              LPMESSAGEFILTER * lplpMessageFilter );



extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterChannelHook( const GUID & ExtensionUuid, IChannelHook *pChannelHook );





               extern "C" __declspec(dllimport) HRESULT __stdcall CoTreatAsClass( const IID & clsidOld, const IID & clsidNew);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataCache( LPUNKNOWN pUnkOuter, const IID & rclsid,
                               const IID & iid, LPVOID * ppv);
#line 237 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfile( const WCHAR* pwcsName,
                 DWORD grfMode,
                       DWORD reserved,
                     IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfileOnILockBytes( ILockBytes* plkbyt,
                         DWORD grfMode,
                         DWORD reserved,
                             IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorage( const WCHAR* pwcsName,
                       IStorage* pstgPriority,
                   DWORD grfMode,
                         SNB snbExclude,
                   DWORD reserved,
                       IStorage** ppstgOpen);
               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageOnILockBytes( ILockBytes* plkbyt,
                           IStorage* pstgPriority,
                       DWORD grfMode,
                             SNB snbExclude,
                             DWORD reserved,
                           IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageFile( const WCHAR* pwcsName);
               extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageILockBytes( ILockBytes* plkbyt);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgSetTimes( const WCHAR* lpszName,
                            const FILETIME* pctime,
                            const FILETIME* patime,
                            const FILETIME* pmtime);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb,
                  DWORD grfMode,
                  DWORD asyncFlags,
                      IStorage** ppstgOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb,
                      IFillLockBytes** ppflb);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile( OLECHAR const *pwcsName,
                      IFillLockBytes** ppflb);
#line 286 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile( OLECHAR const *pwcsDfName,
                  DWORD grfMode,
                  DWORD reserved,
                      IStorage** ppstgOpen);
#line 303 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
typedef struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;

    const WCHAR *pwcsTemplateFile;

} STGOPTIONS;





               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateStorageEx ( const WCHAR* pwcsName,
                 DWORD grfMode,
                 DWORD stgfmt,
                 DWORD grfAttrs,
                        STGOPTIONS* pStgOptions,
                     PSECURITY_DESCRIPTOR pSecurityDescriptor,
                 const IID & riid,
                     void** ppObjectOpen);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageEx ( const WCHAR* pwcsName,
                 DWORD grfMode,
                 DWORD stgfmt,
                 DWORD grfAttrs,
                        STGOPTIONS* pStgOptions,
                     PSECURITY_DESCRIPTOR pSecurityDescriptor,
                 const IID & riid,
                     void** ppObjectOpen);






               extern "C" __declspec(dllimport) HRESULT __stdcall BindMoniker( LPMONIKER pmk, DWORD grfOpt, const IID & iidResult, LPVOID * ppvResult);







extern "C" __declspec(dllimport) HRESULT __stdcall CoInstall(
         IBindCtx * pbc,
         DWORD dwFlags,
         uCLSSPEC * pClassSpec,
         QUERYCONTEXT * pQuery,
         LPWSTR pszCodeBase);







               extern "C" __declspec(dllimport) HRESULT __stdcall CoGetObject( LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID & riid, void **ppv);
               extern "C" __declspec(dllimport) HRESULT __stdcall MkParseDisplayName( LPBC pbc, LPCOLESTR szUserName,
                      ULONG * pchEaten, LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall MonikerRelativePathTo( LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                   * ppmkRelPath, BOOL dwReserved);
               extern "C" __declspec(dllimport) HRESULT __stdcall MonikerCommonPrefixWith( LPMONIKER pmkThis, LPMONIKER pmkOther,
                         LPMONIKER * ppmkCommon);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateBindCtx( DWORD reserved, LPBC * ppbc);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateGenericComposite( LPMONIKER pmkFirst, LPMONIKER pmkRest,
             LPMONIKER * ppmkComposite);
               extern "C" __declspec(dllimport) HRESULT __stdcall GetClassFile ( LPCOLESTR szFilename, CLSID * pclsid);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateClassMoniker( const IID & rclsid, LPMONIKER * ppmk);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateFileMoniker( LPCOLESTR lpszPathName, LPMONIKER * ppmk);

               extern "C" __declspec(dllimport) HRESULT __stdcall CreateItemMoniker( LPCOLESTR lpszDelim, LPCOLESTR lpszItem,
                                   LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateAntiMoniker( LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreatePointerMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateObjrefMoniker( LPUNKNOWN punk, LPMONIKER * ppmk);







               extern "C" __declspec(dllimport) HRESULT __stdcall GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
typedef struct IPersistMoniker IPersistMoniker;






typedef struct IMonikerProp IMonikerProp;






typedef struct IBindProtocol IBindProtocol;






typedef struct IBinding IBinding;






typedef struct IBindStatusCallback IBindStatusCallback;






typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;






typedef struct IAuthenticate IAuthenticate;






typedef struct IAuthenticateEx IAuthenticateEx;






typedef struct IHttpNegotiate IHttpNegotiate;






typedef struct IHttpNegotiate2 IHttpNegotiate2;






typedef struct IHttpNegotiate3 IHttpNegotiate3;






typedef struct IWinInetFileStream IWinInetFileStream;






typedef struct IWindowForBindingUI IWindowForBindingUI;






typedef struct ICodeInstall ICodeInstall;






typedef struct IUri IUri;






typedef struct IUriContainer IUriContainer;






typedef struct IUriBuilder IUriBuilder;






typedef struct IUriBuilderFactory IUriBuilderFactory;






typedef struct IWinInetInfo IWinInetInfo;






typedef struct IHttpSecurity IHttpSecurity;






typedef struct IWinInetHttpInfo IWinInetHttpInfo;






typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;






typedef struct IWinInetCacheHints IWinInetCacheHints;






typedef struct IWinInetCacheHints2 IWinInetCacheHints2;






typedef struct IBindHost IBindHost;






typedef struct IInternet IInternet;






typedef struct IInternetBindInfo IInternetBindInfo;






typedef struct IInternetBindInfoEx IInternetBindInfoEx;






typedef struct IInternetProtocolRoot IInternetProtocolRoot;






typedef struct IInternetProtocol IInternetProtocol;






typedef struct IInternetProtocolEx IInternetProtocolEx;






typedef struct IInternetProtocolSink IInternetProtocolSink;






typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;






typedef struct IInternetSession IInternetSession;






typedef struct IInternetThreadSwitch IInternetThreadSwitch;






typedef struct IInternetPriority IInternetPriority;






typedef struct IInternetProtocolInfo IInternetProtocolInfo;






typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;






typedef struct IInternetSecurityManager IInternetSecurityManager;






typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;






typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;






typedef struct IZoneIdentifier IZoneIdentifier;






typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;






typedef struct IInternetZoneManager IInternetZoneManager;






typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;






typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;






typedef struct ISoftDistExt ISoftDistExt;






typedef struct ICatalogFileInfo ICatalogFileInfo;






typedef struct IDataFilter IDataFilter;






typedef struct IEncodingFilterFactory IEncodingFilterFactory;






typedef struct IWrappedProtocol IWrappedProtocol;






typedef struct IGetBindHandle IGetBindHandle;






typedef struct IBindCallbackRedirect IBindCallbackRedirect;






typedef struct IBindHttpSecurity IBindHttpSecurity;







#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef struct IOleAdviseHolder IOleAdviseHolder;






typedef struct IOleCache IOleCache;






typedef struct IOleCache2 IOleCache2;






typedef struct IOleCacheControl IOleCacheControl;






typedef struct IParseDisplayName IParseDisplayName;






typedef struct IOleContainer IOleContainer;






typedef struct IOleClientSite IOleClientSite;






typedef struct IOleObject IOleObject;






typedef struct IOleWindow IOleWindow;






typedef struct IOleLink IOleLink;






typedef struct IOleItemContainer IOleItemContainer;






typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;






typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;






typedef struct IOleInPlaceFrame IOleInPlaceFrame;






typedef struct IOleInPlaceObject IOleInPlaceObject;






typedef struct IOleInPlaceSite IOleInPlaceSite;






typedef struct IContinue IContinue;






typedef struct IViewObject IViewObject;






typedef struct IViewObject2 IViewObject2;






typedef struct IDropSource IDropSource;






typedef struct IDropTarget IDropTarget;






typedef struct IDropSourceNotify IDropSourceNotify;






typedef struct IEnumOLEVERB IEnumOLEVERB;
#line 208 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern "C"{
#line 231 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;







typedef IOleAdviseHolder *LPOLEADVISEHOLDER;


extern "C" const IID IID_IOleAdviseHolder;



    struct __declspec(uuid("00000111-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise(

                  IAdviseSink *pAdvise,

                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(

                      IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall SendOnRename(

                  IMoniker *pmk) = 0;

        virtual HRESULT __stdcall SendOnSave( void) = 0;

        virtual HRESULT __stdcall SendOnClose( void) = 0;

    };
#line 381 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec;







typedef IOleCache *LPOLECACHE;


extern "C" const IID IID_IOleCache;



    struct __declspec(uuid("0000011e-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cache(
                                             FORMATETC *pformatetc,
                       DWORD advf,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Uncache(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumCache(
                                             IEnumSTATDATA **ppenumSTATDATA) = 0;

        virtual HRESULT __stdcall InitCache(
                                             IDataObject *pDataObject) = 0;

        virtual HRESULT __stdcall SetData(
                                             FORMATETC *pformatetc,
                                             STGMEDIUM *pmedium,
                       BOOL fRelease) = 0;

    };
#line 520 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleCache2 *LPOLECACHE2;
#line 540 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef
enum tagDISCARDCACHE
    {
        DISCARDCACHE_SAVEIFDIRTY = 0,
        DISCARDCACHE_NOSAVE = 1
    } DISCARDCACHE;


extern "C" const IID IID_IOleCache2;



    struct __declspec(uuid("00000128-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache2 : public IOleCache
    {
    public:
        virtual HRESULT __stdcall UpdateCache(

                  LPDATAOBJECT pDataObject,

                  DWORD grfUpdf,

                        LPVOID pReserved) = 0;

        virtual HRESULT __stdcall DiscardCache(
                       DWORD dwDiscardOptions) = 0;

    };
#line 677 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
                HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 704 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec;







typedef IOleCacheControl *LPOLECACHECONTROL;


extern "C" const IID IID_IOleCacheControl;



    struct __declspec(uuid("00000129-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnRun(
                          LPDATAOBJECT pDataObject) = 0;

        virtual HRESULT __stdcall OnStop( void) = 0;

    };
#line 803 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IParseDisplayName *LPPARSEDISPLAYNAME;


extern "C" const IID IID_IParseDisplayName;



    struct __declspec(uuid("0000011a-0000-0000-C000-000000000046")) __declspec(novtable)
    IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName(
                                             IBindCtx *pbc,
                                 LPOLESTR pszDisplayName,
                                   ULONG *pchEaten,
                                             IMoniker **ppmkOut) = 0;

    };
#line 891 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleContainer *LPOLECONTAINER;


extern "C" const IID IID_IOleContainer;



    struct __declspec(uuid("0000011b-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT __stdcall EnumObjects(
                       DWORD grfFlags,
                                             IEnumUnknown **ppenum) = 0;

        virtual HRESULT __stdcall LockContainer(
                       BOOL fLock) = 0;

    };
#line 996 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleClientSite *LPOLECLIENTSITE;


extern "C" const IID IID_IOleClientSite;



    struct __declspec(uuid("00000118-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SaveObject( void) = 0;

        virtual HRESULT __stdcall GetMoniker(
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall GetContainer(
                                             IOleContainer **ppContainer) = 0;

        virtual HRESULT __stdcall ShowObject( void) = 0;

        virtual HRESULT __stdcall OnShowWindow(
                       BOOL fShow) = 0;

        virtual HRESULT __stdcall RequestNewObjectLayout( void) = 0;

    };
#line 1126 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleObject *LPOLEOBJECT;

typedef
enum tagOLEGETMONIKER
    {
        OLEGETMONIKER_ONLYIFTHERE = 1,
        OLEGETMONIKER_FORCEASSIGN = 2,
        OLEGETMONIKER_UNASSIGN = 3,
        OLEGETMONIKER_TEMPFORUSER = 4
    } OLEGETMONIKER;

typedef
enum tagOLEWHICHMK
    {
        OLEWHICHMK_CONTAINER = 1,
        OLEWHICHMK_OBJREL = 2,
        OLEWHICHMK_OBJFULL = 3
    } OLEWHICHMK;

typedef
enum tagUSERCLASSTYPE
    {
        USERCLASSTYPE_FULL = 1,
        USERCLASSTYPE_SHORT = 2,
        USERCLASSTYPE_APPNAME = 3
    } USERCLASSTYPE;

typedef
enum tagOLEMISC
    {
        OLEMISC_RECOMPOSEONRESIZE = 0x1,
        OLEMISC_ONLYICONIC = 0x2,
        OLEMISC_INSERTNOTREPLACE = 0x4,
        OLEMISC_STATIC = 0x8,
        OLEMISC_CANTLINKINSIDE = 0x10,
        OLEMISC_CANLINKBYOLE1 = 0x20,
        OLEMISC_ISLINKOBJECT = 0x40,
        OLEMISC_INSIDEOUT = 0x80,
        OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
        OLEMISC_INVISIBLEATRUNTIME = 0x400,
        OLEMISC_ALWAYSRUN = 0x800,
        OLEMISC_ACTSLIKEBUTTON = 0x1000,
        OLEMISC_ACTSLIKELABEL = 0x2000,
        OLEMISC_NOUIACTIVATE = 0x4000,
        OLEMISC_ALIGNABLE = 0x8000,
        OLEMISC_SIMPLEFRAME = 0x10000,
        OLEMISC_SETCLIENTSITEFIRST = 0x20000,
        OLEMISC_IMEMODE = 0x40000,
        OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
        OLEMISC_WANTSTOMENUMERGE = 0x100000,
        OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
    } OLEMISC;

typedef
enum tagOLECLOSE
    {
        OLECLOSE_SAVEIFDIRTY = 0,
        OLECLOSE_NOSAVE = 1,
        OLECLOSE_PROMPTSAVE = 2
    } OLECLOSE;


extern "C" const IID IID_IOleObject;



    struct __declspec(uuid("00000112-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetClientSite(
                                             IOleClientSite *pClientSite) = 0;

        virtual HRESULT __stdcall GetClientSite(
                                             IOleClientSite **ppClientSite) = 0;

        virtual HRESULT __stdcall SetHostNames(
                                 LPCOLESTR szContainerApp,
                                             LPCOLESTR szContainerObj) = 0;

        virtual HRESULT __stdcall Close(
                       DWORD dwSaveOption) = 0;

        virtual HRESULT __stdcall SetMoniker(
                       DWORD dwWhichMoniker,
                                             IMoniker *pmk) = 0;

        virtual HRESULT __stdcall GetMoniker(
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall InitFromData(
                                             IDataObject *pDataObject,
                       BOOL fCreation,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall GetClipboardData(
                       DWORD dwReserved,
                                             IDataObject **ppDataObject) = 0;

        virtual HRESULT __stdcall DoVerb(
                       LONG iVerb,
                                             LPMSG lpmsg,
                                             IOleClientSite *pActiveSite,
                       LONG lindex,
                                 HWND hwndParent,
                                             LPCRECT lprcPosRect) = 0;

        virtual HRESULT __stdcall EnumVerbs(
                                             IEnumOLEVERB **ppEnumOleVerb) = 0;

        virtual HRESULT __stdcall Update( void) = 0;

        virtual HRESULT __stdcall IsUpToDate( void) = 0;

        virtual HRESULT __stdcall GetUserClassID(
                                   CLSID *pClsid) = 0;

        virtual HRESULT __stdcall GetUserType(
                       DWORD dwFormOfType,
                                             LPOLESTR *pszUserType) = 0;

        virtual HRESULT __stdcall SetExtent(
                       DWORD dwDrawAspect,
                                 SIZEL *psizel) = 0;

        virtual HRESULT __stdcall GetExtent(
                       DWORD dwDrawAspect,
                                   SIZEL *psizel) = 0;

        virtual HRESULT __stdcall Advise(
                                             IAdviseSink *pAdvSink,
                                   DWORD *pdwConnection) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwConnection) = 0;

        virtual HRESULT __stdcall EnumAdvise(
                                             IEnumSTATDATA **ppenumAdvise) = 0;

        virtual HRESULT __stdcall GetMiscStatus(
                       DWORD dwAspect,
                                   DWORD *pdwStatus) = 0;

        virtual HRESULT __stdcall SetColorScheme(
                                 LOGPALETTE *pLogpal) = 0;

    };
#line 1498 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef
enum tagOLERENDER
    {
        OLERENDER_NONE = 0,
        OLERENDER_DRAW = 1,
        OLERENDER_FORMAT = 2,
        OLERENDER_ASIS = 3
    } OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#line 1543 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleWindow *LPOLEWINDOW;


extern "C" const IID IID_IOleWindow;



    struct __declspec(uuid("00000114-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleWindow : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                                             HWND *phwnd) = 0;

        virtual HRESULT __stdcall ContextSensitiveHelp(
                       BOOL fEnterMode) = 0;

    };
#line 1635 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleLink *LPOLELINK;

typedef
enum tagOLEUPDATE
    {
        OLEUPDATE_ALWAYS = 1,
        OLEUPDATE_ONCALL = 3
    } OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef
enum tagOLELINKBIND
    {
        OLELINKBIND_EVENIFCLASSDIFF = 1
    } OLELINKBIND;


extern "C" const IID IID_IOleLink;



    struct __declspec(uuid("0000011d-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleLink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUpdateOptions(
                       DWORD dwUpdateOpt) = 0;

        virtual HRESULT __stdcall GetUpdateOptions(
                                   DWORD *pdwUpdateOpt) = 0;

        virtual HRESULT __stdcall SetSourceMoniker(
                                             IMoniker *pmk,
                                 const IID & rclsid) = 0;

        virtual HRESULT __stdcall GetSourceMoniker(
                                             IMoniker **ppmk) = 0;

        virtual HRESULT __stdcall SetSourceDisplayName(
                                 LPCOLESTR pszStatusText) = 0;

        virtual HRESULT __stdcall GetSourceDisplayName(
                                             LPOLESTR *ppszDisplayName) = 0;

        virtual HRESULT __stdcall BindToSource(
                       DWORD bindflags,
                                             IBindCtx *pbc) = 0;

        virtual HRESULT __stdcall BindIfRunning( void) = 0;

        virtual HRESULT __stdcall GetBoundSource(
                                             IUnknown **ppunk) = 0;

        virtual HRESULT __stdcall UnbindSource( void) = 0;

        virtual HRESULT __stdcall Update(
                                             IBindCtx *pbc) = 0;

    };
#line 1834 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef
enum tagBINDSPEED
    {
        BINDSPEED_INDEFINITE = 1,
        BINDSPEED_MODERATE = 2,
        BINDSPEED_IMMEDIATE = 3
    } BINDSPEED;

typedef
enum tagOLECONTF
    {
        OLECONTF_EMBEDDINGS = 1,
        OLECONTF_LINKS = 2,
        OLECONTF_OTHERS = 4,
        OLECONTF_ONLYUSER = 8,
        OLECONTF_ONLYIFRUNNING = 16
    } OLECONTF;


extern "C" const IID IID_IOleItemContainer;



    struct __declspec(uuid("0000011c-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleItemContainer : public IOleContainer
    {
    public:
        virtual HRESULT __stdcall GetObjectW(
                                 LPOLESTR pszItem,
                       DWORD dwSpeedNeeded,
                                             IBindCtx *pbc,
                                 const IID & riid,
                                                     void **ppvObject) = 0;

        virtual HRESULT __stdcall GetObjectStorage(
                                 LPOLESTR pszItem,
                                             IBindCtx *pbc,
                                 const IID & riid,
                                                     void **ppvStorage) = 0;

        virtual HRESULT __stdcall IsRunning(
                                 LPOLESTR pszItem) = 0;

    };
#line 1995 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern "C" const IID IID_IOleInPlaceUIWindow;



    struct __declspec(uuid("00000115-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall GetBorder(
                                   LPRECT lprectBorder) = 0;

        virtual HRESULT __stdcall RequestBorderSpace(
                                             LPCBORDERWIDTHS pborderwidths) = 0;

        virtual HRESULT __stdcall SetBorderSpace(
                                             LPCBORDERWIDTHS pborderwidths) = 0;

        virtual HRESULT __stdcall SetActiveObject(
                                             IOleInPlaceActiveObject *pActiveObject,
                                                            LPCOLESTR pszObjName) = 0;

    };
#line 2130 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern "C" const IID IID_IOleInPlaceActiveObject;



    struct __declspec(uuid("00000117-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall TranslateAcceleratorW(

                      LPMSG lpmsg) = 0;

        virtual HRESULT __stdcall OnFrameWindowActivate(
                       BOOL fActivate) = 0;

        virtual HRESULT __stdcall OnDocWindowActivate(
                       BOOL fActivate) = 0;

        virtual HRESULT __stdcall ResizeBorder(

                  LPCRECT prcBorder,

                  IOleInPlaceUIWindow *pUIWindow,

                  BOOL fFrameWindow) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

    };
#line 2269 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
                HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
              IOleInPlaceActiveObject * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                            HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID & riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2305 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern "C" const IID IID_IOleInPlaceFrame;



    struct __declspec(uuid("00000116-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenus(
                                 HMENU hmenuShared,
                                         LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;

        virtual HRESULT __stdcall SetMenu(
                                 HMENU hmenuShared,
                                 HOLEMENU holemenu,
                                 HWND hwndActiveObject) = 0;

        virtual HRESULT __stdcall RemoveMenus(
                                 HMENU hmenuShared) = 0;

        virtual HRESULT __stdcall SetStatusText(
                                             LPCOLESTR pszStatusText) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 LPMSG lpmsg,
                       WORD wID) = 0;

    };
#line 2510 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern "C" const IID IID_IOleInPlaceObject;



    struct __declspec(uuid("00000113-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InPlaceDeactivate( void) = 0;

        virtual HRESULT __stdcall UIDeactivate( void) = 0;

        virtual HRESULT __stdcall SetObjectRects(
                                 LPCRECT lprcPosRect,
                                 LPCRECT lprcClipRect) = 0;

        virtual HRESULT __stdcall ReactivateAndUndo( void) = 0;

    };
#line 2633 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IOleInPlaceSite *LPOLEINPLACESITE;


extern "C" const IID IID_IOleInPlaceSite;



    struct __declspec(uuid("00000119-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall CanInPlaceActivate( void) = 0;

        virtual HRESULT __stdcall OnInPlaceActivate( void) = 0;

        virtual HRESULT __stdcall OnUIActivate( void) = 0;

        virtual HRESULT __stdcall GetWindowContext(
                                             IOleInPlaceFrame **ppFrame,
                                             IOleInPlaceUIWindow **ppDoc,
                                   LPRECT lprcPosRect,
                                   LPRECT lprcClipRect,
                                         LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;

        virtual HRESULT __stdcall Scroll(
                       SIZE scrollExtant) = 0;

        virtual HRESULT __stdcall OnUIDeactivate(
                       BOOL fUndoable) = 0;

        virtual HRESULT __stdcall OnInPlaceDeactivate( void) = 0;

        virtual HRESULT __stdcall DiscardUndoState( void) = 0;

        virtual HRESULT __stdcall DeactivateAndUndo( void) = 0;

        virtual HRESULT __stdcall OnPosRectChange(
                                 LPCRECT lprcPosRect) = 0;

    };
#line 2817 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern "C" const IID IID_IContinue;



    struct __declspec(uuid("0000012a-0000-0000-C000-000000000046")) __declspec(novtable)
    IContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;

    };
#line 2894 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IViewObject *LPVIEWOBJECT;


extern "C" const IID IID_IViewObject;



    struct __declspec(uuid("0000010d-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Draw(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hdcTargetDev,

                  HDC hdcDraw,

                      LPCRECTL lprcBounds,

                      LPCRECTL lprcWBounds,

                      BOOL ( __stdcall *pfnContinue )(
                ULONG_PTR dwContinue),

                  ULONG_PTR dwContinue) = 0;

        virtual HRESULT __stdcall GetColorSet(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                      DVTARGETDEVICE *ptd,

                      HDC hicTargetDev,

                      LOGPALETTE **ppColorSet) = 0;

        virtual HRESULT __stdcall Freeze(

                  DWORD dwDrawAspect,

                  LONG lindex,

                    void *pvAspect,

                   DWORD *pdwFreeze) = 0;

        virtual HRESULT __stdcall Unfreeze(
                       DWORD dwFreeze) = 0;

        virtual HRESULT __stdcall SetAdvise(
                       DWORD aspects,
                       DWORD advf,
                                             IAdviseSink *pAdvSink) = 0;

        virtual HRESULT __stdcall GetAdvise(

                       DWORD *pAspects,

                       DWORD *pAdvf,

                      IAdviseSink **ppAdvSink) = 0;

    };
#line 3106 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
                HRESULT __stdcall IViewObject_RemoteDraw_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteFreeze_Proxy(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3182 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IViewObject2 *LPVIEWOBJECT2;


extern "C" const IID IID_IViewObject2;



    struct __declspec(uuid("00000127-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT __stdcall GetExtent(
                       DWORD dwDrawAspect,
                       LONG lindex,
                                             DVTARGETDEVICE *ptd,
                                   LPSIZEL lpsizel) = 0;

    };
#line 3358 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IDropSource *LPDROPSOURCE;


extern "C" const IID IID_IDropSource;



    struct __declspec(uuid("00000121-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSource : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinueDrag(

                  BOOL fEscapePressed,

                  DWORD grfKeyState) = 0;

        virtual HRESULT __stdcall GiveFeedback(

                  DWORD dwEffect) = 0;

    };
#line 3458 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
typedef IDropTarget *LPDROPTARGET;
#line 3493 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern "C" const IID IID_IDropTarget;



    struct __declspec(uuid("00000122-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnter(
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

        virtual HRESULT __stdcall DragOver(
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

        virtual HRESULT __stdcall DragLeave( void) = 0;

        virtual HRESULT __stdcall Drop(
                                             IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                                         DWORD *pdwEffect) = 0;

    };
#line 3617 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern "C" const IID IID_IDropSourceNotify;



    struct __declspec(uuid("0000012B-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSourceNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnterTarget(

                  HWND hwndTarget) = 0;

        virtual HRESULT __stdcall DragLeaveTarget( void) = 0;

    };
#line 3709 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_s_ifspec;







typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef
enum tagOLEVERBATTRIB
    {
        OLEVERBATTRIB_NEVERDIRTIES = 1,
        OLEVERBATTRIB_ONCONTAINERMENU = 2
    } OLEVERBATTRIB;


extern "C" const IID IID_IEnumOLEVERB;



    struct __declspec(uuid("00000104-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumOLEVERB : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(

                  ULONG celt,

                                                  LPOLEVERB rgelt,

                       ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumOLEVERB **ppenum) = 0;

    };
#line 3845 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
                HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3870 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oleidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec;



unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize64( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal64( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal64( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree64( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HGLOBAL_UserSize64( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserMarshal64( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * __stdcall HGLOBAL_UserUnmarshal64( unsigned long *, unsigned char *, HGLOBAL * );
void __stdcall HGLOBAL_UserFree64( unsigned long *, HGLOBAL * );

unsigned long __stdcall HMENU_UserSize64( unsigned long *, unsigned long , HMENU * );
unsigned char * __stdcall HMENU_UserMarshal64( unsigned long *, unsigned char *, HMENU * );
unsigned char * __stdcall HMENU_UserUnmarshal64( unsigned long *, unsigned char *, HMENU * );
void __stdcall HMENU_UserFree64( unsigned long *, HMENU * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

unsigned long __stdcall STGMEDIUM_UserSize64( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserMarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * __stdcall STGMEDIUM_UserUnmarshal64( unsigned long *, unsigned char *, STGMEDIUM * );
void __stdcall STGMEDIUM_UserFree64( unsigned long *, STGMEDIUM * );

              HRESULT __stdcall IOleCache2_UpdateCache_Proxy(
    IOleCache2 * This,

          LPDATAOBJECT pDataObject,

          DWORD grfUpdf,

                LPVOID pReserved);


                HRESULT __stdcall IOleCache2_UpdateCache_Stub(
              IOleCache2 * This,
                             LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LONG_PTR pReserved);

              HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject * This,

              LPMSG lpmsg);


                HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub(
              IOleInPlaceActiveObject * This);

              HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject * This,

          LPCRECT prcBorder,

          IOleInPlaceUIWindow *pUIWindow,

          BOOL fFrameWindow);


                            HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub(
              IOleInPlaceActiveObject * This,
                         LPCRECT prcBorder,
                         const IID & riid,
                                             IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);

              HRESULT __stdcall IViewObject_Draw_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hdcTargetDev,

          HDC hdcDraw,

              LPCRECTL lprcBounds,

              LPCRECTL lprcWBounds,

              BOOL ( __stdcall *pfnContinue )(
        ULONG_PTR dwContinue),

          ULONG_PTR dwContinue);


                HRESULT __stdcall IViewObject_Draw_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
                         HDC hdcTargetDev,
                         HDC hdcDraw,
                                     LPCRECTL lprcBounds,
                                     LPCRECTL lprcWBounds,
                             IContinue *pContinue);

              HRESULT __stdcall IViewObject_GetColorSet_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

              DVTARGETDEVICE *ptd,

              HDC hicTargetDev,

              LOGPALETTE **ppColorSet);


                HRESULT __stdcall IViewObject_GetColorSet_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                                     DVTARGETDEVICE *ptd,
               ULONG_PTR hicTargetDev,
                                     LOGPALETTE **ppColorSet);

              HRESULT __stdcall IViewObject_Freeze_Proxy(
    IViewObject * This,

          DWORD dwDrawAspect,

          LONG lindex,

            void *pvAspect,

           DWORD *pdwFreeze);


                HRESULT __stdcall IViewObject_Freeze_Stub(
              IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               ULONG_PTR pvAspect,
                           DWORD *pdwFreeze);

              HRESULT __stdcall IViewObject_GetAdvise_Proxy(
    IViewObject * This,

               DWORD *pAspects,

               DWORD *pAdvf,

              IAdviseSink **ppAdvSink);


                HRESULT __stdcall IViewObject_GetAdvise_Stub(
              IViewObject * This,
                           DWORD *pAspects,
                           DWORD *pAdvf,
                                     IAdviseSink **ppAdvSink);

              HRESULT __stdcall IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB * This,

          ULONG celt,

                                          LPOLEVERB rgelt,

               ULONG *pceltFetched);


                HRESULT __stdcall IEnumOLEVERB_Next_Stub(
              IEnumOLEVERB * This,
               ULONG celt,
                                                                                LPOLEVERB rgelt,
                           ULONG *pceltFetched);






}
#line 423 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/servprov.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/servprov.h"
typedef struct IServiceProvider IServiceProvider;
#line 54 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/servprov.h"
extern "C"{
#line 72 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/servprov.h"
#pragma comment(lib,"uuid.lib")
#line 83 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/servprov.h"
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;







typedef IServiceProvider *LPSERVICEPROVIDER;


    extern "C" const IID IID_IServiceProvider;
    extern "C++"
    {
        struct __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) __declspec(novtable)
        IServiceProvider : public IUnknown
        {
        public:
            virtual HRESULT __stdcall QueryService(
                                const GUID & guidService,
                                const IID & riid,
                                     void * *ppvObject) = 0;

            template <class Q>
            HRESULT __stdcall QueryService( const GUID & guidService, Q** pp)
            {
                return QueryService(guidService, __uuidof(Q), (void **)pp);
            }
        };
    }

                    HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy(
             IServiceProvider * This,
                        const GUID & guidService,
                        const IID & riid,
                                     IUnknown * *ppvObject);

    void __stdcall IServiceProvider_RemoteQueryService_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
#line 234 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/servprov.h"
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;



              HRESULT __stdcall IServiceProvider_QueryService_Proxy(
    IServiceProvider * This,

          const GUID & guidService,

          const IID & riid,

              void **ppvObject);


                HRESULT __stdcall IServiceProvider_QueryService_Stub(
              IServiceProvider * This,
                         const GUID & guidService,
                         const IID & riid,
                                             IUnknown **ppvObject);






}
#line 424 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"








#pragma warning(disable: 4049)
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef struct IXMLDOMImplementation IXMLDOMImplementation;






typedef struct IXMLDOMNode IXMLDOMNode;






typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;






typedef struct IXMLDOMDocument IXMLDOMDocument;






typedef struct IXMLDOMNodeList IXMLDOMNodeList;






typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;






typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;






typedef struct IXMLDOMAttribute IXMLDOMAttribute;






typedef struct IXMLDOMElement IXMLDOMElement;






typedef struct IXMLDOMText IXMLDOMText;






typedef struct IXMLDOMComment IXMLDOMComment;






typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;






typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;






typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;






typedef struct IXMLDOMNotation IXMLDOMNotation;






typedef struct IXMLDOMEntity IXMLDOMEntity;






typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;






typedef struct IXMLDOMParseError IXMLDOMParseError;






typedef struct IXTLRuntime IXTLRuntime;






typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
#line 183 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef class DOMDocument DOMDocument;
#line 195 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef class DOMFreeThreadedDocument DOMFreeThreadedDocument;
#line 205 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef struct IXMLHttpRequest IXMLHttpRequest;
#line 214 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef class XMLHTTPRequest XMLHTTPRequest;
#line 224 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef struct IXMLDSOControl IXMLDSOControl;
#line 233 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef class XMLDSOControl XMLDSOControl;
#line 243 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef struct IXMLElementCollection IXMLElementCollection;






typedef struct IXMLDocument IXMLDocument;






typedef struct IXMLDocument2 IXMLDocument2;






typedef struct IXMLElement IXMLElement;






typedef struct IXMLElement2 IXMLElement2;






typedef struct IXMLAttribute IXMLAttribute;






typedef struct IXMLError IXMLError;
#line 294 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef class XMLDocument XMLDocument;
#line 305 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef struct ICreateTypeInfo ICreateTypeInfo;






typedef struct ICreateTypeInfo2 ICreateTypeInfo2;






typedef struct ICreateTypeLib ICreateTypeLib;






typedef struct ICreateTypeLib2 ICreateTypeLib2;






typedef struct IDispatch IDispatch;






typedef struct IEnumVARIANT IEnumVARIANT;






typedef struct ITypeComp ITypeComp;






typedef struct ITypeInfo ITypeInfo;






typedef struct ITypeInfo2 ITypeInfo2;






typedef struct ITypeLib ITypeLib;






typedef struct ITypeLib2 ITypeLib2;






typedef struct ITypeChangeEvents ITypeChangeEvents;






typedef struct IErrorInfo IErrorInfo;






typedef struct ICreateErrorInfo ICreateErrorInfo;






typedef struct ISupportErrorInfo ISupportErrorInfo;






typedef struct ITypeFactory ITypeFactory;






typedef struct ITypeMarshal ITypeMarshal;






typedef struct IRecordInfo IRecordInfo;






typedef struct IErrorLog IErrorLog;






typedef struct IPropertyBag IPropertyBag;
#line 187 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern "C"{
#line 203 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#line 244 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;







typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef struct _wireVARIANT *wireVARIANT;

typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
                         wireBSTR *aBstr;
    } SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
                         IUnknown **apUnknown;
    } SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
                         IDispatch **apDispatch;
    } SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
                         wireVARIANT *aVariant;
    } SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
                         wireBRECORD *aRecord;
    } SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
                         IUnknown **apUnknown;
    IID iid;
    } SAFEARR_HAVEIID;

typedef
enum tagSF_TYPE
    {
        SF_ERROR = VT_ERROR,
        SF_I1 = VT_I1,
        SF_I2 = VT_I2,
        SF_I4 = VT_I4,
        SF_I8 = VT_I8,
        SF_BSTR = VT_BSTR,
        SF_UNKNOWN = VT_UNKNOWN,
        SF_DISPATCH = VT_DISPATCH,
        SF_VARIANT = VT_VARIANT,
        SF_RECORD = VT_RECORD,
        SF_HAVEIID = ( VT_UNKNOWN | VT_RESERVED )
    } SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
                                          union __MIDL_IOleAutomationTypes_0001
        {
                       SAFEARR_BSTR BstrStr;
                       SAFEARR_UNKNOWN UnknownStr;
                       SAFEARR_DISPATCH DispatchStr;
                       SAFEARR_VARIANT VariantStr;
                       SAFEARR_BRECORD RecordStr;
                       SAFEARR_HAVEIID HaveIidStr;
                       BYTE_SIZEDARR ByteStr;
                       WORD_SIZEDARR WordStr;
                       DWORD_SIZEDARR LongStr;
                       HYPER_SIZEDARR HyperStr;
        } u;
    } SAFEARRAYUNION;

typedef struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
                    SAFEARRAYBOUND rgsabound[ 1 ];
    } *wireSAFEARRAY;

typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } SAFEARRAY;

typedef SAFEARRAY *LPSAFEARRAY;
#line 452 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union
        {
        struct
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;

                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;

                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } ;
                } ;
            } ;
        DECIMAL decVal;
        } ;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;
#line 544 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
                    byte *pRecord;
    } ;
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
                                   union
        {
                       LONGLONG llVal;
                       LONG lVal;
                       BYTE bVal;
                       SHORT iVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;
                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       wireBSTR bstrVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       wirePSAFEARRAY parray;
                       wireBRECORD brecVal;
                       BYTE *pbVal;
                       SHORT *piVal;
                       LONG *plVal;
                       LONGLONG *pllVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       wireBSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       wirePSAFEARRAY *pparray;
                       wireVARIANT *pvarVal;
                       CHAR cVal;
                       USHORT uiVal;
                       ULONG ulVal;
                       ULONGLONG ullVal;
                       INT intVal;
                       UINT uintVal;
                       DECIMAL decVal;
                       DECIMAL *pdecVal;
                       CHAR *pcVal;
                       USHORT *puiVal;
                       ULONG *pulVal;
                       ULONGLONG *pullVal;
                       INT *pintVal;
                       UINT *puintVal;


        } ;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef
enum tagTYPEKIND
    {
        TKIND_ENUM = 0,
        TKIND_RECORD = ( TKIND_ENUM + 1 ) ,
        TKIND_MODULE = ( TKIND_RECORD + 1 ) ,
        TKIND_INTERFACE = ( TKIND_MODULE + 1 ) ,
        TKIND_DISPATCH = ( TKIND_INTERFACE + 1 ) ,
        TKIND_COCLASS = ( TKIND_DISPATCH + 1 ) ,
        TKIND_ALIAS = ( TKIND_COCLASS + 1 ) ,
        TKIND_UNION = ( TKIND_ALIAS + 1 ) ,
        TKIND_MAX = ( TKIND_UNION + 1 )
    } TYPEKIND;

typedef struct tagTYPEDESC
    {
                                   union
        {
                       struct tagTYPEDESC *lptdesc;
                       struct tagARRAYDESC *lpadesc;
                       HREFTYPE hreftype;

        } ;
    VARTYPE vt;
    } TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
                    SAFEARRAYBOUND rgbounds[ 1 ];
    } ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;
#line 680 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef struct tagIDLDESC
    {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
    } IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;
#line 709 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef struct tagELEMDESC {
    TYPEDESC tdesc;
    union {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    } ;
} ELEMDESC, * LPELEMDESC;



typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
                    VARIANTARG *rgvarg;
                    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } DISPPARAMS;
#line 770 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef struct tagEXCEPINFO {
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;



typedef
enum tagCALLCONV
    {
        CC_FASTCALL = 0,
        CC_CDECL = 1,
        CC_MSCPASCAL = ( CC_CDECL + 1 ) ,
        CC_PASCAL = CC_MSCPASCAL,
        CC_MACPASCAL = ( CC_PASCAL + 1 ) ,
        CC_STDCALL = ( CC_MACPASCAL + 1 ) ,
        CC_FPFASTCALL = ( CC_STDCALL + 1 ) ,
        CC_SYSCALL = ( CC_FPFASTCALL + 1 ) ,
        CC_MPWCDECL = ( CC_SYSCALL + 1 ) ,
        CC_MPWPASCAL = ( CC_MPWCDECL + 1 ) ,
        CC_MAX = ( CC_MPWPASCAL + 1 )
    } CALLCONV;

typedef
enum tagFUNCKIND
    {
        FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = ( FUNC_VIRTUAL + 1 ) ,
        FUNC_NONVIRTUAL = ( FUNC_PUREVIRTUAL + 1 ) ,
        FUNC_STATIC = ( FUNC_NONVIRTUAL + 1 ) ,
        FUNC_DISPATCH = ( FUNC_STATIC + 1 )
    } FUNCKIND;

typedef
enum tagINVOKEKIND
    {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8
    } INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
                    SCODE *lprgscode;
                    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef
enum tagVARKIND
    {
        VAR_PERINSTANCE = 0,
        VAR_STATIC = ( VAR_PERINSTANCE + 1 ) ,
        VAR_CONST = ( VAR_STATIC + 1 ) ,
        VAR_DISPATCH = ( VAR_CONST + 1 )
    } VARKIND;
#line 854 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
                                   union
        {
                       ULONG oInst;
                       VARIANT *lpvarValue;
        } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef
enum tagTYPEFLAGS
    {
        TYPEFLAG_FAPPOBJECT = 0x1,
        TYPEFLAG_FCANCREATE = 0x2,
        TYPEFLAG_FLICENSED = 0x4,
        TYPEFLAG_FPREDECLID = 0x8,
        TYPEFLAG_FHIDDEN = 0x10,
        TYPEFLAG_FCONTROL = 0x20,
        TYPEFLAG_FDUAL = 0x40,
        TYPEFLAG_FNONEXTENSIBLE = 0x80,
        TYPEFLAG_FOLEAUTOMATION = 0x100,
        TYPEFLAG_FRESTRICTED = 0x200,
        TYPEFLAG_FAGGREGATABLE = 0x400,
        TYPEFLAG_FREPLACEABLE = 0x800,
        TYPEFLAG_FDISPATCHABLE = 0x1000,
        TYPEFLAG_FREVERSEBIND = 0x2000,
        TYPEFLAG_FPROXY = 0x4000
    } TYPEFLAGS;

typedef
enum tagFUNCFLAGS
    {
        FUNCFLAG_FRESTRICTED = 0x1,
        FUNCFLAG_FSOURCE = 0x2,
        FUNCFLAG_FBINDABLE = 0x4,
        FUNCFLAG_FREQUESTEDIT = 0x8,
        FUNCFLAG_FDISPLAYBIND = 0x10,
        FUNCFLAG_FDEFAULTBIND = 0x20,
        FUNCFLAG_FHIDDEN = 0x40,
        FUNCFLAG_FUSESGETLASTERROR = 0x80,
        FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
        FUNCFLAG_FUIDEFAULT = 0x200,
        FUNCFLAG_FNONBROWSABLE = 0x400,
        FUNCFLAG_FREPLACEABLE = 0x800,
        FUNCFLAG_FIMMEDIATEBIND = 0x1000
    } FUNCFLAGS;

typedef
enum tagVARFLAGS
    {
        VARFLAG_FREADONLY = 0x1,
        VARFLAG_FSOURCE = 0x2,
        VARFLAG_FBINDABLE = 0x4,
        VARFLAG_FREQUESTEDIT = 0x8,
        VARFLAG_FDISPLAYBIND = 0x10,
        VARFLAG_FDEFAULTBIND = 0x20,
        VARFLAG_FHIDDEN = 0x40,
        VARFLAG_FRESTRICTED = 0x80,
        VARFLAG_FDEFAULTCOLLELEM = 0x100,
        VARFLAG_FUIDEFAULT = 0x200,
        VARFLAG_FNONBROWSABLE = 0x400,
        VARFLAG_FREPLACEABLE = 0x800,
        VARFLAG_FIMMEDIATEBIND = 0x1000
    } VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
                    LPCUSTDATAITEM prgCustData;
    } CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
#line 964 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec;







typedef ICreateTypeInfo *LPCREATETYPEINFO;


extern "C" const IID IID_ICreateTypeInfo;



    struct __declspec(uuid("00020405-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGuid(
                       const GUID & guid) = 0;

        virtual HRESULT __stdcall SetTypeFlags(
                       UINT uTypeFlags) = 0;

        virtual HRESULT __stdcall SetDocString(

                       LPOLESTR pStrDoc) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetVersion(
                       WORD wMajorVerNum,
                       WORD wMinorVerNum) = 0;

        virtual HRESULT __stdcall AddRefTypeInfo(
                       ITypeInfo *pTInfo,
                       HREFTYPE *phRefType) = 0;

        virtual HRESULT __stdcall AddFuncDesc(
                       UINT index,
                       FUNCDESC *pFuncDesc) = 0;

        virtual HRESULT __stdcall AddImplType(
                       UINT index,
                       HREFTYPE hRefType) = 0;

        virtual HRESULT __stdcall SetImplTypeFlags(
                       UINT index,
                       INT implTypeFlags) = 0;

        virtual HRESULT __stdcall SetAlignment(
                       WORD cbAlignment) = 0;

        virtual HRESULT __stdcall SetSchema(

                       LPOLESTR pStrSchema) = 0;

        virtual HRESULT __stdcall AddVarDesc(
                       UINT index,
                       VARDESC *pVarDesc) = 0;

        virtual HRESULT __stdcall SetFuncAndParamNames(
                       UINT index,

                                      LPOLESTR *rgszNames,
                       UINT cNames) = 0;

        virtual HRESULT __stdcall SetVarName(
                       UINT index,

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetTypeDescAlias(
                       TYPEDESC *pTDescAlias) = 0;

        virtual HRESULT __stdcall DefineFuncAsDllEntry(
                       UINT index,

                       LPOLESTR szDllName,

                       LPOLESTR szProcName) = 0;

        virtual HRESULT __stdcall SetFuncDocString(
                       UINT index,

                       LPOLESTR szDocString) = 0;

        virtual HRESULT __stdcall SetVarDocString(
                       UINT index,

                       LPOLESTR szDocString) = 0;

        virtual HRESULT __stdcall SetFuncHelpContext(
                       UINT index,
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetVarHelpContext(
                       UINT index,
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetMops(
                       UINT index,
                       BSTR bstrMops) = 0;

        virtual HRESULT __stdcall SetTypeIdldesc(
                       IDLDESC *pIdlDesc) = 0;

        virtual HRESULT __stdcall LayOut( void) = 0;

    };
#line 1321 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern "C" const IID IID_ICreateTypeInfo2;



    struct __declspec(uuid("0002040E-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo2 : public ICreateTypeInfo
    {
    public:
        virtual HRESULT __stdcall DeleteFuncDesc(
                       UINT index) = 0;

        virtual HRESULT __stdcall DeleteFuncDescByMemId(
                       MEMBERID memid,
                       INVOKEKIND invKind) = 0;

        virtual HRESULT __stdcall DeleteVarDesc(
                       UINT index) = 0;

        virtual HRESULT __stdcall DeleteVarDescByMemId(
                       MEMBERID memid) = 0;

        virtual HRESULT __stdcall DeleteImplType(
                       UINT index) = 0;

        virtual HRESULT __stdcall SetCustData(
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetFuncCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetVarCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetImplTypeCustData(
                       UINT index,
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetHelpStringContext(
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetFuncHelpStringContext(
                       UINT index,
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetVarHelpStringContext(
                       UINT index,
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall Invalidate( void) = 0;

        virtual HRESULT __stdcall SetName(

                       LPOLESTR szName) = 0;

    };
#line 1754 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ICreateTypeLib *LPCREATETYPELIB;


extern "C" const IID IID_ICreateTypeLib;



    struct __declspec(uuid("00020406-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateTypeInfo(

                       LPOLESTR szName,
                       TYPEKIND tkind,
                        ICreateTypeInfo **ppCTInfo) = 0;

        virtual HRESULT __stdcall SetName(

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetVersion(
                       WORD wMajorVerNum,
                       WORD wMinorVerNum) = 0;

        virtual HRESULT __stdcall SetGuid(
                       const GUID & guid) = 0;

        virtual HRESULT __stdcall SetDocString(

                       LPOLESTR szDoc) = 0;

        virtual HRESULT __stdcall SetHelpFileName(

                       LPOLESTR szHelpFileName) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

        virtual HRESULT __stdcall SetLcid(
                       LCID lcid) = 0;

        virtual HRESULT __stdcall SetLibFlags(
                       UINT uLibFlags) = 0;

        virtual HRESULT __stdcall SaveAllChanges( void) = 0;

    };
#line 1938 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ICreateTypeLib2 *LPCREATETYPELIB2;


extern "C" const IID IID_ICreateTypeLib2;



    struct __declspec(uuid("0002040F-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib2 : public ICreateTypeLib
    {
    public:
        virtual HRESULT __stdcall DeleteTypeInfo(

                       LPOLESTR szName) = 0;

        virtual HRESULT __stdcall SetCustData(
                       const GUID & guid,
                       VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall SetHelpStringContext(
                       ULONG dwHelpStringContext) = 0;

        virtual HRESULT __stdcall SetHelpStringDll(

                       LPOLESTR szFileName) = 0;

    };
#line 2136 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec;







typedef IDispatch *LPDISPATCH;
#line 2179 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern "C" const IID IID_IDispatch;



    struct __declspec(uuid("00020400-0000-0000-C000-000000000046")) __declspec(novtable)
    IDispatch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeInfoCount(
                                   UINT *pctinfo) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                       UINT iTInfo,
                       LCID lcid,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall GetIDsOfNames(
                                 const IID & riid,
                                                              LPOLESTR *rgszNames,
                                                       UINT cNames,
                       LCID lcid,
                                                                DISPID *rgDispId) = 0;

        virtual HRESULT __stdcall Invoke(

                  DISPID dispIdMember,

                  const IID & riid,

                  LCID lcid,

                  WORD wFlags,

                  DISPPARAMS *pDispParams,

                       VARIANT *pVarResult,

                       EXCEPINFO *pExcepInfo,

                       UINT *puArgErr) = 0;

    };
#line 2320 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall IDispatch_RemoteInvoke_Proxy(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID & riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2352 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef IEnumVARIANT *LPENUMVARIANT;


extern "C" const IID IID_IEnumVARIANT;



    struct __declspec(uuid("00020404-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumVARIANT : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,
                                            VARIANT *rgVar,
                        ULONG *pCeltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumVARIANT **ppEnum) = 0;

    };
#line 2456 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2480 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ITypeComp *LPTYPECOMP;

typedef
enum tagDESCKIND
    {
        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = ( DESCKIND_NONE + 1 ) ,
        DESCKIND_VARDESC = ( DESCKIND_FUNCDESC + 1 ) ,
        DESCKIND_TYPECOMP = ( DESCKIND_VARDESC + 1 ) ,
        DESCKIND_IMPLICITAPPOBJ = ( DESCKIND_TYPECOMP + 1 ) ,
        DESCKIND_MAX = ( DESCKIND_IMPLICITAPPOBJ + 1 )
    } DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern "C" const IID IID_ITypeComp;



    struct __declspec(uuid("00020403-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeComp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Bind(

                       LPOLESTR szName,
                       ULONG lHashVal,
                       WORD wFlags,
                        ITypeInfo **ppTInfo,
                        DESCKIND *pDescKind,
                        BINDPTR *pBindPtr) = 0;

        virtual HRESULT __stdcall BindType(

                       LPOLESTR szName,
                       ULONG lHashVal,
                        ITypeInfo **ppTInfo,
                        ITypeComp **ppTComp) = 0;

    };
#line 2602 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall ITypeComp_RemoteBind_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeComp_RemoteBindType_Proxy(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2649 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec;







typedef ITypeInfo *LPTYPEINFO;


extern "C" const IID IID_ITypeInfo;



    struct __declspec(uuid("00020401-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeAttr(
                        TYPEATTR **ppTypeAttr) = 0;

        virtual HRESULT __stdcall GetTypeComp(
                                             ITypeComp **ppTComp) = 0;

        virtual HRESULT __stdcall GetFuncDesc(
                       UINT index,
                        FUNCDESC **ppFuncDesc) = 0;

        virtual HRESULT __stdcall GetVarDesc(
                       UINT index,
                        VARDESC **ppVarDesc) = 0;

        virtual HRESULT __stdcall GetNames(
                       MEMBERID memid,
                                            BSTR *rgBstrNames,
                       UINT cMaxNames,
                        UINT *pcNames) = 0;

        virtual HRESULT __stdcall GetRefTypeOfImplType(
                       UINT index,
                                   HREFTYPE *pRefType) = 0;

        virtual HRESULT __stdcall GetImplTypeFlags(
                       UINT index,
                                   INT *pImplTypeFlags) = 0;

        virtual HRESULT __stdcall GetIDsOfNames(

                                      LPOLESTR *rgszNames,
                       UINT cNames,
                                 MEMBERID *pMemId) = 0;

        virtual HRESULT __stdcall Invoke(
                       PVOID pvInstance,
                       MEMBERID memid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr) = 0;

        virtual HRESULT __stdcall GetDocumentation(
                       MEMBERID memid,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall GetDllEntry(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        BSTR *pBstrDllName,
                        BSTR *pBstrName,
                        WORD *pwOrdinal) = 0;

        virtual HRESULT __stdcall GetRefTypeInfo(
                       HREFTYPE hRefType,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall AddressOfMember(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        PVOID *ppv) = 0;

        virtual HRESULT __stdcall CreateInstance(
                       IUnknown *pUnkOuter,
                       const IID & riid,
                                PVOID *ppvObj) = 0;

        virtual HRESULT __stdcall GetMops(
                       MEMBERID memid,
                                             BSTR *pBstrMops) = 0;

        virtual HRESULT __stdcall GetContainingTypeLib(
                        ITypeLib **ppTLib,
                        UINT *pIndex) = 0;

        virtual void __stdcall ReleaseTypeAttr(
                       TYPEATTR *pTypeAttr) = 0;

        virtual void __stdcall ReleaseFuncDesc(
                       FUNCDESC *pFuncDesc) = 0;

        virtual void __stdcall ReleaseVarDesc(
                       VARDESC *pVarDesc) = 0;

    };
#line 2972 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy(
              ITypeInfo * This,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy(
              ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3164 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ITypeInfo2 *LPTYPEINFO2;


extern "C" const IID IID_ITypeInfo2;



    struct __declspec(uuid("00020412-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo2 : public ITypeInfo
    {
    public:
        virtual HRESULT __stdcall GetTypeKind(
                                   TYPEKIND *pTypeKind) = 0;

        virtual HRESULT __stdcall GetTypeFlags(
                                   ULONG *pTypeFlags) = 0;

        virtual HRESULT __stdcall GetFuncIndexOfMemId(
                       MEMBERID memid,
                       INVOKEKIND invKind,
                                   UINT *pFuncIndex) = 0;

        virtual HRESULT __stdcall GetVarIndexOfMemId(
                       MEMBERID memid,
                                   UINT *pVarIndex) = 0;

        virtual HRESULT __stdcall GetCustData(
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetFuncCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetVarCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetImplTypeCustData(
                       UINT index,
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetDocumentation2(
                       MEMBERID memid,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll) = 0;

        virtual HRESULT __stdcall GetAllCustData(
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllFuncCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllParamCustData(
                       UINT indexFunc,
                       UINT indexParam,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllVarCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

        virtual HRESULT __stdcall GetAllImplTypeCustData(
                       UINT index,
                                   CUSTDATA *pCustData) = 0;

    };
#line 3585 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3615 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec;







typedef
enum tagSYSKIND
    {
        SYS_WIN16 = 0,
        SYS_WIN32 = ( SYS_WIN16 + 1 ) ,
        SYS_MAC = ( SYS_WIN32 + 1 ) ,
        SYS_WIN64 = ( SYS_MAC + 1 )
    } SYSKIND;

typedef
enum tagLIBFLAGS
    {
        LIBFLAG_FRESTRICTED = 0x1,
        LIBFLAG_FCONTROL = 0x2,
        LIBFLAG_FHIDDEN = 0x4,
        LIBFLAG_FHASDISKIMAGE = 0x8
    } LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern "C" const IID IID_ITypeLib;



    struct __declspec(uuid("00020402-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib : public IUnknown
    {
    public:
        virtual UINT __stdcall GetTypeInfoCount( void) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                       UINT index,
                                             ITypeInfo **ppTInfo) = 0;

        virtual HRESULT __stdcall GetTypeInfoType(
                       UINT index,
                                   TYPEKIND *pTKind) = 0;

        virtual HRESULT __stdcall GetTypeInfoOfGuid(
                                 const GUID & guid,
                                             ITypeInfo **ppTinfo) = 0;

        virtual HRESULT __stdcall GetLibAttr(
                        TLIBATTR **ppTLibAttr) = 0;

        virtual HRESULT __stdcall GetTypeComp(
                                             ITypeComp **ppTComp) = 0;

        virtual HRESULT __stdcall GetDocumentation(
                       INT index,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall IsName(

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                        BOOL *pfName) = 0;

        virtual HRESULT __stdcall FindName(

                          LPOLESTR szNameBuf,
                       ULONG lHashVal,
                                            ITypeInfo **ppTInfo,
                                            MEMBERID *rgMemId,
                            USHORT *pcFound) = 0;

        virtual void __stdcall ReleaseTLibAttr(
                       TLIBATTR *pTLibAttr) = 0;

    };
#line 3844 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy(
              ITypeLib * This,
                           UINT *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteIsName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib_RemoteFindName_Proxy(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                        HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy(
              ITypeLib * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 3942 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec;







typedef ITypeLib2 *LPTYPELIB2;


extern "C" const IID IID_ITypeLib2;



    struct __declspec(uuid("00020411-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib2 : public ITypeLib
    {
    public:
        virtual HRESULT __stdcall GetCustData(
                                 const GUID & guid,
                                   VARIANT *pVarVal) = 0;

        virtual HRESULT __stdcall GetLibStatistics(
                        ULONG *pcUniqueNames,
                        ULONG *pcchUniqueNames) = 0;

        virtual HRESULT __stdcall GetDocumentation2(
                       INT index,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll) = 0;

        virtual HRESULT __stdcall GetAllCustData(
                                   CUSTDATA *pCustData) = 0;

    };
#line 4150 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4190 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef
enum tagCHANGEKIND
    {
        CHANGEKIND_ADDMEMBER = 0,
        CHANGEKIND_DELETEMEMBER = ( CHANGEKIND_ADDMEMBER + 1 ) ,
        CHANGEKIND_SETNAMES = ( CHANGEKIND_DELETEMEMBER + 1 ) ,
        CHANGEKIND_SETDOCUMENTATION = ( CHANGEKIND_SETNAMES + 1 ) ,
        CHANGEKIND_GENERAL = ( CHANGEKIND_SETDOCUMENTATION + 1 ) ,
        CHANGEKIND_INVALIDATE = ( CHANGEKIND_GENERAL + 1 ) ,
        CHANGEKIND_CHANGEFAILED = ( CHANGEKIND_INVALIDATE + 1 ) ,
        CHANGEKIND_MAX = ( CHANGEKIND_CHANGEFAILED + 1 )
    } CHANGEKIND;


extern "C" const IID IID_ITypeChangeEvents;



    struct __declspec(uuid("00020410-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeChangeEvents : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RequestTypeChange(
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoBefore,

                       LPOLESTR pStrName,
                        INT *pfCancel) = 0;

        virtual HRESULT __stdcall AfterTypeChange(
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoAfter,

                       LPOLESTR pStrName) = 0;

    };
#line 4309 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef IErrorInfo *LPERRORINFO;


extern "C" const IID IID_IErrorInfo;



    struct __declspec(uuid("1CF2B120-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    IErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGUID(
                                   GUID *pGUID) = 0;

        virtual HRESULT __stdcall GetSource(
                                             BSTR *pBstrSource) = 0;

        virtual HRESULT __stdcall GetDescription(
                                             BSTR *pBstrDescription) = 0;

        virtual HRESULT __stdcall GetHelpFile(
                                             BSTR *pBstrHelpFile) = 0;

        virtual HRESULT __stdcall GetHelpContext(
                                   DWORD *pdwHelpContext) = 0;

    };
#line 4431 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ICreateErrorInfo *LPCREATEERRORINFO;


extern "C" const IID IID_ICreateErrorInfo;



    struct __declspec(uuid("22F03340-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    ICreateErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGUID(
                                 const GUID & rguid) = 0;

        virtual HRESULT __stdcall SetSource(
                                 LPOLESTR szSource) = 0;

        virtual HRESULT __stdcall SetDescription(
                                 LPOLESTR szDescription) = 0;

        virtual HRESULT __stdcall SetHelpFile(
                                 LPOLESTR szHelpFile) = 0;

        virtual HRESULT __stdcall SetHelpContext(
                       DWORD dwHelpContext) = 0;

    };
#line 4553 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;


extern "C" const IID IID_ISupportErrorInfo;



    struct __declspec(uuid("DF0B3D60-548F-101B-8E65-08002B2BD119")) __declspec(novtable)
    ISupportErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall InterfaceSupportsErrorInfo(
                                 const IID & riid) = 0;

    };
#line 4636 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern "C" const IID IID_ITypeFactory;



    struct __declspec(uuid("0000002E-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateFromTypeInfo(
                                     ITypeInfo *pTypeInfo,
                                 const IID & riid,
                                                     IUnknown **ppv) = 0;

    };
#line 4720 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
extern "C" const IID IID_ITypeMarshal;



    struct __declspec(uuid("0000002D-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Size(
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                        ULONG *pSize) = 0;

        virtual HRESULT __stdcall Marshal(
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                       ULONG cbBufferLength,

                                                                BYTE *pBuffer,

                   ULONG *pcbWritten) = 0;

        virtual HRESULT __stdcall Unmarshal(
                        PVOID pvType,
                       DWORD dwFlags,
                       ULONG cbBufferLength,

                                        BYTE *pBuffer,

                   ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Free(
                       PVOID pvType) = 0;

    };
#line 4861 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef IRecordInfo *LPRECORDINFO;


extern "C" const IID IID_IRecordInfo;



    struct __declspec(uuid("0000002F-0000-0000-C000-000000000046")) __declspec(novtable)
    IRecordInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RecordInit(
                        PVOID pvNew) = 0;

        virtual HRESULT __stdcall RecordClear(
                       PVOID pvExisting) = 0;

        virtual HRESULT __stdcall RecordCopy(
                       PVOID pvExisting,
                        PVOID pvNew) = 0;

        virtual HRESULT __stdcall GetGuid(
                        GUID *pguid) = 0;

        virtual HRESULT __stdcall GetName(
                        BSTR *pbstrName) = 0;

        virtual HRESULT __stdcall GetSize(
                        ULONG *pcbSize) = 0;

        virtual HRESULT __stdcall GetTypeInfo(
                        ITypeInfo **ppTypeInfo) = 0;

        virtual HRESULT __stdcall GetField(
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall GetFieldNoCopy(
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField,
                        PVOID *ppvDataCArray) = 0;

        virtual HRESULT __stdcall PutField(
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall PutFieldNoCopy(
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField) = 0;

        virtual HRESULT __stdcall GetFieldNames(
                            ULONG *pcNames,
                                            BSTR *rgBstrNames) = 0;

        virtual BOOL __stdcall IsMatchingType(
                       IRecordInfo *pRecordInfo) = 0;

        virtual PVOID __stdcall RecordCreate( void) = 0;

        virtual HRESULT __stdcall RecordCreateCopy(
                       PVOID pvSource,
                        PVOID *ppvDest) = 0;

        virtual HRESULT __stdcall RecordDestroy(
                       PVOID pvRecord) = 0;

    };
#line 5119 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef IErrorLog *LPERRORLOG;


extern "C" const IID IID_IErrorLog;



    struct __declspec(uuid("3127CA40-446E-11CE-8135-00AA004BB851")) __declspec(novtable)
    IErrorLog : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddError(
                                 LPCOLESTR pszPropName,
                                 EXCEPINFO *pExcepInfo) = 0;

    };
#line 5203 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
typedef IPropertyBag *LPPROPERTYBAG;


extern "C" const IID IID_IPropertyBag;



    struct __declspec(uuid("55272A00-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPropertyBag : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(
                       LPCOLESTR pszPropName,
                            VARIANT *pVar,
                               IErrorLog *pErrorLog) = 0;

        virtual HRESULT __stdcall Write(
                                 LPCOLESTR pszPropName,
                                 VARIANT *pVar) = 0;

    };
#line 5291 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
                HRESULT __stdcall IPropertyBag_RemoteRead_Proxy(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 5318 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/oaidl.h"
#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree( unsigned long *, VARIANT * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall CLEANLOCALSTORAGE_UserSize64( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserMarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * __stdcall CLEANLOCALSTORAGE_UserUnmarshal64( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void __stdcall CLEANLOCALSTORAGE_UserFree64( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long __stdcall VARIANT_UserSize64( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal64( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal64( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree64( unsigned long *, VARIANT * );

              HRESULT __stdcall IDispatch_Invoke_Proxy(
    IDispatch * This,

          DISPID dispIdMember,

          const IID & riid,

          LCID lcid,

          WORD wFlags,

          DISPPARAMS *pDispParams,

               VARIANT *pVarResult,

               EXCEPINFO *pExcepInfo,

               UINT *puArgErr);


                HRESULT __stdcall IDispatch_Invoke_Stub(
              IDispatch * This,
               DISPID dispIdMember,
                         const IID & riid,
               LCID lcid,
               DWORD dwFlags,
                         DISPPARAMS *pDispParams,
                           VARIANT *pVarResult,
                           EXCEPINFO *pExcepInfo,
                           UINT *pArgErr,
               UINT cVarRef,
                                                       UINT *rgVarRefIdx,
                                                               VARIANTARG *rgVarRef);

              HRESULT __stdcall IEnumVARIANT_Next_Proxy(
    IEnumVARIANT * This,
               ULONG celt,
                                    VARIANT *rgVar,
                ULONG *pCeltFetched);


                HRESULT __stdcall IEnumVARIANT_Next_Stub(
              IEnumVARIANT * This,
               ULONG celt,
                                                                                VARIANT *rgVar,
                           ULONG *pCeltFetched);

              HRESULT __stdcall ITypeComp_Bind_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                ITypeInfo **ppTInfo,
                DESCKIND *pDescKind,
                BINDPTR *pBindPtr);


                HRESULT __stdcall ITypeComp_Bind_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                                     ITypeInfo **ppTInfo,
                           DESCKIND *pDescKind,
                                     LPFUNCDESC *ppFuncDesc,
                                     LPVARDESC *ppVarDesc,
                                     ITypeComp **ppTypeComp,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeComp_BindType_Proxy(
    ITypeComp * This,

               LPOLESTR szName,
               ULONG lHashVal,
                ITypeInfo **ppTInfo,
                ITypeComp **ppTComp);


                HRESULT __stdcall ITypeComp_BindType_Stub(
              ITypeComp * This,
                         LPOLESTR szName,
               ULONG lHashVal,
                                     ITypeInfo **ppTInfo);

              HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo * This,
                TYPEATTR **ppTypeAttr);


                HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub(
              ITypeInfo * This,
                                     LPTYPEATTR *ppTypeAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                FUNCDESC **ppFuncDesc);


                HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPFUNCDESC *ppFuncDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                VARDESC **ppVarDesc);


                HRESULT __stdcall ITypeInfo_GetVarDesc_Stub(
              ITypeInfo * This,
               UINT index,
                                     LPVARDESC *ppVarDesc,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeInfo_GetNames_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                                    BSTR *rgBstrNames,
               UINT cMaxNames,
                UINT *pcNames);


                HRESULT __stdcall ITypeInfo_GetNames_Stub(
              ITypeInfo * This,
               MEMBERID memid,
                                                                                BSTR *rgBstrNames,
               UINT cMaxNames,
                           UINT *pcNames);

              HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo * This,

                              LPOLESTR *rgszNames,
               UINT cNames,
                         MEMBERID *pMemId);


                        HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_Invoke_Proxy(
    ITypeInfo * This,
               PVOID pvInstance,
               MEMBERID memid,
               WORD wFlags,
                    DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *puArgErr);


                        HRESULT __stdcall ITypeInfo_Invoke_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeInfo_GetDocumentation_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                BSTR *pBstrDllName,
                BSTR *pBstrName,
                WORD *pwOrdinal);


                HRESULT __stdcall ITypeInfo_GetDllEntry_Stub(
              ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                                     BSTR *pBstrDllName,
                                     BSTR *pBstrName,
                           WORD *pwOrdinal);

              HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                PVOID *ppv);


                        HRESULT __stdcall ITypeInfo_AddressOfMember_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo_CreateInstance_Proxy(
    ITypeInfo * This,
               IUnknown *pUnkOuter,
               const IID & riid,
                        PVOID *ppvObj);


                HRESULT __stdcall ITypeInfo_CreateInstance_Stub(
              ITypeInfo * This,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo * This,
                ITypeLib **ppTLib,
                UINT *pIndex);


                HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub(
              ITypeInfo * This,
                                     ITypeLib **ppTLib,
                           UINT *pIndex);

              void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo * This,
               TYPEATTR *pTypeAttr);


                        HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo * This,
               FUNCDESC *pFuncDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub(
              ITypeInfo * This);

              void __stdcall ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo * This,
               VARDESC *pVarDesc);


                        HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub(
              ITypeInfo * This);

              HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub(
              ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib * This);


                HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub(
              ITypeLib * This,
                           UINT *pcTInfo);

              HRESULT __stdcall ITypeLib_GetLibAttr_Proxy(
    ITypeLib * This,
                TLIBATTR **ppTLibAttr);


                HRESULT __stdcall ITypeLib_GetLibAttr_Stub(
              ITypeLib * This,
                                     LPTLIBATTR *ppTLibAttr,
                           CLEANLOCALSTORAGE *pDummy);

              HRESULT __stdcall ITypeLib_GetDocumentation_Proxy(
    ITypeLib * This,
               INT index,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __stdcall ITypeLib_GetDocumentation_Stub(
              ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                                     BSTR *pBstrName,
                                     BSTR *pBstrDocString,
                           DWORD *pdwHelpContext,
                                     BSTR *pBstrHelpFile);

              HRESULT __stdcall ITypeLib_IsName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                BOOL *pfName);


                HRESULT __stdcall ITypeLib_IsName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                           BOOL *pfName,
                                     BSTR *pBstrLibName);

              HRESULT __stdcall ITypeLib_FindName_Proxy(
    ITypeLib * This,

                  LPOLESTR szNameBuf,
               ULONG lHashVal,
                                    ITypeInfo **ppTInfo,
                                    MEMBERID *rgMemId,
                    USHORT *pcFound);


                HRESULT __stdcall ITypeLib_FindName_Stub(
              ITypeLib * This,
                         LPOLESTR szNameBuf,
               ULONG lHashVal,
                                                                               ITypeInfo **ppTInfo,
                                                                               MEMBERID *rgMemId,
                                 USHORT *pcFound,
                                     BSTR *pBstrLibName);

              void __stdcall ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib * This,
               TLIBATTR *pTLibAttr);


                        HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub(
              ITypeLib * This);

              HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2 * This,
                ULONG *pcUniqueNames,
                ULONG *pcchUniqueNames);


                HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub(
              ITypeLib2 * This,
                           ULONG *pcUniqueNames,
                           ULONG *pcchUniqueNames);

              HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2 * This,
               INT index,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub(
              ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                                     BSTR *pbstrHelpString,
                           DWORD *pdwHelpStringContext,
                                     BSTR *pbstrHelpStringDll);

              HRESULT __stdcall IPropertyBag_Read_Proxy(
    IPropertyBag * This,
               LPCOLESTR pszPropName,
                    VARIANT *pVar,
                       IErrorLog *pErrorLog);


                HRESULT __stdcall IPropertyBag_Read_Stub(
              IPropertyBag * This,
                         LPCOLESTR pszPropName,
                           VARIANT *pVar,
                                     IErrorLog *pErrorLog,
               DWORD varType,
                             IUnknown *pUnkObj);






}
#line 305 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"



extern "C"{
#line 327 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } XML_ERROR;



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;
#line 377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef
enum tagDOMNodeType
    {
        NODE_INVALID = 0,
        NODE_ELEMENT = ( NODE_INVALID + 1 ) ,
        NODE_ATTRIBUTE = ( NODE_ELEMENT + 1 ) ,
        NODE_TEXT = ( NODE_ATTRIBUTE + 1 ) ,
        NODE_CDATA_SECTION = ( NODE_TEXT + 1 ) ,
        NODE_ENTITY_REFERENCE = ( NODE_CDATA_SECTION + 1 ) ,
        NODE_ENTITY = ( NODE_ENTITY_REFERENCE + 1 ) ,
        NODE_PROCESSING_INSTRUCTION = ( NODE_ENTITY + 1 ) ,
        NODE_COMMENT = ( NODE_PROCESSING_INSTRUCTION + 1 ) ,
        NODE_DOCUMENT = ( NODE_COMMENT + 1 ) ,
        NODE_DOCUMENT_TYPE = ( NODE_DOCUMENT + 1 ) ,
        NODE_DOCUMENT_FRAGMENT = ( NODE_DOCUMENT_TYPE + 1 ) ,
        NODE_NOTATION = ( NODE_DOCUMENT_FRAGMENT + 1 )
    } DOMNodeType;
#line 412 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
typedef
enum tagXMLEMEM_TYPE
    {
        XMLELEMTYPE_ELEMENT = 0,
        XMLELEMTYPE_TEXT = ( XMLELEMTYPE_ELEMENT + 1 ) ,
        XMLELEMTYPE_COMMENT = ( XMLELEMTYPE_TEXT + 1 ) ,
        XMLELEMTYPE_DOCUMENT = ( XMLELEMTYPE_COMMENT + 1 ) ,
        XMLELEMTYPE_DTD = ( XMLELEMTYPE_DOCUMENT + 1 ) ,
        XMLELEMTYPE_PI = ( XMLELEMTYPE_DTD + 1 ) ,
        XMLELEMTYPE_OTHER = ( XMLELEMTYPE_PI + 1 )
    } XMLELEM_TYPE;


extern "C" const IID LIBID_MSXML;
#line 434 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMImplementation;



    struct __declspec(uuid("2933BF8F-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMImplementation : public IDispatch
    {
    public:
        virtual HRESULT __stdcall hasFeature(
                       BSTR feature,
                       BSTR version,
                                VARIANT_BOOL *hasFeature) = 0;

    };
#line 568 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMNode;



    struct __declspec(uuid("2933BF80-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNode : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_nodeName(
                                BSTR *name) = 0;

        virtual HRESULT __stdcall get_nodeValue(
                                VARIANT *value) = 0;

        virtual HRESULT __stdcall put_nodeValue(
                       VARIANT value) = 0;

        virtual HRESULT __stdcall get_nodeType(
                                DOMNodeType *type) = 0;

        virtual HRESULT __stdcall get_parentNode(
                                IXMLDOMNode **parent) = 0;

        virtual HRESULT __stdcall get_childNodes(
                                IXMLDOMNodeList **childList) = 0;

        virtual HRESULT __stdcall get_firstChild(
                                IXMLDOMNode **firstChild) = 0;

        virtual HRESULT __stdcall get_lastChild(
                                IXMLDOMNode **lastChild) = 0;

        virtual HRESULT __stdcall get_previousSibling(
                                IXMLDOMNode **previousSibling) = 0;

        virtual HRESULT __stdcall get_nextSibling(
                                IXMLDOMNode **nextSibling) = 0;

        virtual HRESULT __stdcall get_attributes(
                                IXMLDOMNamedNodeMap **attributeMap) = 0;

        virtual HRESULT __stdcall insertBefore(
                       IXMLDOMNode *newChild,
                       VARIANT refChild,
                                IXMLDOMNode **outNewChild) = 0;

        virtual HRESULT __stdcall replaceChild(
                       IXMLDOMNode *newChild,
                       IXMLDOMNode *oldChild,
                                IXMLDOMNode **outOldChild) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLDOMNode *childNode,
                                IXMLDOMNode **oldChild) = 0;

        virtual HRESULT __stdcall appendChild(
                       IXMLDOMNode *newChild,
                                IXMLDOMNode **outNewChild) = 0;

        virtual HRESULT __stdcall hasChildNodes(
                                VARIANT_BOOL *hasChild) = 0;

        virtual HRESULT __stdcall get_ownerDocument(
                                IXMLDOMDocument **XMLDOMDocument) = 0;

        virtual HRESULT __stdcall cloneNode(
                       VARIANT_BOOL deep,
                                IXMLDOMNode **cloneRoot) = 0;

        virtual HRESULT __stdcall get_nodeTypeString(
                                BSTR *nodeType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *text) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR text) = 0;

        virtual HRESULT __stdcall get_specified(
                                VARIANT_BOOL *isSpecified) = 0;

        virtual HRESULT __stdcall get_definition(
                                IXMLDOMNode **definitionNode) = 0;

        virtual HRESULT __stdcall get_nodeTypedValue(
                                VARIANT *typedValue) = 0;

        virtual HRESULT __stdcall put_nodeTypedValue(
                       VARIANT typedValue) = 0;

        virtual HRESULT __stdcall get_dataType(
                                VARIANT *dataTypeName) = 0;

        virtual HRESULT __stdcall put_dataType(
                       BSTR dataTypeName) = 0;

        virtual HRESULT __stdcall get_xml(
                                BSTR *xmlString) = 0;

        virtual HRESULT __stdcall transformNode(
                       IXMLDOMNode *stylesheet,
                                BSTR *xmlString) = 0;

        virtual HRESULT __stdcall selectNodes(
                       BSTR queryString,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall selectSingleNode(
                       BSTR queryString,
                                IXMLDOMNode **resultNode) = 0;

        virtual HRESULT __stdcall get_parsed(
                                VARIANT_BOOL *isParsed) = 0;

        virtual HRESULT __stdcall get_namespaceURI(
                                BSTR *namespaceURI) = 0;

        virtual HRESULT __stdcall get_prefix(
                                BSTR *prefixString) = 0;

        virtual HRESULT __stdcall get_baseName(
                                BSTR *nameString) = 0;

        virtual HRESULT __stdcall transformNodeToObject(
                       IXMLDOMNode *stylesheet,
                       VARIANT outputObject) = 0;

    };
#line 1070 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMDocumentFragment;



    struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMDocumentFragment : public IXMLDOMNode
    {
    public:
    };
#line 1454 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMDocument;



    struct __declspec(uuid("2933BF81-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocument : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_doctype(
                                IXMLDOMDocumentType **documentType) = 0;

        virtual HRESULT __stdcall get_implementation(
                                IXMLDOMImplementation **impl) = 0;

        virtual HRESULT __stdcall get_documentElement(
                                IXMLDOMElement **DOMElement) = 0;

        virtual HRESULT __stdcall putref_documentElement(
                       IXMLDOMElement *DOMElement) = 0;

        virtual HRESULT __stdcall createElement(
                       BSTR tagName,
                                IXMLDOMElement **element) = 0;

        virtual HRESULT __stdcall createDocumentFragment(
                                IXMLDOMDocumentFragment **docFrag) = 0;

        virtual HRESULT __stdcall createTextNode(
                       BSTR data,
                                IXMLDOMText **text) = 0;

        virtual HRESULT __stdcall createComment(
                       BSTR data,
                                IXMLDOMComment **comment) = 0;

        virtual HRESULT __stdcall createCDATASection(
                       BSTR data,
                                IXMLDOMCDATASection **cdata) = 0;

        virtual HRESULT __stdcall createProcessingInstruction(
                       BSTR target,
                       BSTR data,
                                IXMLDOMProcessingInstruction **pi) = 0;

        virtual HRESULT __stdcall createAttribute(
                       BSTR name,
                                IXMLDOMAttribute **attribute) = 0;

        virtual HRESULT __stdcall createEntityReference(
                       BSTR name,
                                IXMLDOMEntityReference **entityRef) = 0;

        virtual HRESULT __stdcall getElementsByTagName(
                       BSTR tagName,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall createNode(
                       VARIANT Type,
                       BSTR name,
                       BSTR namespaceURI,
                                IXMLDOMNode **node) = 0;

        virtual HRESULT __stdcall nodeFromID(
                       BSTR idString,
                                IXMLDOMNode **node) = 0;

        virtual HRESULT __stdcall load(
                       VARIANT xmlSource,
                                VARIANT_BOOL *isSuccessful) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *value) = 0;

        virtual HRESULT __stdcall get_parseError(
                                IXMLDOMParseError **errorObj) = 0;

        virtual HRESULT __stdcall get_url(
                                BSTR *urlString) = 0;

        virtual HRESULT __stdcall get_async(
                                VARIANT_BOOL *isAsync) = 0;

        virtual HRESULT __stdcall put_async(
                       VARIANT_BOOL isAsync) = 0;

        virtual HRESULT __stdcall abort( void) = 0;

        virtual HRESULT __stdcall loadXML(
                       BSTR bstrXML,
                                VARIANT_BOOL *isSuccessful) = 0;

        virtual HRESULT __stdcall save(
                       VARIANT destination) = 0;

        virtual HRESULT __stdcall get_validateOnParse(
                                VARIANT_BOOL *isValidating) = 0;

        virtual HRESULT __stdcall put_validateOnParse(
                       VARIANT_BOOL isValidating) = 0;

        virtual HRESULT __stdcall get_resolveExternals(
                                VARIANT_BOOL *isResolving) = 0;

        virtual HRESULT __stdcall put_resolveExternals(
                       VARIANT_BOOL isResolving) = 0;

        virtual HRESULT __stdcall get_preserveWhiteSpace(
                                VARIANT_BOOL *isPreserving) = 0;

        virtual HRESULT __stdcall put_preserveWhiteSpace(
                       VARIANT_BOOL isPreserving) = 0;

        virtual HRESULT __stdcall put_onreadystatechange(
                       VARIANT readystatechangeSink) = 0;

        virtual HRESULT __stdcall put_ondataavailable(
                       VARIANT ondataavailableSink) = 0;

        virtual HRESULT __stdcall put_ontransformnode(
                       VARIANT ontransformnodeSink) = 0;

    };
#line 2196 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMNodeList;



    struct __declspec(uuid("2933BF82-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNodeList : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_item(
                       long index,
                                IXMLDOMNode **listItem) = 0;

        virtual HRESULT __stdcall get_length(
                                long *listLength) = 0;

        virtual HRESULT __stdcall nextNode(
                                IXMLDOMNode **nextItem) = 0;

        virtual HRESULT __stdcall reset( void) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

    };
#line 2366 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMNamedNodeMap;



    struct __declspec(uuid("2933BF83-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNamedNodeMap : public IDispatch
    {
    public:
        virtual HRESULT __stdcall getNamedItem(
                       BSTR name,
                                IXMLDOMNode **namedItem) = 0;

        virtual HRESULT __stdcall setNamedItem(
                       IXMLDOMNode *newItem,
                                IXMLDOMNode **nameItem) = 0;

        virtual HRESULT __stdcall removeNamedItem(
                       BSTR name,
                                IXMLDOMNode **namedItem) = 0;

        virtual HRESULT __stdcall get_item(
                       long index,
                                IXMLDOMNode **listItem) = 0;

        virtual HRESULT __stdcall get_length(
                                long *listLength) = 0;

        virtual HRESULT __stdcall getQualifiedItem(
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem) = 0;

        virtual HRESULT __stdcall removeQualifiedItem(
                       BSTR baseName,
                       BSTR namespaceURI,
                                IXMLDOMNode **qualifiedItem) = 0;

        virtual HRESULT __stdcall nextNode(
                                IXMLDOMNode **nextItem) = 0;

        virtual HRESULT __stdcall reset( void) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

    };
#line 2600 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMCharacterData;



    struct __declspec(uuid("2933BF84-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCharacterData : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_data(
                                BSTR *data) = 0;

        virtual HRESULT __stdcall put_data(
                       BSTR data) = 0;

        virtual HRESULT __stdcall get_length(
                                long *dataLength) = 0;

        virtual HRESULT __stdcall substringData(
                       long offset,
                       long count,
                                BSTR *data) = 0;

        virtual HRESULT __stdcall appendData(
                       BSTR data) = 0;

        virtual HRESULT __stdcall insertData(
                       long offset,
                       BSTR data) = 0;

        virtual HRESULT __stdcall deleteData(
                       long offset,
                       long count) = 0;

        virtual HRESULT __stdcall replaceData(
                       long offset,
                       long count,
                       BSTR data) = 0;

    };
#line 3076 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMAttribute;



    struct __declspec(uuid("2933BF85-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMAttribute : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *attributeName) = 0;

        virtual HRESULT __stdcall get_value(
                                VARIANT *attributeValue) = 0;

        virtual HRESULT __stdcall put_value(
                       VARIANT attributeValue) = 0;

    };
#line 3490 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMElement;



    struct __declspec(uuid("2933BF86-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMElement : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *tagName) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR name,
                                VARIANT *value) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR name,
                       VARIANT value) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR name) = 0;

        virtual HRESULT __stdcall getAttributeNode(
                       BSTR name,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall setAttributeNode(
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall removeAttributeNode(
                       IXMLDOMAttribute *DOMAttribute,
                                IXMLDOMAttribute **attributeNode) = 0;

        virtual HRESULT __stdcall getElementsByTagName(
                       BSTR tagName,
                                IXMLDOMNodeList **resultList) = 0;

        virtual HRESULT __stdcall normalize( void) = 0;

    };
#line 3974 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMText;



    struct __declspec(uuid("2933BF87-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMText : public IXMLDOMCharacterData
    {
    public:
        virtual HRESULT __stdcall splitText(
                       long offset,
                                IXMLDOMText **rightHandTextNode) = 0;

    };
#line 4433 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMComment;



    struct __declspec(uuid("2933BF88-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMComment : public IXMLDOMCharacterData
    {
    public:
    };
#line 4880 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMProcessingInstruction;



    struct __declspec(uuid("2933BF89-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMProcessingInstruction : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_target(
                                BSTR *name) = 0;

        virtual HRESULT __stdcall get_data(
                                BSTR *value) = 0;

        virtual HRESULT __stdcall put_data(
                       BSTR value) = 0;

    };
#line 5294 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMCDATASection;



    struct __declspec(uuid("2933BF8A-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCDATASection : public IXMLDOMText
    {
    public:
    };
#line 5750 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMDocumentType;



    struct __declspec(uuid("2933BF8B-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocumentType : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *rootName) = 0;

        virtual HRESULT __stdcall get_entities(
                                IXMLDOMNamedNodeMap **entityMap) = 0;

        virtual HRESULT __stdcall get_notations(
                                IXMLDOMNamedNodeMap **notationMap) = 0;

    };
#line 6164 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMNotation;



    struct __declspec(uuid("2933BF8C-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNotation : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_publicId(
                                VARIANT *publicID) = 0;

        virtual HRESULT __stdcall get_systemId(
                                VARIANT *systemID) = 0;

    };
#line 6568 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMEntity;



    struct __declspec(uuid("2933BF8D-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntity : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall get_publicId(
                                VARIANT *publicID) = 0;

        virtual HRESULT __stdcall get_systemId(
                                VARIANT *systemID) = 0;

        virtual HRESULT __stdcall get_notationName(
                                BSTR *name) = 0;

    };
#line 6982 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMEntityReference;



    struct __declspec(uuid("2933BF8E-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntityReference : public IXMLDOMNode
    {
    public:
    };
#line 7366 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDOMParseError;



    struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMParseError : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_errorCode(
                                long *errorCode) = 0;

        virtual HRESULT __stdcall get_url(
                                BSTR *urlString) = 0;

        virtual HRESULT __stdcall get_reason(
                                BSTR *reasonString) = 0;

        virtual HRESULT __stdcall get_srcText(
                                BSTR *sourceString) = 0;

        virtual HRESULT __stdcall get_line(
                                long *lineNumber) = 0;

        virtual HRESULT __stdcall get_linepos(
                                long *linePosition) = 0;

        virtual HRESULT __stdcall get_filepos(
                                long *filePosition) = 0;

    };
#line 7556 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXTLRuntime;



    struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXTLRuntime : public IXMLDOMNode
    {
    public:
        virtual HRESULT __stdcall uniqueID(
                       IXMLDOMNode *pNode,
                                long *pID) = 0;

        virtual HRESULT __stdcall depth(
                       IXMLDOMNode *pNode,
                                long *pDepth) = 0;

        virtual HRESULT __stdcall childNumber(
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall ancestorChildNumber(
                       BSTR bstrNodeName,
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall absoluteChildNumber(
                       IXMLDOMNode *pNode,
                                long *pNumber) = 0;

        virtual HRESULT __stdcall formatIndex(
                       long lIndex,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatNumber(
                       double dblNumber,
                       BSTR bstrFormat,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatDate(
                       VARIANT varDate,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString) = 0;

        virtual HRESULT __stdcall formatTime(
                       VARIANT varTime,
                       BSTR bstrFormat,
                                 VARIANT varDestLocale,
                                BSTR *pbstrFormattedString) = 0;

    };
#line 8062 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID DIID_XMLDOMDocumentEvents;



    struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    XMLDOMDocumentEvents : public IDispatch
    {
    };
#line 8170 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const CLSID CLSID_DOMDocument;



class __declspec(uuid("2933BF90-7B36-11d2-B20E-00C04F983E60"))
DOMDocument;


extern "C" const CLSID CLSID_DOMFreeThreadedDocument;



class __declspec(uuid("2933BF91-7B36-11d2-B20E-00C04F983E60"))
DOMFreeThreadedDocument;
#line 8193 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLHttpRequest;



    struct __declspec(uuid("ED8C108D-4349-11D2-91A4-00C04F7969E8")) __declspec(novtable)
    IXMLHttpRequest : public IDispatch
    {
    public:
        virtual HRESULT __stdcall open(
                                 BSTR bstrMethod,
                                 BSTR bstrUrl,
                                 VARIANT varAsync,
                                 VARIANT bstrUser,
                                 VARIANT bstrPassword) = 0;

        virtual HRESULT __stdcall setRequestHeader(
                                 BSTR bstrHeader,
                                 BSTR bstrValue) = 0;

        virtual HRESULT __stdcall getResponseHeader(
                                 BSTR bstrHeader,
                                                     BSTR *pbstrValue) = 0;

        virtual HRESULT __stdcall getAllResponseHeaders(
                                                     BSTR *pbstrHeaders) = 0;

        virtual HRESULT __stdcall send(
                                 VARIANT varBody) = 0;

        virtual HRESULT __stdcall abort( void) = 0;

        virtual HRESULT __stdcall get_status(
                                           long *plStatus) = 0;

        virtual HRESULT __stdcall get_statusText(
                                                     BSTR *pbstrStatus) = 0;

        virtual HRESULT __stdcall get_responseXML(
                                                     IDispatch **ppBody) = 0;

        virtual HRESULT __stdcall get_responseText(
                                                     BSTR *pbstrBody) = 0;

        virtual HRESULT __stdcall get_responseBody(
                                           VARIANT *pvarBody) = 0;

        virtual HRESULT __stdcall get_responseStream(
                                           VARIANT *pvarBody) = 0;

        virtual HRESULT __stdcall get_readyState(
                                           long *plState) = 0;

        virtual HRESULT __stdcall put_onreadystatechange(
                                     IDispatch *pReadyStateSink) = 0;

    };
#line 8456 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const CLSID CLSID_XMLHTTPRequest;



class __declspec(uuid("ED8C108E-4349-11D2-91A4-00C04F7969E8"))
XMLHTTPRequest;
#line 8471 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDSOControl;



    struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) __declspec(novtable)
    IXMLDSOControl : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_XMLDocument(
                                IXMLDOMDocument **ppDoc) = 0;

        virtual HRESULT __stdcall put_XMLDocument(
                       IXMLDOMDocument *ppDoc) = 0;

        virtual HRESULT __stdcall get_JavaDSOCompatible(
                                BOOL *fJavaDSOCompatible) = 0;

        virtual HRESULT __stdcall put_JavaDSOCompatible(
                       BOOL fJavaDSOCompatible) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *state) = 0;

    };
#line 8634 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const CLSID CLSID_XMLDSOControl;



class __declspec(uuid("550dda30-0541-11d2-9ca9-0060b0ec3d39"))
XMLDSOControl;
#line 8649 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLElementCollection;



    struct __declspec(uuid("65725580-9B5D-11d0-9BFE-00C04FC99C8E")) __declspec(novtable)
    IXMLElementCollection : public IDispatch
    {
    public:
        virtual HRESULT __stdcall put_length(
                       long v) = 0;

        virtual HRESULT __stdcall get_length(
                                long *p) = 0;

        virtual HRESULT __stdcall get__newEnum(
                                IUnknown **ppUnk) = 0;

        virtual HRESULT __stdcall item(
                                 VARIANT var1,
                                 VARIANT var2,
                                IDispatch **ppDisp) = 0;

    };
#line 8813 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDocument;



    struct __declspec(uuid("F52E2B61-18A1-11d1-B105-00805F49916B")) __declspec(novtable)
    IXMLDocument : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_root(
                                IXMLElement **p) = 0;

        virtual HRESULT __stdcall get_fileSize(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileModifiedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileUpdatedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_URL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_URL(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_mimeType(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *pl) = 0;

        virtual HRESULT __stdcall get_charset(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_charset(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_version(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_doctype(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_dtdURL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall createElement(
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement **ppElem) = 0;

    };
#line 9077 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLDocument2;



    struct __declspec(uuid("2B8DE2FE-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLDocument2 : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_root(
                                IXMLElement2 **p) = 0;

        virtual HRESULT __stdcall get_fileSize(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileModifiedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_fileUpdatedDate(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_URL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_URL(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_mimeType(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_readyState(
                                long *pl) = 0;

        virtual HRESULT __stdcall get_charset(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_charset(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_version(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_doctype(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall get_dtdURL(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall createElement(
                       VARIANT vType,
                                 VARIANT var1,
                                IXMLElement2 **ppElem) = 0;

        virtual HRESULT __stdcall get_async(
                                VARIANT_BOOL *pf) = 0;

        virtual HRESULT __stdcall put_async(
                       VARIANT_BOOL f) = 0;

    };
#line 9361 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLElement;



    struct __declspec(uuid("3F7F31AC-E15F-11d0-9C25-00C04FC99C8E")) __declspec(novtable)
    IXMLElement : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_tagName(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_parent(
                                IXMLElement **ppParent) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR strPropertyName,
                       VARIANT PropertyValue) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR strPropertyName,
                                VARIANT *PropertyValue) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR strPropertyName) = 0;

        virtual HRESULT __stdcall get_children(
                                IXMLElementCollection **pp) = 0;

        virtual HRESULT __stdcall get_type(
                                long *plType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR p) = 0;

        virtual HRESULT __stdcall addChild(
                       IXMLElement *pChildElem,
            long lIndex,
            long lReserved) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLElement *pChildElem) = 0;

    };
#line 9609 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLElement2;



    struct __declspec(uuid("2B8DE2FF-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLElement2 : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_tagName(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_tagName(
                       BSTR p) = 0;

        virtual HRESULT __stdcall get_parent(
                                IXMLElement2 **ppParent) = 0;

        virtual HRESULT __stdcall setAttribute(
                       BSTR strPropertyName,
                       VARIANT PropertyValue) = 0;

        virtual HRESULT __stdcall getAttribute(
                       BSTR strPropertyName,
                                VARIANT *PropertyValue) = 0;

        virtual HRESULT __stdcall removeAttribute(
                       BSTR strPropertyName) = 0;

        virtual HRESULT __stdcall get_children(
                                IXMLElementCollection **pp) = 0;

        virtual HRESULT __stdcall get_type(
                                long *plType) = 0;

        virtual HRESULT __stdcall get_text(
                                BSTR *p) = 0;

        virtual HRESULT __stdcall put_text(
                       BSTR p) = 0;

        virtual HRESULT __stdcall addChild(
                       IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved) = 0;

        virtual HRESULT __stdcall removeChild(
                       IXMLElement2 *pChildElem) = 0;

        virtual HRESULT __stdcall get_attributes(
                                IXMLElementCollection **pp) = 0;

    };
#line 9867 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLAttribute;



    struct __declspec(uuid("D4D4A0FC-3B73-11d1-B2B4-00C04FB92596")) __declspec(novtable)
    IXMLAttribute : public IDispatch
    {
    public:
        virtual HRESULT __stdcall get_name(
                                BSTR *n) = 0;

        virtual HRESULT __stdcall get_value(
                                BSTR *v) = 0;

    };
#line 10007 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const IID IID_IXMLError;



    struct __declspec(uuid("948C5AD3-C58D-11d0-9C0B-00C04FC99C8E")) __declspec(novtable)
    IXMLError : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetErrorInfo(
            XML_ERROR *pErrorReturn) = 0;

    };
#line 10080 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern "C" const CLSID CLSID_XMLDocument;



class __declspec(uuid("CFC399AF-D876-11d0-9C10-00C04FC99C8E"))
XMLDocument;
#line 10096 "D:/Program Files (x86)/Windows Kits/8.1/Include/um/msxml.h"
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec;






}
#line 425 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"



extern "C"{
#line 446 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
#pragma comment(lib,"uuid.lib")
#line 469 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID CLSID_SBS_StdURLMoniker;
extern "C" const IID CLSID_SBS_HttpProtocol;
extern "C" const IID CLSID_SBS_FtpProtocol;
extern "C" const IID CLSID_SBS_GopherProtocol;
extern "C" const IID CLSID_SBS_HttpSProtocol;
extern "C" const IID CLSID_SBS_FileProtocol;
extern "C" const IID CLSID_SBS_MkProtocol;
extern "C" const IID CLSID_SBS_UrlMkBindCtx;
extern "C" const IID CLSID_SBS_SoftDistExt;
extern "C" const IID CLSID_SBS_CdlProtocol;
extern "C" const IID CLSID_SBS_ClassInstallFilter;
extern "C" const IID CLSID_SBS_InternetSecurityManager;
extern "C" const IID CLSID_SBS_InternetZoneManager;







extern "C" const IID IID_IAsyncMoniker;
extern "C" const IID CLSID_StdURLMoniker;
extern "C" const IID CLSID_HttpProtocol;
extern "C" const IID CLSID_FtpProtocol;
extern "C" const IID CLSID_GopherProtocol;
extern "C" const IID CLSID_HttpSProtocol;
extern "C" const IID CLSID_FileProtocol;
extern "C" const IID CLSID_ResProtocol;
extern "C" const IID CLSID_AboutProtocol;
extern "C" const IID CLSID_JSProtocol;
extern "C" const IID CLSID_MailtoProtocol;
extern "C" const IID CLSID_IE4_PROTOCOLS;
extern "C" const IID CLSID_MkProtocol;
extern "C" const IID CLSID_StdURLProtocol;
extern "C" const IID CLSID_UrlMkBindCtx;
extern "C" const IID CLSID_CdlProtocol;
extern "C" const IID CLSID_ClassInstallFilter;
extern "C" const IID IID_IAsyncBindCtx;
#line 515 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall CreateURLMoniker( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk);
extern "C" HRESULT __stdcall CreateURLMonikerEx( LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER * ppmk, DWORD dwFlags);
extern "C" HRESULT __stdcall GetClassURL( LPCWSTR szURL, CLSID *pClsID);
extern "C" HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,
                                         IEnumFORMATETC *pEFetc, IBindCtx **ppBC);

extern "C" HRESULT __stdcall CreateURLMonikerEx2( LPMONIKER pMkCtx, IUri* pUri, LPMONIKER * ppmk, DWORD dwFlags);

extern "C" HRESULT __stdcall CreateAsyncBindCtxEx( IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,
                                     IBindCtx **ppBC, DWORD reserved);
extern "C" HRESULT __stdcall MkParseDisplayNameEx( IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,
                                         LPMONIKER *ppmk);
extern "C" HRESULT __stdcall RegisterBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb,
                                         IBindStatusCallback** ppBSCBPrev, DWORD dwReserved);
extern "C" HRESULT __stdcall RevokeBindStatusCallback( LPBC pBC, IBindStatusCallback *pBSCb);
extern "C" HRESULT __stdcall GetClassFileOrMime( LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid);
extern "C" HRESULT __stdcall IsValidURL( LPBC pBC, LPCWSTR szURL, DWORD dwReserved);
extern "C" HRESULT __stdcall CoGetClassObjectFromURL( const IID & rCLASSID,
                 LPCWSTR szCODE, DWORD dwFileVersionMS,
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
                 LPBINDCTX pBindCtx, DWORD dwClsContext,
                       LPVOID pvReserved, const IID & riid, LPVOID * ppv);
extern "C" HRESULT __stdcall IEInstallScope( LPDWORD pdwScope);
extern "C" HRESULT __stdcall FaultInIEFeature( HWND hWnd,
                 uCLSSPEC *pClassSpec,
                        QUERYCONTEXT *pQuery, DWORD dwFlags);
extern "C" HRESULT __stdcall GetComponentIDFromCLSSPEC( uCLSSPEC *pClassspec,
                     LPSTR * ppszComponentID);
#line 552 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall IsAsyncMoniker( IMoniker* pmk);
extern "C" HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);

extern "C" HRESULT __stdcall RegisterMediaTypes( UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);
extern "C" HRESULT __stdcall FindMediaType( LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);
extern "C" HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc);
extern "C" HRESULT __stdcall RegisterFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);
extern "C" HRESULT __stdcall RevokeFormatEnumerator( LPBC pBC, IEnumFORMATETC *pEFetc);
extern "C" HRESULT __stdcall RegisterMediaTypeClass( LPBC pBC, UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);
extern "C" HRESULT __stdcall FindMediaTypeClass( LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);
extern "C" HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);
extern "C" HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLengthOut, DWORD dwReserved);
extern "C" HRESULT __stdcall FindMimeFromData(
                                 LPBC pBC,
                                 LPCWSTR pwzUrl,
                                 LPVOID pBuffer,
                                 DWORD cbSize,
                                 LPCWSTR pwzMimeProposed,
                                 DWORD dwMimeFlags,
                                 LPWSTR *ppwzMimeOut,
                                 DWORD dwReserved);
#line 583 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall ObtainUserAgentString(
                                         DWORD dwOption,
                                         LPSTR pszUAOut,
                                         DWORD *cbSize);
extern "C" HRESULT __stdcall CompareSecurityIds( BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);
extern "C" HRESULT __stdcall CompatFlagsFromClsid( CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);
#line 722 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;







typedef IPersistMoniker *LPPERSISTMONIKER;


extern "C" const IID IID_IPersistMoniker;



    struct __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IPersistMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID(
                                   CLSID *pClassID) = 0;

        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                       BOOL fFullyAvailable,
                                     IMoniker *pimkName,
                                     LPBC pibc,
                       DWORD grfMode) = 0;

        virtual HRESULT __stdcall Save(
                                     IMoniker *pimkName,
                                     LPBC pbc,
                       BOOL fRemember) = 0;

        virtual HRESULT __stdcall SaveCompleted(
                                     IMoniker *pimkName,
                                     LPBC pibc) = 0;

        virtual HRESULT __stdcall GetCurMoniker(
                                             IMoniker **ppimkName) = 0;

    };
#line 875 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;







typedef IMonikerProp *LPMONIKERPROP;

typedef
enum __MIDL_IMonikerProp_0001
    {
        MIMETYPEPROP = 0,
        USE_SRC_URL = 0x1,
        CLASSIDPROP = 0x2,
        TRUSTEDDOWNLOADPROP = 0x3,
        POPUPLEVELPROP = 0x4
    } MONIKERPROPERTY;


extern "C" const IID IID_IMonikerProp;



    struct __declspec(uuid("a5ca5f7f-1847-4d87-9c5b-918509f7511d")) __declspec(novtable)
    IMonikerProp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PutProperty(
                       MONIKERPROPERTY mkp,
                                 LPCWSTR val) = 0;

    };
#line 980 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;







typedef IBindProtocol *LPBINDPROTOCOL;


extern "C" const IID IID_IBindProtocol;



    struct __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBinding(
                       LPCWSTR szUrl,
                       IBindCtx *pbc,
                        IBinding **ppb) = 0;

    };
#line 1077 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;







typedef IBinding *LPBINDING;


extern "C" const IID IID_IBinding;



    struct __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBinding : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Abort( void) = 0;

        virtual HRESULT __stdcall Suspend( void) = 0;

        virtual HRESULT __stdcall Resume( void) = 0;

        virtual HRESULT __stdcall SetPriority(
                       LONG nPriority) = 0;

        virtual HRESULT __stdcall GetPriority(
                                   LONG *pnPriority) = 0;

        virtual HRESULT __stdcall GetBindResult(
                        CLSID *pclsidProtocol,
                        DWORD *pdwResult,

                        LPOLESTR *pszResult,
                            DWORD *pdwReserved) = 0;

    };
#line 1210 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
                HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1241 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;







typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef
enum __MIDL_IBindStatusCallback_0001
    {
        BINDVERB_GET = 0,
        BINDVERB_POST = 0x1,
        BINDVERB_PUT = 0x2,
        BINDVERB_CUSTOM = 0x3,
        BINDVERB_RESERVED1 = 0x4
    } BINDVERB;

typedef
enum __MIDL_IBindStatusCallback_0002
    {
        BINDINFOF_URLENCODESTGMEDDATA = 0x1,
        BINDINFOF_URLENCODEDEXTRAINFO = 0x2
    } BINDINFOF;

typedef
enum __MIDL_IBindStatusCallback_0003
    {
        BINDF_ASYNCHRONOUS = 0x1,
        BINDF_ASYNCSTORAGE = 0x2,
        BINDF_NOPROGRESSIVERENDERING = 0x4,
        BINDF_OFFLINEOPERATION = 0x8,
        BINDF_GETNEWESTVERSION = 0x10,
        BINDF_NOWRITECACHE = 0x20,
        BINDF_NEEDFILE = 0x40,
        BINDF_PULLDATA = 0x80,
        BINDF_IGNORESECURITYPROBLEM = 0x100,
        BINDF_RESYNCHRONIZE = 0x200,
        BINDF_HYPERLINK = 0x400,
        BINDF_NO_UI = 0x800,
        BINDF_SILENTOPERATION = 0x1000,
        BINDF_PRAGMA_NO_CACHE = 0x2000,
        BINDF_GETCLASSOBJECT = 0x4000,
        BINDF_RESERVED_1 = 0x8000,
        BINDF_FREE_THREADED = 0x10000,
        BINDF_DIRECT_READ = 0x20000,
        BINDF_FORMS_SUBMIT = 0x40000,
        BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
        BINDF_FROMURLMON = 0x100000,
        BINDF_FWD_BACK = 0x200000,
        BINDF_PREFERDEFAULTHANDLER = 0x400000,
        BINDF_ENFORCERESTRICTED = 0x800000,
        BINDF_RESERVED_2 = 0x80000000,
        BINDF_RESERVED_3 = 0x1000000,
        BINDF_RESERVED_4 = 0x2000000,
        BINDF_RESERVED_5 = 0x4000000,
        BINDF_RESERVED_6 = 0x8000000,
        BINDF_RESERVED_7 = 0x40000000,
        BINDF_RESERVED_8 = 0x20000000
    } BINDF;

typedef
enum __MIDL_IBindStatusCallback_0004
    {
        URL_ENCODING_NONE = 0,
        URL_ENCODING_ENABLE_UTF8 = 0x10000000,
        URL_ENCODING_DISABLE_UTF8 = 0x20000000
    } URL_ENCODING;

typedef struct _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    } REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } RemBINDINFO;

typedef struct tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef
enum __MIDL_IBindStatusCallback_0005
    {
        BINDINFO_OPTIONS_WININETFLAG = 0x10000,
        BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
        BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
        BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
        BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
        BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
        BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
        BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
        BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
        BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
        BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
        BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
        BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
        BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
        BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = ( int )0x80000000
    } BINDINFO_OPTIONS;

typedef
enum __MIDL_IBindStatusCallback_0006
    {
        BSCF_FIRSTDATANOTIFICATION = 0x1,
        BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
        BSCF_LASTDATANOTIFICATION = 0x4,
        BSCF_DATAFULLYAVAILABLE = 0x8,
        BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
        BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
        BSCF_64BITLENGTHDOWNLOAD = 0x40
    } BSCF;

typedef
enum tagBINDSTATUS
    {
        BINDSTATUS_FINDINGRESOURCE = 1,
        BINDSTATUS_CONNECTING = ( BINDSTATUS_FINDINGRESOURCE + 1 ) ,
        BINDSTATUS_REDIRECTING = ( BINDSTATUS_CONNECTING + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADDATA = ( BINDSTATUS_REDIRECTING + 1 ) ,
        BINDSTATUS_DOWNLOADINGDATA = ( BINDSTATUS_BEGINDOWNLOADDATA + 1 ) ,
        BINDSTATUS_ENDDOWNLOADDATA = ( BINDSTATUS_DOWNLOADINGDATA + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADCOMPONENTS = ( BINDSTATUS_ENDDOWNLOADDATA + 1 ) ,
        BINDSTATUS_INSTALLINGCOMPONENTS = ( BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_ENDDOWNLOADCOMPONENTS = ( BINDSTATUS_INSTALLINGCOMPONENTS + 1 ) ,
        BINDSTATUS_USINGCACHEDCOPY = ( BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_SENDINGREQUEST = ( BINDSTATUS_USINGCACHEDCOPY + 1 ) ,
        BINDSTATUS_CLASSIDAVAILABLE = ( BINDSTATUS_SENDINGREQUEST + 1 ) ,
        BINDSTATUS_MIMETYPEAVAILABLE = ( BINDSTATUS_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_CACHEFILENAMEAVAILABLE = ( BINDSTATUS_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_BEGINSYNCOPERATION = ( BINDSTATUS_CACHEFILENAMEAVAILABLE + 1 ) ,
        BINDSTATUS_ENDSYNCOPERATION = ( BINDSTATUS_BEGINSYNCOPERATION + 1 ) ,
        BINDSTATUS_BEGINUPLOADDATA = ( BINDSTATUS_ENDSYNCOPERATION + 1 ) ,
        BINDSTATUS_UPLOADINGDATA = ( BINDSTATUS_BEGINUPLOADDATA + 1 ) ,
        BINDSTATUS_ENDUPLOADDATA = ( BINDSTATUS_UPLOADINGDATA + 1 ) ,
        BINDSTATUS_PROTOCOLCLASSID = ( BINDSTATUS_ENDUPLOADDATA + 1 ) ,
        BINDSTATUS_ENCODING = ( BINDSTATUS_PROTOCOLCLASSID + 1 ) ,
        BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = ( BINDSTATUS_ENCODING + 1 ) ,
        BINDSTATUS_CLASSINSTALLLOCATION = ( BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_DECODING = ( BINDSTATUS_CLASSINSTALLLOCATION + 1 ) ,
        BINDSTATUS_LOADINGMIMEHANDLER = ( BINDSTATUS_DECODING + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONATTACH = ( BINDSTATUS_LOADINGMIMEHANDLER + 1 ) ,
        BINDSTATUS_FILTERREPORTMIMETYPE = ( BINDSTATUS_CONTENTDISPOSITIONATTACH + 1 ) ,
        BINDSTATUS_CLSIDCANINSTANTIATE = ( BINDSTATUS_FILTERREPORTMIMETYPE + 1 ) ,
        BINDSTATUS_IUNKNOWNAVAILABLE = ( BINDSTATUS_CLSIDCANINSTANTIATE + 1 ) ,
        BINDSTATUS_DIRECTBIND = ( BINDSTATUS_IUNKNOWNAVAILABLE + 1 ) ,
        BINDSTATUS_RAWMIMETYPE = ( BINDSTATUS_DIRECTBIND + 1 ) ,
        BINDSTATUS_PROXYDETECTING = ( BINDSTATUS_RAWMIMETYPE + 1 ) ,
        BINDSTATUS_ACCEPTRANGES = ( BINDSTATUS_PROXYDETECTING + 1 ) ,
        BINDSTATUS_COOKIE_SENT = ( BINDSTATUS_ACCEPTRANGES + 1 ) ,
        BINDSTATUS_COMPACT_POLICY_RECEIVED = ( BINDSTATUS_COOKIE_SENT + 1 ) ,
        BINDSTATUS_COOKIE_SUPPRESSED = ( BINDSTATUS_COMPACT_POLICY_RECEIVED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_UNKNOWN = ( BINDSTATUS_COOKIE_SUPPRESSED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_ACCEPT = ( BINDSTATUS_COOKIE_STATE_UNKNOWN + 1 ) ,
        BINDSTATUS_COOKIE_STATE_REJECT = ( BINDSTATUS_COOKIE_STATE_ACCEPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_PROMPT = ( BINDSTATUS_COOKIE_STATE_REJECT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_LEASH = ( BINDSTATUS_COOKIE_STATE_PROMPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_DOWNGRADE = ( BINDSTATUS_COOKIE_STATE_LEASH + 1 ) ,
        BINDSTATUS_POLICY_HREF = ( BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1 ) ,
        BINDSTATUS_P3P_HEADER = ( BINDSTATUS_POLICY_HREF + 1 ) ,
        BINDSTATUS_SESSION_COOKIE_RECEIVED = ( BINDSTATUS_P3P_HEADER + 1 ) ,
        BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = ( BINDSTATUS_SESSION_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_SESSION_COOKIES_ALLOWED = ( BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_CACHECONTROL = ( BINDSTATUS_SESSION_COOKIES_ALLOWED + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONFILENAME = ( BINDSTATUS_CACHECONTROL + 1 ) ,
        BINDSTATUS_MIMETEXTPLAINMISMATCH = ( BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1 ) ,
        BINDSTATUS_PUBLISHERAVAILABLE = ( BINDSTATUS_MIMETEXTPLAINMISMATCH + 1 ) ,
        BINDSTATUS_DISPLAYNAMEAVAILABLE = ( BINDSTATUS_PUBLISHERAVAILABLE + 1 ) ,
        BINDSTATUS_SSLUX_NAVBLOCKED = ( BINDSTATUS_DISPLAYNAMEAVAILABLE + 1 ) ,
        BINDSTATUS_SERVER_MIMETYPEAVAILABLE = ( BINDSTATUS_SSLUX_NAVBLOCKED + 1 ) ,
        BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = ( BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_64BIT_PROGRESS = ( BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_LAST = BINDSTATUS_64BIT_PROGRESS,
        BINDSTATUS_RESERVED_0 = ( BINDSTATUS_LAST + 1 ) ,
        BINDSTATUS_RESERVED_1 = ( BINDSTATUS_RESERVED_0 + 1 ) ,
        BINDSTATUS_RESERVED_2 = ( BINDSTATUS_RESERVED_1 + 1 ) ,
        BINDSTATUS_RESERVED_3 = ( BINDSTATUS_RESERVED_2 + 1 ) ,
        BINDSTATUS_RESERVED_4 = ( BINDSTATUS_RESERVED_3 + 1 ) ,
        BINDSTATUS_RESERVED_5 = ( BINDSTATUS_RESERVED_4 + 1 ) ,
        BINDSTATUS_RESERVED_6 = ( BINDSTATUS_RESERVED_5 + 1 ) ,
        BINDSTATUS_RESERVED_7 = ( BINDSTATUS_RESERVED_6 + 1 ) ,
        BINDSTATUS_RESERVED_8 = ( BINDSTATUS_RESERVED_7 + 1 ) ,
        BINDSTATUS_RESERVED_9 = ( BINDSTATUS_RESERVED_8 + 1 ) ,
        BINDSTATUS_RESERVED_A = ( BINDSTATUS_RESERVED_9 + 1 ) ,
        BINDSTATUS_RESERVED_B = ( BINDSTATUS_RESERVED_A + 1 ) ,
        BINDSTATUS_RESERVED_C = ( BINDSTATUS_RESERVED_B + 1 ) ,
        BINDSTATUS_RESERVED_D = ( BINDSTATUS_RESERVED_C + 1 ) ,
        BINDSTATUS_RESERVED_E = ( BINDSTATUS_RESERVED_D + 1 ) ,
        BINDSTATUS_LAST_PRIVATE = BINDSTATUS_RESERVED_E
    } BINDSTATUS;


extern "C" const IID IID_IBindStatusCallback;



    struct __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStartBinding(
                       DWORD dwReserved,
                                     IBinding *pib) = 0;

        virtual HRESULT __stdcall GetPriority(
                                   LONG *pnPriority) = 0;

        virtual HRESULT __stdcall OnLowResource(
                       DWORD reserved) = 0;

        virtual HRESULT __stdcall OnProgress(
                       ULONG ulProgress,
                       ULONG ulProgressMax,
                       ULONG ulStatusCode,
                                             LPCWSTR szStatusText) = 0;

        virtual HRESULT __stdcall OnStopBinding(
                       HRESULT hresult,
                                             LPCWSTR szError) = 0;

        virtual HRESULT __stdcall GetBindInfo(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo) = 0;

        virtual HRESULT __stdcall OnDataAvailable(
                       DWORD grfBSCF,
                       DWORD dwSize,
                       FORMATETC *pformatetc,
                       STGMEDIUM *pstgmed) = 0;

        virtual HRESULT __stdcall OnObjectAvailable(
                                 const IID & riid,
                                             IUnknown *punk) = 0;

    };
#line 1640 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
                HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1685 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;







typedef IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef
enum __MIDL_IBindStatusCallbackEx_0001
    {
        BINDF2_DISABLEBASICOVERHTTP = 0x1,
        BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
        BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
        BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
        BINDF2_SETDOWNLOADMODE = 0x20,
        BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
        BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
        BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
        BINDF2_RESERVED_14 = 0x1000,
        BINDF2_RESERVED_13 = 0x2000,
        BINDF2_RESERVED_12 = 0x4000,
        BINDF2_RESERVED_11 = 0x8000,
        BINDF2_RESERVED_10 = 0x10000,
        BINDF2_RESERVED_F = 0x20000,
        BINDF2_RESERVED_E = 0x40000,
        BINDF2_RESERVED_D = 0x80000,
        BINDF2_RESERVED_C = 0x100000,
        BINDF2_RESERVED_B = 0x200000,
        BINDF2_RESERVED_A = 0x400000,
        BINDF2_RESERVED_9 = 0x800000,
        BINDF2_RESERVED_8 = 0x1000000,
        BINDF2_RESERVED_7 = 0x2000000,
        BINDF2_RESERVED_6 = 0x4000000,
        BINDF2_RESERVED_5 = 0x8000000,
        BINDF2_RESERVED_4 = 0x10000000,
        BINDF2_RESERVED_3 = 0x20000000,
        BINDF2_RESERVED_2 = 0x40000000,
        BINDF2_RESERVED_1 = 0x80000000
    } BINDF2;


extern "C" const IID IID_IBindStatusCallbackEx;



    struct __declspec(uuid("aaa74ef9-8ee7-4659-88d9-f8c504da73cc")) __declspec(novtable)
    IBindStatusCallbackEx : public IBindStatusCallback
    {
    public:
        virtual HRESULT __stdcall GetBindInfoEx(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved) = 0;

    };
#line 1872 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
                HRESULT __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);


void __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1900 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;







typedef IAuthenticate *LPAUTHENTICATION;


extern "C" const IID IID_IAuthenticate;



    struct __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Authenticate(
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword) = 0;

    };
#line 1997 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;







typedef IAuthenticateEx *LPAUTHENTICATIONEX;

typedef
enum __MIDL_IAuthenticateEx_0001
    {
        AUTHENTICATEF_PROXY = 0x1,
        AUTHENTICATEF_BASIC = 0x2,
        AUTHENTICATEF_HTTP = 0x4
    } AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO
    {
    DWORD dwFlags;
    DWORD dwReserved;
    } AUTHENTICATEINFO;


extern "C" const IID IID_IAuthenticateEx;



    struct __declspec(uuid("2ad1edaf-d83d-48b5-9adf-03dbe19f53bd")) __declspec(novtable)
    IAuthenticateEx : public IAuthenticate
    {
    public:
        virtual HRESULT __stdcall AuthenticateEx(
                                             HWND *phwnd,
                                             LPWSTR *pszUsername,
                                             LPWSTR *pszPassword,
                                 AUTHENTICATEINFO *pauthinfo) = 0;

    };
#line 2120 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;







typedef IHttpNegotiate *LPHTTPNEGOTIATE;


extern "C" const IID IID_IHttpNegotiate;



    struct __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall BeginningTransaction(
                                 LPCWSTR szURL,
                                             LPCWSTR szHeaders,
                       DWORD dwReserved,
                                             LPWSTR *pszAdditionalHeaders) = 0;

        virtual HRESULT __stdcall OnResponse(
                       DWORD dwResponseCode,
                                             LPCWSTR szResponseHeaders,
                                             LPCWSTR szRequestHeaders,
                                             LPWSTR *pszAdditionalRequestHeaders) = 0;

    };
#line 2235 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;







typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;


extern "C" const IID IID_IHttpNegotiate2;



    struct __declspec(uuid("4F9F9FCB-E0F4-48eb-B7AB-FA2EA9365CB4")) __declspec(novtable)
    IHttpNegotiate2 : public IHttpNegotiate
    {
    public:
        virtual HRESULT __stdcall GetRootSecurityId(
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

    };
#line 2353 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;







typedef IHttpNegotiate3 *LPHTTPNEGOTIATE3;


extern "C" const IID IID_IHttpNegotiate3;



    struct __declspec(uuid("57b6c80a-34c2-4602-bc26-66a02fc57153")) __declspec(novtable)
    IHttpNegotiate3 : public IHttpNegotiate2
    {
    public:
        virtual HRESULT __stdcall GetSerializedClientCertContext(
                                                                                     BYTE **ppbCert,
                                   DWORD *pcbCert) = 0;

    };
#line 2479 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;







typedef IWinInetFileStream *LPWININETFILESTREAM;


extern "C" const IID IID_IWinInetFileStream;



    struct __declspec(uuid("F134C4B7-B1F8-4e75-B886-74B90943BECB")) __declspec(novtable)
    IWinInetFileStream : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetHandleForUnlock(
                       DWORD_PTR hWinInetLockHandle,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall SetDeleteFile(
                       DWORD_PTR dwReserved) = 0;

    };
#line 2584 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;







typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;


extern "C" const IID IID_IWindowForBindingUI;



    struct __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWindowForBindingUI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                       const GUID & rguidReason,
                        HWND *phwnd) = 0;

    };
#line 2679 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;







typedef ICodeInstall *LPCODEINSTALL;

typedef
enum __MIDL_ICodeInstall_0001
    {
        CIP_DISK_FULL = 0,
        CIP_ACCESS_DENIED = ( CIP_DISK_FULL + 1 ) ,
        CIP_NEWER_VERSION_EXISTS = ( CIP_ACCESS_DENIED + 1 ) ,
        CIP_OLDER_VERSION_EXISTS = ( CIP_NEWER_VERSION_EXISTS + 1 ) ,
        CIP_NAME_CONFLICT = ( CIP_OLDER_VERSION_EXISTS + 1 ) ,
        CIP_TRUST_VERIFICATION_COMPONENT_MISSING = ( CIP_NAME_CONFLICT + 1 ) ,
        CIP_EXE_SELF_REGISTERATION_TIMEOUT = ( CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1 ) ,
        CIP_UNSAFE_TO_ABORT = ( CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1 ) ,
        CIP_NEED_REBOOT = ( CIP_UNSAFE_TO_ABORT + 1 ) ,
        CIP_NEED_REBOOT_UI_PERMISSION = ( CIP_NEED_REBOOT + 1 )
    } CIP_STATUS;


extern "C" const IID IID_ICodeInstall;



    struct __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    ICodeInstall : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnCodeInstallProblem(
                       ULONG ulStatusCode,
                               LPCWSTR szDestination,
                               LPCWSTR szSource,
                       DWORD dwReserved) = 0;

    };
#line 2807 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec;







typedef
enum __MIDL_IUri_0001
    {
        Uri_PROPERTY_ABSOLUTE_URI = 0,
        Uri_PROPERTY_STRING_START = Uri_PROPERTY_ABSOLUTE_URI,
        Uri_PROPERTY_AUTHORITY = 1,
        Uri_PROPERTY_DISPLAY_URI = 2,
        Uri_PROPERTY_DOMAIN = 3,
        Uri_PROPERTY_EXTENSION = 4,
        Uri_PROPERTY_FRAGMENT = 5,
        Uri_PROPERTY_HOST = 6,
        Uri_PROPERTY_PASSWORD = 7,
        Uri_PROPERTY_PATH = 8,
        Uri_PROPERTY_PATH_AND_QUERY = 9,
        Uri_PROPERTY_QUERY = 10,
        Uri_PROPERTY_RAW_URI = 11,
        Uri_PROPERTY_SCHEME_NAME = 12,
        Uri_PROPERTY_USER_INFO = 13,
        Uri_PROPERTY_USER_NAME = 14,
        Uri_PROPERTY_STRING_LAST = Uri_PROPERTY_USER_NAME,
        Uri_PROPERTY_HOST_TYPE = 15,
        Uri_PROPERTY_DWORD_START = Uri_PROPERTY_HOST_TYPE,
        Uri_PROPERTY_PORT = 16,
        Uri_PROPERTY_SCHEME = 17,
        Uri_PROPERTY_ZONE = 18,
        Uri_PROPERTY_DWORD_LAST = Uri_PROPERTY_ZONE
    } Uri_PROPERTY;

typedef
enum __MIDL_IUri_0002
    {
        Uri_HOST_UNKNOWN = 0,
        Uri_HOST_DNS = ( Uri_HOST_UNKNOWN + 1 ) ,
        Uri_HOST_IPV4 = ( Uri_HOST_DNS + 1 ) ,
        Uri_HOST_IPV6 = ( Uri_HOST_IPV4 + 1 ) ,
        Uri_HOST_IDN = ( Uri_HOST_IPV6 + 1 )
    } Uri_HOST_TYPE;


extern "C" const IID IID_IUri;



    struct __declspec(uuid("A39EE748-6A27-4817-A6F2-13914BEF5890")) __declspec(novtable)
    IUri : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPropertyBSTR(
                              Uri_PROPERTY uriProp,
                                             BSTR *pbstrProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetPropertyLength(
                              Uri_PROPERTY uriProp,
                                   DWORD *pcchProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetPropertyDWORD(
                              Uri_PROPERTY uriProp,
                                   DWORD *pdwProperty,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall HasProperty(
                              Uri_PROPERTY uriProp,
                                   BOOL *pfHasProperty) = 0;

        virtual HRESULT __stdcall GetAbsoluteUri(
                                             BSTR *pbstrAbsoluteUri) = 0;

        virtual HRESULT __stdcall GetAuthority(
                                             BSTR *pbstrAuthority) = 0;

        virtual HRESULT __stdcall GetDisplayUri(
                                             BSTR *pbstrDisplayString) = 0;

        virtual HRESULT __stdcall GetDomain(
                                             BSTR *pbstrDomain) = 0;

        virtual HRESULT __stdcall GetExtension(
                                             BSTR *pbstrExtension) = 0;

        virtual HRESULT __stdcall GetFragment(
                                             BSTR *pbstrFragment) = 0;

        virtual HRESULT __stdcall GetHost(
                                             BSTR *pbstrHost) = 0;

        virtual HRESULT __stdcall GetPassword(
                                             BSTR *pbstrPassword) = 0;

        virtual HRESULT __stdcall GetPath(
                                             BSTR *pbstrPath) = 0;

        virtual HRESULT __stdcall GetPathAndQuery(
                                             BSTR *pbstrPathAndQuery) = 0;

        virtual HRESULT __stdcall GetQuery(
                                             BSTR *pbstrQuery) = 0;

        virtual HRESULT __stdcall GetRawUri(
                                             BSTR *pbstrRawUri) = 0;

        virtual HRESULT __stdcall GetSchemeName(
                                             BSTR *pbstrSchemeName) = 0;

        virtual HRESULT __stdcall GetUserInfo(
                                             BSTR *pbstrUserInfo) = 0;

        virtual HRESULT __stdcall GetUserNameW(
                                             BSTR *pbstrUserName) = 0;

        virtual HRESULT __stdcall GetHostType(
                                   DWORD *pdwHostType) = 0;

        virtual HRESULT __stdcall GetPort(
                                   DWORD *pdwPort) = 0;

        virtual HRESULT __stdcall GetScheme(
                                   DWORD *pdwScheme) = 0;

        virtual HRESULT __stdcall GetZone(
                                   DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall GetProperties(
                                   LPDWORD pdwFlags) = 0;

        virtual HRESULT __stdcall IsEqual(
                                     IUri *pUri,
                                   BOOL *pfEqual) = 0;

    };
#line 3187 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall CreateUri( LPCWSTR pwzURI,
                      DWORD dwFlags,
                            DWORD_PTR dwReserved,
                          IUri** ppURI);

extern "C" HRESULT __stdcall CreateUriWithFragment(
                      LPCWSTR pwzURI,
                          LPCWSTR pwzFragment,
                      DWORD dwFlags,
                            DWORD_PTR dwReserved,
                          IUri** ppURI);






extern "C" HRESULT __stdcall CreateUriFromMultiByteString(
               LPCSTR pszANSIInputUri,
               DWORD dwEncodingFlags,
               DWORD dwCodePage,
               DWORD dwCreateFlags,
               DWORD_PTR dwReserved,
               IUri** ppUri);
#line 3287 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec;
#line 3297 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IUriContainer;



    struct __declspec(uuid("a158a630-ed6f-45fb-b987-f68676f57752")) __declspec(novtable)
    IUriContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetIUri(
                        IUri **ppIUri) = 0;

    };
#line 3377 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IUriBuilder;



    struct __declspec(uuid("4221B2E1-8955-46c0-BD5B-DE9897565DE7")) __declspec(novtable)
    IUriBuilder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateUriSimple(
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall CreateUri(
                       DWORD dwCreateFlags,
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall CreateUriWithFlags(
                       DWORD dwCreateFlags,
                       DWORD dwUriBuilderFlags,
                       DWORD dwAllowEncodingPropertyMask,
                       DWORD_PTR dwReserved,

                      IUri **ppIUri) = 0;

        virtual HRESULT __stdcall GetIUri(

                                       IUri **ppIUri) = 0;

        virtual HRESULT __stdcall SetIUri(

                      IUri *pIUri) = 0;

        virtual HRESULT __stdcall GetFragment(

                   DWORD *pcchFragment,

                                       LPCWSTR *ppwzFragment) = 0;

        virtual HRESULT __stdcall GetHost(

                   DWORD *pcchHost,

                                       LPCWSTR *ppwzHost) = 0;

        virtual HRESULT __stdcall GetPassword(

                   DWORD *pcchPassword,

                                       LPCWSTR *ppwzPassword) = 0;

        virtual HRESULT __stdcall GetPath(

                   DWORD *pcchPath,

                                       LPCWSTR *ppwzPath) = 0;

        virtual HRESULT __stdcall GetPort(

                   BOOL *pfHasPort,

                   DWORD *pdwPort) = 0;

        virtual HRESULT __stdcall GetQuery(

                   DWORD *pcchQuery,

                                       LPCWSTR *ppwzQuery) = 0;

        virtual HRESULT __stdcall GetSchemeName(

                   DWORD *pcchSchemeName,

                                       LPCWSTR *ppwzSchemeName) = 0;

        virtual HRESULT __stdcall GetUserNameW(

                   DWORD *pcchUserName,

                                       LPCWSTR *ppwzUserName) = 0;

        virtual HRESULT __stdcall SetFragment(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetHost(

                  LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPassword(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPath(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetPortW(
                       BOOL fHasPort,
                       DWORD dwNewValue) = 0;

        virtual HRESULT __stdcall SetQuery(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetSchemeName(

                  LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall SetUserName(

                      LPCWSTR pwzNewValue) = 0;

        virtual HRESULT __stdcall RemoveProperties(
                       DWORD dwPropertyMask) = 0;

        virtual HRESULT __stdcall HasBeenModified(

                   BOOL *pfModified) = 0;

    };
#line 3771 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IUriBuilderFactory;



    struct __declspec(uuid("E982CE48-0B96-440c-BC37-0C869B27A29E")) __declspec(novtable)
    IUriBuilderFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateIUriBuilder(

                  DWORD dwFlags,

                  DWORD_PTR dwReserved,

                   IUriBuilder **ppIUriBuilder) = 0;

        virtual HRESULT __stdcall CreateInitializedIUriBuilder(

                  DWORD dwFlags,

                  DWORD_PTR dwReserved,

                   IUriBuilder **ppIUriBuilder) = 0;

    };
#line 3877 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall CreateIUriBuilder(
                 IUri *pIUri,
                 DWORD dwFlags,
                 DWORD_PTR dwReserved,
                 IUriBuilder **ppIUriBuilder
    );
#line 3892 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;







typedef IWinInetInfo *LPWININETINFO;


extern "C" const IID IID_IWinInetInfo;



    struct __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryOption(
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf) = 0;

    };
#line 3977 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
                HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4004 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;







typedef IHttpSecurity *LPHTTPSECURITY;


extern "C" const IID IID_IHttpSecurity;



    struct __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpSecurity : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnSecurityProblem(
                       DWORD dwProblem) = 0;

    };
#line 4106 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;







typedef IWinInetHttpInfo *LPWININETHTTPINFO;


extern "C" const IID IID_IWinInetHttpInfo;



    struct __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetHttpInfo : public IWinInetInfo
    {
    public:
        virtual HRESULT __stdcall QueryInfo(
                       DWORD dwOption,
                                     LPVOID pBuffer,
                            DWORD *pcbBuf,
                            DWORD *pdwFlags,
                            DWORD *pdwReserved) = 0;

    };
#line 4205 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
                HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4233 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;
#line 4243 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IWinInetHttpTimeouts;



    struct __declspec(uuid("F286FA56-C1FD-4270-8E67-B3EB790A81E8")) __declspec(novtable)
    IWinInetHttpTimeouts : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRequestTimeouts(

                   DWORD *pdwConnectTimeout,

                   DWORD *pdwSendTimeout,

                   DWORD *pdwReceiveTimeout) = 0;

    };
#line 4335 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec;







typedef IWinInetCacheHints *LPWININETCACHEHINTS;


extern "C" const IID IID_IWinInetCacheHints;



    struct __declspec(uuid("DD1EC3B3-8391-4fdb-A9E6-347C3CAAA7DD")) __declspec(novtable)
    IWinInetCacheHints : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension(
                       LPCWSTR pwzExt,
                                     LPVOID pszCacheFile,
                            DWORD *pcbCacheFile,
                            DWORD *pdwWinInetError,
                            DWORD *pdwReserved) = 0;

    };
#line 4438 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec;







typedef IWinInetCacheHints2 *LPWININETCACHEHINTS2;


extern "C" const IID IID_IWinInetCacheHints2;



    struct __declspec(uuid("7857AEAC-D31F-49bf-884E-DD46DF36780A")) __declspec(novtable)
    IWinInetCacheHints2 : public IWinInetCacheHints
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension2(
                       LPCWSTR pwzExt,

                                               WCHAR *pwzCacheFile,
                            DWORD *pcchCacheFile,
                        DWORD *pdwWinInetError,
                        DWORD *pdwReserved) = 0;

    };
#line 4554 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;







typedef IBindHost *LPBINDHOST;


extern "C" const IID IID_IBindHost;



    struct __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352")) __declspec(novtable)
    IBindHost : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateMoniker(
                                 LPOLESTR szName,
                                     IBindCtx *pBC,
                                             IMoniker **ppmk,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall MonikerBindToStorage(
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID & riid,
                        void **ppvObj) = 0;

        virtual HRESULT __stdcall MonikerBindToObject(
                       IMoniker *pMk,
                       IBindCtx *pBC,
                       IBindStatusCallback *pBSC,
                       const IID & riid,
                        void **ppvObj) = 0;

    };
#line 4680 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
                HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 4728 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
struct IBindStatusCallback;
extern "C" HRESULT __stdcall HlinkSimpleNavigateToString(
             LPCWSTR szTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern "C" HRESULT __stdcall HlinkSimpleNavigateToMoniker(
             IMoniker *pmkTarget,
             LPCWSTR szLocation,
             LPCWSTR szTargetFrameName,
             IUnknown *pUnk,
             IBindCtx *pbc,
             IBindStatusCallback *,
               DWORD grfHLNF,
               DWORD dwReserved
);

extern "C" HRESULT __stdcall URLOpenStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenPullStreamA( LPUNKNOWN, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenPullStreamW( LPUNKNOWN, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToFileA( LPUNKNOWN, LPCSTR, LPCSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToFileW( LPUNKNOWN, LPCWSTR, LPCWSTR,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToCacheFileA( LPUNKNOWN, LPCSTR, LPSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToCacheFileW( LPUNKNOWN, LPCWSTR, LPWSTR, DWORD cchFileName, DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenBlockingStreamA( LPUNKNOWN, LPCSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenBlockingStreamW( LPUNKNOWN, LPCWSTR, LPSTREAM*,DWORD, LPBINDSTATUSCALLBACK);
#line 4777 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall HlinkGoBack( IUnknown *pUnk);
extern "C" HRESULT __stdcall HlinkGoForward( IUnknown *pUnk);
extern "C" HRESULT __stdcall HlinkNavigateString( IUnknown *pUnk, LPCWSTR szTarget);
extern "C" HRESULT __stdcall HlinkNavigateMoniker( IUnknown *pUnk, IMoniker *pmkTarget);
#line 4797 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;







typedef IInternet *LPIINTERNET;


extern "C" const IID IID_IInternet;



    struct __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternet : public IUnknown
    {
    public:
    };
#line 4880 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;







typedef IInternetBindInfo *LPIINTERNETBINDINFO;

typedef
enum tagBINDSTRING
    {
        BINDSTRING_HEADERS = 1,
        BINDSTRING_ACCEPT_MIMES = ( BINDSTRING_HEADERS + 1 ) ,
        BINDSTRING_EXTRA_URL = ( BINDSTRING_ACCEPT_MIMES + 1 ) ,
        BINDSTRING_LANGUAGE = ( BINDSTRING_EXTRA_URL + 1 ) ,
        BINDSTRING_USERNAME = ( BINDSTRING_LANGUAGE + 1 ) ,
        BINDSTRING_PASSWORD = ( BINDSTRING_USERNAME + 1 ) ,
        BINDSTRING_UA_PIXELS = ( BINDSTRING_PASSWORD + 1 ) ,
        BINDSTRING_UA_COLOR = ( BINDSTRING_UA_PIXELS + 1 ) ,
        BINDSTRING_OS = ( BINDSTRING_UA_COLOR + 1 ) ,
        BINDSTRING_USER_AGENT = ( BINDSTRING_OS + 1 ) ,
        BINDSTRING_ACCEPT_ENCODINGS = ( BINDSTRING_USER_AGENT + 1 ) ,
        BINDSTRING_POST_COOKIE = ( BINDSTRING_ACCEPT_ENCODINGS + 1 ) ,
        BINDSTRING_POST_DATA_MIME = ( BINDSTRING_POST_COOKIE + 1 ) ,
        BINDSTRING_URL = ( BINDSTRING_POST_DATA_MIME + 1 ) ,
        BINDSTRING_IID = ( BINDSTRING_URL + 1 ) ,
        BINDSTRING_FLAG_BIND_TO_OBJECT = ( BINDSTRING_IID + 1 ) ,
        BINDSTRING_PTR_BIND_CONTEXT = ( BINDSTRING_FLAG_BIND_TO_OBJECT + 1 ) ,
        BINDSTRING_XDR_ORIGIN = ( BINDSTRING_PTR_BIND_CONTEXT + 1 ) ,
        BINDSTRING_DOWNLOADPATH = ( BINDSTRING_XDR_ORIGIN + 1 ) ,
        BINDSTRING_ROOTDOC_URL = ( BINDSTRING_DOWNLOADPATH + 1 ) ,
        BINDSTRING_INITIAL_FILENAME = ( BINDSTRING_ROOTDOC_URL + 1 ) ,
        BINDSTRING_PROXY_USERNAME = ( BINDSTRING_INITIAL_FILENAME + 1 ) ,
        BINDSTRING_PROXY_PASSWORD = ( BINDSTRING_PROXY_USERNAME + 1 )
    } BINDSTRING;


extern "C" const IID IID_IInternetBindInfo;



    struct __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetBindInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindInfo(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo) = 0;

        virtual HRESULT __stdcall GetBindString(
                       ULONG ulStringType,

                        LPOLESTR *ppwzStr,
                       ULONG cEl,
                            ULONG *pcElFetched) = 0;

    };
#line 5021 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;







typedef IInternetBindInfoEx *LPIINTERNETBINDINFOEX;


extern "C" const IID IID_IInternetBindInfoEx;



    struct __declspec(uuid("a3e015b7-a82c-4dcd-a150-569aeeed36ab")) __declspec(novtable)
    IInternetBindInfoEx : public IInternetBindInfo
    {
    public:
        virtual HRESULT __stdcall GetBindInfoEx(
                        DWORD *grfBINDF,
                                    BINDINFO *pbindinfo,
                        DWORD *grfBINDF2,
                        DWORD *pdwReserved) = 0;

    };
#line 5140 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;







typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef
enum _tagPI_FLAGS
    {
        PI_PARSE_URL = 0x1,
        PI_FILTER_MODE = 0x2,
        PI_FORCE_ASYNC = 0x4,
        PI_USE_WORKERTHREAD = 0x8,
        PI_MIMEVERIFICATION = 0x10,
        PI_CLSIDLOOKUP = 0x20,
        PI_DATAPROGRESS = 0x40,
        PI_SYNCHRONOUS = 0x80,
        PI_APARTMENTTHREADED = 0x100,
        PI_CLASSINSTALL = 0x200,
        PI_PASSONBINDCTX = 0x2000,
        PI_NOMIMEHANDLER = 0x8000,
        PI_LOADAPPDIRECT = 0x4000,
        PD_FORCE_SWITCH = 0x10000,
        PI_PREFERDEFAULTHANDLER = 0x20000
    } PI_FLAGS;

typedef struct _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    } PROTOCOLDATA;

typedef struct _tagStartParam
    {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } StartParam;


extern "C" const IID IID_IInternetProtocolRoot;



    struct __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolRoot : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Start(
                       LPCWSTR szUrl,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved) = 0;

        virtual HRESULT __stdcall Continue(
                       PROTOCOLDATA *pProtocolData) = 0;

        virtual HRESULT __stdcall Abort(
                       HRESULT hrReason,
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall Terminate(
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall Suspend( void) = 0;

        virtual HRESULT __stdcall Resume( void) = 0;

    };
#line 5324 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;







typedef IInternetProtocol *LPIINTERNETPROTOCOL;


extern "C" const IID IID_IInternetProtocol;



    struct __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocol : public IInternetProtocolRoot
    {
    public:
        virtual HRESULT __stdcall Read(
                                                void *pv,
                       ULONG cb,
                        ULONG *pcbRead) = 0;

        virtual HRESULT __stdcall Seek(
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,
                        ULARGE_INTEGER *plibNewPosition) = 0;

        virtual HRESULT __stdcall LockRequest(
                       DWORD dwOptions) = 0;

        virtual HRESULT __stdcall UnlockRequest( void) = 0;

    };
#line 5500 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec;
#line 5510 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetProtocolEx;



    struct __declspec(uuid("C7A98E66-1010-492c-A1C8-C809E1F75905")) __declspec(novtable)
    IInternetProtocolEx : public IInternetProtocol
    {
    public:
        virtual HRESULT __stdcall StartEx(
                       IUri *pUri,
                       IInternetProtocolSink *pOIProtSink,
                       IInternetBindInfo *pOIBindInfo,
                       DWORD grfPI,
                       HANDLE_PTR dwReserved) = 0;

    };
#line 5678 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;







typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;


extern "C" const IID IID_IInternetProtocolSink;



    struct __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Switch(
                       PROTOCOLDATA *pProtocolData) = 0;

        virtual HRESULT __stdcall ReportProgress(
                       ULONG ulStatusCode,
                       LPCWSTR szStatusText) = 0;

        virtual HRESULT __stdcall ReportData(
                       DWORD grfBSCF,
                       ULONG ulProgress,
                       ULONG ulProgressMax) = 0;

        virtual HRESULT __stdcall ReportResult(
                       HRESULT hrResult,
                       DWORD dwError,
                       LPCWSTR szResult) = 0;

    };
#line 5811 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;







typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;


extern "C" const IID IID_IInternetProtocolSinkStackable;



    struct __declspec(uuid("79eac9f0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSinkStackable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchSink(
                       IInternetProtocolSink *pOIProtSink) = 0;

        virtual HRESULT __stdcall CommitSwitch( void) = 0;

        virtual HRESULT __stdcall RollbackSwitch( void) = 0;

    };
#line 5920 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;







typedef IInternetSession *LPIINTERNETSESSION;

typedef
enum _tagOIBDG_FLAGS
    {
        OIBDG_APARTMENTTHREADED = 0x100,
        OIBDG_DATAONLY = 0x1000
    } OIBDG_FLAGS;


extern "C" const IID IID_IInternetSession;



    struct __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSession : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterNameSpace(
                       IClassFactory *pCF,
                       const IID & rclsid,
                       LPCWSTR pwzProtocol,
                       ULONG cPatterns,
                       const LPCWSTR *ppwzPatterns,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall UnregisterNameSpace(
                       IClassFactory *pCF,
                       LPCWSTR pszProtocol) = 0;

        virtual HRESULT __stdcall RegisterMimeFilter(
                       IClassFactory *pCF,
                       const IID & rclsid,
                       LPCWSTR pwzType) = 0;

        virtual HRESULT __stdcall UnregisterMimeFilter(
                       IClassFactory *pCF,
                       LPCWSTR pwzType) = 0;

        virtual HRESULT __stdcall CreateBinding(
                       LPBC pBC,
                       LPCWSTR szUrl,
                       IUnknown *pUnkOuter,
                                IUnknown **ppUnk,
                                IInternetProtocol **ppOInetProt,
                       DWORD dwOption) = 0;

        virtual HRESULT __stdcall SetSessionOption(
                       DWORD dwOption,
                       LPVOID pBuffer,
                       DWORD dwBufferLength,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall GetSessionOption(
                       DWORD dwOption,
                            LPVOID pBuffer,
                            DWORD *pdwBufferLength,
                       DWORD dwReserved) = 0;

    };
#line 6120 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;







typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;


extern "C" const IID IID_IInternetThreadSwitch;



    struct __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetThreadSwitch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Prepare( void) = 0;

        virtual HRESULT __stdcall Continue( void) = 0;

    };
#line 6219 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;







typedef IInternetPriority *LPIINTERNETPRIORITY;


extern "C" const IID IID_IInternetPriority;



    struct __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetPriority : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPriority(
                       LONG nPriority) = 0;

        virtual HRESULT __stdcall GetPriority(
                        LONG *pnPriority) = 0;

    };
#line 6322 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;







typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef
enum _tagPARSEACTION
    {
        PARSE_CANONICALIZE = 1,
        PARSE_FRIENDLY = ( PARSE_CANONICALIZE + 1 ) ,
        PARSE_SECURITY_URL = ( PARSE_FRIENDLY + 1 ) ,
        PARSE_ROOTDOCUMENT = ( PARSE_SECURITY_URL + 1 ) ,
        PARSE_DOCUMENT = ( PARSE_ROOTDOCUMENT + 1 ) ,
        PARSE_ANCHOR = ( PARSE_DOCUMENT + 1 ) ,
        PARSE_ENCODE_IS_UNESCAPE = ( PARSE_ANCHOR + 1 ) ,
        PARSE_DECODE_IS_ESCAPE = ( PARSE_ENCODE_IS_UNESCAPE + 1 ) ,
        PARSE_PATH_FROM_URL = ( PARSE_DECODE_IS_ESCAPE + 1 ) ,
        PARSE_URL_FROM_PATH = ( PARSE_PATH_FROM_URL + 1 ) ,
        PARSE_MIME = ( PARSE_URL_FROM_PATH + 1 ) ,
        PARSE_SERVER = ( PARSE_MIME + 1 ) ,
        PARSE_SCHEMA = ( PARSE_SERVER + 1 ) ,
        PARSE_SITE = ( PARSE_SCHEMA + 1 ) ,
        PARSE_DOMAIN = ( PARSE_SITE + 1 ) ,
        PARSE_LOCATION = ( PARSE_DOMAIN + 1 ) ,
        PARSE_SECURITY_DOMAIN = ( PARSE_LOCATION + 1 ) ,
        PARSE_ESCAPE = ( PARSE_SECURITY_DOMAIN + 1 ) ,
        PARSE_UNESCAPE = ( PARSE_ESCAPE + 1 )
    } PARSEACTION;

typedef
enum _tagPSUACTION
    {
        PSU_DEFAULT = 1,
        PSU_SECURITY_URL_ONLY = ( PSU_DEFAULT + 1 )
    } PSUACTION;

typedef
enum _tagQUERYOPTION
    {
        QUERY_EXPIRATION_DATE = 1,
        QUERY_TIME_OF_LAST_CHANGE = ( QUERY_EXPIRATION_DATE + 1 ) ,
        QUERY_CONTENT_ENCODING = ( QUERY_TIME_OF_LAST_CHANGE + 1 ) ,
        QUERY_CONTENT_TYPE = ( QUERY_CONTENT_ENCODING + 1 ) ,
        QUERY_REFRESH = ( QUERY_CONTENT_TYPE + 1 ) ,
        QUERY_RECOMBINE = ( QUERY_REFRESH + 1 ) ,
        QUERY_CAN_NAVIGATE = ( QUERY_RECOMBINE + 1 ) ,
        QUERY_USES_NETWORK = ( QUERY_CAN_NAVIGATE + 1 ) ,
        QUERY_IS_CACHED = ( QUERY_USES_NETWORK + 1 ) ,
        QUERY_IS_INSTALLEDENTRY = ( QUERY_IS_CACHED + 1 ) ,
        QUERY_IS_CACHED_OR_MAPPED = ( QUERY_IS_INSTALLEDENTRY + 1 ) ,
        QUERY_USES_CACHE = ( QUERY_IS_CACHED_OR_MAPPED + 1 ) ,
        QUERY_IS_SECURE = ( QUERY_USES_CACHE + 1 ) ,
        QUERY_IS_SAFE = ( QUERY_IS_SECURE + 1 ) ,
        QUERY_USES_HISTORYFOLDER = ( QUERY_IS_SAFE + 1 ) ,
        QUERY_IS_CACHED_AND_USABLE_OFFLINE = ( QUERY_USES_HISTORYFOLDER + 1 )
    } QUERYOPTION;


extern "C" const IID IID_IInternetProtocolInfo;



    struct __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseUrl(
                       LPCWSTR pwzUrl,
                       PARSEACTION ParseAction,
                       DWORD dwParseFlags,

                        LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall CombineUrl(
                       LPCWSTR pwzBaseUrl,
                       LPCWSTR pwzRelativeUrl,
                       DWORD dwCombineFlags,

                       LPWSTR pwzResult,
                       DWORD cchResult,
                        DWORD *pcchResult,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall CompareUrl(
                       LPCWSTR pwzUrl1,
                       LPCWSTR pwzUrl2,
                       DWORD dwCompareFlags) = 0;

        virtual HRESULT __stdcall QueryInfo(
                       LPCWSTR pwzUrl,
                       QUERYOPTION OueryOption,
                       DWORD dwQueryFlags,
                                     LPVOID pBuffer,
                       DWORD cbBuffer,
                            DWORD *pcbBuf,
                       DWORD dwReserved) = 0;

    };
#line 6585 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetParseUrl(
                                             LPCWSTR pwzUrl,
                                             PARSEACTION ParseAction,
                                             DWORD dwFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );

extern "C" HRESULT __stdcall CoInternetParseIUri(
                                             IUri *pIUri,
                                             PARSEACTION ParseAction,
                                             DWORD dwFlags,
                                             LPWSTR pwzResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD_PTR dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCombineUrl(
                                             LPCWSTR pwzBaseUrl,
                                             LPCWSTR pwzRelativeUrl,
                                             DWORD dwCombineFlags,
                                             LPWSTR pszResult,
                                             DWORD cchResult,
                                             DWORD *pcchResult,
                                             DWORD dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCombineUrlEx(
                 IUri *pBaseUri,
                 LPCWSTR pwzRelativeUrl,
                 DWORD dwCombineFlags,
                 IUri **ppCombinedUri,
                 DWORD_PTR dwReserved
    );
extern "C" HRESULT __stdcall CoInternetCombineIUri (
                 IUri *pBaseUri,
                 IUri *pRelativeUri,
                 DWORD dwCombineFlags,
                 IUri **ppCombinedUri,
                 DWORD_PTR dwReserved
    );

extern "C" HRESULT __stdcall CoInternetCompareUrl(
    LPCWSTR pwzUrl1,
    LPCWSTR pwzUrl2,
    DWORD dwFlags
    );
extern "C" HRESULT __stdcall CoInternetGetProtocolFlags(
             LPCWSTR pwzUrl,
             DWORD *pdwFlags,
             DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetQueryInfo(
                                                 LPCWSTR pwzUrl,
                                                 QUERYOPTION QueryOptions,
                                                 DWORD dwQueryFlags,
                                                 LPVOID pvBuffer,
                                                 DWORD cbBuffer,
                                                 DWORD *pcbBuffer,
                                                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetGetSession(
                 DWORD dwSessionMode,
                 IInternetSession **ppIInternetSession,
                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall CoInternetGetSecurityUrl(
                 LPCWSTR pwszUrl,
                 LPWSTR *ppwszSecUrl,
                 PSUACTION psuAction,
                 DWORD dwReserved
    );
extern "C" HRESULT __stdcall AsyncInstallDistributionUnit(
         LPCWSTR szDistUnit,
             LPCWSTR szTYPE,
             LPCWSTR szExt,
    DWORD dwFileVersionMS,
    DWORD dwFileVersionLS,
             LPCWSTR szURL,
         IBindCtx *pbc,
               LPVOID pvReserved,
    DWORD flags
    );

extern "C" HRESULT __stdcall CoInternetGetSecurityUrlEx(
                 IUri *pUri,
                 IUri **ppSecUri,
                 PSUACTION psuAction,
                 DWORD_PTR dwReserved
    );




typedef
enum _tagINTERNETFEATURELIST
    {
        FEATURE_OBJECT_CACHING = 0,
        FEATURE_ZONE_ELEVATION = ( FEATURE_OBJECT_CACHING + 1 ) ,
        FEATURE_MIME_HANDLING = ( FEATURE_ZONE_ELEVATION + 1 ) ,
        FEATURE_MIME_SNIFFING = ( FEATURE_MIME_HANDLING + 1 ) ,
        FEATURE_WINDOW_RESTRICTIONS = ( FEATURE_MIME_SNIFFING + 1 ) ,
        FEATURE_WEBOC_POPUPMANAGEMENT = ( FEATURE_WINDOW_RESTRICTIONS + 1 ) ,
        FEATURE_BEHAVIORS = ( FEATURE_WEBOC_POPUPMANAGEMENT + 1 ) ,
        FEATURE_DISABLE_MK_PROTOCOL = ( FEATURE_BEHAVIORS + 1 ) ,
        FEATURE_LOCALMACHINE_LOCKDOWN = ( FEATURE_DISABLE_MK_PROTOCOL + 1 ) ,
        FEATURE_SECURITYBAND = ( FEATURE_LOCALMACHINE_LOCKDOWN + 1 ) ,
        FEATURE_RESTRICT_ACTIVEXINSTALL = ( FEATURE_SECURITYBAND + 1 ) ,
        FEATURE_VALIDATE_NAVIGATE_URL = ( FEATURE_RESTRICT_ACTIVEXINSTALL + 1 ) ,
        FEATURE_RESTRICT_FILEDOWNLOAD = ( FEATURE_VALIDATE_NAVIGATE_URL + 1 ) ,
        FEATURE_ADDON_MANAGEMENT = ( FEATURE_RESTRICT_FILEDOWNLOAD + 1 ) ,
        FEATURE_PROTOCOL_LOCKDOWN = ( FEATURE_ADDON_MANAGEMENT + 1 ) ,
        FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = ( FEATURE_PROTOCOL_LOCKDOWN + 1 ) ,
        FEATURE_SAFE_BINDTOOBJECT = ( FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1 ) ,
        FEATURE_UNC_SAVEDFILECHECK = ( FEATURE_SAFE_BINDTOOBJECT + 1 ) ,
        FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = ( FEATURE_UNC_SAVEDFILECHECK + 1 ) ,
        FEATURE_TABBED_BROWSING = ( FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1 ) ,
        FEATURE_SSLUX = ( FEATURE_TABBED_BROWSING + 1 ) ,
        FEATURE_DISABLE_NAVIGATION_SOUNDS = ( FEATURE_SSLUX + 1 ) ,
        FEATURE_DISABLE_LEGACY_COMPRESSION = ( FEATURE_DISABLE_NAVIGATION_SOUNDS + 1 ) ,
        FEATURE_FORCE_ADDR_AND_STATUS = ( FEATURE_DISABLE_LEGACY_COMPRESSION + 1 ) ,
        FEATURE_XMLHTTP = ( FEATURE_FORCE_ADDR_AND_STATUS + 1 ) ,
        FEATURE_DISABLE_TELNET_PROTOCOL = ( FEATURE_XMLHTTP + 1 ) ,
        FEATURE_FEEDS = ( FEATURE_DISABLE_TELNET_PROTOCOL + 1 ) ,
        FEATURE_BLOCK_INPUT_PROMPTS = ( FEATURE_FEEDS + 1 ) ,
        FEATURE_ENTRY_COUNT = ( FEATURE_BLOCK_INPUT_PROMPTS + 1 )
    } INTERNETFEATURELIST;
#line 6742 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetSetFeatureEnabled(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
    BOOL fEnable
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabled(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForUrl(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
             LPCWSTR szURL,
             IInternetSecurityManager *pSecMgr
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForIUri(
    INTERNETFEATURELIST FeatureEntry,
    DWORD dwFlags,
             IUri * pIUri,
             IInternetSecurityManagerEx2 *pSecMgr
    );
extern "C" HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled(
             LPCWSTR szFromURL,
         LPCWSTR szToURL,
             IInternetSecurityManager *pSecMgr,
    DWORD dwFlags
    );


extern "C" HRESULT __stdcall CopyStgMedium( const STGMEDIUM * pcstgmedSrc,
                                STGMEDIUM * pstgmedDest);
extern "C" HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,
                               BINDINFO * pbiDest );
extern "C" void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );
#line 6798 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" PWSTR __stdcall IEGetUserPrivateNamespaceName();



extern "C" HRESULT __stdcall CoInternetCreateSecurityManager( IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern "C" HRESULT __stdcall CoInternetCreateZoneManager( IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern "C" const IID CLSID_InternetSecurityManager;
extern "C" const IID CLSID_InternetZoneManager;

extern "C" const IID CLSID_PersistentZoneIdentifier;
#line 6830 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;
#line 6840 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityMgrSite;



    struct __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityMgrSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow(
                        HWND *phwnd) = 0;

        virtual HRESULT __stdcall EnableModeless(
                       BOOL fEnable) = 0;

    };
#line 6931 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;
#line 6952 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
typedef
enum __MIDL_IInternetSecurityManager_0001
    {
        PUAF_DEFAULT = 0,
        PUAF_NOUI = 0x1,
        PUAF_ISFILE = 0x2,
        PUAF_WARN_IF_DENIED = 0x4,
        PUAF_FORCEUI_FOREGROUND = 0x8,
        PUAF_CHECK_TIFS = 0x10,
        PUAF_DONTCHECKBOXINDIALOG = 0x20,
        PUAF_TRUSTED = 0x40,
        PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
        PUAF_ENFORCERESTRICTED = 0x100,
        PUAF_NOSAVEDFILECHECK = 0x200,
        PUAF_REQUIRESAVEDFILECHECK = 0x400,
        PUAF_DONT_USE_CACHE = 0x1000,
        PUAF_RESERVED1 = 0x2000,
        PUAF_RESERVED2 = 0x4000,
        PUAF_LMZ_UNLOCKED = 0x10000,
        PUAF_LMZ_LOCKED = 0x20000,
        PUAF_DEFAULTZONEPOL = 0x40000,
        PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
        PUAF_NOUIIFLOCKED = 0x100000,
        PUAF_DRAGPROTOCOLCHECK = 0x200000
    } PUAF;

typedef
enum __MIDL_IInternetSecurityManager_0002
    {
        PUAFOUT_DEFAULT = 0,
        PUAFOUT_ISLOCKZONEPOLICY = 0x1
    } PUAFOUT;







typedef
enum __MIDL_IInternetSecurityManager_0003
    {
        SZM_CREATE = 0,
        SZM_DELETE = 0x1
    } SZM_FLAGS;
#line 7013 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityManager;



    struct __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSecuritySite(
                                             IInternetSecurityMgrSite *pSite) = 0;

        virtual HRESULT __stdcall GetSecuritySite(
                                             IInternetSecurityMgrSite **ppSite) = 0;

        virtual HRESULT __stdcall MapUrlToZone(
                                 LPCWSTR pwszUrl,
                                   DWORD *pdwZone,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetSecurityId(
                                 LPCWSTR pwszUrl,
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall ProcessUrlAction(
                                 LPCWSTR pwszUrl,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                             BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicy(
                                 LPCWSTR pwszUrl,
                                 const GUID & guidKey,
                                                                                       BYTE **ppPolicy,
                                   DWORD *pcbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall SetZoneMapping(
                       DWORD dwZone,
                                 LPCWSTR lpszPattern,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneMappings(
                       DWORD dwZone,
                                             IEnumString **ppenumString,
                       DWORD dwFlags) = 0;

    };
#line 7209 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec;
#line 7224 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityManagerEx;



    struct __declspec(uuid("F164EDF1-CC7C-4f0d-9A94-34222625C393")) __declspec(novtable)
    IInternetSecurityManagerEx : public IInternetSecurityManager
    {
    public:
        virtual HRESULT __stdcall ProcessUrlActionEx(
                                 LPCWSTR pwszUrl,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved,
                                   DWORD *pdwOutFlags) = 0;

    };
#line 7402 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec;
#line 7414 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetSecurityManagerEx2;



    struct __declspec(uuid("F1E50292-A795-4117-8E09-2B560A72AC60")) __declspec(novtable)
    IInternetSecurityManagerEx2 : public IInternetSecurityManagerEx
    {
    public:
        virtual HRESULT __stdcall MapUrlToZoneEx2(

                  IUri *pUri,
                                   DWORD *pdwZone,
                       DWORD dwFlags,

                          LPWSTR *ppwszMappedUrl,

                       DWORD *pdwOutFlags) = 0;

        virtual HRESULT __stdcall ProcessUrlActionEx2(

                  IUri *pUri,
                       DWORD dwAction,
                                                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                                             BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD_PTR dwReserved,
                                   DWORD *pdwOutFlags) = 0;

        virtual HRESULT __stdcall GetSecurityIdEx2(

                  IUri *pUri,
                                                                        BYTE *pbSecurityId,
                                         DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicyEx2(

                  IUri *pUri,
                                 const GUID & guidKey,
                                                                                       BYTE **ppPolicy,
                                   DWORD *pcbPolicy,
                                 BYTE *pContext,
                       DWORD cbContext,
                       DWORD_PTR dwReserved) = 0;

    };
#line 7674 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec;
#line 7684 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IZoneIdentifier;



    struct __declspec(uuid("cd45f185-1b21-48e2-967b-ead743a8914e")) __declspec(novtable)
    IZoneIdentifier : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetId(
                                   DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall SetId(
                       DWORD dwZone) = 0;

        virtual HRESULT __stdcall Remove( void) = 0;

    };
#line 7786 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec;
#line 7796 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetHostSecurityManager;



    struct __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4")) __declspec(novtable)
    IInternetHostSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetSecurityId(

                                          BYTE *pbSecurityId,

                                                                                                                 DWORD *pcbSecurityId,
                       DWORD_PTR dwReserved) = 0;

        virtual HRESULT __stdcall ProcessUrlAction(
                       DWORD dwAction,

                                        BYTE *pPolicy,
                       DWORD cbPolicy,

                                       BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwFlags,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall QueryCustomPolicy(
                       const GUID & guidKey,

                                                              BYTE **ppPolicy,

                   DWORD *pcbPolicy,

                                   BYTE *pContext,
                       DWORD cbContext,
                       DWORD dwReserved) = 0;

    };
#line 8194 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED;





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;







typedef IInternetZoneManager *LPURLZONEMANAGER;

typedef
enum tagURLZONE
    {
        URLZONE_INVALID = -1,
        URLZONE_PREDEFINED_MIN = 0,
        URLZONE_LOCAL_MACHINE = 0,
        URLZONE_INTRANET = ( URLZONE_LOCAL_MACHINE + 1 ) ,
        URLZONE_TRUSTED = ( URLZONE_INTRANET + 1 ) ,
        URLZONE_INTERNET = ( URLZONE_TRUSTED + 1 ) ,
        URLZONE_UNTRUSTED = ( URLZONE_INTERNET + 1 ) ,
        URLZONE_PREDEFINED_MAX = 999,
        URLZONE_USER_MIN = 1000,
        URLZONE_USER_MAX = 10000
    } URLZONE;



typedef
enum tagURLTEMPLATE
    {
        URLTEMPLATE_CUSTOM = 0,
        URLTEMPLATE_PREDEFINED_MIN = 0x10000,
        URLTEMPLATE_LOW = 0x10000,
        URLTEMPLATE_MEDLOW = 0x10500,
        URLTEMPLATE_MEDIUM = 0x11000,
        URLTEMPLATE_MEDHIGH = 0x11500,
        URLTEMPLATE_HIGH = 0x12000,
        URLTEMPLATE_PREDEFINED_MAX = 0x20000
    } URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {
        MAX_ZONE_PATH = 260,
        MAX_ZONE_DESCRIPTION = 200
    } ;
typedef
enum __MIDL_IInternetZoneManager_0002
    {
        ZAFLAGS_CUSTOM_EDIT = 0x1,
        ZAFLAGS_ADD_SITES = 0x2,
        ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
        ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
        ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
        ZAFLAGS_NO_UI = 0x20,
        ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
        ZAFLAGS_UNC_AS_INTRANET = 0x80,
        ZAFLAGS_DETECT_INTRANET = 0x100,
        ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
        ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
        ZAFLAGS_NO_CACHE = 0x40000
    } ZAFLAGS;

typedef struct _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    } ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
#line 8294 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
typedef
enum _URLZONEREG
    {
        URLZONEREG_DEFAULT = 0,
        URLZONEREG_HKLM = ( URLZONEREG_DEFAULT + 1 ) ,
        URLZONEREG_HKCU = ( URLZONEREG_HKLM + 1 )
    } URLZONEREG;
#line 8333 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetZoneManager;



    struct __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetZoneManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributes(
                       DWORD dwZone,

                     ZONEATTRIBUTES *pZoneAttributes) = 0;

        virtual HRESULT __stdcall SetZoneAttributes(
                       DWORD dwZone,

                  ZONEATTRIBUTES *pZoneAttributes) = 0;

        virtual HRESULT __stdcall GetZoneCustomPolicy(
                       DWORD dwZone,
                       const GUID & guidKey,

                                                BYTE **ppPolicy,

                   DWORD *pcbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall SetZoneCustomPolicy(
                       DWORD dwZone,
                       const GUID & guidKey,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall GetZoneActionPolicy(
                       DWORD dwZone,
                       DWORD dwAction,

                                    BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall SetZoneActionPolicy(
                       DWORD dwZone,
                       DWORD dwAction,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg) = 0;

        virtual HRESULT __stdcall PromptAction(
                       DWORD dwAction,
                       HWND hwndParent,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwPromptFlags) = 0;

        virtual HRESULT __stdcall LogAction(
                       DWORD dwAction,
                       LPCWSTR pwszUrl,
                       LPCWSTR pwszText,
                       DWORD dwLogFlags) = 0;

        virtual HRESULT __stdcall CreateZoneEnumerator(
                        DWORD *pdwEnum,
                        DWORD *pdwCount,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneAt(
                       DWORD dwEnum,
                       DWORD dwIndex,
                        DWORD *pdwZone) = 0;

        virtual HRESULT __stdcall DestroyZoneEnumerator(
                       DWORD dwEnum) = 0;

        virtual HRESULT __stdcall CopyTemplatePoliciesToZone(
                       DWORD dwTemplate,
                       DWORD dwZone,
                       DWORD dwReserved) = 0;

    };
#line 8601 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;
#line 8619 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetZoneManagerEx;



    struct __declspec(uuid("A4C23339-8E06-431e-9BF4-7E711C085648")) __declspec(novtable)
    IInternetZoneManagerEx : public IInternetZoneManager
    {
    public:
        virtual HRESULT __stdcall GetZoneActionPolicyEx(
                       DWORD dwZone,
                       DWORD dwAction,

                                    BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall SetZoneActionPolicyEx(
                       DWORD dwZone,
                       DWORD dwAction,

                                  BYTE *pPolicy,
                       DWORD cbPolicy,
                       URLZONEREG urlZoneReg,
                       DWORD dwFlags) = 0;

    };
#line 8861 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec;
#line 8874 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IInternetZoneManagerEx2;



    struct __declspec(uuid("EDC17559-DD5D-4846-8EEF-8BECBA5A4ABF")) __declspec(novtable)
    IInternetZoneManagerEx2 : public IInternetZoneManagerEx
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributesEx(
                       DWORD dwZone,
                                    ZONEATTRIBUTES *pZoneAttributes,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetZoneSecurityState(
                       DWORD dwZoneIndex,
                       BOOL fRespectPolicy,
                            LPDWORD pdwState,
                            BOOL *pfPolicyEncountered) = 0;

        virtual HRESULT __stdcall GetIESecurityState(
                       BOOL fRespectPolicy,
                            LPDWORD pdwState,
                            BOOL *pfPolicyEncountered,
                       BOOL fNoCache) = 0;

        virtual HRESULT __stdcall FixUnsecureSettings( void) = 0;

    };
#line 9146 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID CLSID_SoftDistExt;
#line 9161 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
typedef struct _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    } CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    } SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec;
#line 9204 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_ISoftDistExt;



    struct __declspec(uuid("B15B8DC1-C7E1-11d0-8680-00AA00BDCB71")) __declspec(novtable)
    ISoftDistExt : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ProcessSoftDist(
                       LPCWSTR szCDFURL,
                       IXMLElement *pSoftDistElement,
                            LPSOFTDISTINFO lpsdi) = 0;

        virtual HRESULT __stdcall GetFirstCodeBase(

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize) = 0;

        virtual HRESULT __stdcall GetNextCodeBase(

                       LPWSTR *szCodeBase,
                       LPDWORD dwMaxSize) = 0;

        virtual HRESULT __stdcall AsyncInstallDistributionUnit(
                       IBindCtx *pbc,
                       LPVOID pvReserved,
                       DWORD flags,
                       LPCODEBASEHOLD lpcbh) = 0;

    };
#line 9328 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern "C" HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec;







typedef ICatalogFileInfo *LPCATALOGFILEINFO;


extern "C" const IID IID_ICatalogFileInfo;



    struct __declspec(uuid("711C7600-6B48-11d1-B403-00AA00B92AF1")) __declspec(novtable)
    ICatalogFileInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCatalogFile(

                        LPSTR *ppszCatalogFile) = 0;

        virtual HRESULT __stdcall GetJavaTrust(
                        void **ppJavaTrust) = 0;

    };
#line 9440 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec;







typedef IDataFilter *LPDATAFILTER;


extern "C" const IID IID_IDataFilter;



    struct __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IDataFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DoEncode(
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall DoDecode(
                       DWORD dwFlags,
                       LONG lInBufferSize,
                                                                     BYTE *pbInBuffer,
                       LONG lOutBufferSize,
                                                                        BYTE *pbOutBuffer,
                       LONG lInBytesAvailable,
                                   LONG *plInBytesRead,
                                   LONG *plOutBytesWritten,
                       DWORD dwReserved) = 0;

        virtual HRESULT __stdcall SetEncodingLevel(
                       DWORD dwEncLevel) = 0;

    };
#line 9583 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
typedef struct _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec;







typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    } DATAINFO;


extern "C" const IID IID_IEncodingFilterFactory;



    struct __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IEncodingFilterFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FindBestFilter(
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                       DATAINFO info,
                        IDataFilter **ppDF) = 0;

        virtual HRESULT __stdcall GetDefaultFilter(
                       LPCWSTR pwzCodeIn,
                       LPCWSTR pwzCodeOut,
                        IDataFilter **ppDF) = 0;

    };
#line 9714 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
BOOL __stdcall IsLoggingEnabledA( LPCSTR pszUrl);
BOOL __stdcall IsLoggingEnabledW( LPCWSTR pwszUrl);





typedef struct _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    } HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);

struct CONFIRMSAFETY
    {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern "C" const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY;





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec;







typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;


extern "C" const IID IID_IWrappedProtocol;



    struct __declspec(uuid("53c84785-8425-4dc5-971b-e58d9c19f9b6")) __declspec(novtable)
    IWrappedProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWrapperCode(
                        LONG *pnCode,
                       DWORD_PTR dwReserved) = 0;

    };
#line 9841 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec;







typedef IGetBindHandle *LPGETBINDHANDLE;

typedef
enum __MIDL_IGetBindHandle_0001
    {
        BINDHANDLETYPES_APPCACHE = 0,
        BINDHANDLETYPES_DEPENDENCY = 0x1,
        BINDHANDLETYPES_COUNT = ( BINDHANDLETYPES_DEPENDENCY + 1 )
    } BINDHANDLETYPES;


extern "C" const IID IID_IGetBindHandle;



    struct __declspec(uuid("AF0FF408-129D-4b20-91F0-02BD23D88352")) __declspec(novtable)
    IGetBindHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindHandle(
                       BINDHANDLETYPES enumRequestedHandle,
                        HANDLE *pRetHandle) = 0;

    };
#line 9942 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
typedef struct _tagPROTOCOL_ARGUMENT
    {
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
    } PROTOCOL_ARGUMENT;

typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;






extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec;







typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;


extern "C" const IID IID_IBindCallbackRedirect;



    struct __declspec(uuid("11C81BC2-121E-4ed5-B9C4-B430BD54F2C0")) __declspec(novtable)
    IBindCallbackRedirect : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Redirect(
                       LPCWSTR lpcUrl,
                        VARIANT_BOOL *vbCancel) = 0;

    };
#line 10050 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec;
#line 10060 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern "C" const IID IID_IBindHttpSecurity;



    struct __declspec(uuid("a9eda967-f50e-4a33-b358-206f6ef3086d")) __declspec(novtable)
    IBindHttpSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetIgnoreCertMask(
                                        DWORD *pdwIgnoreCertMask) = 0;

    };
#line 10141 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\urlmon.h"
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

              HRESULT __stdcall IBinding_GetBindResult_Proxy(
    IBinding * This,
                CLSID *pclsidProtocol,
                DWORD *pdwResult,

                LPOLESTR *pszResult,
                    DWORD *pdwReserved);


                HRESULT __stdcall IBinding_GetBindResult_Stub(
              IBinding * This,
                           CLSID *pclsidProtocol,
                           DWORD *pdwResult,
                                     LPOLESTR *pszResult,
               DWORD dwReserved);

              HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy(
    IBindStatusCallback * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo);


                HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub(
              IBindStatusCallback * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy(
    IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
               FORMATETC *pformatetc,
               STGMEDIUM *pstgmed);


                HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub(
              IBindStatusCallback * This,
               DWORD grfBSCF,
               DWORD dwSize,
                         RemFORMATETC *pformatetc,
                         RemSTGMEDIUM *pstgmed);

              HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    IBindStatusCallbackEx * This,
                DWORD *grfBINDF,
                            BINDINFO *pbindinfo,
                DWORD *grfBINDF2,
                DWORD *pdwReserved);


                HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Stub(
              IBindStatusCallbackEx * This,
                           DWORD *grfBINDF,
                                             RemBINDINFO *pbindinfo,
                                             RemSTGMEDIUM *pstgmed,
                           DWORD *grfBINDF2,
                           DWORD *pdwReserved);

              HRESULT __stdcall IWinInetInfo_QueryOption_Proxy(
    IWinInetInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf);


                HRESULT __stdcall IWinInetInfo_QueryOption_Stub(
              IWinInetInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf);

              HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy(
    IWinInetHttpInfo * This,
               DWORD dwOption,
                             LPVOID pBuffer,
                    DWORD *pcbBuf,
                    DWORD *pdwFlags,
                    DWORD *pdwReserved);


                HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub(
              IWinInetHttpInfo * This,
               DWORD dwOption,
                                                               BYTE *pBuffer,
                                 DWORD *pcbBuf,
                                 DWORD *pdwFlags,
                                 DWORD *pdwReserved);

              HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID & riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy(
    IBindHost * This,
               IMoniker *pMk,
               IBindCtx *pBC,
               IBindStatusCallback *pBSC,
               const IID & riid,
                void **ppvObj);


                HRESULT __stdcall IBindHost_MonikerBindToObject_Stub(
              IBindHost * This,
                                     IMoniker *pMk,
                                     IBindCtx *pBC,
                                     IBindStatusCallback *pBSC,
                         const IID & riid,
                                             IUnknown **ppvObj);






}
#line 394 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef struct IPropertyStorage IPropertyStorage;






typedef struct IPropertySetStorage IPropertySetStorage;






typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;






typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
#line 76 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
extern "C"{
#line 92 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
#pragma warning(push)

#pragma warning(disable: 4201)
#pragma warning(disable: 4237)
#line 105 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef struct tagVersionedStream
    {
    GUID guidVersion;
    IStream *pStream;
    } VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
#line 137 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct tagCAC
    {
    ULONG cElems;
                    CHAR *pElems;
    } CAC;

typedef struct tagCAUB
    {
    ULONG cElems;
                    UCHAR *pElems;
    } CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
                    SHORT *pElems;
    } CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
                    USHORT *pElems;
    } CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
                    LONG *pElems;
    } CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
                    ULONG *pElems;
    } CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
                    FLOAT *pElems;
    } CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
                    DOUBLE *pElems;
    } CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
                    CY *pElems;
    } CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
                    DATE *pElems;
    } CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
                    BSTR *pElems;
    } CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
                    BSTRBLOB *pElems;
    } CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
                    VARIANT_BOOL *pElems;
    } CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
                    SCODE *pElems;
    } CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
                    PROPVARIANT *pElems;
    } CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
                    LARGE_INTEGER *pElems;
    } CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
                    ULARGE_INTEGER *pElems;
    } CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
                    LPSTR *pElems;
    } CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
                    LPWSTR *pElems;
    } CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
                    FILETIME *pElems;
    } CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
                    CLIPDATA *pElems;
    } CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
                    CLSID *pElems;
    } CACLSID;
#line 281 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;
#line 293 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
struct tagPROPVARIANT {
  union {

struct
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
                                          union
        {

                       CHAR cVal;
                       UCHAR bVal;
                       SHORT iVal;
                       USHORT uiVal;
                       LONG lVal;
                       ULONG ulVal;
                       INT intVal;
                       UINT uintVal;
                       LARGE_INTEGER hVal;
                       ULARGE_INTEGER uhVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;

                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       FILETIME filetime;
                       CLSID *puuid;
                       CLIPDATA *pclipdata;
                       BSTR bstrVal;
                       BSTRBLOB bstrblobVal;
                       BLOB blob;
                       LPSTR pszVal;
                       LPWSTR pwszVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       IStream *pStream;
                       IStorage *pStorage;
                       LPVERSIONEDSTREAM pVersionedStream;
                       LPSAFEARRAY parray;
                       CAC cac;
                       CAUB caub;
                       CAI cai;
                       CAUI caui;
                       CAL cal;
                       CAUL caul;
                       CAH cah;
                       CAUH cauh;
                       CAFLT caflt;
                       CADBL cadbl;
                       CABOOL cabool;
                       CASCODE cascode;
                       CACY cacy;
                       CADATE cadate;
                       CAFILETIME cafiletime;
                       CACLSID cauuid;
                       CACLIPDATA caclipdata;
                       CABSTR cabstr;
                       CABSTRBLOB cabstrblob;
                       CALPSTR calpstr;
                       CALPWSTR calpwstr;
                       CAPROPVARIANT capropvar;
                       CHAR *pcVal;
                       UCHAR *pbVal;
                       SHORT *piVal;
                       USHORT *puiVal;
                       LONG *plVal;
                       ULONG *pulVal;
                       INT *pintVal;
                       UINT *puintVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       DECIMAL *pdecVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       BSTR *pbstrVal;
                       IUnknown **ppunkVal;
                       IDispatch **ppdispVal;
                       LPSAFEARRAY *pparray;
                       PROPVARIANT *pvarVal;
        } ;
    } ;

    DECIMAL decVal;
  };
};
#line 397 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef struct tagPROPVARIANT * LPPROPVARIANT;
#line 497 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
enum PIDMSI_STATUS_VALUE
    {
        PIDMSI_STATUS_NORMAL = 0,
        PIDMSI_STATUS_NEW = ( PIDMSI_STATUS_NORMAL + 1 ) ,
        PIDMSI_STATUS_PRELIM = ( PIDMSI_STATUS_NEW + 1 ) ,
        PIDMSI_STATUS_DRAFT = ( PIDMSI_STATUS_PRELIM + 1 ) ,
        PIDMSI_STATUS_INPROGRESS = ( PIDMSI_STATUS_DRAFT + 1 ) ,
        PIDMSI_STATUS_EDIT = ( PIDMSI_STATUS_INPROGRESS + 1 ) ,
        PIDMSI_STATUS_REVIEW = ( PIDMSI_STATUS_EDIT + 1 ) ,
        PIDMSI_STATUS_PROOF = ( PIDMSI_STATUS_REVIEW + 1 ) ,
        PIDMSI_STATUS_FINAL = ( PIDMSI_STATUS_PROOF + 1 ) ,
        PIDMSI_STATUS_OTHER = 0x7fff
    } ;
#line 520 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef struct tagPROPSPEC
    {
    ULONG ulKind;
                                          union
        {
                       PROPID propid;
                       LPOLESTR lpwstr;

        } ;
    } PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } STATPROPSETSTG;



extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_s_ifspec;
#line 566 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
extern "C" const IID IID_IPropertyStorage;



    struct __declspec(uuid("00000138-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertyStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                                PROPVARIANT rgpropvar[ ]) = 0;

        virtual HRESULT __stdcall WriteMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ],
                                                              const PROPVARIANT rgpropvar[ ],
                       PROPID propidNameFirst) = 0;

        virtual HRESULT __stdcall DeleteMultiple(
                       ULONG cpspec,
                                                              const PROPSPEC rgpspec[ ]) = 0;

        virtual HRESULT __stdcall ReadPropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                                 LPOLESTR rglpwstrName[ ]) = 0;

        virtual HRESULT __stdcall WritePropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ],
                                                               const LPOLESTR rglpwstrName[ ]) = 0;

        virtual HRESULT __stdcall DeletePropertyNames(
                       ULONG cpropid,
                                                               const PROPID rgpropid[ ]) = 0;

        virtual HRESULT __stdcall Commit(
                       DWORD grfCommitFlags) = 0;

        virtual HRESULT __stdcall Revert( void) = 0;

        virtual HRESULT __stdcall Enum(
                                             IEnumSTATPROPSTG **ppenum) = 0;

        virtual HRESULT __stdcall SetTimes(
                                 const FILETIME *pctime,
                                 const FILETIME *patime,
                                 const FILETIME *pmtime) = 0;

        virtual HRESULT __stdcall SetClass(
                                 const IID & clsid) = 0;

        virtual HRESULT __stdcall Stat(
                                   STATPROPSETSTG *pstatpsstg) = 0;

    };
#line 779 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern "C" const IID IID_IPropertySetStorage;



    struct __declspec(uuid("0000013A-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertySetStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Create(
                                 const IID & rfmtid,
                                             const CLSID *pclsid,
                       DWORD grfFlags,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg) = 0;

        virtual HRESULT __stdcall Open(
                                 const IID & rfmtid,
                       DWORD grfMode,
                                             IPropertyStorage **ppprstg) = 0;

        virtual HRESULT __stdcall Delete(
                                 const IID & rfmtid) = 0;

        virtual HRESULT __stdcall Enum(
                                             IEnumSTATPROPSETSTG **ppenum) = 0;

    };
#line 903 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern "C" const IID IID_IEnumSTATPROPSTG;



    struct __declspec(uuid("00000139-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                  STATPROPSTG *rgelt,

                                                  ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATPROPSTG **ppenum) = 0;

    };
#line 1011 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
                HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1035 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern "C" const IID IID_IEnumSTATPROPSETSTG;



    struct __declspec(uuid("0000013B-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSETSTG : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG celt,

                                                  STATPROPSETSTG *rgelt,

                                                  ULONG *pceltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG celt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumSTATPROPSETSTG **ppenum) = 0;

    };
#line 1143 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
                HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1164 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
typedef IPropertyStorage *LPPROPERTYSTORAGE;

               extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantCopy(
                  PROPVARIANT* pvarDest,
                 const PROPVARIANT * pvarSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantClear( PROPVARIANT* pvar);

extern "C" __declspec(dllimport) HRESULT __stdcall FreePropVariantArray(
                 ULONG cVariants,
                                       PROPVARIANT* rgvars);
#line 1183 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
inline void PropVariantInit ( PROPVARIANT * pvar )
{
    memset ( pvar, 0, sizeof(PROPVARIANT) );
}
#line 1200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropStg(
                 IUnknown* pUnk,
                 const IID & fmtid,
                 const CLSID* pclsid,
                 DWORD grfFlags,
                       DWORD dwReserved,
                     IPropertyStorage** ppPropStg);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenPropStg(
                 IUnknown* pUnk,
                 const IID & fmtid,
                 DWORD grfFlags,
                       DWORD dwReserved,
                     IPropertyStorage** ppPropStg);

               extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropSetStg(
                 IStorage* pStorage,
                       DWORD dwReserved,
                     IPropertySetStorage** ppPropSetStg);



               extern "C" __declspec(dllimport) HRESULT __stdcall FmtIdToPropStgName(
                 const FMTID* pfmtid,
                                                 LPOLESTR oszName);

               extern "C" __declspec(dllimport) HRESULT __stdcall PropStgNameToFmtId(
                 const LPOLESTR oszName,
                  FMTID* pfmtid);





typedef struct tagSERIALIZEDPROPERTYVALUE
{
    DWORD dwType;
    BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;
#line 1247 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\propidl.h"
extern "C"

SERIALIZEDPROPERTYVALUE* __stdcall
StgConvertVariantToProperty(
                 const PROPVARIANT* pvar,
                 USHORT CodePage,
                                         SERIALIZEDPROPERTYVALUE* pprop,
                    ULONG* pcb,
                 PROPID pid,
                       BOOLEAN fReserved,
                        ULONG* pcIndirect);


class PMemoryAllocator;

extern "C"

BOOLEAN __stdcall
StgConvertPropertyToVariant(
                 const SERIALIZEDPROPERTYVALUE* pprop,
                 USHORT CodePage,
                  PROPVARIANT* pvar,
                 PMemoryAllocator* pma);






#pragma warning(pop)






extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree( unsigned long *, LPSAFEARRAY * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall LPSAFEARRAY_UserSize64( unsigned long *, unsigned long , LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserMarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
unsigned char * __stdcall LPSAFEARRAY_UserUnmarshal64( unsigned long *, unsigned char *, LPSAFEARRAY * );
void __stdcall LPSAFEARRAY_UserFree64( unsigned long *, LPSAFEARRAY * );

              HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,

                                          STATPROPSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub(
              IEnumSTATPROPSTG * This,
               ULONG celt,
                                                                                STATPROPSTG *rgelt,
                           ULONG *pceltFetched);

              HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,

                                          STATPROPSETSTG *rgelt,

                                          ULONG *pceltFetched);


                HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub(
              IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                                                                STATPROPSETSTG *rgelt,
                           ULONG *pceltFetched);






}
#line 395 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"








extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdProgressIndicator( HWND hwndParent,
                                        LPCOLESTR pszTitle,
                                        IBindStatusCallback * pIbscCaller,
                                            IBindStatusCallback ** ppIbsc);







#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 413 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\objbase.h"
#line 32 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"

#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
#line 23 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/pshpack8.h"
#pragma warning(disable: 4103)

#pragma pack(push,8)
#line 23 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" const IID IID_StdOle;
#line 69 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocString( const OLECHAR * psz);
extern "C" __declspec(dllimport) INT __stdcall SysReAllocString( BSTR* pbstr, const OLECHAR* psz);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringLen( const OLECHAR * strIn, UINT ui);
               extern "C" __declspec(dllimport) INT __stdcall SysReAllocStringLen( BSTR* pbstr, const OLECHAR* psz, unsigned int len);
extern "C" __declspec(dllimport) void __stdcall SysFreeString( BSTR bstrString);
extern "C" __declspec(dllimport) UINT __stdcall SysStringLen( BSTR pbstr);


extern "C" __declspec(dllimport) UINT __stdcall SysStringByteLen( BSTR bstr);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen( LPCSTR psz, UINT len);
#line 92 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime( USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern "C" __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime( DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);
#line 104 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) INT __stdcall SystemTimeToVariantTime( LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern "C" __declspec(dllimport) INT __stdcall VariantTimeToSystemTime( DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
#line 120 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor( UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptorEx( VARTYPE vt, UINT cDims, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateEx( VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound, PVOID pvExtra);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData( SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayRedim( SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetDim( SAFEARRAY * psa);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound( SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound( SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayLock( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData( SAFEARRAY * psa, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData( SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement( SAFEARRAY * psa, LONG * rgIndices, void * pv);

extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopy( SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex( SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetRecordInfo( SAFEARRAY * psa, IRecordInfo * prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetRecordInfo( SAFEARRAY * psa, IRecordInfo ** prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetIID( SAFEARRAY * psa, const GUID & guid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetIID( SAFEARRAY * psa, GUID * pguid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetVartype( SAFEARRAY * psa, VARTYPE * pvt);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector( VARTYPE vt, LONG lLbound, ULONG cElements);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVectorEx( VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
#line 164 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) void __stdcall VariantInit( VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantClear( VARIANTARG * pvarg);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopy( VARIANTARG * pvargDest, const VARIANTARG * pvargSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopyInd( VARIANT * pvarDest, const VARIANTARG * pvargSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeType( VARIANTARG * pvargDest,
                    const VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);

extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx( VARIANTARG * pvargDest,
                    const VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
#line 203 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VectorFromBstr ( BSTR bstr, SAFEARRAY ** ppsa);

extern "C" __declspec(dllimport) HRESULT __stdcall BstrFromVector ( SAFEARRAY *psa, BSTR *pbstr);
#line 281 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI8(LONG64 i64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In, BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDec( const DECIMAL *pdecIn, BYTE *pbOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI8(LONG64 i64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDec( const DECIMAL *pdecIn, SHORT *psOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDec( const DECIMAL *pdecIn, LONG *plOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI1(BYTE bIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI2(SHORT sIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR4(FLOAT fltIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR8(DOUBLE dblIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromCy( CY cyIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDate(DATE dateIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDisp(IDispatch * pdispIn, LCID lcid, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI1(CHAR cIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI2(USHORT uiIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI4(ULONG ulIn, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In, LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDec( const DECIMAL *pdecIn, LONG64 * pi64Out);





extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI8(LONG64 i64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDec( const DECIMAL *pdecIn, FLOAT *pfltOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI8(LONG64 i64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDec( const DECIMAL *pdecIn, DOUBLE *pdblOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI8(LONG64 i64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In, DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDec( const DECIMAL *pdecIn, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI8(LONG64 i64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDisp( IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In, CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDec( const DECIMAL *pdecIn, CY *pcyOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDate( DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDec( const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
               extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI2( SHORT sIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI8(LONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDec( const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI1(
         BYTE bIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI2(
         SHORT uiIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI4(
         LONG lIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromI8(
         LONG64 i64In,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromR4(
         FLOAT fltIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromR8(
         DOUBLE dblIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDate(
         DATE dateIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromCy(
         CY cyIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromStr(
         LPCOLESTR strIn,
         LCID lcid,
         ULONG dwFlags,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDisp(
         IDispatch *pdispIn,
         LCID lcid,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromBool(
         VARIANT_BOOL boolIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI2(
         USHORT uiIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI4(
         ULONG ulIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromUI8(
         ULONG64 i64In,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
VarI1FromDec(
         const DECIMAL *pdecIn,
          CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI8(LONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp( IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDec( const DECIMAL *pdecIn, USHORT *puiOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI2( SHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI8(LONG64 i64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp( IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDec( const DECIMAL *pdecIn, ULONG *pulOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI1(BYTE bIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI2(SHORT sIn, ULONG64 * pi64Out);







extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI4(LONG lIn, ULONG64 * pi64Out);







extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI8(LONG64 ui64In, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR4(FLOAT fltIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromCy(CY cyIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDate(DATE dateIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDisp( IDispatch * pdispIn, LCID lcid, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI1(CHAR cIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI2(USHORT uiIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI4(ULONG ulIn, ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDec( const DECIMAL *pdecIn, ULONG64 * pi64Out);






extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI1( BYTE bIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI2( SHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI4( LONG lIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR4( FLOAT fltIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR8( DOUBLE dblIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDate( DATE dateIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromCy( CY cyIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDisp( IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromBool( VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI1( CHAR cIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI2( USHORT uiIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI4( ULONG ulIn, DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut);
#line 634 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG *plOut);
#line 725 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
typedef struct {
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
} NUMPARSE;
#line 776 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr( LPCOLESTR strIn, LCID lcid, ULONG dwFlags,
                  NUMPARSE * pnumprs, BYTE * rgbDig);


extern "C" __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum( NUMPARSE * pnumprs, BYTE * rgbDig,
                 ULONG dwVtBits, VARIANT * pvar);
#line 793 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" HRESULT __stdcall VarAdd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarAnd( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarCat( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarDiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarEqv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarIdiv( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarImp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMod( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMul( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarOr( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarPow( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarSub( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarXor( LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarAbs( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarFix( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarInt( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNeg( LPVARIANT pvarIn, LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNot( LPVARIANT pvarIn, LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarRound( LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);


extern "C" HRESULT __stdcall VarCmp( LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);





extern "C++" {





__inline
HRESULT

__stdcall

VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid) {
    return VarCmp(pvarLeft, pvarRight, lcid, 0);
}




}
#line 850 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" HRESULT __stdcall VarDecAdd( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecDiv( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecMul( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecSub( LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecAbs( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecFix( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecInt( LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecNeg( LPDECIMAL pdecIn, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecRound( LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecCmp( LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
extern "C" HRESULT __stdcall VarDecCmpR8( LPDECIMAL pdecLeft, double dblRight);




extern "C" HRESULT __stdcall VarCyAdd( CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMul( CY cyLeft, CY cyRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI4( CY cyLeft, LONG lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI8( CY cyLeft, LONG64 lRight, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCySub( CY cyLeft, CY cyRight, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyAbs( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyFix( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyInt( CY cyIn, LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyNeg( CY cyIn, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyRound( CY cyIn, int cDecimals, LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyCmp( CY cyLeft, CY cyRight);
extern "C" HRESULT __stdcall VarCyCmpR8( CY cyLeft, double dblRight);




extern "C" HRESULT __stdcall VarBstrCat( BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
extern "C" HRESULT __stdcall VarBstrCmp( BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
extern "C" HRESULT __stdcall VarR8Pow( double dblLeft, double dblRight, double *pdblResult);
extern "C" HRESULT __stdcall VarR4CmpR8( float fltLeft, double dblRight);
extern "C" HRESULT __stdcall VarR8Round( double dblIn, int cDecimals, double *pdblResult);
#line 920 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
typedef struct {
    SYSTEMTIME st;
    USHORT wDayOfYear;
} UDATE;
#line 934 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdate( UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdateEx( UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUdateFromDate( DATE dateIn, ULONG dwFlags, UDATE *pudateOut);
#line 949 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);
#line 961 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormat(
      LPVARIANT pvarIn,
          LPOLESTR pstrFormat,
 int iFirstDay,
 int iFirstWeek,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatDateTime(
      LPVARIANT pvarIn,
 int iNamedFormat,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatNumber(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatPercent(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatCurrency(
      LPVARIANT pvarIn,
 int iNumDig,
 int iIncLead,
 int iUseParens,
 int iGroup,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarWeekdayName(
 int iWeekday,
 int fAbbrev,
 int iFirstDay,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarMonthName(
 int iMonth,
 int fAbbrev,
 ULONG dwFlags,
       BSTR *pbstrOut
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatFromTokens(
      LPVARIANT pvarIn,
          LPOLESTR pstrFormat,
                                                             LPBYTE pbTokCur,
 ULONG dwFlags,
       BSTR *pbstrOut,
 LCID lcid
 );

extern "C" __declspec(dllimport) HRESULT __stdcall VarTokenizeFormatString(
          LPOLESTR pstrFormat,
         LPBYTE rgbTok,
 int cbTok,
 int iFirstDay,
 int iFirstWeek,
 LCID lcid,
          int *pcbActual
 );
#line 1051 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
typedef ITypeLib *LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;
#line 1083 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
typedef ITypeInfo *LPTYPEINFO;






typedef ITypeComp *LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;
#line 1109 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);



extern "C" __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);
#line 1128 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLib( LPCOLESTR szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;
#line 1147 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);




extern "C" __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID & rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID & guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);




extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, LPCOLESTR szFullPath,
                     LPCOLESTR szHelpDir);





extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID & libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);



extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath,
            OLECHAR *szHelpDir);



extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLibForUser(
    const GUID & libID,
    WORD wMajorVerNum,
    WORD wMinorVerNum,
    LCID lcid,
    SYSKIND syskind);


extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib ** ppctlib);


extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch *LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;
    VARTYPE vt;
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;
    PARAMDATA * ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;
    UINT cMembers;
} INTERFACEDATA, * LPINTERFACEDATA;







extern "C" __declspec(dllimport) HRESULT __stdcall DispGetParam(
      DISPPARAMS * pdispparams,
 UINT position,
 VARTYPE vtTarg,
       VARIANT * pvarResult,
           UINT * puArgErr
 );



               extern "C" __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);
#line 1253 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);
#line 1266 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern "C" __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG_PTR oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);
#line 1293 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
extern "C" __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const IID & rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern "C" __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall GetActiveObject(const IID & rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern "C" __declspec(dllimport) HRESULT __stdcall SetErrorInfo( ULONG dwReserved, IErrorInfo * perrinfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetErrorInfo( ULONG dwReserved, IErrorInfo ** pperrinfo);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateErrorInfo( ICreateErrorInfo ** pperrinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,
            IRecordInfo ** ppRecInfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromGuids(const GUID & rGuidTypeLib,
            ULONG uVerMajor, ULONG uVerMinor, LCID lcid,
            const GUID & rGuidTypeInfo, IRecordInfo ** ppRecInfo);





extern "C" __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern "C" __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);


extern "C" __declspec(dllimport) void __stdcall OaEnablePerUserTLibRegistration(void);
#line 1418 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 1418 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\oleauto.h"
#line 33 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
#line 81 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);




extern "C" __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );







extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStg( LPSTORAGE pStg, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStg( LPSTORAGE pStg, const IID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStm( LPSTREAM pStm, CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStm( LPSTREAM pStm, const IID & rclsid);







               extern "C" __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg ( LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg ( LPSTORAGE pstg, CLIPFORMAT * pcf, LPOLESTR * lplpszUserType);




               extern "C" __declspec(dllimport) HRESULT __stdcall OleInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall OleUninitialize(void);





extern "C" __declspec(dllimport) HRESULT __stdcall OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject);
extern "C" __declspec(dllimport) HRESULT __stdcall OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject);




extern "C" __declspec(dllimport) HRESULT __stdcall OleCreate( const IID & rclsid, const IID & riid, DWORD renderopt,
                   LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateEx( const IID & rclsid, const IID & riid, DWORD dwFlags,
                   DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                    DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromData( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                    DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj, const IID & riid,
                   DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                   LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                       DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                   LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj, const IID & iid,
                   DWORD renderopt, LPFORMATETC pFormatEtc,
                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                    LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLink( LPMONIKER pmkLinkSrc, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkEx( LPMONIKER pmkLinkSrc, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkToFile( LPCOLESTR lpszFileName, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateLinkToFileEx( LPCOLESTR lpszFileName, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromFile( const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
               DWORD renderopt, LPFORMATETC lpFormatEtc,
               LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateFromFileEx( const IID & rclsid, LPCOLESTR lpszFileName, const IID & riid,
               DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
               LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
               LPSTORAGE pStg, LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoad( LPSTORAGE pStg, const IID & riid, LPOLECLIENTSITE pClientSite,
                LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleSave( LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

extern "C" __declspec(dllimport) HRESULT __stdcall OleLoadFromStream( LPSTREAM pStm, const IID & iidInterface, LPVOID * ppvObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


extern "C" __declspec(dllimport) HRESULT __stdcall OleSetContainedObject( LPUNKNOWN pUnknown, BOOL fContained);
extern "C" __declspec(dllimport) HRESULT __stdcall OleNoteObjectVisible( LPUNKNOWN pUnknown, BOOL fVisible);




extern "C" __declspec(dllimport) HRESULT __stdcall RegisterDragDrop( HWND hwnd, LPDROPTARGET pDropTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall RevokeDragDrop( HWND hwnd);
extern "C" __declspec(dllimport) HRESULT __stdcall DoDragDrop( LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
               DWORD dwOKEffects, LPDWORD pdwEffect);



extern "C" __declspec(dllimport) HRESULT __stdcall OleSetClipboard( LPDATAOBJECT pDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetClipboard( LPDATAOBJECT * ppDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleFlushClipboard(void);
extern "C" __declspec(dllimport) HRESULT __stdcall OleIsCurrentClipboard( LPDATAOBJECT pDataObj);



extern "C" __declspec(dllimport) HOLEMENU __stdcall OleCreateMenuDescriptor ( HMENU hmenuCombined,
                                   LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetMenuDescriptor ( HOLEMENU holemenu, HWND hwndFrame,
                                   HWND hwndActiveObject,
                                   LPOLEINPLACEFRAME lpFrame,
                                   LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" __declspec(dllimport) HRESULT __stdcall OleDestroyMenuDescriptor ( HOLEMENU holemenu);

extern "C" __declspec(dllimport) HRESULT __stdcall OleTranslateAccelerator ( LPOLEINPLACEFRAME lpFrame,
                               LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);




extern "C" __declspec(dllimport) HANDLE __stdcall OleDuplicateData ( HANDLE hSrc, CLIPFORMAT cfFormat,
                           UINT uiFlags);



extern "C" __declspec(dllimport) HRESULT __stdcall OleDraw ( LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                       LPCRECT lprcBounds);

               extern "C" __declspec(dllimport) HRESULT __stdcall OleRun( LPUNKNOWN pUnknown);
extern "C" __declspec(dllimport) BOOL __stdcall OleIsRunning( LPOLEOBJECT pObject);
extern "C" __declspec(dllimport) HRESULT __stdcall OleLockRunning( LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);

extern "C" __declspec(dllimport) void __stdcall ReleaseStgMedium( LPSTGMEDIUM);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateOleAdviseHolder( LPOLEADVISEHOLDER * ppOAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateDefaultHandler( const IID & clsid, LPUNKNOWN pUnkOuter,
                       const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) HRESULT __stdcall OleCreateEmbeddingHelper( const IID & clsid, LPUNKNOWN pUnkOuter,
                       DWORD flags, LPCLASSFACTORY pCF,
                       const IID & riid, LPVOID * lplpObj);

extern "C" __declspec(dllimport) BOOL __stdcall IsAccelerator( HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
                                            WORD * lpwCmd);


extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile( LPOLESTR lpszPath, BOOL fUseFileAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass( const IID & rclsid, LPOLESTR lpszLabel,
                                           BOOL fUseTypeAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel( HICON hIcon, LPOLESTR lpszLabel,
                                             LPOLESTR lpszSourceFile, UINT iIconIndex);





               extern "C" __declspec(dllimport) HRESULT __stdcall OleRegGetUserType ( const IID & clsid, DWORD dwFormOfType,
                                                 LPOLESTR * pszUserType);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegGetMiscStatus ( const IID & clsid, DWORD dwAspect,
                                            DWORD * pdwStatus);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumFormatEtc( const IID & clsid, DWORD dwDirection,
                                       LPENUMFORMATETC * ppenum);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumVerbs ( const IID & clsid, LPENUMOLEVERB * ppenum);






typedef struct _OLESTREAM * LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL * LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    ( LPOLESTREAM lpolestream,
        LPSTORAGE pstg,
       const DVTARGETDEVICE * ptd);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    ( LPSTORAGE pstg,
        LPOLESTREAM lpolestream);
#line 327 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
               extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromILockBytes ( LPLOCKBYTES plkbyt, HGLOBAL * phglobal);
               extern "C" __declspec(dllimport) HRESULT __stdcall CreateILockBytesOnHGlobal ( HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                             LPLOCKBYTES * pplkbyt);
#line 340 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
extern "C" __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert( const IID & clsidOld, LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert( const IID & clsidOld, const IID & clsidNew);







extern "C" __declspec(dllimport) HRESULT __stdcall GetConvertStg( LPSTORAGE pStg);







extern "C" __declspec(dllimport) HRESULT __stdcall SetConvertStg( LPSTORAGE pStg, BOOL fConvert);


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    ( LPSTORAGE pstg,

        CLIPFORMAT cfFormat,
        LONG lWidth,
        LONG lHeight,
        DWORD dwSize,
        LPSTGMEDIUM pmedium,
         LPOLESTREAM polestm);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    ( LPOLESTREAM polestm,
         LPSTORAGE pstg,

         CLIPFORMAT * pcfFormat,
         LONG * plwWidth,
         LONG * plHeight,
         DWORD * pdwSize,
         LPSTGMEDIUM pmedium);






#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 385 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ole2.h"
#line 210 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
#line 25 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
extern "C" const GUID IID_IPrintDialogCallback;






extern "C" const GUID IID_IPrintDialogServices;
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\prsht.h"
#line 41 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"



#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\pshpack1.h"
#pragma warning(disable: 4103)

#pragma pack(push,1)
#line 44 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"




extern "C" {
#line 99 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
#line 115 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef struct tagOFN_NT4A {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCSTR lpstrFilter;
   LPSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPSTR lpstrFile;
   DWORD nMaxFile;
   LPSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCSTR lpstrInitialDir;
   LPCSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCWSTR lpstrFilter;
   LPWSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPWSTR lpstrFile;
   DWORD nMaxFile;
   LPWSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCWSTR lpstrInitialDir;
   LPCWSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCWSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;

typedef OPENFILENAME_NT4W OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4W LPOPENFILENAME_NT4;





typedef struct tagOFNA {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCSTR lpstrFilter;
   LPSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPSTR lpstrFile;
   DWORD nMaxFile;
   LPSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCSTR lpstrInitialDir;
   LPCSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;





   void * pvReserved;
   DWORD dwReserved;
   DWORD FlagsEx;

} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCWSTR lpstrFilter;
   LPWSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPWSTR lpstrFile;
   DWORD nMaxFile;
   LPWSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCWSTR lpstrInitialDir;
   LPCWSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCWSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;





   void * pvReserved;
   DWORD dwReserved;
   DWORD FlagsEx;

} OPENFILENAMEW, *LPOPENFILENAMEW;

typedef OPENFILENAMEW OPENFILENAME;
typedef LPOPENFILENAMEW LPOPENFILENAME;
#line 248 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
__declspec(dllimport) BOOL __stdcall GetOpenFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL __stdcall GetOpenFileNameW(LPOPENFILENAMEW);





__declspec(dllimport) BOOL __stdcall GetSaveFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL __stdcall GetSaveFileNameW(LPOPENFILENAMEW);







__declspec(dllimport) short __stdcall GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize);
__declspec(dllimport) short __stdcall GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize);
#line 324 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR pszFile;
} OFNOTIFYA, *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR pszFile;
} OFNOTIFYW, *LPOFNOTIFYW;

typedef OFNOTIFYW OFNOTIFY;
typedef LPOFNOTIFYW LPOFNOTIFY;







typedef struct _OFNOTIFYEXA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXA, *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID psf;
        LPVOID pidl;
} OFNOTIFYEXW, *LPOFNOTIFYEXW;

typedef OFNOTIFYEXW OFNOTIFYEX;
typedef LPOFNOTIFYEXW LPOFNOTIFYEX;
#line 468 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef struct tagCHOOSECOLORA {
   DWORD lStructSize;
   HWND hwndOwner;
   HWND hInstance;
   COLORREF rgbResult;
   COLORREF* lpCustColors;
   DWORD Flags;
   LPARAM lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD lStructSize;
   HWND hwndOwner;
   HWND hInstance;
   COLORREF rgbResult;
   COLORREF* lpCustColors;
   DWORD Flags;
   LPARAM lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;

typedef CHOOSECOLORW CHOOSECOLOR;
typedef LPCHOOSECOLORW LPCHOOSECOLOR;
#line 531 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
__declspec(dllimport) BOOL __stdcall ChooseColorA(LPCHOOSECOLORA);
__declspec(dllimport) BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);
#line 551 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;

   DWORD Flags;
   LPSTR lpstrFindWhat;
   LPSTR lpstrReplaceWith;
   WORD wFindWhatLen;
   WORD wReplaceWithLen;
   LPARAM lCustData;
   LPFRHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;

   DWORD Flags;
   LPWSTR lpstrFindWhat;
   LPWSTR lpstrReplaceWith;
   WORD wFindWhatLen;
   WORD wReplaceWithLen;
   LPARAM lCustData;
   LPFRHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} FINDREPLACEW, *LPFINDREPLACEW;

typedef FINDREPLACEW FINDREPLACE;
typedef LPFINDREPLACEW LPFINDREPLACE;
#line 613 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
__declspec(dllimport) HWND __stdcall FindTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall FindTextW(LPFINDREPLACEW);






__declspec(dllimport) HWND __stdcall ReplaceTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall ReplaceTextW(LPFINDREPLACEW);
#line 638 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA {
   DWORD lStructSize;
   HWND hwndOwner;
   HDC hDC;
   LPLOGFONTA lpLogFont;
   INT iPointSize;
   DWORD Flags;
   COLORREF rgbColors;
   LPARAM lCustData;
   LPCFHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
   HINSTANCE hInstance;

   LPSTR lpszStyle;

   WORD nFontType;


   WORD ___MISSING_ALIGNMENT__;
   INT nSizeMin;
   INT nSizeMax;

} CHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD lStructSize;
   HWND hwndOwner;
   HDC hDC;
   LPLOGFONTW lpLogFont;
   INT iPointSize;
   DWORD Flags;
   COLORREF rgbColors;
   LPARAM lCustData;
   LPCFHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
   HINSTANCE hInstance;

   LPWSTR lpszStyle;

   WORD nFontType;


   WORD ___MISSING_ALIGNMENT__;
   INT nSizeMin;
   INT nSizeMax;

} CHOOSEFONTW;

typedef CHOOSEFONTW CHOOSEFONT;



typedef CHOOSEFONTA *LPCHOOSEFONTA;
typedef CHOOSEFONTW *LPCHOOSEFONTW;

typedef LPCHOOSEFONTW LPCHOOSEFONT;



typedef const CHOOSEFONTA *PCCHOOSEFONTA;
typedef const CHOOSEFONTW *PCCHOOSEFONTW;

typedef CHOOSEFONTW CHOOSEFONT;
typedef PCCHOOSEFONTW PCCHOOSEFONT;





__declspec(dllimport) BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
__declspec(dllimport) BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);
#line 826 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   WORD nFromPage;
   WORD nToPage;
   WORD nMinPage;
   WORD nMaxPage;
   WORD nCopies;
   HINSTANCE hInstance;
   LPARAM lCustData;
   LPPRINTHOOKPROC lpfnPrintHook;
   LPSETUPHOOKPROC lpfnSetupHook;
   LPCSTR lpPrintTemplateName;
   LPCSTR lpSetupTemplateName;
   HGLOBAL hPrintTemplate;
   HGLOBAL hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   WORD nFromPage;
   WORD nToPage;
   WORD nMinPage;
   WORD nMaxPage;
   WORD nCopies;
   HINSTANCE hInstance;
   LPARAM lCustData;
   LPPRINTHOOKPROC lpfnPrintHook;
   LPSETUPHOOKPROC lpfnSetupHook;
   LPCWSTR lpPrintTemplateName;
   LPCWSTR lpSetupTemplateName;
   HGLOBAL hPrintTemplate;
   HGLOBAL hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;

typedef PRINTDLGW PRINTDLG;
typedef LPPRINTDLGW LPPRINTDLG;





__declspec(dllimport) BOOL __stdcall PrintDlgA( LPPRINTDLGA pPD);
__declspec(dllimport) BOOL __stdcall PrintDlgW( LPPRINTDLGW pPD);
#line 924 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
struct __declspec(uuid("5852A2C3-6530-11D1-B6A3-0000F8757BF9")) __declspec(novtable) IPrintDialogCallback : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface ( const IID & riid, void **ppvObj) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef (void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall InitDone (void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SelectionChange (void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall HandleMessage ( HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult) = 0;
};
#line 956 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
struct __declspec(uuid("509AAEDA-5639-11D1-B6A1-0000F8757BF9")) __declspec(novtable) IPrintDialogServices : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface ( const IID & riid, void **ppvObj) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef (void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentDevMode ( LPDEVMODE pDevMode, UINT *pcbSize) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentPrinterName ( LPWSTR pPrinterName, UINT *pcchSize) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentPortName ( LPWSTR pPortName, UINT *pcchSize) = 0;
};





typedef struct tagPRINTPAGERANGE {
   DWORD nFromPage;
   DWORD nToPage;
} PRINTPAGERANGE;
typedef PRINTPAGERANGE *LPPRINTPAGERANGE;
typedef const PRINTPAGERANGE *PCPRINTPAGERANGE;





typedef struct tagPDEXA {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   DWORD Flags2;
   DWORD ExclusionFlags;
   DWORD nPageRanges;
   DWORD nMaxPageRanges;
   LPPRINTPAGERANGE lpPageRanges;
   DWORD nMinPage;
   DWORD nMaxPage;
   DWORD nCopies;
   HINSTANCE hInstance;
   LPCSTR lpPrintTemplateName;
   LPUNKNOWN lpCallback;
   DWORD nPropertyPages;
   HPROPSHEETPAGE *lphPropertyPages;
   DWORD nStartPage;
   DWORD dwResultAction;
} PRINTDLGEXA, *LPPRINTDLGEXA;



typedef struct tagPDEXW {
   DWORD lStructSize;
   HWND hwndOwner;
   HGLOBAL hDevMode;
   HGLOBAL hDevNames;
   HDC hDC;
   DWORD Flags;
   DWORD Flags2;
   DWORD ExclusionFlags;
   DWORD nPageRanges;
   DWORD nMaxPageRanges;
   LPPRINTPAGERANGE lpPageRanges;
   DWORD nMinPage;
   DWORD nMaxPage;
   DWORD nCopies;
   HINSTANCE hInstance;
   LPCWSTR lpPrintTemplateName;
   LPUNKNOWN lpCallback;
   DWORD nPropertyPages;
   HPROPSHEETPAGE *lphPropertyPages;
   DWORD nStartPage;
   DWORD dwResultAction;
} PRINTDLGEXW, *LPPRINTDLGEXW;

typedef PRINTDLGEXW PRINTDLGEX;
typedef LPPRINTDLGEXW LPPRINTDLGEX;







__declspec(dllimport) HRESULT __stdcall PrintDlgExA( LPPRINTDLGEXA pPD);
__declspec(dllimport) HRESULT __stdcall PrintDlgExW( LPPRINTDLGEXW pPD);
#line 1116 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES;
typedef DEVNAMES *LPDEVNAMES;
typedef const DEVNAMES *PCDEVNAMES;




__declspec(dllimport) DWORD __stdcall CommDlgExtendedError(void);
#line 1139 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD lStructSize;
    HWND hwndOwner;
    HGLOBAL hDevMode;
    HGLOBAL hDevNames;
    DWORD Flags;
    POINT ptPaperSize;
    RECT rtMinMargin;
    RECT rtMargin;
    HINSTANCE hInstance;
    LPARAM lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR lpPageSetupTemplateName;
    HGLOBAL hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;

typedef PAGESETUPDLGW PAGESETUPDLG;
typedef LPPAGESETUPDLGW LPPAGESETUPDLG;





__declspec(dllimport) BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
__declspec(dllimport) BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );
#line 1227 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
}




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#line 27 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared/poppack.h"
#pragma warning(disable: 4103)

#pragma pack(pop)
#line 1231 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\commdlg.h"
#line 213 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\stralign.h"
#line 65 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\stralign.h"
extern "C" {
#line 105 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\stralign.h"
__inline
PUWSTR
static
__declspec(deprecated)
ua_wcscpy(
                                                       PUWSTR Destination,
         PCUWSTR Source
    )
{
#pragma warning(push)
#pragma warning(disable: 4995)
#pragma warning(disable: 4996)



 return wcscpy(Destination, Source);
#pragma warning(pop)
}
#line 681 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\stralign.h"
}
#line 217 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"
#line 230 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
#line 36 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
extern "C" {
#line 347 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
extern "C" const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;







extern "C" const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
#line 366 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
extern "C" const GUID DOMAIN_JOIN_GUID;







extern "C" const GUID DOMAIN_LEAVE_GUID;
#line 386 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
extern "C" const GUID FIREWALL_PORT_OPEN_GUID;







extern "C" const GUID FIREWALL_PORT_CLOSE_GUID;
#line 406 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
extern "C" const GUID MACHINE_POLICY_PRESENT_GUID;







extern "C" const GUID USER_POLICY_PRESENT_GUID;
#line 426 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
extern "C" const GUID RPC_INTERFACE_EVENT_GUID;







extern "C" const GUID NAMED_PIPE_EVENT_GUID;
#line 445 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
extern "C" const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
#line 456 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
#line 486 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;

typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;
#line 506 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE Type;
    DWORD Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;



    DWORD cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;

typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;
#line 555 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD dwServiceSidType;
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;

typedef SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOW LPSERVICE_REQUIRED_PRIVILEGES_INFO;
#line 596 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD dwDataType;



    DWORD cbData;



    PBYTE pData;
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD dwTriggerType;
    DWORD dwAction;
    GUID * pTriggerSubtype;





    DWORD cDataItems;



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD cTriggers;



    PSERVICE_TRIGGER pTriggers;
    PBYTE pReserved;
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;




typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT usPreferredNode;
    BOOLEAN fDelete;
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER liNewTime;
    LARGE_INTEGER liOldTime;
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;




typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
    DWORD dwLaunchProtected;
} SERVICE_LAUNCH_PROTECTED_INFO, *PSERVICE_LAUNCH_PROTECTED_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;

typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;





typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;

typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;
#line 770 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef LPVOID SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;

typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;
#line 796 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;

typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;
#line 832 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD dwNumServicesArgs,
    LPSTR *lpServiceArgVectors
    );
#line 869 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;

typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;
#line 889 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef void __stdcall HANDLER_FUNCTION (
    DWORD dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD dwControl,
    DWORD dwEventType,
    LPVOID lpEventData,
    LPVOID lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
         PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;

typedef SERVICE_NOTIFY_2W SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2W PSERVICE_NOTIFY_2;





typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;

typedef SERVICE_NOTIFYW SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYW PSERVICE_NOTIFY;
#line 970 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;

typedef SERVICE_CONTROL_STATUS_REASON_PARAMSW SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSW PSERVICE_CONTROL_STATUS_REASON_PARAMS;
#line 994 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
typedef struct _SERVICE_START_REASON {
    DWORD dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;





__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword,
                LPCSTR lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
                SC_HANDLE hService,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword,
                LPCWSTR lpDisplayName
    );






__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
                SC_HANDLE hService,
                DWORD dwInfoLevel,
                LPVOID lpInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
                SC_HANDLE hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
                SC_HANDLE hService,
                DWORD dwControl,
                LPSERVICE_STATUS lpServiceStatus
    );


__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
                SC_HANDLE hSCManager,
                LPCSTR lpServiceName,
                LPCSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCSTR lpBinaryPathName,
                LPCSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCSTR lpDependencies,
                LPCSTR lpServiceStartName,
                LPCSTR lpPassword
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
                SC_HANDLE hSCManager,
                LPCWSTR lpServiceName,
                LPCWSTR lpDisplayName,
                DWORD dwDesiredAccess,
                DWORD dwServiceType,
                DWORD dwStartType,
                DWORD dwErrorControl,
                LPCWSTR lpBinaryPathName,
                LPCWSTR lpLoadOrderGroup,
                LPDWORD lpdwTagId,
                LPCWSTR lpDependencies,
                LPCWSTR lpServiceStartName,
                LPCWSTR lpPassword
    );






__declspec(dllimport)
BOOL
__stdcall
DeleteService(
                SC_HANDLE hService
    );


__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                    SC_HANDLE hService,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned
    );







__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSA lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                    SC_HANDLE hSCManager,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPENUM_SERVICE_STATUSW lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle
    );







__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCSTR pszGroupName
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                    SC_HANDLE hSCManager,
                    SC_ENUM_TYPE InfoLevel,
                    DWORD dwServiceType,
                    DWORD dwServiceState,

                    LPBYTE lpServices,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded,
                    LPDWORD lpServicesReturned,
                    LPDWORD lpResumeHandle,
                    LPCWSTR pszGroupName
    );







__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpDisplayName,

                    LPSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpDisplayName,

                    LPWSTR lpServiceName,
                    LPDWORD lpcchBuffer
    );







__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,

                    LPSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,

                    LPWSTR lpDisplayName,
                    LPDWORD lpcchBuffer
    );






__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                    SC_HANDLE hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                    BOOL BootAcceptable
    );


__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
                    LPCSTR lpMachineName,
                    LPCSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
                    LPCWSTR lpMachineName,
                    LPCWSTR lpDatabaseName,
                    DWORD dwDesiredAccess
    );







__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                    SC_HANDLE hSCManager,
                    LPCSTR lpServiceName,
                    DWORD dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                    SC_HANDLE hSCManager,
                    LPCWSTR lpServiceName,
                    DWORD dwDesiredAccess
    );







__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                    SC_HANDLE hService,

                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
#line 1391 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );
#line 1410 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\winsvc.h"
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                    SC_HANDLE hService,
                    DWORD dwInfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                    SC_HANDLE hSCManager,

                    LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                    SC_HANDLE hService,
                    SECURITY_INFORMATION dwSecurityInformation,

                    PSECURITY_DESCRIPTOR lpSecurityDescriptor,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                    SC_HANDLE hService,
                    LPSERVICE_STATUS lpServiceStatus
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                    SC_HANDLE hService,
                    SC_STATUS_TYPE InfoLevel,

                    LPBYTE lpBuffer,
                    DWORD cbBufSize,
                    LPDWORD pcbBytesNeeded
    );


__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION lpHandlerProc
    );







__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
            LPCSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
            LPCWSTR lpServiceName,

            LPHANDLER_FUNCTION_EX lpHandlerProc,
             LPVOID lpContext
    );






__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
                SC_HANDLE hService,
                SECURITY_INFORMATION dwSecurityInformation,
                PSECURITY_DESCRIPTOR lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
                SERVICE_STATUS_HANDLE hServiceStatus,
                LPSERVICE_STATUS lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
         const SERVICE_TABLE_ENTRYA *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
         const SERVICE_TABLE_ENTRYW *lpServiceStartTable
    );







__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCSTR *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                    SC_HANDLE hService,
                    DWORD dwNumServiceArgs,

                    LPCWSTR *lpServiceArgVectors
    );






__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                    SC_LOCK ScLock
    );



__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeA (
                SC_HANDLE hService,
                DWORD dwNotifyMask,
                PSERVICE_NOTIFYA pNotifyBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeW (
                SC_HANDLE hService,
                DWORD dwNotifyMask,
                PSERVICE_NOTIFYW pNotifyBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
ControlServiceExA(
                SC_HANDLE hService,
                DWORD dwControl,
                DWORD dwInfoLevel,
                PVOID pControlParams
    );
__declspec(dllimport)
BOOL
__stdcall
ControlServiceExW(
                SC_HANDLE hService,
                DWORD dwControl,
                DWORD dwInfoLevel,
                PVOID pControlParams
    );






__declspec(dllimport)
BOOL
__stdcall
QueryServiceDynamicInformation (
                SERVICE_STATUS_HANDLE hServiceStatus,
                DWORD dwInfoLevel,
                PVOID * ppDynamicInfo
    );







}
#line 230 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"





#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mcx.h"
#line 16 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\mcx.h"
typedef struct _MODEMDEVCAPS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;


    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;


    BYTE abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;


    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;


    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;


    BYTE abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;
#line 235 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
#line 14 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
extern "C" {
#line 26 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;
#line 39 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
typedef HKL *LPHKL;
typedef UINT *LPUINT;







typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;
#line 70 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;
#line 87 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;

typedef REGISTERWORDW REGISTERWORD;
typedef PREGISTERWORDW PREGISTERWORD;
typedef NPREGISTERWORDW NPREGISTERWORD;
typedef LPREGISTERWORDW LPREGISTERWORD;
#line 115 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;
#line 136 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;

typedef STYLEBUFW STYLEBUF;
typedef PSTYLEBUFW PSTYLEBUF;
typedef NPSTYLEBUFW NPSTYLEBUF;
typedef LPSTYLEBUFW LPSTYLEBUF;
#line 173 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;

typedef IMEMENUITEMINFOW IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOW PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOW NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOW LPIMEMENUITEMINFO;







typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;

typedef BOOL (__stdcall* IMCENUMPROC)(HIMC, LPARAM);
#line 229 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
HKL __stdcall ImmInstallIMEA( LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL __stdcall ImmInstallIMEW( LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);






HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL, LPSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL, LPWSTR lpszDescription, UINT uBufLen);






UINT __stdcall ImmGetIMEFileNameA( HKL, LPSTR lpszFileName, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL, LPWSTR lpszFileName, UINT uBufLen);






DWORD __stdcall ImmGetProperty( HKL, DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND, DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND, HIMC);
HIMC __stdcall ImmAssociateContext( HWND, HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND, HIMC, DWORD);


LONG __stdcall ImmGetCompositionStringA( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
LONG __stdcall ImmGetCompositionStringW( HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmSetCompositionStringA( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
BOOL __stdcall ImmSetCompositionStringW( HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);






DWORD __stdcall ImmGetCandidateListCountA( HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC, LPDWORD lpdwListCount);






DWORD __stdcall ImmGetCandidateListA( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);






DWORD __stdcall ImmGetGuideLineA( HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW( HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);






BOOL __stdcall ImmGetConversionStatus( HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC, BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC, LPLOGFONTW lplf);






BOOL __stdcall ImmSetCompositionFontA( HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC, LPLOGFONTW lplf);







BOOL __stdcall ImmConfigureIMEA( HKL, HWND, DWORD, LPVOID);
BOOL __stdcall ImmConfigureIMEW( HKL, HWND, DWORD, LPVOID);






LRESULT __stdcall ImmEscapeA( HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW( HKL, HIMC, UINT, LPVOID);






DWORD __stdcall ImmGetConversionListA( HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
DWORD __stdcall ImmGetConversionListW( HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);






BOOL __stdcall ImmNotifyIME( HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC, LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND, UINT, WPARAM, LPARAM);







UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)( LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)( LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);






BOOL __stdcall ImmRegisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);






BOOL __stdcall ImmUnregisterWordA( HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);






UINT __stdcall ImmGetRegisterWordStyleA( HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);






UINT __stdcall ImmEnumRegisterWordA( HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);







BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);






BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);



BOOL __stdcall ImmDisableLegacyIME();
#line 638 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ime_cmodes.h"
#line 638 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
#line 776 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\imm.h"
}
#line 239 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\windows.h"








#pragma warning(pop)
#line 20 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\rpc.h"
#line 27 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
#line 50 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct ID3D11DeviceChild ID3D11DeviceChild;





typedef struct ID3D11DepthStencilState ID3D11DepthStencilState;





typedef struct ID3D11BlendState ID3D11BlendState;





typedef struct ID3D11RasterizerState ID3D11RasterizerState;





typedef struct ID3D11Resource ID3D11Resource;





typedef struct ID3D11Buffer ID3D11Buffer;





typedef struct ID3D11Texture1D ID3D11Texture1D;





typedef struct ID3D11Texture2D ID3D11Texture2D;





typedef struct ID3D11Texture3D ID3D11Texture3D;





typedef struct ID3D11View ID3D11View;





typedef struct ID3D11ShaderResourceView ID3D11ShaderResourceView;





typedef struct ID3D11RenderTargetView ID3D11RenderTargetView;





typedef struct ID3D11DepthStencilView ID3D11DepthStencilView;





typedef struct ID3D11UnorderedAccessView ID3D11UnorderedAccessView;





typedef struct ID3D11VertexShader ID3D11VertexShader;





typedef struct ID3D11HullShader ID3D11HullShader;





typedef struct ID3D11DomainShader ID3D11DomainShader;





typedef struct ID3D11GeometryShader ID3D11GeometryShader;





typedef struct ID3D11PixelShader ID3D11PixelShader;





typedef struct ID3D11ComputeShader ID3D11ComputeShader;





typedef struct ID3D11InputLayout ID3D11InputLayout;





typedef struct ID3D11SamplerState ID3D11SamplerState;





typedef struct ID3D11Asynchronous ID3D11Asynchronous;





typedef struct ID3D11Query ID3D11Query;





typedef struct ID3D11Predicate ID3D11Predicate;





typedef struct ID3D11Counter ID3D11Counter;





typedef struct ID3D11ClassInstance ID3D11ClassInstance;





typedef struct ID3D11ClassLinkage ID3D11ClassLinkage;





typedef struct ID3D11CommandList ID3D11CommandList;





typedef struct ID3D11DeviceContext ID3D11DeviceContext;





typedef struct ID3D11Device ID3D11Device;






#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef struct IEnumConnections IEnumConnections;






typedef struct IConnectionPoint IConnectionPoint;






typedef struct IEnumConnectionPoints IEnumConnectionPoints;






typedef struct IConnectionPointContainer IConnectionPointContainer;






typedef struct IClassFactory2 IClassFactory2;






typedef struct IProvideClassInfo IProvideClassInfo;






typedef struct IProvideClassInfo2 IProvideClassInfo2;






typedef struct IProvideMultipleClassInfo IProvideMultipleClassInfo;






typedef struct IOleControl IOleControl;






typedef struct IOleControlSite IOleControlSite;






typedef struct IPropertyPage IPropertyPage;






typedef struct IPropertyPage2 IPropertyPage2;






typedef struct IPropertyPageSite IPropertyPageSite;






typedef struct IPropertyNotifySink IPropertyNotifySink;






typedef struct ISpecifyPropertyPages ISpecifyPropertyPages;






typedef struct IPersistMemory IPersistMemory;






typedef struct IPersistStreamInit IPersistStreamInit;






typedef struct IPersistPropertyBag IPersistPropertyBag;






typedef struct ISimpleFrameSite ISimpleFrameSite;






typedef struct IFont IFont;






typedef struct IPicture IPicture;






typedef struct IPicture2 IPicture2;






typedef struct IFontEventsDisp IFontEventsDisp;






typedef struct IFontDisp IFontDisp;






typedef struct IPictureDisp IPictureDisp;






typedef struct IOleInPlaceObjectWindowless IOleInPlaceObjectWindowless;






typedef struct IOleInPlaceSiteEx IOleInPlaceSiteEx;






typedef struct IOleInPlaceSiteWindowless IOleInPlaceSiteWindowless;






typedef struct IViewObjectEx IViewObjectEx;






typedef struct IOleUndoUnit IOleUndoUnit;






typedef struct IOleParentUndoUnit IOleParentUndoUnit;






typedef struct IEnumOleUndoUnits IEnumOleUndoUnits;






typedef struct IOleUndoManager IOleUndoManager;






typedef struct IPointerInactive IPointerInactive;






typedef struct IObjectWithSite IObjectWithSite;






typedef struct IPerPropertyBrowsing IPerPropertyBrowsing;






typedef struct IPropertyBag2 IPropertyBag2;






typedef struct IPersistPropertyBag2 IPersistPropertyBag2;






typedef struct IAdviseSinkEx IAdviseSinkEx;






typedef struct IQuickActivate IQuickActivate;
#line 330 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern "C"{
#line 400 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0000_v0_0_s_ifspec;







typedef
enum tagUASFLAGS
    {
        UAS_NORMAL = 0,
        UAS_BLOCKED = 0x1,
        UAS_NOPARENTENABLE = 0x2,
        UAS_MASK = 0x3
    } UASFLAGS;


typedef
enum tagREADYSTATE
    {
        READYSTATE_UNINITIALIZED = 0,
        READYSTATE_LOADING = 1,
        READYSTATE_LOADED = 2,
        READYSTATE_INTERACTIVE = 3,
        READYSTATE_COMPLETE = 4
    } READYSTATE;



extern RPC_IF_HANDLE IOleControlTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleControlTypes_v1_0_s_ifspec;
#line 444 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0001_v0_0_s_ifspec;







typedef IEnumConnections *PENUMCONNECTIONS;

typedef IEnumConnections *LPENUMCONNECTIONS;

typedef struct tagCONNECTDATA
    {
    IUnknown *pUnk;
    DWORD dwCookie;
    } CONNECTDATA;

typedef struct tagCONNECTDATA *PCONNECTDATA;

typedef struct tagCONNECTDATA *LPCONNECTDATA;


extern "C" const IID IID_IEnumConnections;



    struct __declspec(uuid("B196B287-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IEnumConnections : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG cConnections,
                                            LPCONNECTDATA rgcd,
                        ULONG *pcFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG cConnections) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumConnections **ppEnum) = 0;

    };
#line 569 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
                HRESULT __stdcall IEnumConnections_RemoteNext_Proxy(
              IEnumConnections * This,
               ULONG cConnections,
                                                                                     LPCONNECTDATA rgcd,
                           ULONG *pcFetched);


void __stdcall IEnumConnections_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 593 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IConnectionPoint *PCONNECTIONPOINT;

typedef IConnectionPoint *LPCONNECTIONPOINT;


extern "C" const IID IID_IConnectionPoint;



    struct __declspec(uuid("B196B286-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IConnectionPoint : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetConnectionInterface(
                                   IID *pIID) = 0;

        virtual HRESULT __stdcall GetConnectionPointContainer(
                                             IConnectionPointContainer **ppCPC) = 0;

        virtual HRESULT __stdcall Advise(
                                     IUnknown *pUnkSink,
                                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall Unadvise(
                       DWORD dwCookie) = 0;

        virtual HRESULT __stdcall EnumConnections(
                                             IEnumConnections **ppEnum) = 0;

    };
#line 719 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS;

typedef IEnumConnectionPoints *LPENUMCONNECTIONPOINTS;


extern "C" const IID IID_IEnumConnectionPoints;



    struct __declspec(uuid("B196B285-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IEnumConnectionPoints : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG cConnections,
                                            LPCONNECTIONPOINT *ppCP,
                        ULONG *pcFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG cConnections) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumConnectionPoints **ppEnum) = 0;

    };
#line 825 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
                HRESULT __stdcall IEnumConnectionPoints_RemoteNext_Proxy(
              IEnumConnectionPoints * This,
               ULONG cConnections,
                                                                                     LPCONNECTIONPOINT *ppCP,
                           ULONG *pcFetched);


void __stdcall IEnumConnectionPoints_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 849 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER;

typedef IConnectionPointContainer *LPCONNECTIONPOINTCONTAINER;


extern "C" const IID IID_IConnectionPointContainer;



    struct __declspec(uuid("B196B284-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IConnectionPointContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnumConnectionPoints(
                                             IEnumConnectionPoints **ppEnum) = 0;

        virtual HRESULT __stdcall FindConnectionPoint(
                                 const IID & riid,
                                             IConnectionPoint **ppCP) = 0;

    };
#line 948 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0005_v0_0_s_ifspec;







typedef IClassFactory2 *LPCLASSFACTORY2;

typedef struct tagLICINFO
    {
    LONG cbLicInfo;
    BOOL fRuntimeKeyAvail;
    BOOL fLicVerified;
    } LICINFO;

typedef struct tagLICINFO *LPLICINFO;


extern "C" const IID IID_IClassFactory2;



    struct __declspec(uuid("B196B28F-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IClassFactory2 : public IClassFactory
    {
    public:
        virtual HRESULT __stdcall GetLicInfo(
                                         LICINFO *pLicInfo) = 0;

        virtual HRESULT __stdcall RequestLicKey(
                       DWORD dwReserved,
                                             BSTR *pBstrKey) = 0;

        virtual HRESULT __stdcall CreateInstanceLic(
                       IUnknown *pUnkOuter,
                       IUnknown *pUnkReserved,
                       const IID & riid,
                       BSTR bstrKey,
                                PVOID *ppvObj) = 0;

    };
#line 1088 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
                HRESULT __stdcall IClassFactory2_RemoteCreateInstanceLic_Proxy(
              IClassFactory2 * This,
                         const IID & riid,
                         BSTR bstrKey,
                                             IUnknown **ppvObj);


void __stdcall IClassFactory2_RemoteCreateInstanceLic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 1112 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IProvideClassInfo *LPPROVIDECLASSINFO;


extern "C" const IID IID_IProvideClassInfo;



    struct __declspec(uuid("B196B283-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IProvideClassInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassInfoW(
                                             ITypeInfo **ppTI) = 0;

    };
#line 1194 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IProvideClassInfo2 *LPPROVIDECLASSINFO2;

typedef
enum tagGUIDKIND
    {
        GUIDKIND_DEFAULT_SOURCE_DISP_IID = 1
    } GUIDKIND;


extern "C" const IID IID_IProvideClassInfo2;



    struct __declspec(uuid("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")) __declspec(novtable)
    IProvideClassInfo2 : public IProvideClassInfo
    {
    public:
        virtual HRESULT __stdcall GetGUID(
                       DWORD dwGuidKind,
                                   GUID *pGUID) = 0;

    };
#line 1297 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IProvideMultipleClassInfo *LPPROVIDEMULTIPLECLASSINFO;


extern "C" const IID IID_IProvideMultipleClassInfo;



    struct __declspec(uuid("A7ABA9C1-8983-11cf-8F20-00805F2CD064")) __declspec(novtable)
    IProvideMultipleClassInfo : public IProvideClassInfo2
    {
    public:
        virtual HRESULT __stdcall GetMultiTypeInfoCount(
                                   ULONG *pcti) = 0;

        virtual HRESULT __stdcall GetInfoOfIndex(
                       ULONG iti,
                       DWORD dwFlags,
                                             ITypeInfo **pptiCoClass,
                                   DWORD *pdwTIFlags,
                                   ULONG *pcdispidReserved,
                                   IID *piidPrimary,
                                   IID *piidSource) = 0;

    };
#line 1418 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleControl *LPOLECONTROL;

typedef struct tagCONTROLINFO
    {
    ULONG cb;
    HACCEL hAccel;
    USHORT cAccel;
    DWORD dwFlags;
    } CONTROLINFO;

typedef struct tagCONTROLINFO *LPCONTROLINFO;

typedef
enum tagCTRLINFO
    {
        CTRLINFO_EATS_RETURN = 1,
        CTRLINFO_EATS_ESCAPE = 2
    } CTRLINFO;


extern "C" const IID IID_IOleControl;



    struct __declspec(uuid("B196B288-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IOleControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetControlInfo(
                                         CONTROLINFO *pCI) = 0;

        virtual HRESULT __stdcall OnMnemonic(
                                 MSG *pMsg) = 0;

        virtual HRESULT __stdcall OnAmbientPropertyChange(
                       DISPID dispID) = 0;

        virtual HRESULT __stdcall FreezeEvents(
                       BOOL bFreeze) = 0;

    };
#line 1547 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleControlSite *LPOLECONTROLSITE;

typedef struct tagPOINTF
    {
    FLOAT x;
    FLOAT y;
    } POINTF;

typedef struct tagPOINTF *LPPOINTF;

typedef
enum tagXFORMCOORDS
    {
        XFORMCOORDS_POSITION = 0x1,
        XFORMCOORDS_SIZE = 0x2,
        XFORMCOORDS_HIMETRICTOCONTAINER = 0x4,
        XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8,
        XFORMCOORDS_EVENTCOMPAT = 0x10
    } XFORMCOORDS;


extern "C" const IID IID_IOleControlSite;



    struct __declspec(uuid("B196B289-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IOleControlSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnControlInfoChanged( void) = 0;

        virtual HRESULT __stdcall LockInPlaceActive(
                       BOOL fLock) = 0;

        virtual HRESULT __stdcall GetExtendedControl(
                                             IDispatch **ppDisp) = 0;

        virtual HRESULT __stdcall TransformCoords(
                                         POINTL *pPtlHimetric,
                                         POINTF *pPtfContainer,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 MSG *pMsg,
                       DWORD grfModifiers) = 0;

        virtual HRESULT __stdcall OnFocus(
                       BOOL fGotFocus) = 0;

        virtual HRESULT __stdcall ShowPropertyFrame( void) = 0;

    };
#line 1709 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPropertyPage *LPPROPERTYPAGE;

typedef struct tagPROPPAGEINFO
    {
    ULONG cb;
    LPOLESTR pszTitle;
    SIZE size;
    LPOLESTR pszDocString;
    LPOLESTR pszHelpFile;
    DWORD dwHelpContext;
    } PROPPAGEINFO;

typedef struct tagPROPPAGEINFO *LPPROPPAGEINFO;


extern "C" const IID IID_IPropertyPage;



    struct __declspec(uuid("B196B28D-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IPropertyPage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPageSite(
                                     IPropertyPageSite *pPageSite) = 0;

        virtual HRESULT __stdcall Activate(
                                 HWND hWndParent,
                                 LPCRECT pRect,
                       BOOL bModal) = 0;

        virtual HRESULT __stdcall Deactivate( void) = 0;

        virtual HRESULT __stdcall GetPageInfo(
                                   PROPPAGEINFO *pPageInfo) = 0;

        virtual HRESULT __stdcall SetObjects(
                       ULONG cObjects,
                                                                IUnknown **ppUnk) = 0;

        virtual HRESULT __stdcall Show(
                       UINT nCmdShow) = 0;

        virtual HRESULT __stdcall Move(
                                 LPCRECT pRect) = 0;

        virtual HRESULT __stdcall IsPageDirty( void) = 0;

        virtual HRESULT __stdcall Apply( void) = 0;

        virtual HRESULT __stdcall Help(
                                 LPCOLESTR pszHelpDir) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 MSG *pMsg) = 0;

    };
#line 1903 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPropertyPage2 *LPPROPERTYPAGE2;


extern "C" const IID IID_IPropertyPage2;



    struct __declspec(uuid("01E44665-24AC-101B-84ED-08002B2EC713")) __declspec(novtable)
    IPropertyPage2 : public IPropertyPage
    {
    public:
        virtual HRESULT __stdcall EditProperty(
                       DISPID dispID) = 0;

    };
#line 2063 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPropertyPageSite *LPPROPERTYPAGESITE;

typedef
enum tagPROPPAGESTATUS
    {
        PROPPAGESTATUS_DIRTY = 0x1,
        PROPPAGESTATUS_VALIDATE = 0x2,
        PROPPAGESTATUS_CLEAN = 0x4
    } PROPPAGESTATUS;


extern "C" const IID IID_IPropertyPageSite;



    struct __declspec(uuid("B196B28C-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    IPropertyPageSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStatusChange(
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall GetLocaleID(
                                   LCID *pLocaleID) = 0;

        virtual HRESULT __stdcall GetPageContainer(
                                             IUnknown **ppUnk) = 0;

        virtual HRESULT __stdcall TranslateAcceleratorW(
                                 MSG *pMsg) = 0;

    };
#line 2183 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPropertyNotifySink *LPPROPERTYNOTIFYSINK;


extern "C" const IID IID_IPropertyNotifySink;



    struct __declspec(uuid("9BFBBC02-EFF1-101A-84ED-00AA00341D07")) __declspec(novtable)
    IPropertyNotifySink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnChanged(
                       DISPID dispID) = 0;

        virtual HRESULT __stdcall OnRequestEdit(
                       DISPID dispID) = 0;

    };
#line 2275 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef ISpecifyPropertyPages *LPSPECIFYPROPERTYPAGES;

typedef struct tagCAUUID
    {
    ULONG cElems;
                    GUID *pElems;
    } CAUUID;

typedef struct tagCAUUID *LPCAUUID;


extern "C" const IID IID_ISpecifyPropertyPages;



    struct __declspec(uuid("B196B28B-BAB4-101A-B69C-00AA00341D07")) __declspec(novtable)
    ISpecifyPropertyPages : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetPages(
                                   CAUUID *pPages) = 0;

    };
#line 2365 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPersistMemory *LPPERSISTMEMORY;


extern "C" const IID IID_IPersistMemory;



    struct __declspec(uuid("BD1AE5E0-A6AE-11CE-BD37-504200C10000")) __declspec(novtable)
    IPersistMemory : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                LPVOID pMem,
                       ULONG cbSize) = 0;

        virtual HRESULT __stdcall Save(
                                 LPVOID pMem,
                       BOOL fClearDirty,
                       ULONG cbSize) = 0;

        virtual HRESULT __stdcall GetSizeMax(
                                   ULONG *pCbSize) = 0;

        virtual HRESULT __stdcall InitNew( void) = 0;

    };
#line 2487 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
                HRESULT __stdcall IPersistMemory_RemoteLoad_Proxy(
              IPersistMemory * This,
                                                      BYTE *pMem,
               ULONG cbSize);


void __stdcall IPersistMemory_RemoteLoad_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IPersistMemory_RemoteSave_Proxy(
              IPersistMemory * This,
                                                        BYTE *pMem,
               BOOL fClearDirty,
               ULONG cbSize);


void __stdcall IPersistMemory_RemoteSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 2524 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPersistStreamInit *LPPERSISTSTREAMINIT;


extern "C" const IID IID_IPersistStreamInit;



    struct __declspec(uuid("7FD52380-4E07-101B-AE2D-08002B2EC713")) __declspec(novtable)
    IPersistStreamInit : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;

        virtual HRESULT __stdcall Load(
                                     LPSTREAM pStm) = 0;

        virtual HRESULT __stdcall Save(
                                     LPSTREAM pStm,
                       BOOL fClearDirty) = 0;

        virtual HRESULT __stdcall GetSizeMax(
                                   ULARGE_INTEGER *pCbSize) = 0;

        virtual HRESULT __stdcall InitNew( void) = 0;

    };
#line 2652 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPersistPropertyBag *LPPERSISTPROPERTYBAG;


extern "C" const IID IID_IPersistPropertyBag;



    struct __declspec(uuid("37D84F60-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPersistPropertyBag : public IPersist
    {
    public:
        virtual HRESULT __stdcall InitNew( void) = 0;

        virtual HRESULT __stdcall Load(
                                     IPropertyBag *pPropBag,
                                             IErrorLog *pErrorLog) = 0;

        virtual HRESULT __stdcall Save(
                                     IPropertyBag *pPropBag,
                       BOOL fClearDirty,
                       BOOL fSaveAllProperties) = 0;

    };
#line 2766 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef ISimpleFrameSite *LPSIMPLEFRAMESITE;


extern "C" const IID IID_ISimpleFrameSite;



    struct __declspec(uuid("742B0E01-14E6-101B-914E-00AA00300CAB")) __declspec(novtable)
    ISimpleFrameSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreMessageFilter(
                                 HWND hWnd,
                       UINT msg,
                       WPARAM wp,
                       LPARAM lp,
                                   LRESULT *plResult,
                                   DWORD *pdwCookie) = 0;

        virtual HRESULT __stdcall PostMessageFilter(
                                 HWND hWnd,
                       UINT msg,
                       WPARAM wp,
                       LPARAM lp,
                                   LRESULT *plResult,
                       DWORD dwCookie) = 0;

    };
#line 2878 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IFont *LPFONT;


typedef TEXTMETRICW TEXTMETRICOLE;




typedef TEXTMETRICOLE *LPTEXTMETRICOLE;


extern "C" const IID IID_IFont;



    struct __declspec(uuid("BEF6E002-A874-101A-8BBA-00AA00300CAB")) __declspec(novtable)
    IFont : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Name(
                                             BSTR *pName) = 0;

        virtual HRESULT __stdcall put_Name(
                                 BSTR name) = 0;

        virtual HRESULT __stdcall get_Size(
                                   CY *pSize) = 0;

        virtual HRESULT __stdcall put_Size(
                       CY size) = 0;

        virtual HRESULT __stdcall get_Bold(
                                   BOOL *pBold) = 0;

        virtual HRESULT __stdcall put_Bold(
                       BOOL bold) = 0;

        virtual HRESULT __stdcall get_Italic(
                                   BOOL *pItalic) = 0;

        virtual HRESULT __stdcall put_Italic(
                       BOOL italic) = 0;

        virtual HRESULT __stdcall get_Underline(
                                   BOOL *pUnderline) = 0;

        virtual HRESULT __stdcall put_Underline(
                       BOOL underline) = 0;

        virtual HRESULT __stdcall get_Strikethrough(
                                   BOOL *pStrikethrough) = 0;

        virtual HRESULT __stdcall put_Strikethrough(
                       BOOL strikethrough) = 0;

        virtual HRESULT __stdcall get_Weight(
                                   SHORT *pWeight) = 0;

        virtual HRESULT __stdcall put_Weight(
                       SHORT weight) = 0;

        virtual HRESULT __stdcall get_Charset(
                                   SHORT *pCharset) = 0;

        virtual HRESULT __stdcall put_Charset(
                       SHORT charset) = 0;

        virtual HRESULT __stdcall get_hFont(
                                             HFONT *phFont) = 0;

        virtual HRESULT __stdcall Clone(
                                             IFont **ppFont) = 0;

        virtual HRESULT __stdcall IsEqual(
                                     IFont *pFontOther) = 0;

        virtual HRESULT __stdcall SetRatio(
                       LONG cyLogical,
                       LONG cyHimetric) = 0;

        virtual HRESULT __stdcall QueryTextMetrics(
                                   TEXTMETRICOLE *pTM) = 0;

        virtual HRESULT __stdcall AddRefHfont(
                                 HFONT hFont) = 0;

        virtual HRESULT __stdcall ReleaseHfont(
                                 HFONT hFont) = 0;

        virtual HRESULT __stdcall SetHdc(
                                 HDC hDC) = 0;

    };
#line 3200 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPicture *LPPICTURE;

typedef
enum tagPictureAttributes
    {
        PICTURE_SCALABLE = 0x1,
        PICTURE_TRANSPARENT = 0x2
    } PICTUREATTRIBUTES;

typedef __declspec(uuid("66504313-BE0F-101A-8BBB-00AA00300CAB")) UINT OLE_HANDLE;

typedef __declspec(uuid("66504306-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_XPOS_HIMETRIC;

typedef __declspec(uuid("66504307-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_YPOS_HIMETRIC;

typedef __declspec(uuid("66504308-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_XSIZE_HIMETRIC;

typedef __declspec(uuid("66504309-BE0F-101A-8BBB-00AA00300CAB")) LONG OLE_YSIZE_HIMETRIC;


extern "C" const IID IID_IPicture;



    struct __declspec(uuid("7BF80980-BF32-101A-8BBB-00AA00300CAB")) __declspec(novtable)
    IPicture : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Handle(
                                   OLE_HANDLE *pHandle) = 0;

        virtual HRESULT __stdcall get_hPal(
                                   OLE_HANDLE *phPal) = 0;

        virtual HRESULT __stdcall get_Type(
                                   SHORT *pType) = 0;

        virtual HRESULT __stdcall get_Width(
                                   OLE_XSIZE_HIMETRIC *pWidth) = 0;

        virtual HRESULT __stdcall get_Height(
                                   OLE_YSIZE_HIMETRIC *pHeight) = 0;

        virtual HRESULT __stdcall Render(
                                 HDC hDC,
                       LONG x,
                       LONG y,
                       LONG cx,
                       LONG cy,
                       OLE_XPOS_HIMETRIC xSrc,
                       OLE_YPOS_HIMETRIC ySrc,
                       OLE_XSIZE_HIMETRIC cxSrc,
                       OLE_YSIZE_HIMETRIC cySrc,
                                 LPCRECT pRcWBounds) = 0;

        virtual HRESULT __stdcall set_hPal(
                       OLE_HANDLE hPal) = 0;

        virtual HRESULT __stdcall get_CurDC(
                                             HDC *phDC) = 0;

        virtual HRESULT __stdcall SelectPicture(
                                 HDC hDCIn,
                                             HDC *phDCOut,
                                   OLE_HANDLE *phBmpOut) = 0;

        virtual HRESULT __stdcall get_KeepOriginalFormat(
                                   BOOL *pKeep) = 0;

        virtual HRESULT __stdcall put_KeepOriginalFormat(
                       BOOL keep) = 0;

        virtual HRESULT __stdcall PictureChanged( void) = 0;

        virtual HRESULT __stdcall SaveAsFile(
                                     LPSTREAM pStream,
                       BOOL fSaveMemCopy,
                                   LONG *pCbSize) = 0;

        virtual HRESULT __stdcall get_Attributes(
                                   DWORD *pDwAttr) = 0;

    };
#line 3453 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPicture2 *LPPICTURE2;

typedef UINT_PTR HHANDLE;


extern "C" const IID IID_IPicture2;



    struct __declspec(uuid("F5185DD8-2012-4b0b-AAD9-F052C6BD482B")) __declspec(novtable)
    IPicture2 : public IUnknown
    {
    public:
        virtual HRESULT __stdcall get_Handle(
                                   HHANDLE *pHandle) = 0;

        virtual HRESULT __stdcall get_hPal(
                                   HHANDLE *phPal) = 0;

        virtual HRESULT __stdcall get_Type(
                                   SHORT *pType) = 0;

        virtual HRESULT __stdcall get_Width(
                                   OLE_XSIZE_HIMETRIC *pWidth) = 0;

        virtual HRESULT __stdcall get_Height(
                                   OLE_YSIZE_HIMETRIC *pHeight) = 0;

        virtual HRESULT __stdcall Render(
                                 HDC hDC,
                       LONG x,
                       LONG y,
                       LONG cx,
                       LONG cy,
                       OLE_XPOS_HIMETRIC xSrc,
                       OLE_YPOS_HIMETRIC ySrc,
                       OLE_XSIZE_HIMETRIC cxSrc,
                       OLE_YSIZE_HIMETRIC cySrc,
                                 LPCRECT pRcWBounds) = 0;

        virtual HRESULT __stdcall set_hPal(
                       HHANDLE hPal) = 0;

        virtual HRESULT __stdcall get_CurDC(
                                             HDC *phDC) = 0;

        virtual HRESULT __stdcall SelectPicture(
                                 HDC hDCIn,
                                             HDC *phDCOut,
                                   HHANDLE *phBmpOut) = 0;

        virtual HRESULT __stdcall get_KeepOriginalFormat(
                                   BOOL *pKeep) = 0;

        virtual HRESULT __stdcall put_KeepOriginalFormat(
                       BOOL keep) = 0;

        virtual HRESULT __stdcall PictureChanged( void) = 0;

        virtual HRESULT __stdcall SaveAsFile(
                                     LPSTREAM pStream,
                       BOOL fSaveMemCopy,
                                   LONG *pCbSize) = 0;

        virtual HRESULT __stdcall get_Attributes(
                                   DWORD *pDwAttr) = 0;

    };
#line 3691 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IFontEventsDisp *LPFONTEVENTS;


extern "C" const IID IID_IFontEventsDisp;



    struct __declspec(uuid("4EF6100A-AF88-11D0-9846-00C04FC29993")) __declspec(novtable)
    IFontEventsDisp : public IDispatch
    {
    public:
    };
#line 3813 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IFontDisp *LPFONTDISP;


extern "C" const IID IID_IFontDisp;



    struct __declspec(uuid("BEF6E003-A874-101A-8BBA-00AA00300CAB")) __declspec(novtable)
    IFontDisp : public IDispatch
    {
    public:
    };
#line 3935 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPictureDisp *LPPICTUREDISP;


extern "C" const IID IID_IPictureDisp;



    struct __declspec(uuid("7BF80981-BF32-101A-8BBB-00AA00300CAB")) __declspec(novtable)
    IPictureDisp : public IDispatch
    {
    public:
    };
#line 4057 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleInPlaceObjectWindowless *LPOLEINPLACEOBJECTWINDOWLESS;


extern "C" const IID IID_IOleInPlaceObjectWindowless;



    struct __declspec(uuid("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")) __declspec(novtable)
    IOleInPlaceObjectWindowless : public IOleInPlaceObject
    {
    public:
        virtual HRESULT __stdcall OnWindowMessage(
                       UINT msg,
                       WPARAM wParam,
                       LPARAM lParam,
                                   LRESULT *plResult) = 0;

        virtual HRESULT __stdcall GetDropTarget(
                                             IDropTarget **ppDropTarget) = 0;

    };
#line 4197 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleInPlaceSiteEx *LPOLEINPLACESITEEX;

typedef
enum tagACTIVATEFLAGS
    {
        ACTIVATE_WINDOWLESS = 1
    } ACTIVATEFLAGS;


extern "C" const IID IID_IOleInPlaceSiteEx;



    struct __declspec(uuid("9C2CAD80-3424-11CF-B670-00AA004CD6D8")) __declspec(novtable)
    IOleInPlaceSiteEx : public IOleInPlaceSite
    {
    public:
        virtual HRESULT __stdcall OnInPlaceActivateEx(
                                   BOOL *pfNoRedraw,
                       DWORD dwFlags) = 0;

        virtual HRESULT __stdcall OnInPlaceDeactivateEx(
                       BOOL fNoRedraw) = 0;

        virtual HRESULT __stdcall RequestUIActivate( void) = 0;

    };
#line 4389 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleInPlaceSiteWindowless *LPOLEINPLACESITEWINDOWLESS;

typedef
enum tagOLEDCFLAGS
    {
        OLEDC_NODRAW = 0x1,
        OLEDC_PAINTBKGND = 0x2,
        OLEDC_OFFSCREEN = 0x4
    } OLEDCFLAGS;




extern "C" const IID IID_IOleInPlaceSiteWindowless;



    struct __declspec(uuid("922EADA0-3424-11CF-B670-00AA004CD6D8")) __declspec(novtable)
    IOleInPlaceSiteWindowless : public IOleInPlaceSiteEx
    {
    public:
        virtual HRESULT __stdcall CanWindowlessActivate( void) = 0;

        virtual HRESULT __stdcall GetCapture( void) = 0;

        virtual HRESULT __stdcall SetCapture(
                       BOOL fCapture) = 0;

        virtual HRESULT __stdcall GetFocus( void) = 0;

        virtual HRESULT __stdcall SetFocus(
                       BOOL fFocus) = 0;

        virtual HRESULT __stdcall GetDC(
                                             LPCRECT pRect,
                       DWORD grfFlags,
                                             HDC *phDC) = 0;

        virtual HRESULT __stdcall ReleaseDC(
                                 HDC hDC) = 0;

        virtual HRESULT __stdcall InvalidateRect(
                                             LPCRECT pRect,
                       BOOL fErase) = 0;

        virtual HRESULT __stdcall InvalidateRgn(
                                 HRGN hRGN,
                       BOOL fErase) = 0;

        virtual HRESULT __stdcall ScrollRect(
                       INT dx,
                       INT dy,
                                 LPCRECT pRectScroll,
                                 LPCRECT pRectClip) = 0;

        virtual HRESULT __stdcall AdjustRect(
                                         LPRECT prc) = 0;

        virtual HRESULT __stdcall OnDefWindowMessage(

                  UINT msg,

                  WPARAM wParam,

                  LPARAM lParam,
                                   LRESULT *plResult) = 0;

    };
#line 4717 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IViewObjectEx *LPVIEWOBJECTEX;

typedef
enum tagVIEWSTATUS
    {
        VIEWSTATUS_OPAQUE = 1,
        VIEWSTATUS_SOLIDBKGND = 2,
        VIEWSTATUS_DVASPECTOPAQUE = 4,
        VIEWSTATUS_DVASPECTTRANSPARENT = 8,
        VIEWSTATUS_SURFACE = 16,
        VIEWSTATUS_3DSURFACE = 32
    } VIEWSTATUS;

typedef
enum tagHITRESULT
    {
        HITRESULT_OUTSIDE = 0,
        HITRESULT_TRANSPARENT = 1,
        HITRESULT_CLOSE = 2,
        HITRESULT_HIT = 3
    } HITRESULT;

typedef
enum tagDVASPECT2
    {
        DVASPECT_OPAQUE = 16,
        DVASPECT_TRANSPARENT = 32
    } DVASPECT2;

typedef struct tagExtentInfo
    {
    ULONG cb;
    DWORD dwExtentMode;
    SIZEL sizelProposed;
    } DVEXTENTINFO;

typedef
enum tagExtentMode
    {
        DVEXTENT_CONTENT = 0,
        DVEXTENT_INTEGRAL = ( DVEXTENT_CONTENT + 1 )
    } DVEXTENTMODE;

typedef
enum tagAspectInfoFlag
    {
        DVASPECTINFOFLAG_CANOPTIMIZE = 1
    } DVASPECTINFOFLAG;

typedef struct tagAspectInfo
    {
    ULONG cb;
    DWORD dwFlags;
    } DVASPECTINFO;


extern "C" const IID IID_IViewObjectEx;



    struct __declspec(uuid("3AF24292-0C96-11CE-A0CF-00AA00600AB8")) __declspec(novtable)
    IViewObjectEx : public IViewObject2
    {
    public:
        virtual HRESULT __stdcall GetRect(
                       DWORD dwAspect,
                                   LPRECTL pRect) = 0;

        virtual HRESULT __stdcall GetViewStatus(
                                   DWORD *pdwStatus) = 0;

        virtual HRESULT __stdcall QueryHitPoint(
                       DWORD dwAspect,
                                 LPCRECT pRectBounds,
                       POINT ptlLoc,
                       LONG lCloseHint,
                                   DWORD *pHitResult) = 0;

        virtual HRESULT __stdcall QueryHitRect(
                       DWORD dwAspect,
                                 LPCRECT pRectBounds,
                                 LPCRECT pRectLoc,
                       LONG lCloseHint,
                                   DWORD *pHitResult) = 0;

        virtual HRESULT __stdcall GetNaturalExtent(
                       DWORD dwAspect,
                       LONG lindex,
                                 DVTARGETDEVICE *ptd,
                                 HDC hicTargetDev,
                                 DVEXTENTINFO *pExtentInfo,
                                   LPSIZEL pSizel) = 0;

    };
#line 5019 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleUndoUnit *LPOLEUNDOUNIT;


extern "C" const IID IID_IOleUndoUnit;



    struct __declspec(uuid("894AD3B0-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleUndoUnit : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Do(
                                     IOleUndoManager *pUndoManager) = 0;

        virtual HRESULT __stdcall GetDescription(
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall GetUnitType(
                                   CLSID *pClsid,
                                   LONG *plID) = 0;

        virtual HRESULT __stdcall OnNextAdd( void) = 0;

    };
#line 5131 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleParentUndoUnit *LPOLEPARENTUNDOUNIT;


extern "C" const IID IID_IOleParentUndoUnit;



    struct __declspec(uuid("A1FAF330-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleParentUndoUnit : public IOleUndoUnit
    {
    public:
        virtual HRESULT __stdcall Open(
                                     IOleParentUndoUnit *pPUU) = 0;

        virtual HRESULT __stdcall Close(
                                     IOleParentUndoUnit *pPUU,
                       BOOL fCommit) = 0;

        virtual HRESULT __stdcall Add(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall FindUnit(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall GetParentState(
                                   DWORD *pdwState) = 0;

    };
#line 5284 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IEnumOleUndoUnits *LPENUMOLEUNDOUNITS;


extern "C" const IID IID_IEnumOleUndoUnits;



    struct __declspec(uuid("B3E7C340-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IEnumOleUndoUnits : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Next(
                       ULONG cElt,
                                            IOleUndoUnit **rgElt,
                        ULONG *pcEltFetched) = 0;

        virtual HRESULT __stdcall Skip(
                       ULONG cElt) = 0;

        virtual HRESULT __stdcall Reset( void) = 0;

        virtual HRESULT __stdcall Clone(
                                             IEnumOleUndoUnits **ppEnum) = 0;

    };
#line 5388 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
                HRESULT __stdcall IEnumOleUndoUnits_RemoteNext_Proxy(
              IEnumOleUndoUnits * This,
               ULONG cElt,
                                                                                IOleUndoUnit **rgElt,
                           ULONG *pcEltFetched);


void __stdcall IEnumOleUndoUnits_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 5413 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IOleUndoManager *LPOLEUNDOMANAGER;


extern "C" const IID IID_IOleUndoManager;



    struct __declspec(uuid("D001F200-EF97-11CE-9BC9-00AA00608E01")) __declspec(novtable)
    IOleUndoManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Open(
                                     IOleParentUndoUnit *pPUU) = 0;

        virtual HRESULT __stdcall Close(
                                     IOleParentUndoUnit *pPUU,
                       BOOL fCommit) = 0;

        virtual HRESULT __stdcall Add(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall GetOpenParentState(
                                   DWORD *pdwState) = 0;

        virtual HRESULT __stdcall DiscardFrom(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall UndoTo(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall RedoTo(
                                     IOleUndoUnit *pUU) = 0;

        virtual HRESULT __stdcall EnumUndoable(
                                             IEnumOleUndoUnits **ppEnum) = 0;

        virtual HRESULT __stdcall EnumRedoable(
                                             IEnumOleUndoUnits **ppEnum) = 0;

        virtual HRESULT __stdcall GetLastUndoDescription(
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall GetLastRedoDescription(
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall Enable(
                       BOOL fEnable) = 0;

    };
#line 5607 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IPointerInactive *LPPOINTERINACTIVE;

typedef
enum tagPOINTERINACTIVE
    {
        POINTERINACTIVE_ACTIVATEONENTRY = 1,
        POINTERINACTIVE_DEACTIVATEONLEAVE = 2,
        POINTERINACTIVE_ACTIVATEONDRAG = 4
    } POINTERINACTIVE;


extern "C" const IID IID_IPointerInactive;



    struct __declspec(uuid("55980BA0-35AA-11CF-B671-00AA004CD6D8")) __declspec(novtable)
    IPointerInactive : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetActivationPolicy(
                                   DWORD *pdwPolicy) = 0;

        virtual HRESULT __stdcall OnInactiveMouseMove(
                                 LPCRECT pRectBounds,
                       LONG x,
                       LONG y,
                       DWORD grfKeyState) = 0;

        virtual HRESULT __stdcall OnInactiveSetCursor(
                                 LPCRECT pRectBounds,
                       LONG x,
                       LONG y,
                       DWORD dwMouseMsg,
                       BOOL fSetAlways) = 0;

    };
#line 5731 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
typedef IObjectWithSite *LPOBJECTWITHSITE;


extern "C" const IID IID_IObjectWithSite;



    struct __declspec(uuid("FC4801A3-2BA9-11CF-A229-00AA003D7352")) __declspec(novtable)
    IObjectWithSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSite(
                                     IUnknown *pUnkSite) = 0;

        virtual HRESULT __stdcall GetSite(
                                 const IID & riid,
                                                     void **ppvSite) = 0;

    };
#line 5828 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0036_v0_0_s_ifspec;







typedef IPerPropertyBrowsing *LPPERPROPERTYBROWSING;

typedef struct tagCALPOLESTR
    {
    ULONG cElems;
                    LPOLESTR *pElems;
    } CALPOLESTR;

typedef struct tagCALPOLESTR *LPCALPOLESTR;

typedef struct tagCADWORD
    {
    ULONG cElems;
                    DWORD *pElems;
    } CADWORD;

typedef struct tagCADWORD *LPCADWORD;


extern "C" const IID IID_IPerPropertyBrowsing;



    struct __declspec(uuid("376BD3AA-3845-101B-84ED-08002B2EC713")) __declspec(novtable)
    IPerPropertyBrowsing : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDisplayString(
                       DISPID dispID,
                                             BSTR *pBstr) = 0;

        virtual HRESULT __stdcall MapPropertyToPage(
                       DISPID dispID,
                                   CLSID *pClsid) = 0;

        virtual HRESULT __stdcall GetPredefinedStrings(
                       DISPID dispID,
                                   CALPOLESTR *pCaStringsOut,
                                   CADWORD *pCaCookiesOut) = 0;

        virtual HRESULT __stdcall GetPredefinedValue(
                       DISPID dispID,
                       DWORD dwCookie,
                                   VARIANT *pVarOut) = 0;

    };
#line 5980 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0037_v0_0_s_ifspec;







typedef IPropertyBag2 *LPPROPERTYBAG2;

typedef
enum tagPROPBAG2_TYPE
    {
        PROPBAG2_TYPE_UNDEFINED = 0,
        PROPBAG2_TYPE_DATA = 1,
        PROPBAG2_TYPE_URL = 2,
        PROPBAG2_TYPE_OBJECT = 3,
        PROPBAG2_TYPE_STREAM = 4,
        PROPBAG2_TYPE_STORAGE = 5,
        PROPBAG2_TYPE_MONIKER = 6
    } PROPBAG2_TYPE;

typedef struct tagPROPBAG2
    {
    DWORD dwType;
    VARTYPE vt;
    CLIPFORMAT cfType;
    DWORD dwHint;
    LPOLESTR pstrName;
    CLSID clsid;
    } PROPBAG2;


extern "C" const IID IID_IPropertyBag2;



    struct __declspec(uuid("22F55882-280B-11d0-A8A9-00A0C90C2004")) __declspec(novtable)
    IPropertyBag2 : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Read(
                       ULONG cProperties,
                                                                   PROPBAG2 *pPropBag,
                                             IErrorLog *pErrLog,
                                                                     VARIANT *pvarValue,
                                                                                       HRESULT *phrError) = 0;

        virtual HRESULT __stdcall Write(
                       ULONG cProperties,
                                                                   PROPBAG2 *pPropBag,
                                                                   VARIANT *pvarValue) = 0;

        virtual HRESULT __stdcall CountProperties(
                                   ULONG *pcProperties) = 0;

        virtual HRESULT __stdcall GetPropertyInfo(
                       ULONG iProperty,
                       ULONG cProperties,
                                                                     PROPBAG2 *pPropBag,
                                   ULONG *pcProperties) = 0;

        virtual HRESULT __stdcall LoadObject(
                                 LPCOLESTR pstrName,
                       DWORD dwHint,
                                     IUnknown *pUnkObject,
                                             IErrorLog *pErrLog) = 0;

    };
#line 6160 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0038_v0_0_s_ifspec;







typedef IPersistPropertyBag2 *LPPERSISTPROPERTYBAG2;


extern "C" const IID IID_IPersistPropertyBag2;



    struct __declspec(uuid("22F55881-280B-11d0-A8A9-00A0C90C2004")) __declspec(novtable)
    IPersistPropertyBag2 : public IPersist
    {
    public:
        virtual HRESULT __stdcall InitNew( void) = 0;

        virtual HRESULT __stdcall Load(
                                     IPropertyBag2 *pPropBag,
                                             IErrorLog *pErrLog) = 0;

        virtual HRESULT __stdcall Save(
                                     IPropertyBag2 *pPropBag,
                       BOOL fClearDirty,
                       BOOL fSaveAllProperties) = 0;

        virtual HRESULT __stdcall IsDirty( void) = 0;

    };
#line 6294 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0039_v0_0_s_ifspec;







typedef IAdviseSinkEx *LPADVISESINKEX;


extern "C" const IID IID_IAdviseSinkEx;



    struct __declspec(uuid("3AF24290-0C96-11CE-A0CF-00AA00600AB8")) __declspec(novtable)
    IAdviseSinkEx : public IAdviseSink
    {
    public:
        virtual void __stdcall OnViewStatusChange(
                       DWORD dwViewStatus) = 0;

    };
#line 6414 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
                HRESULT __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Proxy(
              IAdviseSinkEx * This,
               DWORD dwViewStatus);


void __stdcall IAdviseSinkEx_RemoteOnViewStatusChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 6439 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0040_v0_0_s_ifspec;







typedef IQuickActivate *LPQUICKACTIVATE;

typedef
enum tagQACONTAINERFLAGS
    {
        QACONTAINER_SHOWHATCHING = 0x1,
        QACONTAINER_SHOWGRABHANDLES = 0x2,
        QACONTAINER_USERMODE = 0x4,
        QACONTAINER_DISPLAYASDEFAULT = 0x8,
        QACONTAINER_UIDEAD = 0x10,
        QACONTAINER_AUTOCLIP = 0x20,
        QACONTAINER_MESSAGEREFLECT = 0x40,
        QACONTAINER_SUPPORTSMNEMONICS = 0x80
    } QACONTAINERFLAGS;

typedef __declspec(uuid("66504301-BE0F-101A-8BBB-00AA00300CAB")) DWORD OLE_COLOR;

typedef struct tagQACONTAINER
    {
    ULONG cbSize;
    IOleClientSite *pClientSite;
    IAdviseSinkEx *pAdviseSink;
    IPropertyNotifySink *pPropertyNotifySink;
    IUnknown *pUnkEventSink;
    DWORD dwAmbientFlags;
    OLE_COLOR colorFore;
    OLE_COLOR colorBack;
    IFont *pFont;
    IOleUndoManager *pUndoMgr;
    DWORD dwAppearance;
    LONG lcid;
    HPALETTE hpal;
    IBindHost *pBindHost;
    IOleControlSite *pOleControlSite;
    IServiceProvider *pServiceProvider;
    } QACONTAINER;

typedef struct tagQACONTROL
    {
    ULONG cbSize;
    DWORD dwMiscStatus;
    DWORD dwViewStatus;
    DWORD dwEventCookie;
    DWORD dwPropNotifyCookie;
    DWORD dwPointerActivationPolicy;
    } QACONTROL;


extern "C" const IID IID_IQuickActivate;



    struct __declspec(uuid("CF51ED10-62FE-11CF-BF86-00A0C9034836")) __declspec(novtable)
    IQuickActivate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QuickActivate(
                       QACONTAINER *pQaContainer,
                            QACONTROL *pQaControl) = 0;

        virtual HRESULT __stdcall SetContentExtent(
                                 LPSIZEL pSizel) = 0;

        virtual HRESULT __stdcall GetContentExtent(
                                   LPSIZEL pSizel) = 0;

    };
#line 6587 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
                HRESULT __stdcall IQuickActivate_RemoteQuickActivate_Proxy(
              IQuickActivate * This,
                         QACONTAINER *pQaContainer,
                           QACONTROL *pQaControl);


void __stdcall IQuickActivate_RemoteQuickActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
#line 6611 "D:/Program Files (x86)/Windows Kits/8.1/Include/um\\ocidl.h"
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocidl_0000_0041_v0_0_s_ifspec;



unsigned long __stdcall BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree( unsigned long *, BSTR * );

unsigned long __stdcall CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree( unsigned long *, HDC * );

unsigned long __stdcall HFONT_UserSize( unsigned long *, unsigned long , HFONT * );
unsigned char * __stdcall HFONT_UserMarshal( unsigned long *, unsigned char *, HFONT * );
unsigned char * __stdcall HFONT_UserUnmarshal( unsigned long *, unsigned char *, HFONT * );
void __stdcall HFONT_UserFree( unsigned long *, HFONT * );

unsigned long __stdcall HPALETTE_UserSize( unsigned long *, unsigned long , HPALETTE * );
unsigned char * __stdcall HPALETTE_UserMarshal( unsigned long *, unsigned char *, HPALETTE * );
unsigned char * __stdcall HPALETTE_UserUnmarshal( unsigned long *, unsigned char *, HPALETTE * );
void __stdcall HPALETTE_UserFree( unsigned long *, HPALETTE * );

unsigned long __stdcall HRGN_UserSize( unsigned long *, unsigned long , HRGN * );
unsigned char * __stdcall HRGN_UserMarshal( unsigned long *, unsigned char *, HRGN * );
unsigned char * __stdcall HRGN_UserUnmarshal( unsigned long *, unsigned char *, HRGN * );
void __stdcall HRGN_UserFree( unsigned long *, HRGN * );

unsigned long __stdcall HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree( unsigned long *, HWND * );

unsigned long __stdcall VARIANT_UserSize( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree( unsigned long *, VARIANT * );

unsigned long __stdcall BSTR_UserSize64( unsigned long *, unsigned long , BSTR * );
unsigned char * __stdcall BSTR_UserMarshal64( unsigned long *, unsigned char *, BSTR * );
unsigned char * __stdcall BSTR_UserUnmarshal64( unsigned long *, unsigned char *, BSTR * );
void __stdcall BSTR_UserFree64( unsigned long *, BSTR * );

unsigned long __stdcall CLIPFORMAT_UserSize64( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserMarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * __stdcall CLIPFORMAT_UserUnmarshal64( unsigned long *, unsigned char *, CLIPFORMAT * );
void __stdcall CLIPFORMAT_UserFree64( unsigned long *, CLIPFORMAT * );

unsigned long __stdcall HACCEL_UserSize64( unsigned long *, unsigned long , HACCEL * );
unsigned char * __stdcall HACCEL_UserMarshal64( unsigned long *, unsigned char *, HACCEL * );
unsigned char * __stdcall HACCEL_UserUnmarshal64( unsigned long *, unsigned char *, HACCEL * );
void __stdcall HACCEL_UserFree64( unsigned long *, HACCEL * );

unsigned long __stdcall HDC_UserSize64( unsigned long *, unsigned long , HDC * );
unsigned char * __stdcall HDC_UserMarshal64( unsigned long *, unsigned char *, HDC * );
unsigned char * __stdcall HDC_UserUnmarshal64( unsigned long *, unsigned char *, HDC * );
void __stdcall HDC_UserFree64( unsigned long *, HDC * );

unsigned long __stdcall HFONT_UserSize64( unsigned long *, unsigned long , HFONT * );
unsigned char * __stdcall HFONT_UserMarshal64( unsigned long *, unsigned char *, HFONT * );
unsigned char * __stdcall HFONT_UserUnmarshal64( unsigned long *, unsigned char *, HFONT * );
void __stdcall HFONT_UserFree64( unsigned long *, HFONT * );

unsigned long __stdcall HPALETTE_UserSize64( unsigned long *, unsigned long , HPALETTE * );
unsigned char * __stdcall HPALETTE_UserMarshal64( unsigned long *, unsigned char *, HPALETTE * );
unsigned char * __stdcall HPALETTE_UserUnmarshal64( unsigned long *, unsigned char *, HPALETTE * );
void __stdcall HPALETTE_UserFree64( unsigned long *, HPALETTE * );

unsigned long __stdcall HRGN_UserSize64( unsigned long *, unsigned long , HRGN * );
unsigned char * __stdcall HRGN_UserMarshal64( unsigned long *, unsigned char *, HRGN * );
unsigned char * __stdcall HRGN_UserUnmarshal64( unsigned long *, unsigned char *, HRGN * );
void __stdcall HRGN_UserFree64( unsigned long *, HRGN * );

unsigned long __stdcall HWND_UserSize64( unsigned long *, unsigned long , HWND * );
unsigned char * __stdcall HWND_UserMarshal64( unsigned long *, unsigned char *, HWND * );
unsigned char * __stdcall HWND_UserUnmarshal64( unsigned long *, unsigned char *, HWND * );
void __stdcall HWND_UserFree64( unsigned long *, HWND * );

unsigned long __stdcall VARIANT_UserSize64( unsigned long *, unsigned long , VARIANT * );
unsigned char * __stdcall VARIANT_UserMarshal64( unsigned long *, unsigned char *, VARIANT * );
unsigned char * __stdcall VARIANT_UserUnmarshal64( unsigned long *, unsigned char *, VARIANT * );
void __stdcall VARIANT_UserFree64( unsigned long *, VARIANT * );

              HRESULT __stdcall IEnumConnections_Next_Proxy(
    IEnumConnections * This,
               ULONG cConnections,
                                    LPCONNECTDATA rgcd,
                ULONG *pcFetched);


                HRESULT __stdcall IEnumConnections_Next_Stub(
              IEnumConnections * This,
               ULONG cConnections,
                                                                                     LPCONNECTDATA rgcd,
                           ULONG *pcFetched);

              HRESULT __stdcall IEnumConnectionPoints_Next_Proxy(
    IEnumConnectionPoints * This,
               ULONG cConnections,
                                    LPCONNECTIONPOINT *ppCP,
                ULONG *pcFetched);


                HRESULT __stdcall IEnumConnectionPoints_Next_Stub(
              IEnumConnectionPoints * This,
               ULONG cConnections,
                                                                                     LPCONNECTIONPOINT *ppCP,
                           ULONG *pcFetched);

              HRESULT __stdcall IClassFactory2_CreateInstanceLic_Proxy(
    IClassFactory2 * This,
               IUnknown *pUnkOuter,
               IUnknown *pUnkReserved,
               const IID & riid,
               BSTR bstrKey,
                        PVOID *ppvObj);


                HRESULT __stdcall IClassFactory2_CreateInstanceLic_Stub(
              IClassFactory2 * This,
                         const IID & riid,
                         BSTR bstrKey,
                                             IUnknown **ppvObj);

              HRESULT __stdcall IPersistMemory_Load_Proxy(
    IPersistMemory * This,
                        LPVOID pMem,
               ULONG cbSize);


                HRESULT __stdcall IPersistMemory_Load_Stub(
              IPersistMemory * This,
                                                      BYTE *pMem,
               ULONG cbSize);

              HRESULT __stdcall IPersistMemory_Save_Proxy(
    IPersistMemory * This,
                         LPVOID pMem,
               BOOL fClearDirty,
               ULONG cbSize);


                HRESULT __stdcall IPersistMemory_Save_Stub(
              IPersistMemory * This,
                                                        BYTE *pMem,
               BOOL fClearDirty,
               ULONG cbSize);

              HRESULT __stdcall IEnumOleUndoUnits_Next_Proxy(
    IEnumOleUndoUnits * This,
               ULONG cElt,
                                    IOleUndoUnit **rgElt,
                ULONG *pcEltFetched);


                HRESULT __stdcall IEnumOleUndoUnits_Next_Stub(
              IEnumOleUndoUnits * This,
               ULONG cElt,
                                                                                IOleUndoUnit **rgElt,
                           ULONG *pcEltFetched);

              void __stdcall IAdviseSinkEx_OnViewStatusChange_Proxy(
    IAdviseSinkEx * This,
               DWORD dwViewStatus);


                HRESULT __stdcall IAdviseSinkEx_OnViewStatusChange_Stub(
              IAdviseSinkEx * This,
               DWORD dwViewStatus);

              HRESULT __stdcall IQuickActivate_QuickActivate_Proxy(
    IQuickActivate * This,
               QACONTAINER *pQaContainer,
                    QACONTROL *pQaControl);


                HRESULT __stdcall IQuickActivate_QuickActivate_Stub(
              IQuickActivate * This,
                         QACONTAINER *pQaContainer,
                           QACONTROL *pQaControl);






}
#line 236 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
typedef struct IDXGIObject IDXGIObject;





typedef struct IDXGIDeviceSubObject IDXGIDeviceSubObject;





typedef struct IDXGIResource IDXGIResource;





typedef struct IDXGIKeyedMutex IDXGIKeyedMutex;





typedef struct IDXGISurface IDXGISurface;





typedef struct IDXGISurface1 IDXGISurface1;





typedef struct IDXGIAdapter IDXGIAdapter;





typedef struct IDXGIOutput IDXGIOutput;





typedef struct IDXGISwapChain IDXGISwapChain;





typedef struct IDXGIFactory IDXGIFactory;





typedef struct IDXGIDevice IDXGIDevice;





typedef struct IDXGIFactory1 IDXGIFactory1;





typedef struct IDXGIAdapter1 IDXGIAdapter1;





typedef struct IDXGIDevice1 IDXGIDevice1;







#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgitype.h"





#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgiformat.h"






typedef enum DXGI_FORMAT
{
    DXGI_FORMAT_UNKNOWN = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
    DXGI_FORMAT_R32G32B32A32_UINT = 3,
    DXGI_FORMAT_R32G32B32A32_SINT = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS = 5,
    DXGI_FORMAT_R32G32B32_FLOAT = 6,
    DXGI_FORMAT_R32G32B32_UINT = 7,
    DXGI_FORMAT_R32G32B32_SINT = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM = 11,
    DXGI_FORMAT_R16G16B16A16_UINT = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM = 13,
    DXGI_FORMAT_R16G16B16A16_SINT = 14,
    DXGI_FORMAT_R32G32_TYPELESS = 15,
    DXGI_FORMAT_R32G32_FLOAT = 16,
    DXGI_FORMAT_R32G32_UINT = 17,
    DXGI_FORMAT_R32G32_SINT = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM = 24,
    DXGI_FORMAT_R10G10B10A2_UINT = 25,
    DXGI_FORMAT_R11G11B10_FLOAT = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
    DXGI_FORMAT_R8G8B8A8_UINT = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM = 31,
    DXGI_FORMAT_R8G8B8A8_SINT = 32,
    DXGI_FORMAT_R16G16_TYPELESS = 33,
    DXGI_FORMAT_R16G16_FLOAT = 34,
    DXGI_FORMAT_R16G16_UNORM = 35,
    DXGI_FORMAT_R16G16_UINT = 36,
    DXGI_FORMAT_R16G16_SNORM = 37,
    DXGI_FORMAT_R16G16_SINT = 38,
    DXGI_FORMAT_R32_TYPELESS = 39,
    DXGI_FORMAT_D32_FLOAT = 40,
    DXGI_FORMAT_R32_FLOAT = 41,
    DXGI_FORMAT_R32_UINT = 42,
    DXGI_FORMAT_R32_SINT = 43,
    DXGI_FORMAT_R24G8_TYPELESS = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
    DXGI_FORMAT_R8G8_TYPELESS = 48,
    DXGI_FORMAT_R8G8_UNORM = 49,
    DXGI_FORMAT_R8G8_UINT = 50,
    DXGI_FORMAT_R8G8_SNORM = 51,
    DXGI_FORMAT_R8G8_SINT = 52,
    DXGI_FORMAT_R16_TYPELESS = 53,
    DXGI_FORMAT_R16_FLOAT = 54,
    DXGI_FORMAT_D16_UNORM = 55,
    DXGI_FORMAT_R16_UNORM = 56,
    DXGI_FORMAT_R16_UINT = 57,
    DXGI_FORMAT_R16_SNORM = 58,
    DXGI_FORMAT_R16_SINT = 59,
    DXGI_FORMAT_R8_TYPELESS = 60,
    DXGI_FORMAT_R8_UNORM = 61,
    DXGI_FORMAT_R8_UINT = 62,
    DXGI_FORMAT_R8_SNORM = 63,
    DXGI_FORMAT_R8_SINT = 64,
    DXGI_FORMAT_A8_UNORM = 65,
    DXGI_FORMAT_R1_UNORM = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
    DXGI_FORMAT_BC1_TYPELESS = 70,
    DXGI_FORMAT_BC1_UNORM = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB = 72,
    DXGI_FORMAT_BC2_TYPELESS = 73,
    DXGI_FORMAT_BC2_UNORM = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB = 75,
    DXGI_FORMAT_BC3_TYPELESS = 76,
    DXGI_FORMAT_BC3_UNORM = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB = 78,
    DXGI_FORMAT_BC4_TYPELESS = 79,
    DXGI_FORMAT_BC4_UNORM = 80,
    DXGI_FORMAT_BC4_SNORM = 81,
    DXGI_FORMAT_BC5_TYPELESS = 82,
    DXGI_FORMAT_BC5_UNORM = 83,
    DXGI_FORMAT_BC5_SNORM = 84,
    DXGI_FORMAT_B5G6R5_UNORM = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
    DXGI_FORMAT_BC6H_TYPELESS = 94,
    DXGI_FORMAT_BC6H_UF16 = 95,
    DXGI_FORMAT_BC6H_SF16 = 96,
    DXGI_FORMAT_BC7_TYPELESS = 97,
    DXGI_FORMAT_BC7_UNORM = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB = 99,
    DXGI_FORMAT_FORCE_UINT = 0xffffffff
} DXGI_FORMAT;
#line 6 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgitype.h"
#line 53 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgitype.h"
typedef struct DXGI_RGB
{
    float Red;
    float Green;
    float Blue;
} DXGI_RGB;

typedef struct DXGI_GAMMA_CONTROL
{
    DXGI_RGB Scale;
    DXGI_RGB Offset;
    DXGI_RGB GammaCurve[ 1025 ];
} DXGI_GAMMA_CONTROL;

typedef struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
    BOOL ScaleAndOffsetSupported;
    float MaxConvertedValue;
    float MinConvertedValue;
    UINT NumGammaControlPoints;
    float ControlPointPositions[1025];
} DXGI_GAMMA_CONTROL_CAPABILITIES;

typedef struct DXGI_RATIONAL
{
    UINT Numerator;
    UINT Denominator;
} DXGI_RATIONAL;

typedef enum DXGI_MODE_SCANLINE_ORDER
{
    DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0,
    DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1,
    DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
    DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
} DXGI_MODE_SCANLINE_ORDER;

typedef enum DXGI_MODE_SCALING
{
    DXGI_MODE_SCALING_UNSPECIFIED = 0,
    DXGI_MODE_SCALING_CENTERED = 1,
    DXGI_MODE_SCALING_STRETCHED = 2
} DXGI_MODE_SCALING;

typedef enum DXGI_MODE_ROTATION
{
    DXGI_MODE_ROTATION_UNSPECIFIED = 0,
    DXGI_MODE_ROTATION_IDENTITY = 1,
    DXGI_MODE_ROTATION_ROTATE90 = 2,
    DXGI_MODE_ROTATION_ROTATE180 = 3,
    DXGI_MODE_ROTATION_ROTATE270 = 4
} DXGI_MODE_ROTATION;

typedef struct DXGI_MODE_DESC
{
    UINT Width;
    UINT Height;
    DXGI_RATIONAL RefreshRate;
    DXGI_FORMAT Format;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
} DXGI_MODE_DESC;

typedef struct DXGI_SAMPLE_DESC
{
    UINT Count;
    UINT Quality;
} DXGI_SAMPLE_DESC;
#line 130 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"



extern "C"{
#line 152 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
typedef UINT DXGI_USAGE;

typedef struct DXGI_FRAME_STATISTICS
    {
    UINT PresentCount;
    UINT PresentRefreshCount;
    UINT SyncRefreshCount;
    LARGE_INTEGER SyncQPCTime;
    LARGE_INTEGER SyncGPUTime;
    } DXGI_FRAME_STATISTICS;

typedef struct DXGI_MAPPED_RECT
    {
    INT Pitch;
    BYTE *pBits;
    } DXGI_MAPPED_RECT;
#line 179 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
typedef struct DXGI_ADAPTER_DESC
    {
    WCHAR Description[ 128 ];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
    } DXGI_ADAPTER_DESC;
#line 200 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
typedef struct DXGI_OUTPUT_DESC
    {
    WCHAR DeviceName[ 32 ];
    RECT DesktopCoordinates;
    BOOL AttachedToDesktop;
    DXGI_MODE_ROTATION Rotation;
    HMONITOR Monitor;
    } DXGI_OUTPUT_DESC;

typedef struct DXGI_SHARED_RESOURCE
    {
    HANDLE Handle;
    } DXGI_SHARED_RESOURCE;
#line 224 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
typedef
enum DXGI_RESIDENCY
    { DXGI_RESIDENCY_FULLY_RESIDENT = 1,
 DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY = 2,
 DXGI_RESIDENCY_EVICTED_TO_DISK = 3
    } DXGI_RESIDENCY;

typedef struct DXGI_SURFACE_DESC
    {
    UINT Width;
    UINT Height;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    } DXGI_SURFACE_DESC;

typedef
enum DXGI_SWAP_EFFECT
    { DXGI_SWAP_EFFECT_DISCARD = 0,
 DXGI_SWAP_EFFECT_SEQUENTIAL = 1
    } DXGI_SWAP_EFFECT;

typedef
enum DXGI_SWAP_CHAIN_FLAG
    { DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1,
 DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2,
 DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4
    } DXGI_SWAP_CHAIN_FLAG;

typedef struct DXGI_SWAP_CHAIN_DESC
    {
    DXGI_MODE_DESC BufferDesc;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    UINT BufferCount;
    HWND OutputWindow;
    BOOL Windowed;
    DXGI_SWAP_EFFECT SwapEffect;
    UINT Flags;
    } DXGI_SWAP_CHAIN_DESC;



extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0000_v0_0_s_ifspec;
#line 276 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIObject;



    struct __declspec(uuid("aec22fb8-76f3-4639-9be0-28eb43a67a2e")) __declspec(novtable)
    IDXGIObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & Name,
                       UINT DataSize,

                                   const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & Name,

                  const IUnknown *pUnknown) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & Name,

                     UINT *pDataSize,

                                      void *pData) = 0;

        virtual HRESULT __stdcall GetParent(

                  const IID & riid,

                   void **ppParent) = 0;

    };
#line 415 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIDeviceSubObject;



    struct __declspec(uuid("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")) __declspec(novtable)
    IDXGIDeviceSubObject : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall GetDevice(

                  const IID & riid,

                   void **ppDevice) = 0;

    };
#line 544 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIResource;



    struct __declspec(uuid("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")) __declspec(novtable)
    IDXGIResource : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall GetSharedHandle(

                   HANDLE *pSharedHandle) = 0;

        virtual HRESULT __stdcall GetUsage(

                   DXGI_USAGE *pUsage) = 0;

        virtual HRESULT __stdcall SetEvictionPriority(
                       UINT EvictionPriority) = 0;

        virtual HRESULT __stdcall GetEvictionPriority(

                   UINT *pEvictionPriority) = 0;

    };
#line 714 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIKeyedMutex;



    struct __declspec(uuid("9d8e1289-d7b3-465f-8126-250e349af85d")) __declspec(novtable)
    IDXGIKeyedMutex : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall AcquireSync(
                       UINT64 Key,
                       DWORD dwMilliseconds) = 0;

        virtual HRESULT __stdcall ReleaseSync(
                       UINT64 Key) = 0;

    };
#line 864 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0004_v0_0_s_ifspec;
#line 874 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGISurface;



    struct __declspec(uuid("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")) __declspec(novtable)
    IDXGISurface : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall GetDesc(

                   DXGI_SURFACE_DESC *pDesc) = 0;

        virtual HRESULT __stdcall Map(

                   DXGI_MAPPED_RECT *pLockedRect,
                       UINT MapFlags) = 0;

        virtual HRESULT __stdcall Unmap( void) = 0;

    };
#line 1032 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGISurface1;



    struct __declspec(uuid("4AE63092-6327-4c1b-80AE-BFE12EA32B86")) __declspec(novtable)
    IDXGISurface1 : public IDXGISurface
    {
    public:
        virtual HRESULT __stdcall GetDC(
                       BOOL Discard,

                   HDC *phdc) = 0;

        virtual HRESULT __stdcall ReleaseDC(

                      RECT *pDirtyRect) = 0;

    };
#line 1205 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0006_v0_0_s_ifspec;
#line 1215 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIAdapter;



    struct __declspec(uuid("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")) __declspec(novtable)
    IDXGIAdapter : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall EnumOutputs(
                       UINT Output,

                   IDXGIOutput **ppOutput) = 0;

        virtual HRESULT __stdcall GetDesc(

                   DXGI_ADAPTER_DESC *pDesc) = 0;

        virtual HRESULT __stdcall CheckInterfaceSupport(

                  const GUID & InterfaceName,

                   LARGE_INTEGER *pUMDVersion) = 0;

    };
#line 1372 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0007_v0_0_s_ifspec;
#line 1382 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIOutput;



    struct __declspec(uuid("ae02eedb-c735-4690-8d52-5a8dc20213aa")) __declspec(novtable)
    IDXGIOutput : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall GetDesc(

                   DXGI_OUTPUT_DESC *pDesc) = 0;

        virtual HRESULT __stdcall GetDisplayModeList(
                       DXGI_FORMAT EnumFormat,
                       UINT Flags,

                     UINT *pNumModes,

                                                          DXGI_MODE_DESC *pDesc) = 0;

        virtual HRESULT __stdcall FindClosestMatchingMode(

                  const DXGI_MODE_DESC *pModeToMatch,

                   DXGI_MODE_DESC *pClosestMatch,

                      IUnknown *pConcernedDevice) = 0;

        virtual HRESULT __stdcall WaitForVBlank( void) = 0;

        virtual HRESULT __stdcall TakeOwnership(

                  IUnknown *pDevice,
            BOOL Exclusive) = 0;

        virtual void __stdcall ReleaseOwnership( void) = 0;

        virtual HRESULT __stdcall GetGammaControlCapabilities(

                   DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps) = 0;

        virtual HRESULT __stdcall SetGammaControl(

                  const DXGI_GAMMA_CONTROL *pArray) = 0;

        virtual HRESULT __stdcall GetGammaControl(

                   DXGI_GAMMA_CONTROL *pArray) = 0;

        virtual HRESULT __stdcall SetDisplaySurface(

                  IDXGISurface *pScanoutSurface) = 0;

        virtual HRESULT __stdcall GetDisplaySurfaceData(

                  IDXGISurface *pDestination) = 0;

        virtual HRESULT __stdcall GetFrameStatistics(

                   DXGI_FRAME_STATISTICS *pStats) = 0;

    };
#line 1651 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0008_v0_0_s_ifspec;
#line 1661 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGISwapChain;



    struct __declspec(uuid("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")) __declspec(novtable)
    IDXGISwapChain : public IDXGIDeviceSubObject
    {
    public:
        virtual HRESULT __stdcall Present(
                       UINT SyncInterval,
                       UINT Flags) = 0;

        virtual HRESULT __stdcall GetBuffer(
                       UINT Buffer,

                  const IID & riid,

                   void **ppSurface) = 0;

        virtual HRESULT __stdcall SetFullscreenState(
                       BOOL Fullscreen,

                      IDXGIOutput *pTarget) = 0;

        virtual HRESULT __stdcall GetFullscreenState(

                   BOOL *pFullscreen,

                   IDXGIOutput **ppTarget) = 0;

        virtual HRESULT __stdcall GetDesc(

                   DXGI_SWAP_CHAIN_DESC *pDesc) = 0;

        virtual HRESULT __stdcall ResizeBuffers(
                       UINT BufferCount,
                       UINT Width,
                       UINT Height,
                       DXGI_FORMAT NewFormat,
                       UINT SwapChainFlags) = 0;

        virtual HRESULT __stdcall ResizeTarget(

                  const DXGI_MODE_DESC *pNewTargetParameters) = 0;

        virtual HRESULT __stdcall GetContainingOutput(

                   IDXGIOutput **ppOutput) = 0;

        virtual HRESULT __stdcall GetFrameStatistics(

                   DXGI_FRAME_STATISTICS *pStats) = 0;

        virtual HRESULT __stdcall GetLastPresentCount(

                   UINT *pLastPresentCount) = 0;

    };
#line 1925 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0009_v0_0_s_ifspec;
#line 1935 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIFactory;



    struct __declspec(uuid("7b7166ec-21c7-44ae-b21a-c9ae321ae369")) __declspec(novtable)
    IDXGIFactory : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall EnumAdapters(
                       UINT Adapter,

                   IDXGIAdapter **ppAdapter) = 0;

        virtual HRESULT __stdcall MakeWindowAssociation(
            HWND WindowHandle,
            UINT Flags) = 0;

        virtual HRESULT __stdcall GetWindowAssociation(

                   HWND *pWindowHandle) = 0;

        virtual HRESULT __stdcall CreateSwapChain(

                  IUnknown *pDevice,

                  DXGI_SWAP_CHAIN_DESC *pDesc,

                   IDXGISwapChain **ppSwapChain) = 0;

        virtual HRESULT __stdcall CreateSoftwareAdapter(
                       HMODULE Module,

                   IDXGIAdapter **ppAdapter) = 0;

    };
#line 2116 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
HRESULT __stdcall CreateDXGIFactory(const IID & riid, void **ppFactory);
HRESULT __stdcall CreateDXGIFactory1(const IID & riid, void **ppFactory);


extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0010_v0_0_s_ifspec;
#line 2130 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIDevice;



    struct __declspec(uuid("54ec77fa-1377-44e6-8c32-88fd5f44c84c")) __declspec(novtable)
    IDXGIDevice : public IDXGIObject
    {
    public:
        virtual HRESULT __stdcall GetAdapter(

                   IDXGIAdapter **pAdapter) = 0;

        virtual HRESULT __stdcall CreateSurface(

                  const DXGI_SURFACE_DESC *pDesc,
                       UINT NumSurfaces,
                       DXGI_USAGE Usage,

                      const DXGI_SHARED_RESOURCE *pSharedResource,

                   IDXGISurface **ppSurface) = 0;

        virtual HRESULT __stdcall QueryResourceResidency(

                                       IUnknown *const *ppResources,

                                        DXGI_RESIDENCY *pResidencyStatus,
                       UINT NumResources) = 0;

        virtual HRESULT __stdcall SetGPUThreadPriority(
                       INT Priority) = 0;

        virtual HRESULT __stdcall GetGPUThreadPriority(

                   INT *pPriority) = 0;

    };
#line 2315 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
typedef
enum DXGI_ADAPTER_FLAG
    { DXGI_ADAPTER_FLAG_NONE = 0,
 DXGI_ADAPTER_FLAG_REMOTE = 1,
 DXGI_ADAPTER_FLAG_FORCE_DWORD = 0xffffffff
    } DXGI_ADAPTER_FLAG;

typedef struct DXGI_ADAPTER_DESC1
    {
    WCHAR Description[ 128 ];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
    UINT Flags;
    } DXGI_ADAPTER_DESC1;

typedef struct DXGI_DISPLAY_COLOR_SPACE
    {
    FLOAT PrimaryCoordinates[ 8 ][ 2 ];
    FLOAT WhitePoints[ 16 ][ 2 ];
    } DXGI_DISPLAY_COLOR_SPACE;




extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0011_v0_0_s_ifspec;
#line 2355 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIFactory1;



    struct __declspec(uuid("770aae78-f26f-4dba-a829-253c83d1b387")) __declspec(novtable)
    IDXGIFactory1 : public IDXGIFactory
    {
    public:
        virtual HRESULT __stdcall EnumAdapters1(
                       UINT Adapter,

                   IDXGIAdapter1 **ppAdapter) = 0;

        virtual BOOL __stdcall IsCurrent( void) = 0;

    };
#line 2537 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIAdapter1;



    struct __declspec(uuid("29038f61-3839-4626-91fd-086879011a05")) __declspec(novtable)
    IDXGIAdapter1 : public IDXGIAdapter
    {
    public:
        virtual HRESULT __stdcall GetDesc1(

                   DXGI_ADAPTER_DESC1 *pDesc) = 0;

    };
#line 2690 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const IID IID_IDXGIDevice1;



    struct __declspec(uuid("77db970f-6276-48ba-ba28-070143b4392c")) __declspec(novtable)
    IDXGIDevice1 : public IDXGIDevice
    {
    public:
        virtual HRESULT __stdcall SetMaximumFrameLatency(
                       UINT MaxLatency) = 0;

        virtual HRESULT __stdcall GetMaximumFrameLatency(

                   UINT *pMaxLatency) = 0;

    };
#line 2872 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/dxgi.h"
extern "C" const GUID IID_IDXGIObject;
extern "C" const GUID IID_IDXGIDeviceSubObject;
extern "C" const GUID IID_IDXGIResource;
extern "C" const GUID IID_IDXGIKeyedMutex;
extern "C" const GUID IID_IDXGISurface;
extern "C" const GUID IID_IDXGISurface1;
extern "C" const GUID IID_IDXGIAdapter;
extern "C" const GUID IID_IDXGIOutput;
extern "C" const GUID IID_IDXGISwapChain;
extern "C" const GUID IID_IDXGIFactory;
extern "C" const GUID IID_IDXGIDevice;
extern "C" const GUID IID_IDXGIFactory1;
extern "C" const GUID IID_IDXGIAdapter1;
extern "C" const GUID IID_IDXGIDevice1;


extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dxgi_0000_0014_v0_0_s_ifspec;






}
#line 237 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dcommon.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dcommon.h"
typedef struct ID3D10Blob ID3D10Blob;
#line 54 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dcommon.h"
extern "C"{






typedef
enum D3D_DRIVER_TYPE
    { D3D_DRIVER_TYPE_UNKNOWN = 0,
 D3D_DRIVER_TYPE_HARDWARE = ( D3D_DRIVER_TYPE_UNKNOWN + 1 ) ,
 D3D_DRIVER_TYPE_REFERENCE = ( D3D_DRIVER_TYPE_HARDWARE + 1 ) ,
 D3D_DRIVER_TYPE_NULL = ( D3D_DRIVER_TYPE_REFERENCE + 1 ) ,
 D3D_DRIVER_TYPE_SOFTWARE = ( D3D_DRIVER_TYPE_NULL + 1 ) ,
 D3D_DRIVER_TYPE_WARP = ( D3D_DRIVER_TYPE_SOFTWARE + 1 )
    } D3D_DRIVER_TYPE;

typedef
enum D3D_FEATURE_LEVEL
    { D3D_FEATURE_LEVEL_9_1 = 0x9100,
 D3D_FEATURE_LEVEL_9_2 = 0x9200,
 D3D_FEATURE_LEVEL_9_3 = 0x9300,
 D3D_FEATURE_LEVEL_10_0 = 0xa000,
 D3D_FEATURE_LEVEL_10_1 = 0xa100,
 D3D_FEATURE_LEVEL_11_0 = 0xb000
    } D3D_FEATURE_LEVEL;

typedef
enum D3D_PRIMITIVE_TOPOLOGY
    { D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
 D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
 D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
 D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
 D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
 D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
 D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
 D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
 D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
 D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
 D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
 D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
 D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
 D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
 D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
 D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
 D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
 D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
 D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
 D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
 D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
 D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
 D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
 D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
 D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
 D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
 D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
 D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
 D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
 D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
 D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
 D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
 D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
 D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
 D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
 D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
 D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
 D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
 D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
 D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
 D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
 D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
 D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
 D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
 D3D10_PRIMITIVE_TOPOLOGY_LINELIST = D3D_PRIMITIVE_TOPOLOGY_LINELIST,
 D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
 D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
 D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
 D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
 D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
 D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
 D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
 D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
 D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
 D3D11_PRIMITIVE_TOPOLOGY_LINELIST = D3D_PRIMITIVE_TOPOLOGY_LINELIST,
 D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
 D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
 D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
 D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
 D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
 D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
 D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
 D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
 D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
    } D3D_PRIMITIVE_TOPOLOGY;

typedef
enum D3D_PRIMITIVE
    { D3D_PRIMITIVE_UNDEFINED = 0,
 D3D_PRIMITIVE_POINT = 1,
 D3D_PRIMITIVE_LINE = 2,
 D3D_PRIMITIVE_TRIANGLE = 3,
 D3D_PRIMITIVE_LINE_ADJ = 6,
 D3D_PRIMITIVE_TRIANGLE_ADJ = 7,
 D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
 D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
 D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
 D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
 D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
 D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
 D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
 D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
 D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
 D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
 D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
 D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
 D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
 D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
 D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
 D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
 D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
 D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
 D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
 D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 28,
 D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 29,
 D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 30,
 D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 31,
 D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 32,
 D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 33,
 D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 34,
 D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 35,
 D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 36,
 D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 37,
 D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 38,
 D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 39,
 D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 40,
 D3D10_PRIMITIVE_UNDEFINED = D3D_PRIMITIVE_UNDEFINED,
 D3D10_PRIMITIVE_POINT = D3D_PRIMITIVE_POINT,
 D3D10_PRIMITIVE_LINE = D3D_PRIMITIVE_LINE,
 D3D10_PRIMITIVE_TRIANGLE = D3D_PRIMITIVE_TRIANGLE,
 D3D10_PRIMITIVE_LINE_ADJ = D3D_PRIMITIVE_LINE_ADJ,
 D3D10_PRIMITIVE_TRIANGLE_ADJ = D3D_PRIMITIVE_TRIANGLE_ADJ,
 D3D11_PRIMITIVE_UNDEFINED = D3D_PRIMITIVE_UNDEFINED,
 D3D11_PRIMITIVE_POINT = D3D_PRIMITIVE_POINT,
 D3D11_PRIMITIVE_LINE = D3D_PRIMITIVE_LINE,
 D3D11_PRIMITIVE_TRIANGLE = D3D_PRIMITIVE_TRIANGLE,
 D3D11_PRIMITIVE_LINE_ADJ = D3D_PRIMITIVE_LINE_ADJ,
 D3D11_PRIMITIVE_TRIANGLE_ADJ = D3D_PRIMITIVE_TRIANGLE_ADJ,
 D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = D3D_PRIMITIVE_1_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = D3D_PRIMITIVE_2_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = D3D_PRIMITIVE_3_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = D3D_PRIMITIVE_4_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = D3D_PRIMITIVE_5_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = D3D_PRIMITIVE_6_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = D3D_PRIMITIVE_7_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = D3D_PRIMITIVE_8_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = D3D_PRIMITIVE_9_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = D3D_PRIMITIVE_10_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = D3D_PRIMITIVE_11_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = D3D_PRIMITIVE_12_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = D3D_PRIMITIVE_13_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = D3D_PRIMITIVE_14_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = D3D_PRIMITIVE_15_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = D3D_PRIMITIVE_16_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = D3D_PRIMITIVE_17_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = D3D_PRIMITIVE_18_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = D3D_PRIMITIVE_19_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = D3D_PRIMITIVE_20_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = D3D_PRIMITIVE_21_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = D3D_PRIMITIVE_22_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = D3D_PRIMITIVE_23_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = D3D_PRIMITIVE_24_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = D3D_PRIMITIVE_25_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = D3D_PRIMITIVE_26_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = D3D_PRIMITIVE_27_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = D3D_PRIMITIVE_28_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = D3D_PRIMITIVE_29_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = D3D_PRIMITIVE_30_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = D3D_PRIMITIVE_31_CONTROL_POINT_PATCH,
 D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = D3D_PRIMITIVE_32_CONTROL_POINT_PATCH
    } D3D_PRIMITIVE;

typedef
enum D3D_SRV_DIMENSION
    { D3D_SRV_DIMENSION_UNKNOWN = 0,
 D3D_SRV_DIMENSION_BUFFER = 1,
 D3D_SRV_DIMENSION_TEXTURE1D = 2,
 D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3,
 D3D_SRV_DIMENSION_TEXTURE2D = 4,
 D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5,
 D3D_SRV_DIMENSION_TEXTURE2DMS = 6,
 D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
 D3D_SRV_DIMENSION_TEXTURE3D = 8,
 D3D_SRV_DIMENSION_TEXTURECUBE = 9,
 D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
 D3D_SRV_DIMENSION_BUFFEREX = 11,
 D3D10_SRV_DIMENSION_UNKNOWN = D3D_SRV_DIMENSION_UNKNOWN,
 D3D10_SRV_DIMENSION_BUFFER = D3D_SRV_DIMENSION_BUFFER,
 D3D10_SRV_DIMENSION_TEXTURE1D = D3D_SRV_DIMENSION_TEXTURE1D,
 D3D10_SRV_DIMENSION_TEXTURE1DARRAY = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
 D3D10_SRV_DIMENSION_TEXTURE2D = D3D_SRV_DIMENSION_TEXTURE2D,
 D3D10_SRV_DIMENSION_TEXTURE2DARRAY = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
 D3D10_SRV_DIMENSION_TEXTURE2DMS = D3D_SRV_DIMENSION_TEXTURE2DMS,
 D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
 D3D10_SRV_DIMENSION_TEXTURE3D = D3D_SRV_DIMENSION_TEXTURE3D,
 D3D10_SRV_DIMENSION_TEXTURECUBE = D3D_SRV_DIMENSION_TEXTURECUBE,
 D3D10_1_SRV_DIMENSION_UNKNOWN = D3D_SRV_DIMENSION_UNKNOWN,
 D3D10_1_SRV_DIMENSION_BUFFER = D3D_SRV_DIMENSION_BUFFER,
 D3D10_1_SRV_DIMENSION_TEXTURE1D = D3D_SRV_DIMENSION_TEXTURE1D,
 D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
 D3D10_1_SRV_DIMENSION_TEXTURE2D = D3D_SRV_DIMENSION_TEXTURE2D,
 D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
 D3D10_1_SRV_DIMENSION_TEXTURE2DMS = D3D_SRV_DIMENSION_TEXTURE2DMS,
 D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
 D3D10_1_SRV_DIMENSION_TEXTURE3D = D3D_SRV_DIMENSION_TEXTURE3D,
 D3D10_1_SRV_DIMENSION_TEXTURECUBE = D3D_SRV_DIMENSION_TEXTURECUBE,
 D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
 D3D11_SRV_DIMENSION_UNKNOWN = D3D_SRV_DIMENSION_UNKNOWN,
 D3D11_SRV_DIMENSION_BUFFER = D3D_SRV_DIMENSION_BUFFER,
 D3D11_SRV_DIMENSION_TEXTURE1D = D3D_SRV_DIMENSION_TEXTURE1D,
 D3D11_SRV_DIMENSION_TEXTURE1DARRAY = D3D_SRV_DIMENSION_TEXTURE1DARRAY,
 D3D11_SRV_DIMENSION_TEXTURE2D = D3D_SRV_DIMENSION_TEXTURE2D,
 D3D11_SRV_DIMENSION_TEXTURE2DARRAY = D3D_SRV_DIMENSION_TEXTURE2DARRAY,
 D3D11_SRV_DIMENSION_TEXTURE2DMS = D3D_SRV_DIMENSION_TEXTURE2DMS,
 D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = D3D_SRV_DIMENSION_TEXTURE2DMSARRAY,
 D3D11_SRV_DIMENSION_TEXTURE3D = D3D_SRV_DIMENSION_TEXTURE3D,
 D3D11_SRV_DIMENSION_TEXTURECUBE = D3D_SRV_DIMENSION_TEXTURECUBE,
 D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = D3D_SRV_DIMENSION_TEXTURECUBEARRAY,
 D3D11_SRV_DIMENSION_BUFFEREX = D3D_SRV_DIMENSION_BUFFEREX
    } D3D_SRV_DIMENSION;

typedef struct _D3D_SHADER_MACRO
    {
    LPCSTR Name;
    LPCSTR Definition;
    } D3D_SHADER_MACRO;

typedef struct _D3D_SHADER_MACRO *LPD3D_SHADER_MACRO;

extern "C" const GUID IID_ID3D10Blob;


extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0000_v0_0_s_ifspec;
#line 335 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dcommon.h"
extern "C" const IID IID_ID3D10Blob;



    struct __declspec(uuid("8BA5FB08-5195-40e2-AC58-0D989C3A0102")) __declspec(novtable)
    ID3D10Blob : public IUnknown
    {
    public:
        virtual LPVOID __stdcall GetBufferPointer( void) = 0;

        virtual SIZE_T __stdcall GetBufferSize( void) = 0;

    };
#line 416 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dcommon.h"
typedef struct ID3D10Blob* LPD3D10BLOB;
typedef ID3D10Blob ID3DBlob;
typedef ID3DBlob* LPD3DBLOB;

typedef
enum _D3D_INCLUDE_TYPE
    { D3D_INCLUDE_LOCAL = 0,
 D3D_INCLUDE_SYSTEM = ( D3D_INCLUDE_LOCAL + 1 ) ,
 D3D10_INCLUDE_LOCAL = D3D_INCLUDE_LOCAL,
 D3D10_INCLUDE_SYSTEM = D3D_INCLUDE_SYSTEM,
 D3D_INCLUDE_FORCE_DWORD = 0x7fffffff
    } D3D_INCLUDE_TYPE;

typedef struct ID3DInclude ID3DInclude;


struct __declspec(novtable) ID3DInclude
{
    virtual __declspec(nothrow) HRESULT __stdcall Open( D3D_INCLUDE_TYPE IncludeType, LPCSTR pFileName, LPCVOID pParentData, LPCVOID *ppData, UINT *pBytes) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall Close( LPCVOID pData) = 0;
};
typedef ID3DInclude* LPD3DINCLUDE;
typedef
enum _D3D_SHADER_VARIABLE_CLASS
    { D3D_SVC_SCALAR = 0,
 D3D_SVC_VECTOR = ( D3D_SVC_SCALAR + 1 ) ,
 D3D_SVC_MATRIX_ROWS = ( D3D_SVC_VECTOR + 1 ) ,
 D3D_SVC_MATRIX_COLUMNS = ( D3D_SVC_MATRIX_ROWS + 1 ) ,
 D3D_SVC_OBJECT = ( D3D_SVC_MATRIX_COLUMNS + 1 ) ,
 D3D_SVC_STRUCT = ( D3D_SVC_OBJECT + 1 ) ,
 D3D_SVC_INTERFACE_CLASS = ( D3D_SVC_STRUCT + 1 ) ,
 D3D_SVC_INTERFACE_POINTER = ( D3D_SVC_INTERFACE_CLASS + 1 ) ,
 D3D10_SVC_SCALAR = D3D_SVC_SCALAR,
 D3D10_SVC_VECTOR = D3D_SVC_VECTOR,
 D3D10_SVC_MATRIX_ROWS = D3D_SVC_MATRIX_ROWS,
 D3D10_SVC_MATRIX_COLUMNS = D3D_SVC_MATRIX_COLUMNS,
 D3D10_SVC_OBJECT = D3D_SVC_OBJECT,
 D3D10_SVC_STRUCT = D3D_SVC_STRUCT,
 D3D11_SVC_INTERFACE_CLASS = D3D_SVC_INTERFACE_CLASS,
 D3D11_SVC_INTERFACE_POINTER = D3D_SVC_INTERFACE_POINTER,
 D3D_SVC_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_VARIABLE_CLASS;

typedef
enum _D3D_SHADER_VARIABLE_FLAGS
    { D3D_SVF_USERPACKED = 1,
 D3D_SVF_USED = 2,
 D3D_SVF_INTERFACE_POINTER = 4,
 D3D_SVF_INTERFACE_PARAMETER = 8,
 D3D10_SVF_USERPACKED = D3D_SVF_USERPACKED,
 D3D10_SVF_USED = D3D_SVF_USED,
 D3D11_SVF_INTERFACE_POINTER = D3D_SVF_INTERFACE_POINTER,
 D3D11_SVF_INTERFACE_PARAMETER = D3D_SVF_INTERFACE_PARAMETER,
 D3D_SVF_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_VARIABLE_FLAGS;

typedef
enum _D3D_SHADER_VARIABLE_TYPE
    { D3D_SVT_VOID = 0,
 D3D_SVT_BOOL = 1,
 D3D_SVT_INT = 2,
 D3D_SVT_FLOAT = 3,
 D3D_SVT_STRING = 4,
 D3D_SVT_TEXTURE = 5,
 D3D_SVT_TEXTURE1D = 6,
 D3D_SVT_TEXTURE2D = 7,
 D3D_SVT_TEXTURE3D = 8,
 D3D_SVT_TEXTURECUBE = 9,
 D3D_SVT_SAMPLER = 10,
 D3D_SVT_SAMPLER1D = 11,
 D3D_SVT_SAMPLER2D = 12,
 D3D_SVT_SAMPLER3D = 13,
 D3D_SVT_SAMPLERCUBE = 14,
 D3D_SVT_PIXELSHADER = 15,
 D3D_SVT_VERTEXSHADER = 16,
 D3D_SVT_PIXELFRAGMENT = 17,
 D3D_SVT_VERTEXFRAGMENT = 18,
 D3D_SVT_UINT = 19,
 D3D_SVT_UINT8 = 20,
 D3D_SVT_GEOMETRYSHADER = 21,
 D3D_SVT_RASTERIZER = 22,
 D3D_SVT_DEPTHSTENCIL = 23,
 D3D_SVT_BLEND = 24,
 D3D_SVT_BUFFER = 25,
 D3D_SVT_CBUFFER = 26,
 D3D_SVT_TBUFFER = 27,
 D3D_SVT_TEXTURE1DARRAY = 28,
 D3D_SVT_TEXTURE2DARRAY = 29,
 D3D_SVT_RENDERTARGETVIEW = 30,
 D3D_SVT_DEPTHSTENCILVIEW = 31,
 D3D_SVT_TEXTURE2DMS = 32,
 D3D_SVT_TEXTURE2DMSARRAY = 33,
 D3D_SVT_TEXTURECUBEARRAY = 34,
 D3D_SVT_HULLSHADER = 35,
 D3D_SVT_DOMAINSHADER = 36,
 D3D_SVT_INTERFACE_POINTER = 37,
 D3D_SVT_COMPUTESHADER = 38,
 D3D_SVT_DOUBLE = 39,
 D3D_SVT_RWTEXTURE1D = 40,
 D3D_SVT_RWTEXTURE1DARRAY = 41,
 D3D_SVT_RWTEXTURE2D = 42,
 D3D_SVT_RWTEXTURE2DARRAY = 43,
 D3D_SVT_RWTEXTURE3D = 44,
 D3D_SVT_RWBUFFER = 45,
 D3D_SVT_BYTEADDRESS_BUFFER = 46,
 D3D_SVT_RWBYTEADDRESS_BUFFER = 47,
 D3D_SVT_STRUCTURED_BUFFER = 48,
 D3D_SVT_RWSTRUCTURED_BUFFER = 49,
 D3D_SVT_APPEND_STRUCTURED_BUFFER = 50,
 D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51,
 D3D10_SVT_VOID = D3D_SVT_VOID,
 D3D10_SVT_BOOL = D3D_SVT_BOOL,
 D3D10_SVT_INT = D3D_SVT_INT,
 D3D10_SVT_FLOAT = D3D_SVT_FLOAT,
 D3D10_SVT_STRING = D3D_SVT_STRING,
 D3D10_SVT_TEXTURE = D3D_SVT_TEXTURE,
 D3D10_SVT_TEXTURE1D = D3D_SVT_TEXTURE1D,
 D3D10_SVT_TEXTURE2D = D3D_SVT_TEXTURE2D,
 D3D10_SVT_TEXTURE3D = D3D_SVT_TEXTURE3D,
 D3D10_SVT_TEXTURECUBE = D3D_SVT_TEXTURECUBE,
 D3D10_SVT_SAMPLER = D3D_SVT_SAMPLER,
 D3D10_SVT_SAMPLER1D = D3D_SVT_SAMPLER1D,
 D3D10_SVT_SAMPLER2D = D3D_SVT_SAMPLER2D,
 D3D10_SVT_SAMPLER3D = D3D_SVT_SAMPLER3D,
 D3D10_SVT_SAMPLERCUBE = D3D_SVT_SAMPLERCUBE,
 D3D10_SVT_PIXELSHADER = D3D_SVT_PIXELSHADER,
 D3D10_SVT_VERTEXSHADER = D3D_SVT_VERTEXSHADER,
 D3D10_SVT_PIXELFRAGMENT = D3D_SVT_PIXELFRAGMENT,
 D3D10_SVT_VERTEXFRAGMENT = D3D_SVT_VERTEXFRAGMENT,
 D3D10_SVT_UINT = D3D_SVT_UINT,
 D3D10_SVT_UINT8 = D3D_SVT_UINT8,
 D3D10_SVT_GEOMETRYSHADER = D3D_SVT_GEOMETRYSHADER,
 D3D10_SVT_RASTERIZER = D3D_SVT_RASTERIZER,
 D3D10_SVT_DEPTHSTENCIL = D3D_SVT_DEPTHSTENCIL,
 D3D10_SVT_BLEND = D3D_SVT_BLEND,
 D3D10_SVT_BUFFER = D3D_SVT_BUFFER,
 D3D10_SVT_CBUFFER = D3D_SVT_CBUFFER,
 D3D10_SVT_TBUFFER = D3D_SVT_TBUFFER,
 D3D10_SVT_TEXTURE1DARRAY = D3D_SVT_TEXTURE1DARRAY,
 D3D10_SVT_TEXTURE2DARRAY = D3D_SVT_TEXTURE2DARRAY,
 D3D10_SVT_RENDERTARGETVIEW = D3D_SVT_RENDERTARGETVIEW,
 D3D10_SVT_DEPTHSTENCILVIEW = D3D_SVT_DEPTHSTENCILVIEW,
 D3D10_SVT_TEXTURE2DMS = D3D_SVT_TEXTURE2DMS,
 D3D10_SVT_TEXTURE2DMSARRAY = D3D_SVT_TEXTURE2DMSARRAY,
 D3D10_SVT_TEXTURECUBEARRAY = D3D_SVT_TEXTURECUBEARRAY,
 D3D11_SVT_HULLSHADER = D3D_SVT_HULLSHADER,
 D3D11_SVT_DOMAINSHADER = D3D_SVT_DOMAINSHADER,
 D3D11_SVT_INTERFACE_POINTER = D3D_SVT_INTERFACE_POINTER,
 D3D11_SVT_COMPUTESHADER = D3D_SVT_COMPUTESHADER,
 D3D11_SVT_DOUBLE = D3D_SVT_DOUBLE,
 D3D11_SVT_RWTEXTURE1D = D3D_SVT_RWTEXTURE1D,
 D3D11_SVT_RWTEXTURE1DARRAY = D3D_SVT_RWTEXTURE1DARRAY,
 D3D11_SVT_RWTEXTURE2D = D3D_SVT_RWTEXTURE2D,
 D3D11_SVT_RWTEXTURE2DARRAY = D3D_SVT_RWTEXTURE2DARRAY,
 D3D11_SVT_RWTEXTURE3D = D3D_SVT_RWTEXTURE3D,
 D3D11_SVT_RWBUFFER = D3D_SVT_RWBUFFER,
 D3D11_SVT_BYTEADDRESS_BUFFER = D3D_SVT_BYTEADDRESS_BUFFER,
 D3D11_SVT_RWBYTEADDRESS_BUFFER = D3D_SVT_RWBYTEADDRESS_BUFFER,
 D3D11_SVT_STRUCTURED_BUFFER = D3D_SVT_STRUCTURED_BUFFER,
 D3D11_SVT_RWSTRUCTURED_BUFFER = D3D_SVT_RWSTRUCTURED_BUFFER,
 D3D11_SVT_APPEND_STRUCTURED_BUFFER = D3D_SVT_APPEND_STRUCTURED_BUFFER,
 D3D11_SVT_CONSUME_STRUCTURED_BUFFER = D3D_SVT_CONSUME_STRUCTURED_BUFFER,
 D3D_SVT_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_VARIABLE_TYPE;

typedef
enum _D3D_SHADER_INPUT_FLAGS
    { D3D_SIF_USERPACKED = 1,
 D3D_SIF_COMPARISON_SAMPLER = 2,
 D3D_SIF_TEXTURE_COMPONENT_0 = 4,
 D3D_SIF_TEXTURE_COMPONENT_1 = 8,
 D3D_SIF_TEXTURE_COMPONENTS = 12,
 D3D10_SIF_USERPACKED = D3D_SIF_USERPACKED,
 D3D10_SIF_COMPARISON_SAMPLER = D3D_SIF_COMPARISON_SAMPLER,
 D3D10_SIF_TEXTURE_COMPONENT_0 = D3D_SIF_TEXTURE_COMPONENT_0,
 D3D10_SIF_TEXTURE_COMPONENT_1 = D3D_SIF_TEXTURE_COMPONENT_1,
 D3D10_SIF_TEXTURE_COMPONENTS = D3D_SIF_TEXTURE_COMPONENTS,
 D3D_SIF_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_INPUT_FLAGS;

typedef
enum _D3D_SHADER_INPUT_TYPE
    { D3D_SIT_CBUFFER = 0,
 D3D_SIT_TBUFFER = ( D3D_SIT_CBUFFER + 1 ) ,
 D3D_SIT_TEXTURE = ( D3D_SIT_TBUFFER + 1 ) ,
 D3D_SIT_SAMPLER = ( D3D_SIT_TEXTURE + 1 ) ,
 D3D_SIT_UAV_RWTYPED = ( D3D_SIT_SAMPLER + 1 ) ,
 D3D_SIT_STRUCTURED = ( D3D_SIT_UAV_RWTYPED + 1 ) ,
 D3D_SIT_UAV_RWSTRUCTURED = ( D3D_SIT_STRUCTURED + 1 ) ,
 D3D_SIT_BYTEADDRESS = ( D3D_SIT_UAV_RWSTRUCTURED + 1 ) ,
 D3D_SIT_UAV_RWBYTEADDRESS = ( D3D_SIT_BYTEADDRESS + 1 ) ,
 D3D_SIT_UAV_APPEND_STRUCTURED = ( D3D_SIT_UAV_RWBYTEADDRESS + 1 ) ,
 D3D_SIT_UAV_CONSUME_STRUCTURED = ( D3D_SIT_UAV_APPEND_STRUCTURED + 1 ) ,
 D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = ( D3D_SIT_UAV_CONSUME_STRUCTURED + 1 ) ,
 D3D10_SIT_CBUFFER = D3D_SIT_CBUFFER,
 D3D10_SIT_TBUFFER = D3D_SIT_TBUFFER,
 D3D10_SIT_TEXTURE = D3D_SIT_TEXTURE,
 D3D10_SIT_SAMPLER = D3D_SIT_SAMPLER,
 D3D11_SIT_UAV_RWTYPED = D3D_SIT_UAV_RWTYPED,
 D3D11_SIT_STRUCTURED = D3D_SIT_STRUCTURED,
 D3D11_SIT_UAV_RWSTRUCTURED = D3D_SIT_UAV_RWSTRUCTURED,
 D3D11_SIT_BYTEADDRESS = D3D_SIT_BYTEADDRESS,
 D3D11_SIT_UAV_RWBYTEADDRESS = D3D_SIT_UAV_RWBYTEADDRESS,
 D3D11_SIT_UAV_APPEND_STRUCTURED = D3D_SIT_UAV_APPEND_STRUCTURED,
 D3D11_SIT_UAV_CONSUME_STRUCTURED = D3D_SIT_UAV_CONSUME_STRUCTURED,
 D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER
    } D3D_SHADER_INPUT_TYPE;

typedef
enum _D3D_SHADER_CBUFFER_FLAGS
    { D3D_CBF_USERPACKED = 1,
 D3D10_CBF_USERPACKED = D3D_CBF_USERPACKED,
 D3D_CBF_FORCE_DWORD = 0x7fffffff
    } D3D_SHADER_CBUFFER_FLAGS;

typedef
enum _D3D_CBUFFER_TYPE
    { D3D_CT_CBUFFER = 0,
 D3D_CT_TBUFFER = ( D3D_CT_CBUFFER + 1 ) ,
 D3D_CT_INTERFACE_POINTERS = ( D3D_CT_TBUFFER + 1 ) ,
 D3D_CT_RESOURCE_BIND_INFO = ( D3D_CT_INTERFACE_POINTERS + 1 ) ,
 D3D10_CT_CBUFFER = D3D_CT_CBUFFER,
 D3D10_CT_TBUFFER = D3D_CT_TBUFFER,
 D3D11_CT_CBUFFER = D3D_CT_CBUFFER,
 D3D11_CT_TBUFFER = D3D_CT_TBUFFER,
 D3D11_CT_INTERFACE_POINTERS = D3D_CT_INTERFACE_POINTERS,
 D3D11_CT_RESOURCE_BIND_INFO = D3D_CT_RESOURCE_BIND_INFO
    } D3D_CBUFFER_TYPE;

typedef
enum D3D_NAME
    { D3D_NAME_UNDEFINED = 0,
 D3D_NAME_POSITION = 1,
 D3D_NAME_CLIP_DISTANCE = 2,
 D3D_NAME_CULL_DISTANCE = 3,
 D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4,
 D3D_NAME_VIEWPORT_ARRAY_INDEX = 5,
 D3D_NAME_VERTEX_ID = 6,
 D3D_NAME_PRIMITIVE_ID = 7,
 D3D_NAME_INSTANCE_ID = 8,
 D3D_NAME_IS_FRONT_FACE = 9,
 D3D_NAME_SAMPLE_INDEX = 10,
 D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11,
 D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12,
 D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13,
 D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14,
 D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15,
 D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16,
 D3D_NAME_TARGET = 64,
 D3D_NAME_DEPTH = 65,
 D3D_NAME_COVERAGE = 66,
 D3D_NAME_DEPTH_GREATER_EQUAL = 67,
 D3D_NAME_DEPTH_LESS_EQUAL = 68,
 D3D10_NAME_UNDEFINED = D3D_NAME_UNDEFINED,
 D3D10_NAME_POSITION = D3D_NAME_POSITION,
 D3D10_NAME_CLIP_DISTANCE = D3D_NAME_CLIP_DISTANCE,
 D3D10_NAME_CULL_DISTANCE = D3D_NAME_CULL_DISTANCE,
 D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = D3D_NAME_RENDER_TARGET_ARRAY_INDEX,
 D3D10_NAME_VIEWPORT_ARRAY_INDEX = D3D_NAME_VIEWPORT_ARRAY_INDEX,
 D3D10_NAME_VERTEX_ID = D3D_NAME_VERTEX_ID,
 D3D10_NAME_PRIMITIVE_ID = D3D_NAME_PRIMITIVE_ID,
 D3D10_NAME_INSTANCE_ID = D3D_NAME_INSTANCE_ID,
 D3D10_NAME_IS_FRONT_FACE = D3D_NAME_IS_FRONT_FACE,
 D3D10_NAME_SAMPLE_INDEX = D3D_NAME_SAMPLE_INDEX,
 D3D10_NAME_TARGET = D3D_NAME_TARGET,
 D3D10_NAME_DEPTH = D3D_NAME_DEPTH,
 D3D10_NAME_COVERAGE = D3D_NAME_COVERAGE,
 D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR,
 D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR,
 D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR,
 D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR,
 D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR,
 D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR,
 D3D11_NAME_DEPTH_GREATER_EQUAL = D3D_NAME_DEPTH_GREATER_EQUAL,
 D3D11_NAME_DEPTH_LESS_EQUAL = D3D_NAME_DEPTH_LESS_EQUAL
    } D3D_NAME;

typedef
enum D3D_RESOURCE_RETURN_TYPE
    { D3D_RETURN_TYPE_UNORM = 1,
 D3D_RETURN_TYPE_SNORM = 2,
 D3D_RETURN_TYPE_SINT = 3,
 D3D_RETURN_TYPE_UINT = 4,
 D3D_RETURN_TYPE_FLOAT = 5,
 D3D_RETURN_TYPE_MIXED = 6,
 D3D_RETURN_TYPE_DOUBLE = 7,
 D3D_RETURN_TYPE_CONTINUED = 8,
 D3D10_RETURN_TYPE_UNORM = D3D_RETURN_TYPE_UNORM,
 D3D10_RETURN_TYPE_SNORM = D3D_RETURN_TYPE_SNORM,
 D3D10_RETURN_TYPE_SINT = D3D_RETURN_TYPE_SINT,
 D3D10_RETURN_TYPE_UINT = D3D_RETURN_TYPE_UINT,
 D3D10_RETURN_TYPE_FLOAT = D3D_RETURN_TYPE_FLOAT,
 D3D10_RETURN_TYPE_MIXED = D3D_RETURN_TYPE_MIXED,
 D3D11_RETURN_TYPE_UNORM = D3D_RETURN_TYPE_UNORM,
 D3D11_RETURN_TYPE_SNORM = D3D_RETURN_TYPE_SNORM,
 D3D11_RETURN_TYPE_SINT = D3D_RETURN_TYPE_SINT,
 D3D11_RETURN_TYPE_UINT = D3D_RETURN_TYPE_UINT,
 D3D11_RETURN_TYPE_FLOAT = D3D_RETURN_TYPE_FLOAT,
 D3D11_RETURN_TYPE_MIXED = D3D_RETURN_TYPE_MIXED,
 D3D11_RETURN_TYPE_DOUBLE = D3D_RETURN_TYPE_DOUBLE,
 D3D11_RETURN_TYPE_CONTINUED = D3D_RETURN_TYPE_CONTINUED
    } D3D_RESOURCE_RETURN_TYPE;

typedef
enum D3D_REGISTER_COMPONENT_TYPE
    { D3D_REGISTER_COMPONENT_UNKNOWN = 0,
 D3D_REGISTER_COMPONENT_UINT32 = 1,
 D3D_REGISTER_COMPONENT_SINT32 = 2,
 D3D_REGISTER_COMPONENT_FLOAT32 = 3,
 D3D10_REGISTER_COMPONENT_UNKNOWN = D3D_REGISTER_COMPONENT_UNKNOWN,
 D3D10_REGISTER_COMPONENT_UINT32 = D3D_REGISTER_COMPONENT_UINT32,
 D3D10_REGISTER_COMPONENT_SINT32 = D3D_REGISTER_COMPONENT_SINT32,
 D3D10_REGISTER_COMPONENT_FLOAT32 = D3D_REGISTER_COMPONENT_FLOAT32
    } D3D_REGISTER_COMPONENT_TYPE;

typedef
enum D3D_TESSELLATOR_DOMAIN
    { D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0,
 D3D_TESSELLATOR_DOMAIN_ISOLINE = 1,
 D3D_TESSELLATOR_DOMAIN_TRI = 2,
 D3D_TESSELLATOR_DOMAIN_QUAD = 3,
 D3D11_TESSELLATOR_DOMAIN_UNDEFINED = D3D_TESSELLATOR_DOMAIN_UNDEFINED,
 D3D11_TESSELLATOR_DOMAIN_ISOLINE = D3D_TESSELLATOR_DOMAIN_ISOLINE,
 D3D11_TESSELLATOR_DOMAIN_TRI = D3D_TESSELLATOR_DOMAIN_TRI,
 D3D11_TESSELLATOR_DOMAIN_QUAD = D3D_TESSELLATOR_DOMAIN_QUAD
    } D3D_TESSELLATOR_DOMAIN;

typedef
enum D3D_TESSELLATOR_PARTITIONING
    { D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0,
 D3D_TESSELLATOR_PARTITIONING_INTEGER = 1,
 D3D_TESSELLATOR_PARTITIONING_POW2 = 2,
 D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
 D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4,
 D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = D3D_TESSELLATOR_PARTITIONING_UNDEFINED,
 D3D11_TESSELLATOR_PARTITIONING_INTEGER = D3D_TESSELLATOR_PARTITIONING_INTEGER,
 D3D11_TESSELLATOR_PARTITIONING_POW2 = D3D_TESSELLATOR_PARTITIONING_POW2,
 D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD,
 D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN
    } D3D_TESSELLATOR_PARTITIONING;

typedef
enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
    { D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0,
 D3D_TESSELLATOR_OUTPUT_POINT = 1,
 D3D_TESSELLATOR_OUTPUT_LINE = 2,
 D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
 D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
 D3D11_TESSELLATOR_OUTPUT_UNDEFINED = D3D_TESSELLATOR_OUTPUT_UNDEFINED,
 D3D11_TESSELLATOR_OUTPUT_POINT = D3D_TESSELLATOR_OUTPUT_POINT,
 D3D11_TESSELLATOR_OUTPUT_LINE = D3D_TESSELLATOR_OUTPUT_LINE,
 D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW,
 D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW
    } D3D_TESSELLATOR_OUTPUT_PRIMITIVE;

extern "C" const GUID WKPDID_D3DDebugObjectName;


extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3dcommon_0000_0001_v0_0_s_ifspec;






}
#line 238 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"



extern "C"{
#line 928 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
}
struct CD3D11_DEFAULT {};
extern const __declspec(selectany) CD3D11_DEFAULT D3D11_DEFAULT;
extern "C"{

typedef
enum D3D11_INPUT_CLASSIFICATION
    { D3D11_INPUT_PER_VERTEX_DATA = 0,
 D3D11_INPUT_PER_INSTANCE_DATA = 1
    } D3D11_INPUT_CLASSIFICATION;



typedef struct D3D11_INPUT_ELEMENT_DESC
    {
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D11_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
    } D3D11_INPUT_ELEMENT_DESC;

typedef
enum D3D11_FILL_MODE
    { D3D11_FILL_WIREFRAME = 2,
 D3D11_FILL_SOLID = 3
    } D3D11_FILL_MODE;

typedef D3D_PRIMITIVE_TOPOLOGY D3D11_PRIMITIVE_TOPOLOGY;

typedef D3D_PRIMITIVE D3D11_PRIMITIVE;

typedef
enum D3D11_CULL_MODE
    { D3D11_CULL_NONE = 1,
 D3D11_CULL_FRONT = 2,
 D3D11_CULL_BACK = 3
    } D3D11_CULL_MODE;

typedef struct D3D11_SO_DECLARATION_ENTRY
    {
    UINT Stream;
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
    } D3D11_SO_DECLARATION_ENTRY;

typedef struct D3D11_VIEWPORT
    {
    FLOAT TopLeftX;
    FLOAT TopLeftY;
    FLOAT Width;
    FLOAT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
    } D3D11_VIEWPORT;


}
inline bool operator==( const D3D11_VIEWPORT& l, const D3D11_VIEWPORT& r )
{
    return l.TopLeftX == r.TopLeftX && l.TopLeftY == r.TopLeftY && l.Width == r.Width &&
        l.Height == r.Height && l.MinDepth == r.MinDepth && l.MaxDepth == r.MaxDepth;
}
inline bool operator!=( const D3D11_VIEWPORT& l, const D3D11_VIEWPORT& r )
{ return !( l == r ); }
extern "C"{

typedef
enum D3D11_RESOURCE_DIMENSION
    { D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
 D3D11_RESOURCE_DIMENSION_BUFFER = 1,
 D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
 D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
 D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
    } D3D11_RESOURCE_DIMENSION;

typedef D3D_SRV_DIMENSION D3D11_SRV_DIMENSION;

typedef
enum D3D11_DSV_DIMENSION
    { D3D11_DSV_DIMENSION_UNKNOWN = 0,
 D3D11_DSV_DIMENSION_TEXTURE1D = 1,
 D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
 D3D11_DSV_DIMENSION_TEXTURE2D = 3,
 D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
 D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
 D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    } D3D11_DSV_DIMENSION;

typedef
enum D3D11_RTV_DIMENSION
    { D3D11_RTV_DIMENSION_UNKNOWN = 0,
 D3D11_RTV_DIMENSION_BUFFER = 1,
 D3D11_RTV_DIMENSION_TEXTURE1D = 2,
 D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
 D3D11_RTV_DIMENSION_TEXTURE2D = 4,
 D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
 D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
 D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
 D3D11_RTV_DIMENSION_TEXTURE3D = 8
    } D3D11_RTV_DIMENSION;

typedef
enum D3D11_UAV_DIMENSION
    { D3D11_UAV_DIMENSION_UNKNOWN = 0,
 D3D11_UAV_DIMENSION_BUFFER = 1,
 D3D11_UAV_DIMENSION_TEXTURE1D = 2,
 D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
 D3D11_UAV_DIMENSION_TEXTURE2D = 4,
 D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
 D3D11_UAV_DIMENSION_TEXTURE3D = 8
    } D3D11_UAV_DIMENSION;

typedef
enum D3D11_USAGE
    { D3D11_USAGE_DEFAULT = 0,
 D3D11_USAGE_IMMUTABLE = 1,
 D3D11_USAGE_DYNAMIC = 2,
 D3D11_USAGE_STAGING = 3
    } D3D11_USAGE;

typedef
enum D3D11_BIND_FLAG
    { D3D11_BIND_VERTEX_BUFFER = 0x1L,
 D3D11_BIND_INDEX_BUFFER = 0x2L,
 D3D11_BIND_CONSTANT_BUFFER = 0x4L,
 D3D11_BIND_SHADER_RESOURCE = 0x8L,
 D3D11_BIND_STREAM_OUTPUT = 0x10L,
 D3D11_BIND_RENDER_TARGET = 0x20L,
 D3D11_BIND_DEPTH_STENCIL = 0x40L,
 D3D11_BIND_UNORDERED_ACCESS = 0x80L
    } D3D11_BIND_FLAG;

typedef
enum D3D11_CPU_ACCESS_FLAG
    { D3D11_CPU_ACCESS_WRITE = 0x10000L,
 D3D11_CPU_ACCESS_READ = 0x20000L
    } D3D11_CPU_ACCESS_FLAG;

typedef
enum D3D11_RESOURCE_MISC_FLAG
    { D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1L,
 D3D11_RESOURCE_MISC_SHARED = 0x2L,
 D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4L,
 D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10L,
 D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20L,
 D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40L,
 D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80L,
 D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100L,
 D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200L
    } D3D11_RESOURCE_MISC_FLAG;

typedef
enum D3D11_MAP
    { D3D11_MAP_READ = 1,
 D3D11_MAP_WRITE = 2,
 D3D11_MAP_READ_WRITE = 3,
 D3D11_MAP_WRITE_DISCARD = 4,
 D3D11_MAP_WRITE_NO_OVERWRITE = 5
    } D3D11_MAP;

typedef
enum D3D11_MAP_FLAG
    { D3D11_MAP_FLAG_DO_NOT_WAIT = 0x100000L
    } D3D11_MAP_FLAG;

typedef
enum D3D11_RAISE_FLAG
    { D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1L
    } D3D11_RAISE_FLAG;

typedef
enum D3D11_CLEAR_FLAG
    { D3D11_CLEAR_DEPTH = 0x1L,
 D3D11_CLEAR_STENCIL = 0x2L
    } D3D11_CLEAR_FLAG;

typedef RECT D3D11_RECT;


}
struct CD3D11_RECT : public D3D11_RECT
{
    CD3D11_RECT()
    {}
    explicit CD3D11_RECT( const D3D11_RECT& o ) :
        D3D11_RECT( o )
    {}
    explicit CD3D11_RECT(
        LONG Left,
        LONG Top,
        LONG Right,
        LONG Bottom )
    {
        left = Left;
        top = Top;
        right = Right;
        bottom = Bottom;
    }
    ~CD3D11_RECT() {}
    operator const D3D11_RECT&() const { return *this; }
};
inline bool operator==( const D3D11_RECT& l, const D3D11_RECT& r )
{
    return l.left == r.left && l.top == r.top &&
        l.right == r.right && l.bottom == r.bottom;
}
inline bool operator!=( const D3D11_RECT& l, const D3D11_RECT& r )
{ return !( l == r ); }
extern "C"{

typedef struct D3D11_BOX
    {
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
    } D3D11_BOX;


}
struct CD3D11_BOX : public D3D11_BOX
{
    CD3D11_BOX()
    {}
    explicit CD3D11_BOX( const D3D11_BOX& o ) :
        D3D11_BOX( o )
    {}
    explicit CD3D11_BOX(
        LONG Left,
        LONG Top,
        LONG Front,
        LONG Right,
        LONG Bottom,
        LONG Back )
    {
        left = Left;
        top = Top;
        front = Front;
        right = Right;
        bottom = Bottom;
        back = Back;
    }
    ~CD3D11_BOX() {}
    operator const D3D11_BOX&() const { return *this; }
};
inline bool operator==( const D3D11_BOX& l, const D3D11_BOX& r )
{
    return l.left == r.left && l.top == r.top && l.front == r.front &&
        l.right == r.right && l.bottom == r.bottom && l.back == r.back;
}
inline bool operator!=( const D3D11_BOX& l, const D3D11_BOX& r )
{ return !( l == r ); }
extern "C"{





extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0000_v0_0_s_ifspec;
#line 1204 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11DeviceChild;



    struct __declspec(uuid("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")) __declspec(novtable)
    ID3D11DeviceChild : public IUnknown
    {
    public:
        virtual void __stdcall GetDevice(

                   ID3D11Device **ppDevice) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                            void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                         const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

    };
#line 1337 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_COMPARISON_FUNC
    { D3D11_COMPARISON_NEVER = 1,
 D3D11_COMPARISON_LESS = 2,
 D3D11_COMPARISON_EQUAL = 3,
 D3D11_COMPARISON_LESS_EQUAL = 4,
 D3D11_COMPARISON_GREATER = 5,
 D3D11_COMPARISON_NOT_EQUAL = 6,
 D3D11_COMPARISON_GREATER_EQUAL = 7,
 D3D11_COMPARISON_ALWAYS = 8
    } D3D11_COMPARISON_FUNC;

typedef
enum D3D11_DEPTH_WRITE_MASK
    { D3D11_DEPTH_WRITE_MASK_ZERO = 0,
 D3D11_DEPTH_WRITE_MASK_ALL = 1
    } D3D11_DEPTH_WRITE_MASK;

typedef
enum D3D11_STENCIL_OP
    { D3D11_STENCIL_OP_KEEP = 1,
 D3D11_STENCIL_OP_ZERO = 2,
 D3D11_STENCIL_OP_REPLACE = 3,
 D3D11_STENCIL_OP_INCR_SAT = 4,
 D3D11_STENCIL_OP_DECR_SAT = 5,
 D3D11_STENCIL_OP_INVERT = 6,
 D3D11_STENCIL_OP_INCR = 7,
 D3D11_STENCIL_OP_DECR = 8
    } D3D11_STENCIL_OP;

typedef struct D3D11_DEPTH_STENCILOP_DESC
    {
    D3D11_STENCIL_OP StencilFailOp;
    D3D11_STENCIL_OP StencilDepthFailOp;
    D3D11_STENCIL_OP StencilPassOp;
    D3D11_COMPARISON_FUNC StencilFunc;
    } D3D11_DEPTH_STENCILOP_DESC;

typedef struct D3D11_DEPTH_STENCIL_DESC
    {
    BOOL DepthEnable;
    D3D11_DEPTH_WRITE_MASK DepthWriteMask;
    D3D11_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D11_DEPTH_STENCILOP_DESC FrontFace;
    D3D11_DEPTH_STENCILOP_DESC BackFace;
    } D3D11_DEPTH_STENCIL_DESC;


}
struct CD3D11_DEPTH_STENCIL_DESC : public D3D11_DEPTH_STENCIL_DESC
{
    CD3D11_DEPTH_STENCIL_DESC()
    {}
    explicit CD3D11_DEPTH_STENCIL_DESC( const D3D11_DEPTH_STENCIL_DESC& o ) :
        D3D11_DEPTH_STENCIL_DESC( o )
    {}
    explicit CD3D11_DEPTH_STENCIL_DESC( CD3D11_DEFAULT )
    {
        DepthEnable = 1;
        DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;
        DepthFunc = D3D11_COMPARISON_LESS;
        StencilEnable = 0;
        StencilReadMask = ( 0xff );
        StencilWriteMask = ( 0xff );
        const D3D11_DEPTH_STENCILOP_DESC defaultStencilOp =
        { D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_STENCIL_OP_KEEP, D3D11_COMPARISON_ALWAYS };
        FrontFace = defaultStencilOp;
        BackFace = defaultStencilOp;
    }
    explicit CD3D11_DEPTH_STENCIL_DESC(
        BOOL depthEnable,
        D3D11_DEPTH_WRITE_MASK depthWriteMask,
        D3D11_COMPARISON_FUNC depthFunc,
        BOOL stencilEnable,
        UINT8 stencilReadMask,
        UINT8 stencilWriteMask,
        D3D11_STENCIL_OP frontStencilFailOp,
        D3D11_STENCIL_OP frontStencilDepthFailOp,
        D3D11_STENCIL_OP frontStencilPassOp,
        D3D11_COMPARISON_FUNC frontStencilFunc,
        D3D11_STENCIL_OP backStencilFailOp,
        D3D11_STENCIL_OP backStencilDepthFailOp,
        D3D11_STENCIL_OP backStencilPassOp,
        D3D11_COMPARISON_FUNC backStencilFunc )
    {
        DepthEnable = depthEnable;
        DepthWriteMask = depthWriteMask;
        DepthFunc = depthFunc;
        StencilEnable = stencilEnable;
        StencilReadMask = stencilReadMask;
        StencilWriteMask = stencilWriteMask;
        FrontFace.StencilFailOp = frontStencilFailOp;
        FrontFace.StencilDepthFailOp = frontStencilDepthFailOp;
        FrontFace.StencilPassOp = frontStencilPassOp;
        FrontFace.StencilFunc = frontStencilFunc;
        BackFace.StencilFailOp = backStencilFailOp;
        BackFace.StencilDepthFailOp = backStencilDepthFailOp;
        BackFace.StencilPassOp = backStencilPassOp;
        BackFace.StencilFunc = backStencilFunc;
    }
    ~CD3D11_DEPTH_STENCIL_DESC() {}
    operator const D3D11_DEPTH_STENCIL_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0001_v0_0_s_ifspec;
#line 1457 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11DepthStencilState;



    struct __declspec(uuid("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1")) __declspec(novtable)
    ID3D11DepthStencilState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_DEPTH_STENCIL_DESC *pDesc) = 0;

    };
#line 1577 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_BLEND
    { D3D11_BLEND_ZERO = 1,
 D3D11_BLEND_ONE = 2,
 D3D11_BLEND_SRC_COLOR = 3,
 D3D11_BLEND_INV_SRC_COLOR = 4,
 D3D11_BLEND_SRC_ALPHA = 5,
 D3D11_BLEND_INV_SRC_ALPHA = 6,
 D3D11_BLEND_DEST_ALPHA = 7,
 D3D11_BLEND_INV_DEST_ALPHA = 8,
 D3D11_BLEND_DEST_COLOR = 9,
 D3D11_BLEND_INV_DEST_COLOR = 10,
 D3D11_BLEND_SRC_ALPHA_SAT = 11,
 D3D11_BLEND_BLEND_FACTOR = 14,
 D3D11_BLEND_INV_BLEND_FACTOR = 15,
 D3D11_BLEND_SRC1_COLOR = 16,
 D3D11_BLEND_INV_SRC1_COLOR = 17,
 D3D11_BLEND_SRC1_ALPHA = 18,
 D3D11_BLEND_INV_SRC1_ALPHA = 19
    } D3D11_BLEND;

typedef
enum D3D11_BLEND_OP
    { D3D11_BLEND_OP_ADD = 1,
 D3D11_BLEND_OP_SUBTRACT = 2,
 D3D11_BLEND_OP_REV_SUBTRACT = 3,
 D3D11_BLEND_OP_MIN = 4,
 D3D11_BLEND_OP_MAX = 5
    } D3D11_BLEND_OP;

typedef
enum D3D11_COLOR_WRITE_ENABLE
    { D3D11_COLOR_WRITE_ENABLE_RED = 1,
 D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
 D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
 D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
 D3D11_COLOR_WRITE_ENABLE_ALL = ( ( ( D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN ) | D3D11_COLOR_WRITE_ENABLE_BLUE ) | D3D11_COLOR_WRITE_ENABLE_ALPHA )
    } D3D11_COLOR_WRITE_ENABLE;

typedef struct D3D11_RENDER_TARGET_BLEND_DESC
    {
    BOOL BlendEnable;
    D3D11_BLEND SrcBlend;
    D3D11_BLEND DestBlend;
    D3D11_BLEND_OP BlendOp;
    D3D11_BLEND SrcBlendAlpha;
    D3D11_BLEND DestBlendAlpha;
    D3D11_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask;
    } D3D11_RENDER_TARGET_BLEND_DESC;

typedef struct D3D11_BLEND_DESC
    {
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[ 8 ];
    } D3D11_BLEND_DESC;




}
struct CD3D11_BLEND_DESC : public D3D11_BLEND_DESC
{
    CD3D11_BLEND_DESC()
    {}
    explicit CD3D11_BLEND_DESC( const D3D11_BLEND_DESC& o ) :
        D3D11_BLEND_DESC( o )
    {}
    explicit CD3D11_BLEND_DESC( CD3D11_DEFAULT )
    {
        AlphaToCoverageEnable = 0;
        IndependentBlendEnable = 0;
        const D3D11_RENDER_TARGET_BLEND_DESC defaultRenderTargetBlendDesc =
        {
            0,
            D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
            D3D11_BLEND_ONE, D3D11_BLEND_ZERO, D3D11_BLEND_OP_ADD,
            D3D11_COLOR_WRITE_ENABLE_ALL,
        };
        for (UINT i = 0; i < ( 8 ); ++i)
            RenderTarget[ i ] = defaultRenderTargetBlendDesc;
    }
    ~CD3D11_BLEND_DESC() {}
    operator const D3D11_BLEND_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0002_v0_0_s_ifspec;
#line 1677 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11BlendState;



    struct __declspec(uuid("75b68faa-347d-4159-8f45-a0640f01cd9a")) __declspec(novtable)
    ID3D11BlendState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_BLEND_DESC *pDesc) = 0;

    };
#line 1797 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_RASTERIZER_DESC
    {
    D3D11_FILL_MODE FillMode;
    D3D11_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    } D3D11_RASTERIZER_DESC;


}
struct CD3D11_RASTERIZER_DESC : public D3D11_RASTERIZER_DESC
{
    CD3D11_RASTERIZER_DESC()
    {}
    explicit CD3D11_RASTERIZER_DESC( const D3D11_RASTERIZER_DESC& o ) :
        D3D11_RASTERIZER_DESC( o )
    {}
    explicit CD3D11_RASTERIZER_DESC( CD3D11_DEFAULT )
    {
        FillMode = D3D11_FILL_SOLID;
        CullMode = D3D11_CULL_BACK;
        FrontCounterClockwise = 0;
        DepthBias = ( 0 );
        DepthBiasClamp = ( 0.0f );
        SlopeScaledDepthBias = ( 0.0f );
        DepthClipEnable = 1;
        ScissorEnable = 0;
        MultisampleEnable = 0;
        AntialiasedLineEnable = 0;
    }
    explicit CD3D11_RASTERIZER_DESC(
        D3D11_FILL_MODE fillMode,
        D3D11_CULL_MODE cullMode,
        BOOL frontCounterClockwise,
        INT depthBias,
        FLOAT depthBiasClamp,
        FLOAT slopeScaledDepthBias,
        BOOL depthClipEnable,
        BOOL scissorEnable,
        BOOL multisampleEnable,
        BOOL antialiasedLineEnable )
    {
        FillMode = fillMode;
        CullMode = cullMode;
        FrontCounterClockwise = frontCounterClockwise;
        DepthBias = depthBias;
        DepthBiasClamp = depthBiasClamp;
        SlopeScaledDepthBias = slopeScaledDepthBias;
        DepthClipEnable = depthClipEnable;
        ScissorEnable = scissorEnable;
        MultisampleEnable = multisampleEnable;
        AntialiasedLineEnable = antialiasedLineEnable;
    }
    ~CD3D11_RASTERIZER_DESC() {}
    operator const D3D11_RASTERIZER_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0003_v0_0_s_ifspec;
#line 1873 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11RasterizerState;



    struct __declspec(uuid("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7")) __declspec(novtable)
    ID3D11RasterizerState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_RASTERIZER_DESC *pDesc) = 0;

    };
#line 1994 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
}
inline UINT D3D11CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels )
{ return MipSlice + ArraySlice * MipLevels; }
extern "C"{

typedef struct D3D11_SUBRESOURCE_DATA
    {
    const void *pSysMem;
    UINT SysMemPitch;
    UINT SysMemSlicePitch;
    } D3D11_SUBRESOURCE_DATA;

typedef struct D3D11_MAPPED_SUBRESOURCE
    {
    void *pData;
    UINT RowPitch;
    UINT DepthPitch;
    } D3D11_MAPPED_SUBRESOURCE;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0004_v0_0_s_ifspec;
#line 2025 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Resource;



    struct __declspec(uuid("dc8e63f3-d12b-4952-b47b-5e45026a862d")) __declspec(novtable)
    ID3D11Resource : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetType(

                   D3D11_RESOURCE_DIMENSION *pResourceDimension) = 0;

        virtual void __stdcall SetEvictionPriority(

                  UINT EvictionPriority) = 0;

        virtual UINT __stdcall GetEvictionPriority( void) = 0;

    };
#line 2165 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_BUFFER_DESC
    {
    UINT ByteWidth;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    UINT StructureByteStride;
    } D3D11_BUFFER_DESC;


}
struct CD3D11_BUFFER_DESC : public D3D11_BUFFER_DESC
{
    CD3D11_BUFFER_DESC()
    {}
    explicit CD3D11_BUFFER_DESC( const D3D11_BUFFER_DESC& o ) :
        D3D11_BUFFER_DESC( o )
    {}
    explicit CD3D11_BUFFER_DESC(
        UINT byteWidth,
        UINT bindFlags,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0,
        UINT structureByteStride = 0 )
    {
        ByteWidth = byteWidth;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags ;
        MiscFlags = miscFlags;
        StructureByteStride = structureByteStride;
    }
    ~CD3D11_BUFFER_DESC() {}
    operator const D3D11_BUFFER_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0005_v0_0_s_ifspec;
#line 2216 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Buffer;



    struct __declspec(uuid("48570b85-d1ee-4fcd-a250-eb350722b037")) __declspec(novtable)
    ID3D11Buffer : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_BUFFER_DESC *pDesc) = 0;

    };
#line 2359 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_TEXTURE1D_DESC
    {
    UINT Width;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D11_TEXTURE1D_DESC;


}
struct CD3D11_TEXTURE1D_DESC : public D3D11_TEXTURE1D_DESC
{
    CD3D11_TEXTURE1D_DESC()
    {}
    explicit CD3D11_TEXTURE1D_DESC( const D3D11_TEXTURE1D_DESC& o ) :
        D3D11_TEXTURE1D_DESC( o )
    {}
    explicit CD3D11_TEXTURE1D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags= 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D11_TEXTURE1D_DESC() {}
    operator const D3D11_TEXTURE1D_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0006_v0_0_s_ifspec;
#line 2416 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Texture1D;



    struct __declspec(uuid("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c")) __declspec(novtable)
    ID3D11Texture1D : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_TEXTURE1D_DESC *pDesc) = 0;

    };
#line 2559 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_TEXTURE2D_DESC
    {
    UINT Width;
    UINT Height;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D11_TEXTURE2D_DESC;


}
struct CD3D11_TEXTURE2D_DESC : public D3D11_TEXTURE2D_DESC
{
    CD3D11_TEXTURE2D_DESC()
    {}
    explicit CD3D11_TEXTURE2D_DESC( const D3D11_TEXTURE2D_DESC& o ) :
        D3D11_TEXTURE2D_DESC( o )
    {}
    explicit CD3D11_TEXTURE2D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT sampleCount = 1,
        UINT sampleQuality = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        SampleDesc.Count = sampleCount;
        SampleDesc.Quality = sampleQuality;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D11_TEXTURE2D_DESC() {}
    operator const D3D11_TEXTURE2D_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0007_v0_0_s_ifspec;
#line 2624 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Texture2D;



    struct __declspec(uuid("6f15aaf2-d208-4e89-9ab4-489535d34f9c")) __declspec(novtable)
    ID3D11Texture2D : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_TEXTURE2D_DESC *pDesc) = 0;

    };
#line 2767 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_TEXTURE3D_DESC
    {
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D11_TEXTURE3D_DESC;


}
struct CD3D11_TEXTURE3D_DESC : public D3D11_TEXTURE3D_DESC
{
    CD3D11_TEXTURE3D_DESC()
    {}
    explicit CD3D11_TEXTURE3D_DESC( const D3D11_TEXTURE3D_DESC& o ) :
        D3D11_TEXTURE3D_DESC( o )
    {}
    explicit CD3D11_TEXTURE3D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT depth,
        UINT mipLevels = 0,
        UINT bindFlags = D3D11_BIND_SHADER_RESOURCE,
        D3D11_USAGE usage = D3D11_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        Depth = depth;
        MipLevels = mipLevels;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D11_TEXTURE3D_DESC() {}
    operator const D3D11_TEXTURE3D_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0008_v0_0_s_ifspec;
#line 2827 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Texture3D;



    struct __declspec(uuid("037e866e-f56d-4357-a8af-9dabbe6e250e")) __declspec(novtable)
    ID3D11Texture3D : public ID3D11Resource
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_TEXTURE3D_DESC *pDesc) = 0;

    };
#line 2970 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_TEXTURECUBE_FACE
    { D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
 D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
 D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
 D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
 D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
 D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5
    } D3D11_TEXTURECUBE_FACE;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0009_v0_0_s_ifspec;
#line 2992 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11View;



    struct __declspec(uuid("839d1216-bb2e-412b-b7f4-a9dbebe08ed1")) __declspec(novtable)
    ID3D11View : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetResource(

                   ID3D11Resource **ppResource) = 0;

    };
#line 3112 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_BUFFER_SRV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D11_BUFFER_SRV;

typedef
enum D3D11_BUFFEREX_SRV_FLAG
    { D3D11_BUFFEREX_SRV_FLAG_RAW = 0x1
    } D3D11_BUFFEREX_SRV_FLAG;

typedef struct D3D11_BUFFEREX_SRV
    {
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
    } D3D11_BUFFEREX_SRV;

typedef struct D3D11_TEX1D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEX1D_SRV;

typedef struct D3D11_TEX1D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_SRV;

typedef struct D3D11_TEX2D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEX2D_SRV;

typedef struct D3D11_TEX2D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_SRV;

typedef struct D3D11_TEX3D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEX3D_SRV;

typedef struct D3D11_TEXCUBE_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D11_TEXCUBE_SRV;

typedef struct D3D11_TEXCUBE_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
    } D3D11_TEXCUBE_ARRAY_SRV;

typedef struct D3D11_TEX2DMS_SRV
    {
    UINT UnusedField_NothingToDefine;
    } D3D11_TEX2DMS_SRV;

typedef struct D3D11_TEX2DMS_ARRAY_SRV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2DMS_ARRAY_SRV;

typedef struct D3D11_SHADER_RESOURCE_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_SRV_DIMENSION ViewDimension;
    union
        {
        D3D11_BUFFER_SRV Buffer;
        D3D11_TEX1D_SRV Texture1D;
        D3D11_TEX1D_ARRAY_SRV Texture1DArray;
        D3D11_TEX2D_SRV Texture2D;
        D3D11_TEX2D_ARRAY_SRV Texture2DArray;
        D3D11_TEX2DMS_SRV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D11_TEX3D_SRV Texture3D;
        D3D11_TEXCUBE_SRV TextureCube;
        D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
        D3D11_BUFFEREX_SRV BufferEx;
        } ;
    } D3D11_SHADER_RESOURCE_VIEW_DESC;


}
struct CD3D11_SHADER_RESOURCE_VIEW_DESC : public D3D11_SHADER_RESOURCE_VIEW_DESC
{
    CD3D11_SHADER_RESOURCE_VIEW_DESC()
    {}
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC( const D3D11_SHADER_RESOURCE_VIEW_DESC& o ) :
        D3D11_SHADER_RESOURCE_VIEW_DESC( o )
    {}
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
        D3D11_SRV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = viewDimension;
        switch (viewDimension)
        {
        case D3D11_SRV_DIMENSION_BUFFER:
            Buffer.FirstElement = mostDetailedMip;
            Buffer.NumElements = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE1D:
            Texture1D.MostDetailedMip = mostDetailedMip;
            Texture1D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MostDetailedMip = mostDetailedMip;
            Texture1DArray.MipLevels = mipLevels;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2D:
            Texture2D.MostDetailedMip = mostDetailedMip;
            Texture2D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MostDetailedMip = mostDetailedMip;
            Texture2DArray.MipLevels = mipLevels;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE3D:
            Texture3D.MostDetailedMip = mostDetailedMip;
            Texture3D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBE:
            TextureCube.MostDetailedMip = mostDetailedMip;
            TextureCube.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBEARRAY:
            TextureCubeArray.MostDetailedMip = mostDetailedMip;
            TextureCubeArray.MipLevels = mipLevels;
            TextureCubeArray.First2DArrayFace = firstArraySlice;
            TextureCubeArray.NumCubes = arraySize;
            break;
        case D3D11_SRV_DIMENSION_BUFFEREX:
            BufferEx.FirstElement = mostDetailedMip;
            BufferEx.NumElements = mipLevels;
            BufferEx.Flags = flags;
            break;
        default: break;
        }
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Buffer*,
        DXGI_FORMAT format,
        UINT firstElement,
        UINT numElements,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = D3D11_SRV_DIMENSION_BUFFEREX;
        BufferEx.FirstElement = firstElement;
        BufferEx.NumElements = numElements;
        BufferEx.Flags = flags;
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_SRV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == mipLevels ||
            (-1 == arraySize && D3D11_SRV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_SRV_DIMENSION_TEXTURE1D:
            Texture1D.MostDetailedMip = mostDetailedMip;
            Texture1D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MostDetailedMip = mostDetailedMip;
            Texture1DArray.MipLevels = mipLevels;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_SRV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == mipLevels &&
                D3D11_SRV_DIMENSION_TEXTURE2DMS != viewDimension &&
                D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY != viewDimension) ||
            (-1 == arraySize &&
                (D3D11_SRV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
                D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY == viewDimension ||
                D3D11_SRV_DIMENSION_TEXTURECUBEARRAY == viewDimension)))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
            if (-1 == arraySize)
            {
                arraySize = TexDesc.ArraySize - firstArraySlice;
                if (D3D11_SRV_DIMENSION_TEXTURECUBEARRAY == viewDimension) arraySize /= 6;
            }
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_SRV_DIMENSION_TEXTURE2D:
            Texture2D.MostDetailedMip = mostDetailedMip;
            Texture2D.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MostDetailedMip = mostDetailedMip;
            Texture2DArray.MipLevels = mipLevels;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBE:
            TextureCube.MostDetailedMip = mostDetailedMip;
            TextureCube.MipLevels = mipLevels;
            break;
        case D3D11_SRV_DIMENSION_TEXTURECUBEARRAY:
            TextureCubeArray.MostDetailedMip = mostDetailedMip;
            TextureCubeArray.MipLevels = mipLevels;
            TextureCubeArray.First2DArrayFace = firstArraySlice;
            TextureCubeArray.NumCubes = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_SHADER_RESOURCE_VIEW_DESC(
             ID3D11Texture3D* pTex3D,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mostDetailedMip = 0,
        UINT mipLevels = -1 )
    {
        ViewDimension = D3D11_SRV_DIMENSION_TEXTURE3D;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == mipLevels)
        {
            D3D11_TEXTURE3D_DESC TexDesc;
            pTex3D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == mipLevels) mipLevels = TexDesc.MipLevels - mostDetailedMip;
        }
        Format = format;
        Texture3D.MostDetailedMip = mostDetailedMip;
        Texture3D.MipLevels = mipLevels;
    }
    ~CD3D11_SHADER_RESOURCE_VIEW_DESC() {}
    operator const D3D11_SHADER_RESOURCE_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0010_v0_0_s_ifspec;
#line 3435 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11ShaderResourceView;



    struct __declspec(uuid("b0e06fe0-8192-4e1a-b1ca-36d7414710b2")) __declspec(novtable)
    ID3D11ShaderResourceView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc) = 0;

    };
#line 3564 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_BUFFER_RTV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D11_BUFFER_RTV;

typedef struct D3D11_TEX1D_RTV
    {
    UINT MipSlice;
    } D3D11_TEX1D_RTV;

typedef struct D3D11_TEX1D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_RTV;

typedef struct D3D11_TEX2D_RTV
    {
    UINT MipSlice;
    } D3D11_TEX2D_RTV;

typedef struct D3D11_TEX2DMS_RTV
    {
    UINT UnusedField_NothingToDefine;
    } D3D11_TEX2DMS_RTV;

typedef struct D3D11_TEX2D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_RTV;

typedef struct D3D11_TEX2DMS_ARRAY_RTV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2DMS_ARRAY_RTV;

typedef struct D3D11_TEX3D_RTV
    {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
    } D3D11_TEX3D_RTV;

typedef struct D3D11_RENDER_TARGET_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_RTV_DIMENSION ViewDimension;
    union
        {
        D3D11_BUFFER_RTV Buffer;
        D3D11_TEX1D_RTV Texture1D;
        D3D11_TEX1D_ARRAY_RTV Texture1DArray;
        D3D11_TEX2D_RTV Texture2D;
        D3D11_TEX2D_ARRAY_RTV Texture2DArray;
        D3D11_TEX2DMS_RTV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D11_TEX3D_RTV Texture3D;
        } ;
    } D3D11_RENDER_TARGET_VIEW_DESC;


}
struct CD3D11_RENDER_TARGET_VIEW_DESC : public D3D11_RENDER_TARGET_VIEW_DESC
{
    CD3D11_RENDER_TARGET_VIEW_DESC()
    {}
    explicit CD3D11_RENDER_TARGET_VIEW_DESC( const D3D11_RENDER_TARGET_VIEW_DESC& o ) :
        D3D11_RENDER_TARGET_VIEW_DESC( o )
    {}
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
        D3D11_RTV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        Format = format;
        ViewDimension = viewDimension;
        switch (viewDimension)
        {
        case D3D11_RTV_DIMENSION_BUFFER:
            Buffer.FirstElement = mipSlice;
            Buffer.NumElements = firstArraySlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE3D:
            Texture3D.MipSlice = mipSlice;
            Texture3D.FirstWSlice = firstArraySlice;
            Texture3D.WSize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Buffer*,
        DXGI_FORMAT format,
        UINT firstElement,
        UINT numElements )
    {
        Format = format;
        ViewDimension = D3D11_RTV_DIMENSION_BUFFER;
        Buffer.FirstElement = firstElement;
        Buffer.NumElements = numElements;
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_RTV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_RTV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_RTV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize &&
                (D3D11_RTV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
                D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY == viewDimension)))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_RENDER_TARGET_VIEW_DESC(
             ID3D11Texture3D* pTex3D,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstWSlice = 0,
        UINT wSize = -1 )
    {
        ViewDimension = D3D11_RTV_DIMENSION_TEXTURE3D;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == wSize)
        {
            D3D11_TEXTURE3D_DESC TexDesc;
            pTex3D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == wSize) wSize = TexDesc.Depth - firstWSlice;
        }
        Format = format;
        Texture3D.MipSlice = mipSlice;
        Texture3D.FirstWSlice = firstWSlice;
        Texture3D.WSize = wSize;
    }
    ~CD3D11_RENDER_TARGET_VIEW_DESC() {}
    operator const D3D11_RENDER_TARGET_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0011_v0_0_s_ifspec;
#line 3809 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11RenderTargetView;



    struct __declspec(uuid("dfdba067-0b8d-4865-875b-d7b4516cc164")) __declspec(novtable)
    ID3D11RenderTargetView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_RENDER_TARGET_VIEW_DESC *pDesc) = 0;

    };
#line 3939 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
}
struct CD3D11_VIEWPORT : public D3D11_VIEWPORT
{
    CD3D11_VIEWPORT()
    {}
    explicit CD3D11_VIEWPORT( const D3D11_VIEWPORT& o ) :
        D3D11_VIEWPORT( o )
    {}
    explicit CD3D11_VIEWPORT(
        FLOAT topLeftX,
        FLOAT topLeftY,
        FLOAT width,
        FLOAT height,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        TopLeftX = topLeftX;
        TopLeftY = topLeftY;
        Width = width;
        Height = height;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Buffer*,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT NumElements = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_BUFFER:
            NumElements = RTVDesc.Buffer.NumElements;
            break;
        default: break;
        }
        TopLeftX = topLeftX;
        TopLeftY = 0.0f;
        Width = NumElements - topLeftX;
        Height = 1.0f;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Texture1D* pTex1D,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_TEXTURE1D_DESC TexDesc;
        pTex1D->GetDesc( &TexDesc );
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT MipSlice = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE1D:
            MipSlice = RTVDesc.Texture1D.MipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE1DARRAY:
            MipSlice = RTVDesc.Texture1DArray.MipSlice;
            break;
        default: break;
        }
        const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
        TopLeftX = topLeftX;
        TopLeftY = 0.0f;
        Width = (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
        Height = 1.0f;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Texture2D* pTex2D,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT topLeftY = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_TEXTURE2D_DESC TexDesc;
        pTex2D->GetDesc( &TexDesc );
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT MipSlice = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE2D:
            MipSlice = RTVDesc.Texture2D.MipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DARRAY:
            MipSlice = RTVDesc.Texture2DArray.MipSlice;
            break;
        case D3D11_RTV_DIMENSION_TEXTURE2DMS:
        case D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY:
            break;
        default: break;
        }
        const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
        const UINT SubResourceHeight = TexDesc.Height / (UINT( 1 ) << MipSlice);
        TopLeftX = topLeftX;
        TopLeftY = topLeftY;
        Width = (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
        Height = (SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    explicit CD3D11_VIEWPORT(
             ID3D11Texture3D* pTex3D,
             ID3D11RenderTargetView* pRTView,
        FLOAT topLeftX = 0.0f,
        FLOAT topLeftY = 0.0f,
        FLOAT minDepth = ( 0.0f ),
        FLOAT maxDepth = ( 1.0f ) )
    {
        D3D11_TEXTURE3D_DESC TexDesc;
        pTex3D->GetDesc( &TexDesc );
        D3D11_RENDER_TARGET_VIEW_DESC RTVDesc;
        pRTView->GetDesc( &RTVDesc );
        UINT MipSlice = 0;
        switch (RTVDesc.ViewDimension)
        {
        case D3D11_RTV_DIMENSION_TEXTURE3D:
            MipSlice = RTVDesc.Texture3D.MipSlice;
            break;
        default: break;
        }
        const UINT SubResourceWidth = TexDesc.Width / (UINT( 1 ) << MipSlice);
        const UINT SubResourceHeight = TexDesc.Height / (UINT( 1 ) << MipSlice);
        TopLeftX = topLeftX;
        TopLeftY = topLeftY;
        Width = (SubResourceWidth ? SubResourceWidth : 1) - topLeftX;
        Height = (SubResourceHeight ? SubResourceHeight : 1) - topLeftY;
        MinDepth = minDepth;
        MaxDepth = maxDepth;
    }
    ~CD3D11_VIEWPORT() {}
    operator const D3D11_VIEWPORT&() const { return *this; }
};
extern "C"{

typedef struct D3D11_TEX1D_DSV
    {
    UINT MipSlice;
    } D3D11_TEX1D_DSV;

typedef struct D3D11_TEX1D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_DSV;

typedef struct D3D11_TEX2D_DSV
    {
    UINT MipSlice;
    } D3D11_TEX2D_DSV;

typedef struct D3D11_TEX2D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_DSV;

typedef struct D3D11_TEX2DMS_DSV
    {
    UINT UnusedField_NothingToDefine;
    } D3D11_TEX2DMS_DSV;

typedef struct D3D11_TEX2DMS_ARRAY_DSV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2DMS_ARRAY_DSV;

typedef
enum D3D11_DSV_FLAG
    { D3D11_DSV_READ_ONLY_DEPTH = 0x1L,
 D3D11_DSV_READ_ONLY_STENCIL = 0x2L
    } D3D11_DSV_FLAG;

typedef struct D3D11_DEPTH_STENCIL_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_DSV_DIMENSION ViewDimension;
    UINT Flags;
    union
        {
        D3D11_TEX1D_DSV Texture1D;
        D3D11_TEX1D_ARRAY_DSV Texture1DArray;
        D3D11_TEX2D_DSV Texture2D;
        D3D11_TEX2D_ARRAY_DSV Texture2DArray;
        D3D11_TEX2DMS_DSV Texture2DMS;
        D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        } ;
    } D3D11_DEPTH_STENCIL_VIEW_DESC;


}
struct CD3D11_DEPTH_STENCIL_VIEW_DESC : public D3D11_DEPTH_STENCIL_VIEW_DESC
{
    CD3D11_DEPTH_STENCIL_VIEW_DESC()
    {}
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC( const D3D11_DEPTH_STENCIL_VIEW_DESC& o ) :
        D3D11_DEPTH_STENCIL_VIEW_DESC( o )
    {}
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
        D3D11_DSV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = viewDimension;
        Flags = flags;
        switch (viewDimension)
        {
        case D3D11_DSV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_DSV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        ViewDimension = viewDimension;
        Flags = flags;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_DSV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_DSV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_DEPTH_STENCIL_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_DSV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        ViewDimension = viewDimension;
        Flags = flags;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize &&
                (D3D11_DSV_DIMENSION_TEXTURE2DARRAY == viewDimension ||
                D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY == viewDimension)))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_DSV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMS:
            break;
        case D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY:
            Texture2DMSArray.FirstArraySlice = firstArraySlice;
            Texture2DMSArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    ~CD3D11_DEPTH_STENCIL_VIEW_DESC() {}
    operator const D3D11_DEPTH_STENCIL_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0012_v0_0_s_ifspec;
#line 4280 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11DepthStencilView;



    struct __declspec(uuid("9fdac92a-1876-48c3-afad-25b94f84a9b6")) __declspec(novtable)
    ID3D11DepthStencilView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc) = 0;

    };
#line 4409 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_BUFFER_UAV_FLAG
    { D3D11_BUFFER_UAV_FLAG_RAW = 0x1,
 D3D11_BUFFER_UAV_FLAG_APPEND = 0x2,
 D3D11_BUFFER_UAV_FLAG_COUNTER = 0x4
    } D3D11_BUFFER_UAV_FLAG;

typedef struct D3D11_BUFFER_UAV
    {
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
    } D3D11_BUFFER_UAV;

typedef struct D3D11_TEX1D_UAV
    {
    UINT MipSlice;
    } D3D11_TEX1D_UAV;

typedef struct D3D11_TEX1D_ARRAY_UAV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX1D_ARRAY_UAV;

typedef struct D3D11_TEX2D_UAV
    {
    UINT MipSlice;
    } D3D11_TEX2D_UAV;

typedef struct D3D11_TEX2D_ARRAY_UAV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D11_TEX2D_ARRAY_UAV;

typedef struct D3D11_TEX3D_UAV
    {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
    } D3D11_TEX3D_UAV;

typedef struct D3D11_UNORDERED_ACCESS_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D11_UAV_DIMENSION ViewDimension;
    union
        {
        D3D11_BUFFER_UAV Buffer;
        D3D11_TEX1D_UAV Texture1D;
        D3D11_TEX1D_ARRAY_UAV Texture1DArray;
        D3D11_TEX2D_UAV Texture2D;
        D3D11_TEX2D_ARRAY_UAV Texture2DArray;
        D3D11_TEX3D_UAV Texture3D;
        } ;
    } D3D11_UNORDERED_ACCESS_VIEW_DESC;


}
struct CD3D11_UNORDERED_ACCESS_VIEW_DESC : public D3D11_UNORDERED_ACCESS_VIEW_DESC
{
    CD3D11_UNORDERED_ACCESS_VIEW_DESC()
    {}
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC( const D3D11_UNORDERED_ACCESS_VIEW_DESC& o ) :
        D3D11_UNORDERED_ACCESS_VIEW_DESC( o )
    {}
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
        D3D11_UAV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = viewDimension;
        switch (viewDimension)
        {
        case D3D11_UAV_DIMENSION_BUFFER:
            Buffer.FirstElement = mipSlice;
            Buffer.NumElements = firstArraySlice;
            Buffer.Flags = flags;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE3D:
            Texture3D.MipSlice = mipSlice;
            Texture3D.FirstWSlice = firstArraySlice;
            Texture3D.WSize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Buffer*,
        DXGI_FORMAT format,
        UINT firstElement,
        UINT numElements,
        UINT flags = 0 )
    {
        Format = format;
        ViewDimension = D3D11_UAV_DIMENSION_BUFFER;
        Buffer.FirstElement = firstElement;
        Buffer.NumElements = numElements;
        Buffer.Flags = flags;
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Texture1D* pTex1D,
        D3D11_UAV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_UAV_DIMENSION_TEXTURE1DARRAY == viewDimension))
        {
            D3D11_TEXTURE1D_DESC TexDesc;
            pTex1D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_UAV_DIMENSION_TEXTURE1D:
            Texture1D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE1DARRAY:
            Texture1DArray.MipSlice = mipSlice;
            Texture1DArray.FirstArraySlice = firstArraySlice;
            Texture1DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Texture2D* pTex2D,
        D3D11_UAV_DIMENSION viewDimension,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstArraySlice = 0,
        UINT arraySize = -1 )
    {
        ViewDimension = viewDimension;
        if (DXGI_FORMAT_UNKNOWN == format ||
            (-1 == arraySize && D3D11_UAV_DIMENSION_TEXTURE2DARRAY == viewDimension))
        {
            D3D11_TEXTURE2D_DESC TexDesc;
            pTex2D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == arraySize) arraySize = TexDesc.ArraySize - firstArraySlice;
        }
        Format = format;
        switch (viewDimension)
        {
        case D3D11_UAV_DIMENSION_TEXTURE2D:
            Texture2D.MipSlice = mipSlice;
            break;
        case D3D11_UAV_DIMENSION_TEXTURE2DARRAY:
            Texture2DArray.MipSlice = mipSlice;
            Texture2DArray.FirstArraySlice = firstArraySlice;
            Texture2DArray.ArraySize = arraySize;
            break;
        default: break;
        }
    }
    explicit CD3D11_UNORDERED_ACCESS_VIEW_DESC(
             ID3D11Texture3D* pTex3D,
        DXGI_FORMAT format = DXGI_FORMAT_UNKNOWN,
        UINT mipSlice = 0,
        UINT firstWSlice = 0,
        UINT wSize = -1 )
    {
        ViewDimension = D3D11_UAV_DIMENSION_TEXTURE3D;
        if (DXGI_FORMAT_UNKNOWN == format || -1 == wSize)
        {
            D3D11_TEXTURE3D_DESC TexDesc;
            pTex3D->GetDesc( &TexDesc );
            if (DXGI_FORMAT_UNKNOWN == format) format = TexDesc.Format;
            if (-1 == wSize) wSize = TexDesc.Depth - firstWSlice;
        }
        Format = format;
        Texture3D.MipSlice = mipSlice;
        Texture3D.FirstWSlice = firstWSlice;
        Texture3D.WSize = wSize;
    }
    ~CD3D11_UNORDERED_ACCESS_VIEW_DESC() {}
    operator const D3D11_UNORDERED_ACCESS_VIEW_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0013_v0_0_s_ifspec;
#line 4631 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11UnorderedAccessView;



    struct __declspec(uuid("28acf509-7f5c-48f6-8611-f316010a6380")) __declspec(novtable)
    ID3D11UnorderedAccessView : public ID3D11View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc) = 0;

    };
#line 4764 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11VertexShader;



    struct __declspec(uuid("3b301d64-d678-4289-8897-22f8928b72f3")) __declspec(novtable)
    ID3D11VertexShader : public ID3D11DeviceChild
    {
    public:
    };
#line 4876 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11HullShader;



    struct __declspec(uuid("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd")) __declspec(novtable)
    ID3D11HullShader : public ID3D11DeviceChild
    {
    public:
    };
#line 4988 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11DomainShader;



    struct __declspec(uuid("f582c508-0f36-490c-9977-31eece268cfa")) __declspec(novtable)
    ID3D11DomainShader : public ID3D11DeviceChild
    {
    public:
    };
#line 5100 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11GeometryShader;



    struct __declspec(uuid("38325b96-effb-4022-ba02-2e795b70275c")) __declspec(novtable)
    ID3D11GeometryShader : public ID3D11DeviceChild
    {
    public:
    };
#line 5212 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11PixelShader;



    struct __declspec(uuid("ea82e40d-51dc-4f33-93d4-db7c9125ae8c")) __declspec(novtable)
    ID3D11PixelShader : public ID3D11DeviceChild
    {
    public:
    };
#line 5324 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11ComputeShader;



    struct __declspec(uuid("4f5b196e-c2bd-495e-bd01-1fded38e4969")) __declspec(novtable)
    ID3D11ComputeShader : public ID3D11DeviceChild
    {
    public:
    };
#line 5436 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11InputLayout;



    struct __declspec(uuid("e4819ddc-4cf0-4025-bd26-5de82a3e07b7")) __declspec(novtable)
    ID3D11InputLayout : public ID3D11DeviceChild
    {
    public:
    };
#line 5544 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_FILTER
    { D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
 D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
 D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
 D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
 D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
 D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
 D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
 D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
 D3D11_FILTER_ANISOTROPIC = 0x55,
 D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
 D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
 D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
 D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
 D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
 D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
 D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
 D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
 D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5
    } D3D11_FILTER;

typedef
enum D3D11_FILTER_TYPE
    { D3D11_FILTER_TYPE_POINT = 0,
 D3D11_FILTER_TYPE_LINEAR = 1
    } D3D11_FILTER_TYPE;
#line 5613 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_TEXTURE_ADDRESS_MODE
    { D3D11_TEXTURE_ADDRESS_WRAP = 1,
 D3D11_TEXTURE_ADDRESS_MIRROR = 2,
 D3D11_TEXTURE_ADDRESS_CLAMP = 3,
 D3D11_TEXTURE_ADDRESS_BORDER = 4,
 D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5
    } D3D11_TEXTURE_ADDRESS_MODE;

typedef struct D3D11_SAMPLER_DESC
    {
    D3D11_FILTER Filter;
    D3D11_TEXTURE_ADDRESS_MODE AddressU;
    D3D11_TEXTURE_ADDRESS_MODE AddressV;
    D3D11_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D11_COMPARISON_FUNC ComparisonFunc;
    FLOAT BorderColor[ 4 ];
    FLOAT MinLOD;
    FLOAT MaxLOD;
    } D3D11_SAMPLER_DESC;


}
struct CD3D11_SAMPLER_DESC : public D3D11_SAMPLER_DESC
{
    CD3D11_SAMPLER_DESC()
    {}
    explicit CD3D11_SAMPLER_DESC( const D3D11_SAMPLER_DESC& o ) :
        D3D11_SAMPLER_DESC( o )
    {}
    explicit CD3D11_SAMPLER_DESC( CD3D11_DEFAULT )
    {
        Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
        AddressU = D3D11_TEXTURE_ADDRESS_CLAMP;
        AddressV = D3D11_TEXTURE_ADDRESS_CLAMP;
        AddressW = D3D11_TEXTURE_ADDRESS_CLAMP;
        MipLODBias = 0;
        MaxAnisotropy = 1;
        ComparisonFunc = D3D11_COMPARISON_NEVER;
        BorderColor[ 0 ] = 1.0f;
        BorderColor[ 1 ] = 1.0f;
        BorderColor[ 2 ] = 1.0f;
        BorderColor[ 3 ] = 1.0f;
        MinLOD = -3.402823466e+38F;
        MaxLOD = 3.402823466e+38F;
    }
    explicit CD3D11_SAMPLER_DESC(
        D3D11_FILTER filter,
        D3D11_TEXTURE_ADDRESS_MODE addressU,
        D3D11_TEXTURE_ADDRESS_MODE addressV,
        D3D11_TEXTURE_ADDRESS_MODE addressW,
        FLOAT mipLODBias,
        UINT maxAnisotropy,
        D3D11_COMPARISON_FUNC comparisonFunc,
                             const FLOAT* borderColor,
        FLOAT minLOD,
        FLOAT maxLOD )
    {
        Filter = filter;
        AddressU = addressU;
        AddressV = addressV;
        AddressW = addressW;
        MipLODBias = mipLODBias;
        MaxAnisotropy = maxAnisotropy;
        ComparisonFunc = comparisonFunc;
        const float defaultColor[ 4 ] = { 1.0f, 1.0f, 1.0f, 1.0f };
        if (!borderColor) borderColor = defaultColor;
        BorderColor[ 0 ] = borderColor[ 0 ];
        BorderColor[ 1 ] = borderColor[ 1 ];
        BorderColor[ 2 ] = borderColor[ 2 ];
        BorderColor[ 3 ] = borderColor[ 3 ];
        MinLOD = minLOD;
        MaxLOD = maxLOD;
    }
    ~CD3D11_SAMPLER_DESC() {}
    operator const D3D11_SAMPLER_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0021_v0_0_s_ifspec;
#line 5706 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11SamplerState;



    struct __declspec(uuid("da6fea51-564c-4487-9810-f0d0f9b4e3a5")) __declspec(novtable)
    ID3D11SamplerState : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_SAMPLER_DESC *pDesc) = 0;

    };
#line 5826 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_FORMAT_SUPPORT
    { D3D11_FORMAT_SUPPORT_BUFFER = 0x1,
 D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
 D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
 D3D11_FORMAT_SUPPORT_SO_BUFFER = 0x8,
 D3D11_FORMAT_SUPPORT_TEXTURE1D = 0x10,
 D3D11_FORMAT_SUPPORT_TEXTURE2D = 0x20,
 D3D11_FORMAT_SUPPORT_TEXTURE3D = 0x40,
 D3D11_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
 D3D11_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
 D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
 D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
 D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
 D3D11_FORMAT_SUPPORT_MIP = 0x1000,
 D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
 D3D11_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
 D3D11_FORMAT_SUPPORT_BLENDABLE = 0x8000,
 D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
 D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
 D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
 D3D11_FORMAT_SUPPORT_DISPLAY = 0x80000,
 D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
 D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
 D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
 D3D11_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
 D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000,
 D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
 D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 0x4000000
    } D3D11_FORMAT_SUPPORT;

typedef
enum D3D11_FORMAT_SUPPORT2
    { D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
 D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
 D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
 D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
 D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
 D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
 D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
 D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80
    } D3D11_FORMAT_SUPPORT2;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0022_v0_0_s_ifspec;
#line 5881 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Asynchronous;



    struct __declspec(uuid("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b")) __declspec(novtable)
    ID3D11Asynchronous : public ID3D11DeviceChild
    {
    public:
        virtual UINT __stdcall GetDataSize( void) = 0;

    };
#line 5997 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_ASYNC_GETDATA_FLAG
    { D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1
    } D3D11_ASYNC_GETDATA_FLAG;

typedef
enum D3D11_QUERY
    { D3D11_QUERY_EVENT = 0,
 D3D11_QUERY_OCCLUSION = ( D3D11_QUERY_EVENT + 1 ) ,
 D3D11_QUERY_TIMESTAMP = ( D3D11_QUERY_OCCLUSION + 1 ) ,
 D3D11_QUERY_TIMESTAMP_DISJOINT = ( D3D11_QUERY_TIMESTAMP + 1 ) ,
 D3D11_QUERY_PIPELINE_STATISTICS = ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
 D3D11_QUERY_OCCLUSION_PREDICATE = ( D3D11_QUERY_PIPELINE_STATISTICS + 1 ) ,
 D3D11_QUERY_SO_STATISTICS = ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 ) ,
 D3D11_QUERY_SO_OVERFLOW_PREDICATE = ( D3D11_QUERY_SO_STATISTICS + 1 ) ,
 D3D11_QUERY_SO_STATISTICS_STREAM0 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 ) ,
 D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 ) ,
 D3D11_QUERY_SO_STATISTICS_STREAM1 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ,
 D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 ) ,
 D3D11_QUERY_SO_STATISTICS_STREAM2 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ,
 D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 ) ,
 D3D11_QUERY_SO_STATISTICS_STREAM3 = ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ,
 D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 )
    } D3D11_QUERY;

typedef
enum D3D11_QUERY_MISC_FLAG
    { D3D11_QUERY_MISC_PREDICATEHINT = 0x1
    } D3D11_QUERY_MISC_FLAG;

typedef struct D3D11_QUERY_DESC
    {
    D3D11_QUERY Query;
    UINT MiscFlags;
    } D3D11_QUERY_DESC;


}
struct CD3D11_QUERY_DESC : public D3D11_QUERY_DESC
{
    CD3D11_QUERY_DESC()
    {}
    explicit CD3D11_QUERY_DESC( const D3D11_QUERY_DESC& o ) :
        D3D11_QUERY_DESC( o )
    {}
    explicit CD3D11_QUERY_DESC(
        D3D11_QUERY query,
        UINT miscFlags = 0 )
    {
        Query = query;
        MiscFlags = miscFlags;
    }
    ~CD3D11_QUERY_DESC() {}
    operator const D3D11_QUERY_DESC&() const { return *this; }
};
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0023_v0_0_s_ifspec;
#line 6066 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Query;



    struct __declspec(uuid("d6c00747-87b7-425e-b84d-44d108560afd")) __declspec(novtable)
    ID3D11Query : public ID3D11Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_QUERY_DESC *pDesc) = 0;

    };
#line 6197 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Predicate;



    struct __declspec(uuid("9eb576dd-9f77-4d86-81aa-8bab5fe490e2")) __declspec(novtable)
    ID3D11Predicate : public ID3D11Query
    {
    public:
    };
#line 6321 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    {
    UINT64 Frequency;
    BOOL Disjoint;
    } D3D11_QUERY_DATA_TIMESTAMP_DISJOINT;

typedef struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
    {
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    UINT64 HSInvocations;
    UINT64 DSInvocations;
    UINT64 CSInvocations;
    } D3D11_QUERY_DATA_PIPELINE_STATISTICS;

typedef struct D3D11_QUERY_DATA_SO_STATISTICS
    {
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
    } D3D11_QUERY_DATA_SO_STATISTICS;

typedef
enum D3D11_COUNTER
    { D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
    } D3D11_COUNTER;

typedef
enum D3D11_COUNTER_TYPE
    { D3D11_COUNTER_TYPE_FLOAT32 = 0,
 D3D11_COUNTER_TYPE_UINT16 = ( D3D11_COUNTER_TYPE_FLOAT32 + 1 ) ,
 D3D11_COUNTER_TYPE_UINT32 = ( D3D11_COUNTER_TYPE_UINT16 + 1 ) ,
 D3D11_COUNTER_TYPE_UINT64 = ( D3D11_COUNTER_TYPE_UINT32 + 1 )
    } D3D11_COUNTER_TYPE;

typedef struct D3D11_COUNTER_DESC
    {
    D3D11_COUNTER Counter;
    UINT MiscFlags;
    } D3D11_COUNTER_DESC;


}
struct CD3D11_COUNTER_DESC : public D3D11_COUNTER_DESC
{
    CD3D11_COUNTER_DESC()
    {}
    explicit CD3D11_COUNTER_DESC( const D3D11_COUNTER_DESC& o ) :
        D3D11_COUNTER_DESC( o )
    {}
    explicit CD3D11_COUNTER_DESC(
        D3D11_COUNTER counter,
        UINT miscFlags = 0 )
    {
        Counter = counter;
        MiscFlags = miscFlags;
    }
    ~CD3D11_COUNTER_DESC() {}
    operator const D3D11_COUNTER_DESC&() const { return *this; }
};
extern "C"{

typedef struct D3D11_COUNTER_INFO
    {
    D3D11_COUNTER LastDeviceDependentCounter;
    UINT NumSimultaneousCounters;
    UINT8 NumDetectableParallelUnits;
    } D3D11_COUNTER_INFO;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0025_v0_0_s_ifspec;
#line 6407 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Counter;



    struct __declspec(uuid("6e8c49fb-a371-4770-b440-29086022b741")) __declspec(novtable)
    ID3D11Counter : public ID3D11Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D11_COUNTER_DESC *pDesc) = 0;

    };
#line 6534 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    { D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
 D3D11_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe
    } D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS;

typedef
enum D3D11_DEVICE_CONTEXT_TYPE
    { D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
 D3D11_DEVICE_CONTEXT_DEFERRED = ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 )
    } D3D11_DEVICE_CONTEXT_TYPE;

typedef struct D3D11_CLASS_INSTANCE_DESC
    {
    UINT InstanceId;
    UINT InstanceIndex;
    UINT TypeId;
    UINT ConstantBuffer;
    UINT BaseConstantBufferOffset;
    UINT BaseTexture;
    UINT BaseSampler;
    BOOL Created;
    } D3D11_CLASS_INSTANCE_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0026_v0_0_s_ifspec;
#line 6570 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11ClassInstance;



    struct __declspec(uuid("a6cd7faa-b0b7-4a2f-9436-8662a65797cb")) __declspec(novtable)
    ID3D11ClassInstance : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall GetClassLinkage(

                   ID3D11ClassLinkage **ppLinkage) = 0;

        virtual void __stdcall GetDesc(

                   D3D11_CLASS_INSTANCE_DESC *pDesc) = 0;

        virtual void __stdcall GetInstanceName(

                                              LPSTR pInstanceName,

                     SIZE_T *pBufferLength) = 0;

        virtual void __stdcall GetTypeName(

                                              LPSTR pTypeName,

                     SIZE_T *pBufferLength) = 0;

    };
#line 6738 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11ClassLinkage;



    struct __declspec(uuid("ddf57cba-9543-46e4-a12b-f207a0fe7fed")) __declspec(novtable)
    ID3D11ClassLinkage : public ID3D11DeviceChild
    {
    public:
        virtual HRESULT __stdcall GetClassInstance(

                  LPCSTR pClassInstanceName,

                  UINT InstanceIndex,

                   ID3D11ClassInstance **ppInstance) = 0;

        virtual HRESULT __stdcall CreateClassInstance(

                  LPCSTR pClassTypeName,

                  UINT ConstantBufferOffset,

                  UINT ConstantVectorOffset,

                  UINT TextureOffset,

                  UINT SamplerOffset,

                   ID3D11ClassInstance **ppInstance) = 0;

    };
#line 6902 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11CommandList;



    struct __declspec(uuid("a24bc4d1-769e-43f7-8013-98ff566c18e2")) __declspec(novtable)
    ID3D11CommandList : public ID3D11DeviceChild
    {
    public:
        virtual UINT __stdcall GetContextFlags( void) = 0;

    };
#line 7018 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_FEATURE
    { D3D11_FEATURE_THREADING = 0,
 D3D11_FEATURE_DOUBLES = ( D3D11_FEATURE_THREADING + 1 ) ,
 D3D11_FEATURE_FORMAT_SUPPORT = ( D3D11_FEATURE_DOUBLES + 1 ) ,
 D3D11_FEATURE_FORMAT_SUPPORT2 = ( D3D11_FEATURE_FORMAT_SUPPORT + 1 ) ,
 D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = ( D3D11_FEATURE_FORMAT_SUPPORT2 + 1 )
    } D3D11_FEATURE;

typedef struct D3D11_FEATURE_DATA_THREADING
    {
    BOOL DriverConcurrentCreates;
    BOOL DriverCommandLists;
    } D3D11_FEATURE_DATA_THREADING;

typedef struct D3D11_FEATURE_DATA_DOUBLES
    {
    BOOL DoublePrecisionFloatShaderOps;
    } D3D11_FEATURE_DATA_DOUBLES;

typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
    {
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport;
    } D3D11_FEATURE_DATA_FORMAT_SUPPORT;

typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    {
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport2;
    } D3D11_FEATURE_DATA_FORMAT_SUPPORT2;

typedef struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    {
    BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    } D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS;



extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0029_v0_0_s_ifspec;
#line 7067 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11DeviceContext;



    struct __declspec(uuid("c0bfa96c-e089-44fb-8eaf-26f8796190da")) __declspec(novtable)
    ID3D11DeviceContext : public ID3D11DeviceChild
    {
    public:
        virtual void __stdcall VSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall PSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall PSSetShader(

                      ID3D11PixelShader *pPixelShader,

                                                ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall PSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall VSSetShader(

                      ID3D11VertexShader *pVertexShader,

                                                ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall DrawIndexed(

                  UINT IndexCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation) = 0;

        virtual void __stdcall Draw(

                  UINT VertexCount,

                  UINT StartVertexLocation) = 0;

        virtual HRESULT __stdcall Map(

                  ID3D11Resource *pResource,

                  UINT Subresource,

                  D3D11_MAP MapType,

                  UINT MapFlags,

                   D3D11_MAPPED_SUBRESOURCE *pMappedResource) = 0;

        virtual void __stdcall Unmap(

                  ID3D11Resource *pResource,

                  UINT Subresource) = 0;

        virtual void __stdcall PSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall IASetInputLayout(

                      ID3D11InputLayout *pInputLayout) = 0;

        virtual void __stdcall IASetVertexBuffers(

                                                                            UINT StartSlot,

                                                                                    UINT NumBuffers,

                                     ID3D11Buffer *const *ppVertexBuffers,

                                     const UINT *pStrides,

                                     const UINT *pOffsets) = 0;

        virtual void __stdcall IASetIndexBuffer(

                      ID3D11Buffer *pIndexBuffer,

                  DXGI_FORMAT Format,

                  UINT Offset) = 0;

        virtual void __stdcall DrawIndexedInstanced(

                  UINT IndexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall DrawInstanced(

                  UINT VertexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall GSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall GSSetShader(

                      ID3D11GeometryShader *pShader,

                                                ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall IASetPrimitiveTopology(

                  D3D11_PRIMITIVE_TOPOLOGY Topology) = 0;

        virtual void __stdcall VSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall VSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall Begin(

                  ID3D11Asynchronous *pAsync) = 0;

        virtual void __stdcall End(

                  ID3D11Asynchronous *pAsync) = 0;

        virtual HRESULT __stdcall GetData(

                  ID3D11Asynchronous *pAsync,

                                          void *pData,

                  UINT DataSize,

                  UINT GetDataFlags) = 0;

        virtual void __stdcall SetPredication(

                      ID3D11Predicate *pPredicate,

                  BOOL PredicateValue) = 0;

        virtual void __stdcall GSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall GSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall OMSetRenderTargets(

                                                                     UINT NumViews,

                                       ID3D11RenderTargetView *const *ppRenderTargetViews,

                      ID3D11DepthStencilView *pDepthStencilView) = 0;

        virtual void __stdcall OMSetRenderTargetsAndUnorderedAccessViews(

                  UINT NumRTVs,

                                      ID3D11RenderTargetView *const *ppRenderTargetViews,

                      ID3D11DepthStencilView *pDepthStencilView,

                                                                 UINT UAVStartSlot,

                  UINT NumUAVs,

                                      ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,

                                      const UINT *pUAVInitialCounts) = 0;

        virtual void __stdcall OMSetBlendState(

                      ID3D11BlendState *pBlendState,

                      const FLOAT BlendFactor[ 4 ],

                  UINT SampleMask) = 0;

        virtual void __stdcall OMSetDepthStencilState(

                      ID3D11DepthStencilState *pDepthStencilState,

                  UINT StencilRef) = 0;

        virtual void __stdcall SOSetTargets(

                                                        UINT NumBuffers,

                                         ID3D11Buffer *const *ppSOTargets,

                                         const UINT *pOffsets) = 0;

        virtual void __stdcall DrawAuto( void) = 0;

        virtual void __stdcall DrawIndexedInstancedIndirect(

                  ID3D11Buffer *pBufferForArgs,

                  UINT AlignedByteOffsetForArgs) = 0;

        virtual void __stdcall DrawInstancedIndirect(

                  ID3D11Buffer *pBufferForArgs,

                  UINT AlignedByteOffsetForArgs) = 0;

        virtual void __stdcall Dispatch(

                  UINT ThreadGroupCountX,

                  UINT ThreadGroupCountY,

                  UINT ThreadGroupCountZ) = 0;

        virtual void __stdcall DispatchIndirect(

                  ID3D11Buffer *pBufferForArgs,

                  UINT AlignedByteOffsetForArgs) = 0;

        virtual void __stdcall RSSetState(

                      ID3D11RasterizerState *pRasterizerState) = 0;

        virtual void __stdcall RSSetViewports(

                                                                                     UINT NumViewports,

                                           const D3D11_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSSetScissorRects(

                                                                                     UINT NumRects,

                                       const D3D11_RECT *pRects) = 0;

        virtual void __stdcall CopySubresourceRegion(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                  UINT DstX,

                  UINT DstY,

                  UINT DstZ,

                  ID3D11Resource *pSrcResource,

                  UINT SrcSubresource,

                      const D3D11_BOX *pSrcBox) = 0;

        virtual void __stdcall CopyResource(

                  ID3D11Resource *pDstResource,

                  ID3D11Resource *pSrcResource) = 0;

        virtual void __stdcall UpdateSubresource(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                      const D3D11_BOX *pDstBox,

                  const void *pSrcData,

                  UINT SrcRowPitch,

                  UINT SrcDepthPitch) = 0;

        virtual void __stdcall CopyStructureCount(

                  ID3D11Buffer *pDstBuffer,

                  UINT DstAlignedByteOffset,

                  ID3D11UnorderedAccessView *pSrcView) = 0;

        virtual void __stdcall ClearRenderTargetView(

                  ID3D11RenderTargetView *pRenderTargetView,

                  const FLOAT ColorRGBA[ 4 ]) = 0;

        virtual void __stdcall ClearUnorderedAccessViewUint(

                  ID3D11UnorderedAccessView *pUnorderedAccessView,

                  const UINT Values[ 4 ]) = 0;

        virtual void __stdcall ClearUnorderedAccessViewFloat(

                  ID3D11UnorderedAccessView *pUnorderedAccessView,

                  const FLOAT Values[ 4 ]) = 0;

        virtual void __stdcall ClearDepthStencilView(

                  ID3D11DepthStencilView *pDepthStencilView,

                  UINT ClearFlags,

                  FLOAT Depth,

                  UINT8 Stencil) = 0;

        virtual void __stdcall GenerateMips(

                  ID3D11ShaderResourceView *pShaderResourceView) = 0;

        virtual void __stdcall SetResourceMinLOD(

                  ID3D11Resource *pResource,
            FLOAT MinLOD) = 0;

        virtual FLOAT __stdcall GetResourceMinLOD(

                  ID3D11Resource *pResource) = 0;

        virtual void __stdcall ResolveSubresource(

                  ID3D11Resource *pDstResource,

                  UINT DstSubresource,

                  ID3D11Resource *pSrcResource,

                  UINT SrcSubresource,

                  DXGI_FORMAT Format) = 0;

        virtual void __stdcall ExecuteCommandList(

                  ID3D11CommandList *pCommandList,
            BOOL RestoreContextState) = 0;

        virtual void __stdcall HSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall HSSetShader(

                      ID3D11HullShader *pHullShader,

                                                ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall HSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall HSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall DSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall DSSetShader(

                      ID3D11DomainShader *pDomainShader,

                                                ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall DSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall DSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall CSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D11ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall CSSetUnorderedAccessViews(

                                                                 UINT StartSlot,

                                                                         UINT NumUAVs,

                                  ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,

                                  const UINT *pUAVInitialCounts) = 0;

        virtual void __stdcall CSSetShader(

                      ID3D11ComputeShader *pComputeShader,

                                                ID3D11ClassInstance *const *ppClassInstances,
            UINT NumClassInstances) = 0;

        virtual void __stdcall CSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D11SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall CSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D11Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall VSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall PSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall PSGetShader(

                   ID3D11PixelShader **ppPixelShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall PSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall VSGetShader(

                   ID3D11VertexShader **ppVertexShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall PSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall IAGetInputLayout(

                   ID3D11InputLayout **ppInputLayout) = 0;

        virtual void __stdcall IAGetVertexBuffers(

                                                                            UINT StartSlot,

                                                                                    UINT NumBuffers,

                                          ID3D11Buffer **ppVertexBuffers,

                                          UINT *pStrides,

                                          UINT *pOffsets) = 0;

        virtual void __stdcall IAGetIndexBuffer(

                       ID3D11Buffer **pIndexBuffer,

                       DXGI_FORMAT *Format,

                       UINT *Offset) = 0;

        virtual void __stdcall GSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall GSGetShader(

                   ID3D11GeometryShader **ppGeometryShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall IAGetPrimitiveTopology(

                   D3D11_PRIMITIVE_TOPOLOGY *pTopology) = 0;

        virtual void __stdcall VSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall VSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall GetPredication(

                       ID3D11Predicate **ppPredicate,

                       BOOL *pPredicateValue) = 0;

        virtual void __stdcall GSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall GSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall OMGetRenderTargets(

                                                                     UINT NumViews,

                                        ID3D11RenderTargetView **ppRenderTargetViews,

                       ID3D11DepthStencilView **ppDepthStencilView) = 0;

        virtual void __stdcall OMGetRenderTargetsAndUnorderedAccessViews(

                                                                     UINT NumRTVs,

                                       ID3D11RenderTargetView **ppRenderTargetViews,

                       ID3D11DepthStencilView **ppDepthStencilView,

                                                                 UINT UAVStartSlot,

                                                                            UINT NumUAVs,

                                       ID3D11UnorderedAccessView **ppUnorderedAccessViews) = 0;

        virtual void __stdcall OMGetBlendState(

                       ID3D11BlendState **ppBlendState,

                       FLOAT BlendFactor[ 4 ],

                       UINT *pSampleMask) = 0;

        virtual void __stdcall OMGetDepthStencilState(

                       ID3D11DepthStencilState **ppDepthStencilState,

                       UINT *pStencilRef) = 0;

        virtual void __stdcall SOGetTargets(

                                                         UINT NumBuffers,

                                      ID3D11Buffer **ppSOTargets) = 0;

        virtual void __stdcall RSGetState(

                   ID3D11RasterizerState **ppRasterizerState) = 0;

        virtual void __stdcall RSGetViewports(

                                                                                               UINT *pNumViewports,

                                              D3D11_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSGetScissorRects(

                                                                                               UINT *pNumRects,

                                          D3D11_RECT *pRects) = 0;

        virtual void __stdcall HSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall HSGetShader(

                   ID3D11HullShader **ppHullShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall HSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall HSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall DSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall DSGetShader(

                   ID3D11DomainShader **ppDomainShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall DSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall DSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall CSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D11ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall CSGetUnorderedAccessViews(

                                                                 UINT StartSlot,

                                                                         UINT NumUAVs,

                                   ID3D11UnorderedAccessView **ppUnorderedAccessViews) = 0;

        virtual void __stdcall CSGetShader(

                   ID3D11ComputeShader **ppComputeShader,

                                                   ID3D11ClassInstance **ppClassInstances,

                         UINT *pNumClassInstances) = 0;

        virtual void __stdcall CSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D11SamplerState **ppSamplers) = 0;

        virtual void __stdcall CSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D11Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall ClearState( void) = 0;

        virtual void __stdcall Flush( void) = 0;

        virtual D3D11_DEVICE_CONTEXT_TYPE __stdcall GetType( void) = 0;

        virtual UINT __stdcall GetContextFlags( void) = 0;

        virtual HRESULT __stdcall FinishCommandList(
            BOOL RestoreDeferredContextState,

                       ID3D11CommandList **ppCommandList) = 0;

    };
#line 9213 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
extern "C" const IID IID_ID3D11Device;



    struct __declspec(uuid("db6f6ddb-ac77-4e88-8253-819df9bbf140")) __declspec(novtable)
    ID3D11Device : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBuffer(

                  const D3D11_BUFFER_DESC *pDesc,

                      const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Buffer **ppBuffer) = 0;

        virtual HRESULT __stdcall CreateTexture1D(

                  const D3D11_TEXTURE1D_DESC *pDesc,

                                                                  const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Texture1D **ppTexture1D) = 0;

        virtual HRESULT __stdcall CreateTexture2D(

                  const D3D11_TEXTURE2D_DESC *pDesc,

                                                                  const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Texture2D **ppTexture2D) = 0;

        virtual HRESULT __stdcall CreateTexture3D(

                  const D3D11_TEXTURE3D_DESC *pDesc,

                                               const D3D11_SUBRESOURCE_DATA *pInitialData,

                       ID3D11Texture3D **ppTexture3D) = 0;

        virtual HRESULT __stdcall CreateShaderResourceView(

                  ID3D11Resource *pResource,

                      const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc,

                       ID3D11ShaderResourceView **ppSRView) = 0;

        virtual HRESULT __stdcall CreateUnorderedAccessView(

                  ID3D11Resource *pResource,

                      const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc,

                       ID3D11UnorderedAccessView **ppUAView) = 0;

        virtual HRESULT __stdcall CreateRenderTargetView(

                  ID3D11Resource *pResource,

                      const D3D11_RENDER_TARGET_VIEW_DESC *pDesc,

                       ID3D11RenderTargetView **ppRTView) = 0;

        virtual HRESULT __stdcall CreateDepthStencilView(

                  ID3D11Resource *pResource,

                      const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc,

                       ID3D11DepthStencilView **ppDepthStencilView) = 0;

        virtual HRESULT __stdcall CreateInputLayout(

                                      const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs,

                                                                            UINT NumElements,

                  const void *pShaderBytecodeWithInputSignature,

                  SIZE_T BytecodeLength,

                       ID3D11InputLayout **ppInputLayout) = 0;

        virtual HRESULT __stdcall CreateVertexShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11VertexShader **ppVertexShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShaderWithStreamOutput(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                                         const D3D11_SO_DECLARATION_ENTRY *pSODeclaration,

                                                                                      UINT NumEntries,

                                         const UINT *pBufferStrides,

                                                         UINT NumStrides,

                  UINT RasterizedStream,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreatePixelShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11PixelShader **ppPixelShader) = 0;

        virtual HRESULT __stdcall CreateHullShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11HullShader **ppHullShader) = 0;

        virtual HRESULT __stdcall CreateDomainShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11DomainShader **ppDomainShader) = 0;

        virtual HRESULT __stdcall CreateComputeShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                      ID3D11ClassLinkage *pClassLinkage,

                       ID3D11ComputeShader **ppComputeShader) = 0;

        virtual HRESULT __stdcall CreateClassLinkage(

                   ID3D11ClassLinkage **ppLinkage) = 0;

        virtual HRESULT __stdcall CreateBlendState(

                  const D3D11_BLEND_DESC *pBlendStateDesc,

                       ID3D11BlendState **ppBlendState) = 0;

        virtual HRESULT __stdcall CreateDepthStencilState(

                  const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc,

                       ID3D11DepthStencilState **ppDepthStencilState) = 0;

        virtual HRESULT __stdcall CreateRasterizerState(

                  const D3D11_RASTERIZER_DESC *pRasterizerDesc,

                       ID3D11RasterizerState **ppRasterizerState) = 0;

        virtual HRESULT __stdcall CreateSamplerState(

                  const D3D11_SAMPLER_DESC *pSamplerDesc,

                       ID3D11SamplerState **ppSamplerState) = 0;

        virtual HRESULT __stdcall CreateQuery(

                  const D3D11_QUERY_DESC *pQueryDesc,

                       ID3D11Query **ppQuery) = 0;

        virtual HRESULT __stdcall CreatePredicate(

                  const D3D11_QUERY_DESC *pPredicateDesc,

                       ID3D11Predicate **ppPredicate) = 0;

        virtual HRESULT __stdcall CreateCounter(

                  const D3D11_COUNTER_DESC *pCounterDesc,

                       ID3D11Counter **ppCounter) = 0;

        virtual HRESULT __stdcall CreateDeferredContext(
            UINT ContextFlags,

                       ID3D11DeviceContext **ppDeferredContext) = 0;

        virtual HRESULT __stdcall OpenSharedResource(

                  HANDLE hResource,

                  const IID & ReturnedInterface,

                       void **ppResource) = 0;

        virtual HRESULT __stdcall CheckFormatSupport(

                  DXGI_FORMAT Format,

                   UINT *pFormatSupport) = 0;

        virtual HRESULT __stdcall CheckMultisampleQualityLevels(

                  DXGI_FORMAT Format,

                  UINT SampleCount,

                   UINT *pNumQualityLevels) = 0;

        virtual void __stdcall CheckCounterInfo(

                   D3D11_COUNTER_INFO *pCounterInfo) = 0;

        virtual HRESULT __stdcall CheckCounter(

                  const D3D11_COUNTER_DESC *pDesc,

                   D3D11_COUNTER_TYPE *pType,

                   UINT *pActiveCounters,

                                            LPSTR szName,

                         UINT *pNameLength,

                                             LPSTR szUnits,

                         UINT *pUnitsLength,

                                                   LPSTR szDescription,

                         UINT *pDescriptionLength) = 0;

        virtual HRESULT __stdcall CheckFeatureSupport(
            D3D11_FEATURE Feature,

                                                  void *pFeatureSupportData,
            UINT FeatureSupportDataSize) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                          void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                       const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

        virtual D3D_FEATURE_LEVEL __stdcall GetFeatureLevel( void) = 0;

        virtual UINT __stdcall GetCreationFlags( void) = 0;

        virtual HRESULT __stdcall GetDeviceRemovedReason( void) = 0;

        virtual void __stdcall GetImmediateContext(

                   ID3D11DeviceContext **ppImmediateContext) = 0;

        virtual HRESULT __stdcall SetExceptionMode(
            UINT RaiseFlags) = 0;

        virtual UINT __stdcall GetExceptionMode( void) = 0;

    };
#line 10030 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef
enum D3D11_CREATE_DEVICE_FLAG
    { D3D11_CREATE_DEVICE_SINGLETHREADED = 0x1,
 D3D11_CREATE_DEVICE_DEBUG = 0x2,
 D3D11_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
 D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
 D3D11_CREATE_DEVICE_BGRA_SUPPORT = 0x20
    } D3D11_CREATE_DEVICE_FLAG;




#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"








#pragma warning(disable: 4049)
#line 45 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
typedef struct ID3D10BlendState1 ID3D10BlendState1;





typedef struct ID3D10ShaderResourceView1 ID3D10ShaderResourceView1;





typedef struct ID3D10Device1 ID3D10Device1;
#line 66 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
extern "C"{
#line 120 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
#line 14 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
#pragma warning(disable: 4049)
#line 50 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct ID3D10DeviceChild ID3D10DeviceChild;





typedef struct ID3D10DepthStencilState ID3D10DepthStencilState;





typedef struct ID3D10BlendState ID3D10BlendState;





typedef struct ID3D10RasterizerState ID3D10RasterizerState;





typedef struct ID3D10Resource ID3D10Resource;





typedef struct ID3D10Buffer ID3D10Buffer;





typedef struct ID3D10Texture1D ID3D10Texture1D;





typedef struct ID3D10Texture2D ID3D10Texture2D;





typedef struct ID3D10Texture3D ID3D10Texture3D;





typedef struct ID3D10View ID3D10View;





typedef struct ID3D10ShaderResourceView ID3D10ShaderResourceView;





typedef struct ID3D10RenderTargetView ID3D10RenderTargetView;





typedef struct ID3D10DepthStencilView ID3D10DepthStencilView;





typedef struct ID3D10VertexShader ID3D10VertexShader;





typedef struct ID3D10GeometryShader ID3D10GeometryShader;





typedef struct ID3D10PixelShader ID3D10PixelShader;





typedef struct ID3D10InputLayout ID3D10InputLayout;





typedef struct ID3D10SamplerState ID3D10SamplerState;





typedef struct ID3D10Asynchronous ID3D10Asynchronous;





typedef struct ID3D10Query ID3D10Query;





typedef struct ID3D10Predicate ID3D10Predicate;





typedef struct ID3D10Counter ID3D10Counter;





typedef struct ID3D10Device ID3D10Device;





typedef struct ID3D10Multithread ID3D10Multithread;
#line 199 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C"{
#line 616 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_INPUT_CLASSIFICATION
    { D3D10_INPUT_PER_VERTEX_DATA = 0,
 D3D10_INPUT_PER_INSTANCE_DATA = 1
    } D3D10_INPUT_CLASSIFICATION;



typedef struct D3D10_INPUT_ELEMENT_DESC
    {
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D10_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
    } D3D10_INPUT_ELEMENT_DESC;

typedef
enum D3D10_FILL_MODE
    { D3D10_FILL_WIREFRAME = 2,
 D3D10_FILL_SOLID = 3
    } D3D10_FILL_MODE;

typedef D3D_PRIMITIVE_TOPOLOGY D3D10_PRIMITIVE_TOPOLOGY;

typedef D3D_PRIMITIVE D3D10_PRIMITIVE;

typedef
enum D3D10_CULL_MODE
    { D3D10_CULL_NONE = 1,
 D3D10_CULL_FRONT = 2,
 D3D10_CULL_BACK = 3
    } D3D10_CULL_MODE;

typedef struct D3D10_SO_DECLARATION_ENTRY
    {
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
    } D3D10_SO_DECLARATION_ENTRY;

typedef struct D3D10_VIEWPORT
    {
    INT TopLeftX;
    INT TopLeftY;
    UINT Width;
    UINT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
    } D3D10_VIEWPORT;

typedef
enum D3D10_RESOURCE_DIMENSION
    { D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
 D3D10_RESOURCE_DIMENSION_BUFFER = 1,
 D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
 D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
 D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
    } D3D10_RESOURCE_DIMENSION;

typedef D3D_SRV_DIMENSION D3D10_SRV_DIMENSION;

typedef
enum D3D10_DSV_DIMENSION
    { D3D10_DSV_DIMENSION_UNKNOWN = 0,
 D3D10_DSV_DIMENSION_TEXTURE1D = 1,
 D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2,
 D3D10_DSV_DIMENSION_TEXTURE2D = 3,
 D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4,
 D3D10_DSV_DIMENSION_TEXTURE2DMS = 5,
 D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
    } D3D10_DSV_DIMENSION;

typedef
enum D3D10_RTV_DIMENSION
    { D3D10_RTV_DIMENSION_UNKNOWN = 0,
 D3D10_RTV_DIMENSION_BUFFER = 1,
 D3D10_RTV_DIMENSION_TEXTURE1D = 2,
 D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3,
 D3D10_RTV_DIMENSION_TEXTURE2D = 4,
 D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5,
 D3D10_RTV_DIMENSION_TEXTURE2DMS = 6,
 D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
 D3D10_RTV_DIMENSION_TEXTURE3D = 8
    } D3D10_RTV_DIMENSION;

typedef
enum D3D10_USAGE
    { D3D10_USAGE_DEFAULT = 0,
 D3D10_USAGE_IMMUTABLE = 1,
 D3D10_USAGE_DYNAMIC = 2,
 D3D10_USAGE_STAGING = 3
    } D3D10_USAGE;

typedef
enum D3D10_BIND_FLAG
    { D3D10_BIND_VERTEX_BUFFER = 0x1L,
 D3D10_BIND_INDEX_BUFFER = 0x2L,
 D3D10_BIND_CONSTANT_BUFFER = 0x4L,
 D3D10_BIND_SHADER_RESOURCE = 0x8L,
 D3D10_BIND_STREAM_OUTPUT = 0x10L,
 D3D10_BIND_RENDER_TARGET = 0x20L,
 D3D10_BIND_DEPTH_STENCIL = 0x40L
    } D3D10_BIND_FLAG;

typedef
enum D3D10_CPU_ACCESS_FLAG
    { D3D10_CPU_ACCESS_WRITE = 0x10000L,
 D3D10_CPU_ACCESS_READ = 0x20000L
    } D3D10_CPU_ACCESS_FLAG;

typedef
enum D3D10_RESOURCE_MISC_FLAG
    { D3D10_RESOURCE_MISC_GENERATE_MIPS = 0x1L,
 D3D10_RESOURCE_MISC_SHARED = 0x2L,
 D3D10_RESOURCE_MISC_TEXTURECUBE = 0x4L,
 D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x10L,
 D3D10_RESOURCE_MISC_GDI_COMPATIBLE = 0x20L
    } D3D10_RESOURCE_MISC_FLAG;

typedef
enum D3D10_MAP
    { D3D10_MAP_READ = 1,
 D3D10_MAP_WRITE = 2,
 D3D10_MAP_READ_WRITE = 3,
 D3D10_MAP_WRITE_DISCARD = 4,
 D3D10_MAP_WRITE_NO_OVERWRITE = 5
    } D3D10_MAP;

typedef
enum D3D10_MAP_FLAG
    { D3D10_MAP_FLAG_DO_NOT_WAIT = 0x100000L
    } D3D10_MAP_FLAG;

typedef
enum D3D10_RAISE_FLAG
    { D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1L
    } D3D10_RAISE_FLAG;

typedef
enum D3D10_CLEAR_FLAG
    { D3D10_CLEAR_DEPTH = 0x1L,
 D3D10_CLEAR_STENCIL = 0x2L
    } D3D10_CLEAR_FLAG;

typedef RECT D3D10_RECT;

typedef struct D3D10_BOX
    {
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
    } D3D10_BOX;




extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0000_v0_0_s_ifspec;
#line 790 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10DeviceChild;



    struct __declspec(uuid("9B7E4C00-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10DeviceChild : public IUnknown
    {
    public:
        virtual void __stdcall GetDevice(

                   ID3D10Device **ppDevice) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                          void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                       const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

    };
#line 923 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_COMPARISON_FUNC
    { D3D10_COMPARISON_NEVER = 1,
 D3D10_COMPARISON_LESS = 2,
 D3D10_COMPARISON_EQUAL = 3,
 D3D10_COMPARISON_LESS_EQUAL = 4,
 D3D10_COMPARISON_GREATER = 5,
 D3D10_COMPARISON_NOT_EQUAL = 6,
 D3D10_COMPARISON_GREATER_EQUAL = 7,
 D3D10_COMPARISON_ALWAYS = 8
    } D3D10_COMPARISON_FUNC;

typedef
enum D3D10_DEPTH_WRITE_MASK
    { D3D10_DEPTH_WRITE_MASK_ZERO = 0,
 D3D10_DEPTH_WRITE_MASK_ALL = 1
    } D3D10_DEPTH_WRITE_MASK;

typedef
enum D3D10_STENCIL_OP
    { D3D10_STENCIL_OP_KEEP = 1,
 D3D10_STENCIL_OP_ZERO = 2,
 D3D10_STENCIL_OP_REPLACE = 3,
 D3D10_STENCIL_OP_INCR_SAT = 4,
 D3D10_STENCIL_OP_DECR_SAT = 5,
 D3D10_STENCIL_OP_INVERT = 6,
 D3D10_STENCIL_OP_INCR = 7,
 D3D10_STENCIL_OP_DECR = 8
    } D3D10_STENCIL_OP;

typedef struct D3D10_DEPTH_STENCILOP_DESC
    {
    D3D10_STENCIL_OP StencilFailOp;
    D3D10_STENCIL_OP StencilDepthFailOp;
    D3D10_STENCIL_OP StencilPassOp;
    D3D10_COMPARISON_FUNC StencilFunc;
    } D3D10_DEPTH_STENCILOP_DESC;

typedef struct D3D10_DEPTH_STENCIL_DESC
    {
    BOOL DepthEnable;
    D3D10_DEPTH_WRITE_MASK DepthWriteMask;
    D3D10_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D10_DEPTH_STENCILOP_DESC FrontFace;
    D3D10_DEPTH_STENCILOP_DESC BackFace;
    } D3D10_DEPTH_STENCIL_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0001_v0_0_s_ifspec;
#line 985 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10DepthStencilState;



    struct __declspec(uuid("2B4B1CC8-A4AD-41f8-8322-CA86FC3EC675")) __declspec(novtable)
    ID3D10DepthStencilState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_DEPTH_STENCIL_DESC *pDesc) = 0;

    };
#line 1105 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_BLEND
    { D3D10_BLEND_ZERO = 1,
 D3D10_BLEND_ONE = 2,
 D3D10_BLEND_SRC_COLOR = 3,
 D3D10_BLEND_INV_SRC_COLOR = 4,
 D3D10_BLEND_SRC_ALPHA = 5,
 D3D10_BLEND_INV_SRC_ALPHA = 6,
 D3D10_BLEND_DEST_ALPHA = 7,
 D3D10_BLEND_INV_DEST_ALPHA = 8,
 D3D10_BLEND_DEST_COLOR = 9,
 D3D10_BLEND_INV_DEST_COLOR = 10,
 D3D10_BLEND_SRC_ALPHA_SAT = 11,
 D3D10_BLEND_BLEND_FACTOR = 14,
 D3D10_BLEND_INV_BLEND_FACTOR = 15,
 D3D10_BLEND_SRC1_COLOR = 16,
 D3D10_BLEND_INV_SRC1_COLOR = 17,
 D3D10_BLEND_SRC1_ALPHA = 18,
 D3D10_BLEND_INV_SRC1_ALPHA = 19
    } D3D10_BLEND;

typedef
enum D3D10_BLEND_OP
    { D3D10_BLEND_OP_ADD = 1,
 D3D10_BLEND_OP_SUBTRACT = 2,
 D3D10_BLEND_OP_REV_SUBTRACT = 3,
 D3D10_BLEND_OP_MIN = 4,
 D3D10_BLEND_OP_MAX = 5
    } D3D10_BLEND_OP;

typedef
enum D3D10_COLOR_WRITE_ENABLE
    { D3D10_COLOR_WRITE_ENABLE_RED = 1,
 D3D10_COLOR_WRITE_ENABLE_GREEN = 2,
 D3D10_COLOR_WRITE_ENABLE_BLUE = 4,
 D3D10_COLOR_WRITE_ENABLE_ALPHA = 8,
 D3D10_COLOR_WRITE_ENABLE_ALL = ( ( ( D3D10_COLOR_WRITE_ENABLE_RED | D3D10_COLOR_WRITE_ENABLE_GREEN ) | D3D10_COLOR_WRITE_ENABLE_BLUE ) | D3D10_COLOR_WRITE_ENABLE_ALPHA )
    } D3D10_COLOR_WRITE_ENABLE;

typedef struct D3D10_BLEND_DESC
    {
    BOOL AlphaToCoverageEnable;
    BOOL BlendEnable[ 8 ];
    D3D10_BLEND SrcBlend;
    D3D10_BLEND DestBlend;
    D3D10_BLEND_OP BlendOp;
    D3D10_BLEND SrcBlendAlpha;
    D3D10_BLEND DestBlendAlpha;
    D3D10_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask[ 8 ];
    } D3D10_BLEND_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0002_v0_0_s_ifspec;
#line 1169 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10BlendState;



    struct __declspec(uuid("EDAD8D19-8A35-4d6d-8566-2EA276CDE161")) __declspec(novtable)
    ID3D10BlendState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_BLEND_DESC *pDesc) = 0;

    };
#line 1289 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_RASTERIZER_DESC
    {
    D3D10_FILL_MODE FillMode;
    D3D10_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    } D3D10_RASTERIZER_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0003_v0_0_s_ifspec;
#line 1315 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10RasterizerState;



    struct __declspec(uuid("A2A07292-89AF-4345-BE2E-C53D9FBB6E9F")) __declspec(novtable)
    ID3D10RasterizerState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_RASTERIZER_DESC *pDesc) = 0;

    };
#line 1436 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
inline UINT D3D10CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels )
{ return MipSlice + ArraySlice * MipLevels; }

typedef struct D3D10_SUBRESOURCE_DATA
    {
    const void *pSysMem;
    UINT SysMemPitch;
    UINT SysMemSlicePitch;
    } D3D10_SUBRESOURCE_DATA;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0004_v0_0_s_ifspec;
#line 1458 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Resource;



    struct __declspec(uuid("9B7E4C01-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Resource : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetType(

                   D3D10_RESOURCE_DIMENSION *rType) = 0;

        virtual void __stdcall SetEvictionPriority(

                  UINT EvictionPriority) = 0;

        virtual UINT __stdcall GetEvictionPriority( void) = 0;

    };
#line 1598 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_BUFFER_DESC
    {
    UINT ByteWidth;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_BUFFER_DESC;


struct CD3D10_BUFFER_DESC : public D3D10_BUFFER_DESC
{
    CD3D10_BUFFER_DESC()
    {}
    explicit CD3D10_BUFFER_DESC( const D3D10_BUFFER_DESC& o ) :
        D3D10_BUFFER_DESC( o )
    {}
    explicit CD3D10_BUFFER_DESC(
        UINT byteWidth,
        UINT bindFlags,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0 )
    {
        ByteWidth = byteWidth;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags ;
        MiscFlags = miscFlags;
    }
    ~CD3D10_BUFFER_DESC() {}
    operator const D3D10_BUFFER_DESC&() const { return *this; }
};



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0005_v0_0_s_ifspec;
#line 1644 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Buffer;



    struct __declspec(uuid("9B7E4C02-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Buffer : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   void **ppData) = 0;

        virtual void __stdcall Unmap( void) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_BUFFER_DESC *pDesc) = 0;

    };
#line 1815 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_TEXTURE1D_DESC
    {
    UINT Width;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_TEXTURE1D_DESC;


struct CD3D10_TEXTURE1D_DESC : public D3D10_TEXTURE1D_DESC
{
    CD3D10_TEXTURE1D_DESC()
    {}
    explicit CD3D10_TEXTURE1D_DESC( const D3D10_TEXTURE1D_DESC& o ) :
        D3D10_TEXTURE1D_DESC( o )
    {}
    explicit CD3D10_TEXTURE1D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags= 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D10_TEXTURE1D_DESC() {}
    operator const D3D10_TEXTURE1D_DESC&() const { return *this; }
};



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0006_v0_0_s_ifspec;
#line 1870 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Texture1D;



    struct __declspec(uuid("9B7E4C03-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Texture1D : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  UINT Subresource,

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   void **ppData) = 0;

        virtual void __stdcall Unmap(

                  UINT Subresource) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_TEXTURE1D_DESC *pDesc) = 0;

    };
#line 2049 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_TEXTURE2D_DESC
    {
    UINT Width;
    UINT Height;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_TEXTURE2D_DESC;


struct CD3D10_TEXTURE2D_DESC : public D3D10_TEXTURE2D_DESC
{
    CD3D10_TEXTURE2D_DESC()
    {}
    explicit CD3D10_TEXTURE2D_DESC( const D3D10_TEXTURE2D_DESC& o ) :
        D3D10_TEXTURE2D_DESC( o )
    {}
    explicit CD3D10_TEXTURE2D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT arraySize = 1,
        UINT mipLevels = 0,
        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT sampleCount = 1,
        UINT sampleQuality = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        MipLevels = mipLevels;
        ArraySize = arraySize;
        Format = format;
        SampleDesc.Count = sampleCount;
        SampleDesc.Quality = sampleQuality;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D10_TEXTURE2D_DESC() {}
    operator const D3D10_TEXTURE2D_DESC&() const { return *this; }
};

typedef struct D3D10_MAPPED_TEXTURE2D
    {
    void *pData;
    UINT RowPitch;
    } D3D10_MAPPED_TEXTURE2D;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0007_v0_0_s_ifspec;
#line 2118 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Texture2D;



    struct __declspec(uuid("9B7E4C04-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Texture2D : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  UINT Subresource,

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   D3D10_MAPPED_TEXTURE2D *pMappedTex2D) = 0;

        virtual void __stdcall Unmap(

                  UINT Subresource) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_TEXTURE2D_DESC *pDesc) = 0;

    };
#line 2297 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_TEXTURE3D_DESC
    {
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    DXGI_FORMAT Format;
    D3D10_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    } D3D10_TEXTURE3D_DESC;


struct CD3D10_TEXTURE3D_DESC : public D3D10_TEXTURE3D_DESC
{
    CD3D10_TEXTURE3D_DESC()
    {}
    explicit CD3D10_TEXTURE3D_DESC( const D3D10_TEXTURE3D_DESC& o ) :
        D3D10_TEXTURE3D_DESC( o )
    {}
    explicit CD3D10_TEXTURE3D_DESC(
        DXGI_FORMAT format,
        UINT width,
        UINT height,
        UINT depth,
        UINT mipLevels = 0,
        UINT bindFlags = D3D10_BIND_SHADER_RESOURCE,
        D3D10_USAGE usage = D3D10_USAGE_DEFAULT,
        UINT cpuaccessFlags = 0,
        UINT miscFlags = 0 )
    {
        Width = width;
        Height = height;
        Depth = depth;
        MipLevels = mipLevels;
        Format = format;
        Usage = usage;
        BindFlags = bindFlags;
        CPUAccessFlags = cpuaccessFlags;
        MiscFlags = miscFlags;
    }
    ~CD3D10_TEXTURE3D_DESC() {}
    operator const D3D10_TEXTURE3D_DESC&() const { return *this; }
};

typedef struct D3D10_MAPPED_TEXTURE3D
    {
    void *pData;
    UINT RowPitch;
    UINT DepthPitch;
    } D3D10_MAPPED_TEXTURE3D;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0008_v0_0_s_ifspec;
#line 2362 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Texture3D;



    struct __declspec(uuid("9B7E4C05-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Texture3D : public ID3D10Resource
    {
    public:
        virtual HRESULT __stdcall Map(

                  UINT Subresource,

                  D3D10_MAP MapType,

                  UINT MapFlags,

                   D3D10_MAPPED_TEXTURE3D *pMappedTex3D) = 0;

        virtual void __stdcall Unmap(

                  UINT Subresource) = 0;

        virtual void __stdcall GetDesc(

                   D3D10_TEXTURE3D_DESC *pDesc) = 0;

    };
#line 2541 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_TEXTURECUBE_FACE
    { D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0,
 D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1,
 D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2,
 D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
 D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4,
 D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5
    } D3D10_TEXTURECUBE_FACE;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0009_v0_0_s_ifspec;
#line 2563 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10View;



    struct __declspec(uuid("C902B03F-60A7-49BA-9936-2A3AB37A7E33")) __declspec(novtable)
    ID3D10View : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetResource(

                   ID3D10Resource **ppResource) = 0;

    };
#line 2683 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_BUFFER_SRV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D10_BUFFER_SRV;

typedef struct D3D10_TEX1D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEX1D_SRV;

typedef struct D3D10_TEX1D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX1D_ARRAY_SRV;

typedef struct D3D10_TEX2D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEX2D_SRV;

typedef struct D3D10_TEX2D_ARRAY_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2D_ARRAY_SRV;

typedef struct D3D10_TEX3D_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEX3D_SRV;

typedef struct D3D10_TEXCUBE_SRV
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    } D3D10_TEXCUBE_SRV;

typedef struct D3D10_TEX2DMS_SRV
    {
    UINT UnusedField_NothingToDefine;
    } D3D10_TEX2DMS_SRV;

typedef struct D3D10_TEX2DMS_ARRAY_SRV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2DMS_ARRAY_SRV;

typedef struct D3D10_SHADER_RESOURCE_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D10_SRV_DIMENSION ViewDimension;
    union
        {
        D3D10_BUFFER_SRV Buffer;
        D3D10_TEX1D_SRV Texture1D;
        D3D10_TEX1D_ARRAY_SRV Texture1DArray;
        D3D10_TEX2D_SRV Texture2D;
        D3D10_TEX2D_ARRAY_SRV Texture2DArray;
        D3D10_TEX2DMS_SRV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D10_TEX3D_SRV Texture3D;
        D3D10_TEXCUBE_SRV TextureCube;
        } ;
    } D3D10_SHADER_RESOURCE_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0010_v0_0_s_ifspec;
#line 2778 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10ShaderResourceView;



    struct __declspec(uuid("9B7E4C07-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10ShaderResourceView : public ID3D10View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_SHADER_RESOURCE_VIEW_DESC *pDesc) = 0;

    };
#line 2907 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_BUFFER_RTV
    {
    union
        {
        UINT FirstElement;
        UINT ElementOffset;
        } ;
    union
        {
        UINT NumElements;
        UINT ElementWidth;
        } ;
    } D3D10_BUFFER_RTV;

typedef struct D3D10_TEX1D_RTV
    {
    UINT MipSlice;
    } D3D10_TEX1D_RTV;

typedef struct D3D10_TEX1D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX1D_ARRAY_RTV;

typedef struct D3D10_TEX2D_RTV
    {
    UINT MipSlice;
    } D3D10_TEX2D_RTV;

typedef struct D3D10_TEX2DMS_RTV
    {
    UINT UnusedField_NothingToDefine;
    } D3D10_TEX2DMS_RTV;

typedef struct D3D10_TEX2D_ARRAY_RTV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2D_ARRAY_RTV;

typedef struct D3D10_TEX2DMS_ARRAY_RTV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2DMS_ARRAY_RTV;

typedef struct D3D10_TEX3D_RTV
    {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
    } D3D10_TEX3D_RTV;

typedef struct D3D10_RENDER_TARGET_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D10_RTV_DIMENSION ViewDimension;
    union
        {
        D3D10_BUFFER_RTV Buffer;
        D3D10_TEX1D_RTV Texture1D;
        D3D10_TEX1D_ARRAY_RTV Texture1DArray;
        D3D10_TEX2D_RTV Texture2D;
        D3D10_TEX2D_ARRAY_RTV Texture2DArray;
        D3D10_TEX2DMS_RTV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D10_TEX3D_RTV Texture3D;
        } ;
    } D3D10_RENDER_TARGET_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0011_v0_0_s_ifspec;
#line 2992 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10RenderTargetView;



    struct __declspec(uuid("9B7E4C08-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10RenderTargetView : public ID3D10View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_RENDER_TARGET_VIEW_DESC *pDesc) = 0;

    };
#line 3121 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_TEX1D_DSV
    {
    UINT MipSlice;
    } D3D10_TEX1D_DSV;

typedef struct D3D10_TEX1D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX1D_ARRAY_DSV;

typedef struct D3D10_TEX2D_DSV
    {
    UINT MipSlice;
    } D3D10_TEX2D_DSV;

typedef struct D3D10_TEX2D_ARRAY_DSV
    {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2D_ARRAY_DSV;

typedef struct D3D10_TEX2DMS_DSV
    {
    UINT UnusedField_NothingToDefine;
    } D3D10_TEX2DMS_DSV;

typedef struct D3D10_TEX2DMS_ARRAY_DSV
    {
    UINT FirstArraySlice;
    UINT ArraySize;
    } D3D10_TEX2DMS_ARRAY_DSV;

typedef struct D3D10_DEPTH_STENCIL_VIEW_DESC
    {
    DXGI_FORMAT Format;
    D3D10_DSV_DIMENSION ViewDimension;
    union
        {
        D3D10_TEX1D_DSV Texture1D;
        D3D10_TEX1D_ARRAY_DSV Texture1DArray;
        D3D10_TEX2D_DSV Texture2D;
        D3D10_TEX2D_ARRAY_DSV Texture2DArray;
        D3D10_TEX2DMS_DSV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        } ;
    } D3D10_DEPTH_STENCIL_VIEW_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0012_v0_0_s_ifspec;
#line 3183 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10DepthStencilView;



    struct __declspec(uuid("9B7E4C09-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10DepthStencilView : public ID3D10View
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_DEPTH_STENCIL_VIEW_DESC *pDesc) = 0;

    };
#line 3316 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10VertexShader;



    struct __declspec(uuid("9B7E4C0A-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10VertexShader : public ID3D10DeviceChild
    {
    public:
    };
#line 3428 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10GeometryShader;



    struct __declspec(uuid("6316BE88-54CD-4040-AB44-20461BC81F68")) __declspec(novtable)
    ID3D10GeometryShader : public ID3D10DeviceChild
    {
    public:
    };
#line 3540 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10PixelShader;



    struct __declspec(uuid("4968B601-9D00-4cde-8346-8E7F675819B6")) __declspec(novtable)
    ID3D10PixelShader : public ID3D10DeviceChild
    {
    public:
    };
#line 3652 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10InputLayout;



    struct __declspec(uuid("9B7E4C0B-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10InputLayout : public ID3D10DeviceChild
    {
    public:
    };
#line 3760 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_FILTER
    { D3D10_FILTER_MIN_MAG_MIP_POINT = 0,
 D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
 D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
 D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
 D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
 D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
 D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
 D3D10_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
 D3D10_FILTER_ANISOTROPIC = 0x55,
 D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
 D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
 D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
 D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
 D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
 D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
 D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
 D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
 D3D10_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
 D3D10_FILTER_TEXT_1BIT = 0x80000000
    } D3D10_FILTER;

typedef
enum D3D10_FILTER_TYPE
    { D3D10_FILTER_TYPE_POINT = 0,
 D3D10_FILTER_TYPE_LINEAR = 1
    } D3D10_FILTER_TYPE;
#line 3834 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_TEXTURE_ADDRESS_MODE
    { D3D10_TEXTURE_ADDRESS_WRAP = 1,
 D3D10_TEXTURE_ADDRESS_MIRROR = 2,
 D3D10_TEXTURE_ADDRESS_CLAMP = 3,
 D3D10_TEXTURE_ADDRESS_BORDER = 4,
 D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5
    } D3D10_TEXTURE_ADDRESS_MODE;

typedef struct D3D10_SAMPLER_DESC
    {
    D3D10_FILTER Filter;
    D3D10_TEXTURE_ADDRESS_MODE AddressU;
    D3D10_TEXTURE_ADDRESS_MODE AddressV;
    D3D10_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D10_COMPARISON_FUNC ComparisonFunc;
    FLOAT BorderColor[ 4 ];
    FLOAT MinLOD;
    FLOAT MaxLOD;
    } D3D10_SAMPLER_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0017_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0017_v0_0_s_ifspec;
#line 3869 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10SamplerState;



    struct __declspec(uuid("9B7E4C0C-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10SamplerState : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_SAMPLER_DESC *pDesc) = 0;

    };
#line 3989 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_FORMAT_SUPPORT
    { D3D10_FORMAT_SUPPORT_BUFFER = 0x1,
 D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
 D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
 D3D10_FORMAT_SUPPORT_SO_BUFFER = 0x8,
 D3D10_FORMAT_SUPPORT_TEXTURE1D = 0x10,
 D3D10_FORMAT_SUPPORT_TEXTURE2D = 0x20,
 D3D10_FORMAT_SUPPORT_TEXTURE3D = 0x40,
 D3D10_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
 D3D10_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
 D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
 D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
 D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
 D3D10_FORMAT_SUPPORT_MIP = 0x1000,
 D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
 D3D10_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
 D3D10_FORMAT_SUPPORT_BLENDABLE = 0x8000,
 D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
 D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
 D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
 D3D10_FORMAT_SUPPORT_DISPLAY = 0x80000,
 D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
 D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
 D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
 D3D10_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
 D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000
    } D3D10_FORMAT_SUPPORT;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0018_v0_0_s_ifspec;
#line 4030 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Asynchronous;



    struct __declspec(uuid("9B7E4C0D-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Asynchronous : public ID3D10DeviceChild
    {
    public:
        virtual void __stdcall Begin( void) = 0;

        virtual void __stdcall End( void) = 0;

        virtual HRESULT __stdcall GetData(

                                        void *pData,

                  UINT DataSize,

                  UINT GetDataFlags) = 0;

        virtual UINT __stdcall GetDataSize( void) = 0;

    };
#line 4182 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_ASYNC_GETDATA_FLAG
    { D3D10_ASYNC_GETDATA_DONOTFLUSH = 0x1
    } D3D10_ASYNC_GETDATA_FLAG;

typedef
enum D3D10_QUERY
    { D3D10_QUERY_EVENT = 0,
 D3D10_QUERY_OCCLUSION = ( D3D10_QUERY_EVENT + 1 ) ,
 D3D10_QUERY_TIMESTAMP = ( D3D10_QUERY_OCCLUSION + 1 ) ,
 D3D10_QUERY_TIMESTAMP_DISJOINT = ( D3D10_QUERY_TIMESTAMP + 1 ) ,
 D3D10_QUERY_PIPELINE_STATISTICS = ( D3D10_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
 D3D10_QUERY_OCCLUSION_PREDICATE = ( D3D10_QUERY_PIPELINE_STATISTICS + 1 ) ,
 D3D10_QUERY_SO_STATISTICS = ( D3D10_QUERY_OCCLUSION_PREDICATE + 1 ) ,
 D3D10_QUERY_SO_OVERFLOW_PREDICATE = ( D3D10_QUERY_SO_STATISTICS + 1 )
    } D3D10_QUERY;

typedef
enum D3D10_QUERY_MISC_FLAG
    { D3D10_QUERY_MISC_PREDICATEHINT = 0x1
    } D3D10_QUERY_MISC_FLAG;

typedef struct D3D10_QUERY_DESC
    {
    D3D10_QUERY Query;
    UINT MiscFlags;
    } D3D10_QUERY_DESC;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0019_v0_0_s_ifspec;
#line 4222 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Query;



    struct __declspec(uuid("9B7E4C0E-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Query : public ID3D10Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_QUERY_DESC *pDesc) = 0;

    };
#line 4377 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Predicate;



    struct __declspec(uuid("9B7E4C10-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Predicate : public ID3D10Query
    {
    public:
    };
#line 4525 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT
    {
    UINT64 Frequency;
    BOOL Disjoint;
    } D3D10_QUERY_DATA_TIMESTAMP_DISJOINT;

typedef struct D3D10_QUERY_DATA_PIPELINE_STATISTICS
    {
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    } D3D10_QUERY_DATA_PIPELINE_STATISTICS;

typedef struct D3D10_QUERY_DATA_SO_STATISTICS
    {
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
    } D3D10_QUERY_DATA_SO_STATISTICS;

typedef
enum D3D10_COUNTER
    { D3D10_COUNTER_GPU_IDLE = 0,
 D3D10_COUNTER_VERTEX_PROCESSING = ( D3D10_COUNTER_GPU_IDLE + 1 ) ,
 D3D10_COUNTER_GEOMETRY_PROCESSING = ( D3D10_COUNTER_VERTEX_PROCESSING + 1 ) ,
 D3D10_COUNTER_PIXEL_PROCESSING = ( D3D10_COUNTER_GEOMETRY_PROCESSING + 1 ) ,
 D3D10_COUNTER_OTHER_GPU_PROCESSING = ( D3D10_COUNTER_PIXEL_PROCESSING + 1 ) ,
 D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION = ( D3D10_COUNTER_OTHER_GPU_PROCESSING + 1 ) ,
 D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = ( D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION + 1 ) ,
 D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION = ( D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION + 1 ) ,
 D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = ( D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION + 1 ) ,
 D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION = ( D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION + 1 ) ,
 D3D10_COUNTER_VS_MEMORY_LIMITED = ( D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION + 1 ) ,
 D3D10_COUNTER_VS_COMPUTATION_LIMITED = ( D3D10_COUNTER_VS_MEMORY_LIMITED + 1 ) ,
 D3D10_COUNTER_GS_MEMORY_LIMITED = ( D3D10_COUNTER_VS_COMPUTATION_LIMITED + 1 ) ,
 D3D10_COUNTER_GS_COMPUTATION_LIMITED = ( D3D10_COUNTER_GS_MEMORY_LIMITED + 1 ) ,
 D3D10_COUNTER_PS_MEMORY_LIMITED = ( D3D10_COUNTER_GS_COMPUTATION_LIMITED + 1 ) ,
 D3D10_COUNTER_PS_COMPUTATION_LIMITED = ( D3D10_COUNTER_PS_MEMORY_LIMITED + 1 ) ,
 D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE = ( D3D10_COUNTER_PS_COMPUTATION_LIMITED + 1 ) ,
 D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE = ( D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE + 1 ) ,
 D3D10_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
    } D3D10_COUNTER;

typedef
enum D3D10_COUNTER_TYPE
    { D3D10_COUNTER_TYPE_FLOAT32 = 0,
 D3D10_COUNTER_TYPE_UINT16 = ( D3D10_COUNTER_TYPE_FLOAT32 + 1 ) ,
 D3D10_COUNTER_TYPE_UINT32 = ( D3D10_COUNTER_TYPE_UINT16 + 1 ) ,
 D3D10_COUNTER_TYPE_UINT64 = ( D3D10_COUNTER_TYPE_UINT32 + 1 )
    } D3D10_COUNTER_TYPE;

typedef struct D3D10_COUNTER_DESC
    {
    D3D10_COUNTER Counter;
    UINT MiscFlags;
    } D3D10_COUNTER_DESC;

typedef struct D3D10_COUNTER_INFO
    {
    D3D10_COUNTER LastDeviceDependentCounter;
    UINT NumSimultaneousCounters;
    UINT8 NumDetectableParallelUnits;
    } D3D10_COUNTER_INFO;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0021_v0_0_s_ifspec;
#line 4605 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Counter;



    struct __declspec(uuid("9B7E4C11-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Counter : public ID3D10Asynchronous
    {
    public:
        virtual void __stdcall GetDesc(

                   D3D10_COUNTER_DESC *pDesc) = 0;

    };
#line 4760 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Device;



    struct __declspec(uuid("9B7E4C0F-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Device : public IUnknown
    {
    public:
        virtual void __stdcall VSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D10Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall PSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D10ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall PSSetShader(

                      ID3D10PixelShader *pPixelShader) = 0;

        virtual void __stdcall PSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D10SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall VSSetShader(

                      ID3D10VertexShader *pVertexShader) = 0;

        virtual void __stdcall DrawIndexed(

                  UINT IndexCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation) = 0;

        virtual void __stdcall Draw(

                  UINT VertexCount,

                  UINT StartVertexLocation) = 0;

        virtual void __stdcall PSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D10Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall IASetInputLayout(

                      ID3D10InputLayout *pInputLayout) = 0;

        virtual void __stdcall IASetVertexBuffers(

                                                                              UINT StartSlot,

                                                                                      UINT NumBuffers,

                                     ID3D10Buffer *const *ppVertexBuffers,

                                     const UINT *pStrides,

                                     const UINT *pOffsets) = 0;

        virtual void __stdcall IASetIndexBuffer(

                      ID3D10Buffer *pIndexBuffer,

                  DXGI_FORMAT Format,

                  UINT Offset) = 0;

        virtual void __stdcall DrawIndexedInstanced(

                  UINT IndexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartIndexLocation,

                  INT BaseVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall DrawInstanced(

                  UINT VertexCountPerInstance,

                  UINT InstanceCount,

                  UINT StartVertexLocation,

                  UINT StartInstanceLocation) = 0;

        virtual void __stdcall GSSetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                     ID3D10Buffer *const *ppConstantBuffers) = 0;

        virtual void __stdcall GSSetShader(

                      ID3D10GeometryShader *pShader) = 0;

        virtual void __stdcall IASetPrimitiveTopology(

                  D3D10_PRIMITIVE_TOPOLOGY Topology) = 0;

        virtual void __stdcall VSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D10ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall VSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D10SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall SetPredication(

                      ID3D10Predicate *pPredicate,

                  BOOL PredicateValue) = 0;

        virtual void __stdcall GSSetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                   ID3D10ShaderResourceView *const *ppShaderResourceViews) = 0;

        virtual void __stdcall GSSetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                      ID3D10SamplerState *const *ppSamplers) = 0;

        virtual void __stdcall OMSetRenderTargets(

                                                                     UINT NumViews,

                                       ID3D10RenderTargetView *const *ppRenderTargetViews,

                      ID3D10DepthStencilView *pDepthStencilView) = 0;

        virtual void __stdcall OMSetBlendState(

                      ID3D10BlendState *pBlendState,

                  const FLOAT BlendFactor[ 4 ],

                  UINT SampleMask) = 0;

        virtual void __stdcall OMSetDepthStencilState(

                      ID3D10DepthStencilState *pDepthStencilState,

                  UINT StencilRef) = 0;

        virtual void __stdcall SOSetTargets(

                                                        UINT NumBuffers,

                                         ID3D10Buffer *const *ppSOTargets,

                                         const UINT *pOffsets) = 0;

        virtual void __stdcall DrawAuto( void) = 0;

        virtual void __stdcall RSSetState(

                      ID3D10RasterizerState *pRasterizerState) = 0;

        virtual void __stdcall RSSetViewports(

                                                                                     UINT NumViewports,

                                           const D3D10_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSSetScissorRects(

                                                                                     UINT NumRects,

                                       const D3D10_RECT *pRects) = 0;

        virtual void __stdcall CopySubresourceRegion(

                  ID3D10Resource *pDstResource,

                  UINT DstSubresource,

                  UINT DstX,

                  UINT DstY,

                  UINT DstZ,

                  ID3D10Resource *pSrcResource,

                  UINT SrcSubresource,

                      const D3D10_BOX *pSrcBox) = 0;

        virtual void __stdcall CopyResource(

                  ID3D10Resource *pDstResource,

                  ID3D10Resource *pSrcResource) = 0;

        virtual void __stdcall UpdateSubresource(

                  ID3D10Resource *pDstResource,

                  UINT DstSubresource,

                      const D3D10_BOX *pDstBox,

                  const void *pSrcData,

                  UINT SrcRowPitch,

                  UINT SrcDepthPitch) = 0;

        virtual void __stdcall ClearRenderTargetView(

                  ID3D10RenderTargetView *pRenderTargetView,

                  const FLOAT ColorRGBA[ 4 ]) = 0;

        virtual void __stdcall ClearDepthStencilView(

                  ID3D10DepthStencilView *pDepthStencilView,

                  UINT ClearFlags,

                  FLOAT Depth,

                  UINT8 Stencil) = 0;

        virtual void __stdcall GenerateMips(

                  ID3D10ShaderResourceView *pShaderResourceView) = 0;

        virtual void __stdcall ResolveSubresource(

                  ID3D10Resource *pDstResource,

                  UINT DstSubresource,

                  ID3D10Resource *pSrcResource,

                  UINT SrcSubresource,

                  DXGI_FORMAT Format) = 0;

        virtual void __stdcall VSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D10Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall PSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D10ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall PSGetShader(

                   ID3D10PixelShader **ppPixelShader) = 0;

        virtual void __stdcall PSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D10SamplerState **ppSamplers) = 0;

        virtual void __stdcall VSGetShader(

                   ID3D10VertexShader **ppVertexShader) = 0;

        virtual void __stdcall PSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D10Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall IAGetInputLayout(

                   ID3D10InputLayout **ppInputLayout) = 0;

        virtual void __stdcall IAGetVertexBuffers(

                                                                              UINT StartSlot,

                                                                                      UINT NumBuffers,

                                          ID3D10Buffer **ppVertexBuffers,

                                          UINT *pStrides,

                                          UINT *pOffsets) = 0;

        virtual void __stdcall IAGetIndexBuffer(

                       ID3D10Buffer **pIndexBuffer,

                       DXGI_FORMAT *Format,

                       UINT *Offset) = 0;

        virtual void __stdcall GSGetConstantBuffers(

                                                                                    UINT StartSlot,

                                                                                            UINT NumBuffers,

                                      ID3D10Buffer **ppConstantBuffers) = 0;

        virtual void __stdcall GSGetShader(

                   ID3D10GeometryShader **ppGeometryShader) = 0;

        virtual void __stdcall IAGetPrimitiveTopology(

                   D3D10_PRIMITIVE_TOPOLOGY *pTopology) = 0;

        virtual void __stdcall VSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D10ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall VSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D10SamplerState **ppSamplers) = 0;

        virtual void __stdcall GetPredication(

                       ID3D10Predicate **ppPredicate,

                       BOOL *pPredicateValue) = 0;

        virtual void __stdcall GSGetShaderResources(

                                                                               UINT StartSlot,

                                                                                       UINT NumViews,

                                    ID3D10ShaderResourceView **ppShaderResourceViews) = 0;

        virtual void __stdcall GSGetSamplers(

                                                                        UINT StartSlot,

                                                                                UINT NumSamplers,

                                       ID3D10SamplerState **ppSamplers) = 0;

        virtual void __stdcall OMGetRenderTargets(

                                                                     UINT NumViews,

                                        ID3D10RenderTargetView **ppRenderTargetViews,

                       ID3D10DepthStencilView **ppDepthStencilView) = 0;

        virtual void __stdcall OMGetBlendState(

                       ID3D10BlendState **ppBlendState,

                       FLOAT BlendFactor[ 4 ],

                       UINT *pSampleMask) = 0;

        virtual void __stdcall OMGetDepthStencilState(

                       ID3D10DepthStencilState **ppDepthStencilState,

                       UINT *pStencilRef) = 0;

        virtual void __stdcall SOGetTargets(

                                                         UINT NumBuffers,

                                          ID3D10Buffer **ppSOTargets,

                                          UINT *pOffsets) = 0;

        virtual void __stdcall RSGetState(

                   ID3D10RasterizerState **ppRasterizerState) = 0;

        virtual void __stdcall RSGetViewports(

                                                                                               UINT *NumViewports,

                                             D3D10_VIEWPORT *pViewports) = 0;

        virtual void __stdcall RSGetScissorRects(

                                                                                               UINT *NumRects,

                                         D3D10_RECT *pRects) = 0;

        virtual HRESULT __stdcall GetDeviceRemovedReason( void) = 0;

        virtual HRESULT __stdcall SetExceptionMode(
            UINT RaiseFlags) = 0;

        virtual UINT __stdcall GetExceptionMode( void) = 0;

        virtual HRESULT __stdcall GetPrivateData(

                  const GUID & guid,

                     UINT *pDataSize,

                                          void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateData(

                  const GUID & guid,

                  UINT DataSize,

                                       const void *pData) = 0;

        virtual HRESULT __stdcall SetPrivateDataInterface(

                  const GUID & guid,

                      const IUnknown *pData) = 0;

        virtual void __stdcall ClearState( void) = 0;

        virtual void __stdcall Flush( void) = 0;

        virtual HRESULT __stdcall CreateBuffer(

                  const D3D10_BUFFER_DESC *pDesc,

                      const D3D10_SUBRESOURCE_DATA *pInitialData,

                       ID3D10Buffer **ppBuffer) = 0;

        virtual HRESULT __stdcall CreateTexture1D(

                  const D3D10_TEXTURE1D_DESC *pDesc,

                                                                  const D3D10_SUBRESOURCE_DATA *pInitialData,

                   ID3D10Texture1D **ppTexture1D) = 0;

        virtual HRESULT __stdcall CreateTexture2D(

                  const D3D10_TEXTURE2D_DESC *pDesc,

                                                                  const D3D10_SUBRESOURCE_DATA *pInitialData,

                   ID3D10Texture2D **ppTexture2D) = 0;

        virtual HRESULT __stdcall CreateTexture3D(

                  const D3D10_TEXTURE3D_DESC *pDesc,

                                               const D3D10_SUBRESOURCE_DATA *pInitialData,

                   ID3D10Texture3D **ppTexture3D) = 0;

        virtual HRESULT __stdcall CreateShaderResourceView(

                  ID3D10Resource *pResource,

                      const D3D10_SHADER_RESOURCE_VIEW_DESC *pDesc,

                       ID3D10ShaderResourceView **ppSRView) = 0;

        virtual HRESULT __stdcall CreateRenderTargetView(

                  ID3D10Resource *pResource,

                      const D3D10_RENDER_TARGET_VIEW_DESC *pDesc,

                       ID3D10RenderTargetView **ppRTView) = 0;

        virtual HRESULT __stdcall CreateDepthStencilView(

                  ID3D10Resource *pResource,

                      const D3D10_DEPTH_STENCIL_VIEW_DESC *pDesc,

                       ID3D10DepthStencilView **ppDepthStencilView) = 0;

        virtual HRESULT __stdcall CreateInputLayout(

                                      const D3D10_INPUT_ELEMENT_DESC *pInputElementDescs,

                                                                              UINT NumElements,

                  const void *pShaderBytecodeWithInputSignature,

                  SIZE_T BytecodeLength,

                       ID3D10InputLayout **ppInputLayout) = 0;

        virtual HRESULT __stdcall CreateVertexShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                       ID3D10VertexShader **ppVertexShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                       ID3D10GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreateGeometryShaderWithStreamOutput(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                                         const D3D10_SO_DECLARATION_ENTRY *pSODeclaration,

                                                                     UINT NumEntries,

                  UINT OutputStreamStride,

                       ID3D10GeometryShader **ppGeometryShader) = 0;

        virtual HRESULT __stdcall CreatePixelShader(

                  const void *pShaderBytecode,

                  SIZE_T BytecodeLength,

                       ID3D10PixelShader **ppPixelShader) = 0;

        virtual HRESULT __stdcall CreateBlendState(

                  const D3D10_BLEND_DESC *pBlendStateDesc,

                       ID3D10BlendState **ppBlendState) = 0;

        virtual HRESULT __stdcall CreateDepthStencilState(

                  const D3D10_DEPTH_STENCIL_DESC *pDepthStencilDesc,

                       ID3D10DepthStencilState **ppDepthStencilState) = 0;

        virtual HRESULT __stdcall CreateRasterizerState(

                  const D3D10_RASTERIZER_DESC *pRasterizerDesc,

                       ID3D10RasterizerState **ppRasterizerState) = 0;

        virtual HRESULT __stdcall CreateSamplerState(

                  const D3D10_SAMPLER_DESC *pSamplerDesc,

                       ID3D10SamplerState **ppSamplerState) = 0;

        virtual HRESULT __stdcall CreateQuery(

                  const D3D10_QUERY_DESC *pQueryDesc,

                       ID3D10Query **ppQuery) = 0;

        virtual HRESULT __stdcall CreatePredicate(

                  const D3D10_QUERY_DESC *pPredicateDesc,

                       ID3D10Predicate **ppPredicate) = 0;

        virtual HRESULT __stdcall CreateCounter(

                  const D3D10_COUNTER_DESC *pCounterDesc,

                       ID3D10Counter **ppCounter) = 0;

        virtual HRESULT __stdcall CheckFormatSupport(

                  DXGI_FORMAT Format,

                   UINT *pFormatSupport) = 0;

        virtual HRESULT __stdcall CheckMultisampleQualityLevels(

                  DXGI_FORMAT Format,

                  UINT SampleCount,

                   UINT *pNumQualityLevels) = 0;

        virtual void __stdcall CheckCounterInfo(

                   D3D10_COUNTER_INFO *pCounterInfo) = 0;

        virtual HRESULT __stdcall CheckCounter(

                  const D3D10_COUNTER_DESC *pDesc,

                   D3D10_COUNTER_TYPE *pType,

                   UINT *pActiveCounters,

                                            LPSTR szName,

                         UINT *pNameLength,

                                             LPSTR szUnits,

                         UINT *pUnitsLength,

                                                   LPSTR szDescription,

                         UINT *pDescriptionLength) = 0;

        virtual UINT __stdcall GetCreationFlags( void) = 0;

        virtual HRESULT __stdcall OpenSharedResource(

                  HANDLE hResource,

                  const IID & ReturnedInterface,

                       void **ppResource) = 0;

        virtual void __stdcall SetTextFilterSize(

                  UINT Width,

                  UINT Height) = 0;

        virtual void __stdcall GetTextFilterSize(

                       UINT *pWidth,

                       UINT *pHeight) = 0;

    };
#line 6563 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
extern "C" const IID IID_ID3D10Multithread;



    struct __declspec(uuid("9B7E4E00-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Multithread : public IUnknown
    {
    public:
        virtual void __stdcall Enter( void) = 0;

        virtual void __stdcall Leave( void) = 0;

        virtual BOOL __stdcall SetMultithreadProtected(

                  BOOL bMTProtect) = 0;

        virtual BOOL __stdcall GetMultithreadProtected( void) = 0;

    };
#line 6664 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"
typedef
enum D3D10_CREATE_DEVICE_FLAG
    { D3D10_CREATE_DEVICE_SINGLETHREADED = 0x1,
 D3D10_CREATE_DEVICE_DEBUG = 0x2,
 D3D10_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
 D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
 D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 0x10,
 D3D10_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
 D3D10_CREATE_DEVICE_STRICT_VALIDATION = 0x200
    } D3D10_CREATE_DEVICE_FLAG;






#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
#line 17 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
#pragma warning(disable: 4049)
#line 53 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
typedef struct ID3D10Debug ID3D10Debug;





typedef struct ID3D10SwitchToRef ID3D10SwitchToRef;





typedef struct ID3D10InfoQueue ID3D10InfoQueue;
#line 75 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
extern "C"{
#line 92 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0000_v0_0_s_ifspec;
#line 102 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
extern "C" const IID IID_ID3D10Debug;



    struct __declspec(uuid("9B7E4E01-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Debug : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetFeatureMask(
            UINT Mask) = 0;

        virtual UINT __stdcall GetFeatureMask( void) = 0;

        virtual HRESULT __stdcall SetPresentPerRenderOpDelay(
            UINT Milliseconds) = 0;

        virtual UINT __stdcall GetPresentPerRenderOpDelay( void) = 0;

        virtual HRESULT __stdcall SetSwapChain(

                      IDXGISwapChain *pSwapChain) = 0;

        virtual HRESULT __stdcall GetSwapChain(

                   IDXGISwapChain **ppSwapChain) = 0;

        virtual HRESULT __stdcall Validate( void) = 0;

    };
#line 239 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
extern "C" const IID IID_ID3D10SwitchToRef;



    struct __declspec(uuid("9B7E4E02-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10SwitchToRef : public IUnknown
    {
    public:
        virtual BOOL __stdcall SetUseRef(
            BOOL UseRef) = 0;

        virtual BOOL __stdcall GetUseRef( void) = 0;

    };
#line 322 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
typedef
enum D3D10_MESSAGE_CATEGORY
    { D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
 D3D10_MESSAGE_CATEGORY_MISCELLANEOUS = ( D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
 D3D10_MESSAGE_CATEGORY_INITIALIZATION = ( D3D10_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
 D3D10_MESSAGE_CATEGORY_CLEANUP = ( D3D10_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
 D3D10_MESSAGE_CATEGORY_COMPILATION = ( D3D10_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
 D3D10_MESSAGE_CATEGORY_STATE_CREATION = ( D3D10_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
 D3D10_MESSAGE_CATEGORY_STATE_SETTING = ( D3D10_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
 D3D10_MESSAGE_CATEGORY_STATE_GETTING = ( D3D10_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
 D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = ( D3D10_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
 D3D10_MESSAGE_CATEGORY_EXECUTION = ( D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 )
    } D3D10_MESSAGE_CATEGORY;

typedef
enum D3D10_MESSAGE_SEVERITY
    { D3D10_MESSAGE_SEVERITY_CORRUPTION = 0,
 D3D10_MESSAGE_SEVERITY_ERROR = ( D3D10_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
 D3D10_MESSAGE_SEVERITY_WARNING = ( D3D10_MESSAGE_SEVERITY_ERROR + 1 ) ,
 D3D10_MESSAGE_SEVERITY_INFO = ( D3D10_MESSAGE_SEVERITY_WARNING + 1 )
    } D3D10_MESSAGE_SEVERITY;

typedef
enum D3D10_MESSAGE_ID
    { D3D10_MESSAGE_ID_UNKNOWN = 0,
 D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_UNKNOWN + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = ( D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_STRING_FROM_APPLICATION = ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_THIS = ( D3D10_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 = ( D3D10_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
 D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING = ( D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
 D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
 D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
 D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = ( D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
 D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = ( D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
 D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
 D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
 D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC = ( D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = ( D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = ( D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
 D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = ( D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = ( D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
 D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
 D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = ( D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
 D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
 D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = ( D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
 D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
 D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = ( D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
 D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = ( D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
 D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = ( D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
 D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
 D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
 D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = ( D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
 D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
 D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
 D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = ( D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
 D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = ( D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = ( D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = ( D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = ( D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
 D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = ( D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
 D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = ( D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
 D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
 D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = ( D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_REF_THREADING_MODE = ( D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
 D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = ( D3D10_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
 D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = ( D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
 D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION = ( D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
 D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = ( D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
 D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = ( D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
 D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY = ( D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
 D3D10_MESSAGE_ID_REF_INFO = ( D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_REF_INFO + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = ( D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = ( D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = ( D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = ( D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
 D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = ( D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
 D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = ( D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = ( D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
 D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = ( D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
 D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
 D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = ( D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
 D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = ( D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC = ( D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
 D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = ( D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
 D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
 D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = ( D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = ( D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
 D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = ( D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = ( D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = ( D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
 D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = ( D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = ( D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = ( D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = ( D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
 D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = ( D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = ( D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = ( D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
 D3D10_MESSAGE_ID_D3D10_MESSAGES_END = ( D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
 D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
 D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = ( D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
 D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
 D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = ( D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
 D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
 D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = ( D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = ( D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = ( D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
 D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = ( D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
 D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
 D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = ( D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = ( D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
 D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
 D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = ( D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = ( D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
 D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = ( D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = ( D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = ( D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = ( D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = ( D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
 D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
 D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = ( D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
 D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = ( D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
 D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = ( D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = ( D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
 D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = ( D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = ( D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = ( D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
 D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = ( D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = ( D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
 D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = ( D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
 D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = ( D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
 D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = ( D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
 D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END = ( D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 )
    } D3D10_MESSAGE_ID;

typedef struct D3D10_MESSAGE
    {
    D3D10_MESSAGE_CATEGORY Category;
    D3D10_MESSAGE_SEVERITY Severity;
    D3D10_MESSAGE_ID ID;
    const char *pDescription;
    SIZE_T DescriptionByteLength;
    } D3D10_MESSAGE;

typedef struct D3D10_INFO_QUEUE_FILTER_DESC
    {
    UINT NumCategories;
    D3D10_MESSAGE_CATEGORY *pCategoryList;
    UINT NumSeverities;
    D3D10_MESSAGE_SEVERITY *pSeverityList;
    UINT NumIDs;
    D3D10_MESSAGE_ID *pIDList;
    } D3D10_INFO_QUEUE_FILTER_DESC;

typedef struct D3D10_INFO_QUEUE_FILTER
    {
    D3D10_INFO_QUEUE_FILTER_DESC AllowList;
    D3D10_INFO_QUEUE_FILTER_DESC DenyList;
    } D3D10_INFO_QUEUE_FILTER;




extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0002_v0_0_s_ifspec;
#line 871 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
extern "C" const IID IID_ID3D10InfoQueue;



    struct __declspec(uuid("1b940b17-2642-4d1f-ab1f-b99bad0c395f")) __declspec(novtable)
    ID3D10InfoQueue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetMessageCountLimit(

                  UINT64 MessageCountLimit) = 0;

        virtual void __stdcall ClearStoredMessages( void) = 0;

        virtual HRESULT __stdcall GetMessageW(

                  UINT64 MessageIndex,

                                                   D3D10_MESSAGE *pMessage,

                     SIZE_T *pMessageByteLength) = 0;

        virtual UINT64 __stdcall GetNumMessagesAllowedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDeniedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessages( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessagesAllowedByRetrievalFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDiscardedByMessageCountLimit( void) = 0;

        virtual UINT64 __stdcall GetMessageCountLimit( void) = 0;

        virtual HRESULT __stdcall AddStorageFilterEntries(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetStorageFilter(

                                                  D3D10_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushStorageFilter(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopStorageFilter( void) = 0;

        virtual UINT __stdcall GetStorageFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddRetrievalFilterEntries(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetRetrievalFilter(

                                                  D3D10_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushRetrievalFilter(

                  D3D10_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopRetrievalFilter( void) = 0;

        virtual UINT __stdcall GetRetrievalFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddMessage(

                  D3D10_MESSAGE_CATEGORY Category,

                  D3D10_MESSAGE_SEVERITY Severity,

                  D3D10_MESSAGE_ID ID,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall AddApplicationMessage(

                  D3D10_MESSAGE_SEVERITY Severity,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall SetBreakOnCategory(

                  D3D10_MESSAGE_CATEGORY Category,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnSeverity(

                  D3D10_MESSAGE_SEVERITY Severity,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnID(

                  D3D10_MESSAGE_ID ID,

                  BOOL bEnable) = 0;

        virtual BOOL __stdcall GetBreakOnCategory(

                  D3D10_MESSAGE_CATEGORY Category) = 0;

        virtual BOOL __stdcall GetBreakOnSeverity(

                  D3D10_MESSAGE_SEVERITY Severity) = 0;

        virtual BOOL __stdcall GetBreakOnID(

                  D3D10_MESSAGE_ID ID) = 0;

        virtual void __stdcall SetMuteDebugOutput(

                  BOOL bMute) = 0;

        virtual BOOL __stdcall GetMuteDebugOutput( void) = 0;

    };
#line 1343 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10sdklayers.h"
extern "C" const GUID IID_ID3D10Debug;
extern "C" const GUID IID_ID3D10SwitchToRef;
extern "C" const GUID IID_ID3D10InfoQueue;


extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10sdklayers_0000_0003_v0_0_s_ifspec;






}
#line 6679 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"


#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10misc.h"
#line 18 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10misc.h"
extern "C" {
#line 31 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10misc.h"
typedef enum D3D10_DRIVER_TYPE
{
    D3D10_DRIVER_TYPE_HARDWARE = 0,
    D3D10_DRIVER_TYPE_REFERENCE = 1,
    D3D10_DRIVER_TYPE_NULL = 2,
    D3D10_DRIVER_TYPE_SOFTWARE = 3,
    D3D10_DRIVER_TYPE_WARP = 5,
} D3D10_DRIVER_TYPE;

extern "C" const GUID GUID_DeviceType;
#line 74 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10misc.h"
HRESULT __stdcall D3D10CreateDevice(
    IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    UINT SDKVersion,
    ID3D10Device **ppDevice);
#line 118 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10misc.h"
HRESULT __stdcall D3D10CreateDeviceAndSwapChain(
    IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    UINT SDKVersion,
    DXGI_SWAP_CHAIN_DESC *pSwapChainDesc,
    IDXGISwapChain **ppSwapChain,
    ID3D10Device **ppDevice);
#line 135 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10misc.h"
HRESULT __stdcall D3D10CreateBlob(SIZE_T NumBytes, LPD3D10BLOB *ppBuffer);


}
#line 6681 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
#line 113 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
typedef D3D_SHADER_MACRO D3D10_SHADER_MACRO;
typedef D3D10_SHADER_MACRO* LPD3D10_SHADER_MACRO;


typedef D3D_SHADER_VARIABLE_CLASS D3D10_SHADER_VARIABLE_CLASS;
typedef D3D10_SHADER_VARIABLE_CLASS* LPD3D10_SHADER_VARIABLE_CLASS;

typedef D3D_SHADER_VARIABLE_FLAGS D3D10_SHADER_VARIABLE_FLAGS;
typedef D3D10_SHADER_VARIABLE_FLAGS* LPD3D10_SHADER_VARIABLE_FLAGS;

typedef D3D_SHADER_VARIABLE_TYPE D3D10_SHADER_VARIABLE_TYPE;
typedef D3D10_SHADER_VARIABLE_TYPE* LPD3D10_SHADER_VARIABLE_TYPE;

typedef D3D_SHADER_INPUT_FLAGS D3D10_SHADER_INPUT_FLAGS;
typedef D3D10_SHADER_INPUT_FLAGS* LPD3D10_SHADER_INPUT_FLAGS;

typedef D3D_SHADER_INPUT_TYPE D3D10_SHADER_INPUT_TYPE;
typedef D3D10_SHADER_INPUT_TYPE* LPD3D10_SHADER_INPUT_TYPE;

typedef D3D_SHADER_CBUFFER_FLAGS D3D10_SHADER_CBUFFER_FLAGS;
typedef D3D10_SHADER_CBUFFER_FLAGS* LPD3D10_SHADER_CBUFFER_FLAGS;

typedef D3D_CBUFFER_TYPE D3D10_CBUFFER_TYPE;
typedef D3D10_CBUFFER_TYPE* LPD3D10_CBUFFER_TYPE;

typedef D3D_NAME D3D10_NAME;

typedef D3D_RESOURCE_RETURN_TYPE D3D10_RESOURCE_RETURN_TYPE;

typedef D3D_REGISTER_COMPONENT_TYPE D3D10_REGISTER_COMPONENT_TYPE;

typedef D3D_INCLUDE_TYPE D3D10_INCLUDE_TYPE;


typedef struct ID3DInclude ID3D10Include;
typedef struct ID3DInclude* LPD3D10INCLUDE;
#line 160 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
typedef struct _D3D10_SHADER_DESC
{
    UINT Version;
    LPCSTR Creator;
    UINT Flags;

    UINT ConstantBuffers;
    UINT BoundResources;
    UINT InputParameters;
    UINT OutputParameters;

    UINT InstructionCount;
    UINT TempRegisterCount;
    UINT TempArrayCount;
    UINT DefCount;
    UINT DclCount;
    UINT TextureNormalInstructions;
    UINT TextureLoadInstructions;
    UINT TextureCompInstructions;
    UINT TextureBiasInstructions;
    UINT TextureGradientInstructions;
    UINT FloatInstructionCount;
    UINT IntInstructionCount;
    UINT UintInstructionCount;
    UINT StaticFlowControlCount;
    UINT DynamicFlowControlCount;
    UINT MacroInstructionCount;
    UINT ArrayInstructionCount;
    UINT CutInstructionCount;
    UINT EmitInstructionCount;
    D3D10_PRIMITIVE_TOPOLOGY GSOutputTopology;
    UINT GSMaxOutputVertexCount;
} D3D10_SHADER_DESC;

typedef struct _D3D10_SHADER_BUFFER_DESC
{
    LPCSTR Name;
    D3D10_CBUFFER_TYPE Type;
    UINT Variables;
    UINT Size;
    UINT uFlags;
} D3D10_SHADER_BUFFER_DESC;

typedef struct _D3D10_SHADER_VARIABLE_DESC
{
    LPCSTR Name;
    UINT StartOffset;
    UINT Size;
    UINT uFlags;
    LPVOID DefaultValue;
} D3D10_SHADER_VARIABLE_DESC;

typedef struct _D3D10_SHADER_TYPE_DESC
{
    D3D10_SHADER_VARIABLE_CLASS Class;
    D3D10_SHADER_VARIABLE_TYPE Type;
    UINT Rows;
    UINT Columns;
    UINT Elements;
    UINT Members;
    UINT Offset;
} D3D10_SHADER_TYPE_DESC;

typedef struct _D3D10_SHADER_INPUT_BIND_DESC
{
    LPCSTR Name;
    D3D10_SHADER_INPUT_TYPE Type;
    UINT BindPoint;
    UINT BindCount;

    UINT uFlags;
    D3D10_RESOURCE_RETURN_TYPE ReturnType;
    D3D10_SRV_DIMENSION Dimension;
    UINT NumSamples;
} D3D10_SHADER_INPUT_BIND_DESC;

typedef struct _D3D10_SIGNATURE_PARAMETER_DESC
{
    LPCSTR SemanticName;
    UINT SemanticIndex;
    UINT Register;
    D3D10_NAME SystemValueType;
    D3D10_REGISTER_COMPONENT_TYPE ComponentType;
    BYTE Mask;

    BYTE ReadWriteMask;




} D3D10_SIGNATURE_PARAMETER_DESC;






typedef struct ID3D10ShaderReflectionType ID3D10ShaderReflectionType;
typedef struct ID3D10ShaderReflectionType *LPD3D10SHADERREFLECTIONTYPE;


extern "C" const GUID IID_ID3D10ShaderReflectionType;





struct __declspec(novtable) ID3D10ShaderReflectionType
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_TYPE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionType* __stdcall GetMemberTypeByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionType* __stdcall GetMemberTypeByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberTypeName( UINT Index) = 0;
};

typedef struct ID3D10ShaderReflectionVariable ID3D10ShaderReflectionVariable;
typedef struct ID3D10ShaderReflectionVariable *LPD3D10SHADERREFLECTIONVARIABLE;


extern "C" const GUID IID_ID3D10ShaderReflectionVariable;





struct __declspec(novtable) ID3D10ShaderReflectionVariable
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionType* __stdcall GetType(void) = 0;
};

typedef struct ID3D10ShaderReflectionConstantBuffer ID3D10ShaderReflectionConstantBuffer;
typedef struct ID3D10ShaderReflectionConstantBuffer *LPD3D10SHADERREFLECTIONCONSTANTBUFFER;


extern "C" const GUID IID_ID3D10ShaderReflectionConstantBuffer;





struct __declspec(novtable) ID3D10ShaderReflectionConstantBuffer
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_BUFFER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionVariable* __stdcall GetVariableByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;
};

typedef struct ID3D10ShaderReflection ID3D10ShaderReflection;
typedef struct ID3D10ShaderReflection *LPD3D10SHADERREFLECTION;


extern "C" const GUID IID_ID3D10ShaderReflection;





struct __declspec(novtable) ID3D10ShaderReflection : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDesc( UINT ResourceIndex, D3D10_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;

};






extern "C" {
#line 387 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
HRESULT __stdcall D3D10CompileShader(LPCSTR pSrcData, SIZE_T SrcDataLen, LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE pInclude,
    LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags, ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs);
#line 408 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
HRESULT __stdcall D3D10DisassembleShader(const void *pShader, SIZE_T BytecodeLength, BOOL EnableColorCode, LPCSTR pComments, ID3D10Blob** ppDisassembly);
#line 421 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
LPCSTR __stdcall D3D10GetPixelShaderProfile(ID3D10Device *pDevice);

LPCSTR __stdcall D3D10GetVertexShaderProfile(ID3D10Device *pDevice);

LPCSTR __stdcall D3D10GetGeometryShaderProfile(ID3D10Device *pDevice);
#line 445 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
HRESULT __stdcall D3D10ReflectShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10ShaderReflection **ppReflector);
#line 475 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
HRESULT __stdcall D3D10PreprocessShader(LPCSTR pSrcData, SIZE_T SrcDataSize, LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, ID3D10Blob** ppShaderText, ID3D10Blob** ppErrorMsgs);
#line 507 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
HRESULT __stdcall D3D10GetInputSignatureBlob(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob **ppSignatureBlob);
HRESULT __stdcall D3D10GetOutputSignatureBlob(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob **ppSignatureBlob);
HRESULT __stdcall D3D10GetInputAndOutputSignatureBlob(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob **ppSignatureBlob);
#line 527 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10shader.h"
HRESULT __stdcall D3D10GetShaderDebugInfo(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob** ppDebugInfo);


}
#line 6682 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
#line 30 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef enum _D3D10_DEVICE_STATE_TYPES
{

    D3D10_DST_SO_BUFFERS=1,
    D3D10_DST_OM_RENDER_TARGETS,
    D3D10_DST_OM_DEPTH_STENCIL_STATE,
    D3D10_DST_OM_BLEND_STATE,

    D3D10_DST_VS,
    D3D10_DST_VS_SAMPLERS,
    D3D10_DST_VS_SHADER_RESOURCES,
    D3D10_DST_VS_CONSTANT_BUFFERS,

    D3D10_DST_GS,
    D3D10_DST_GS_SAMPLERS,
    D3D10_DST_GS_SHADER_RESOURCES,
    D3D10_DST_GS_CONSTANT_BUFFERS,

    D3D10_DST_PS,
    D3D10_DST_PS_SAMPLERS,
    D3D10_DST_PS_SHADER_RESOURCES,
    D3D10_DST_PS_CONSTANT_BUFFERS,

    D3D10_DST_IA_VERTEX_BUFFERS,
    D3D10_DST_IA_INDEX_BUFFER,
    D3D10_DST_IA_INPUT_LAYOUT,
    D3D10_DST_IA_PRIMITIVE_TOPOLOGY,

    D3D10_DST_RS_VIEWPORTS,
    D3D10_DST_RS_SCISSOR_RECTS,
    D3D10_DST_RS_RASTERIZER_STATE,

    D3D10_DST_PREDICATION,
} D3D10_DEVICE_STATE_TYPES;
#line 76 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef struct _D3D10_STATE_BLOCK_MASK
{
    BYTE VS;
    BYTE VSSamplers[(((( 16 )) + 7) / 8)];
    BYTE VSShaderResources[(((( 128 )) + 7) / 8)];
    BYTE VSConstantBuffers[(((( 14 )) + 7) / 8)];

    BYTE GS;
    BYTE GSSamplers[(((( 16 )) + 7) / 8)];
    BYTE GSShaderResources[(((( 128 )) + 7) / 8)];
    BYTE GSConstantBuffers[(((( 14 )) + 7) / 8)];

    BYTE PS;
    BYTE PSSamplers[(((( 16 )) + 7) / 8)];
    BYTE PSShaderResources[(((( 128 )) + 7) / 8)];
    BYTE PSConstantBuffers[(((( 14 )) + 7) / 8)];

    BYTE IAVertexBuffers[(((( 16 )) + 7) / 8)];
    BYTE IAIndexBuffer;
    BYTE IAInputLayout;
    BYTE IAPrimitiveTopology;

    BYTE OMRenderTargets;
    BYTE OMDepthStencilState;
    BYTE OMBlendState;

    BYTE RSViewports;
    BYTE RSScissorRects;
    BYTE RSRasterizerState;

    BYTE SOBuffers;

    BYTE Predication;
} D3D10_STATE_BLOCK_MASK;





typedef struct ID3D10StateBlock ID3D10StateBlock;
typedef struct ID3D10StateBlock *LPD3D10STATEBLOCK;


extern "C" const GUID IID_ID3D10StateBlock;





struct __declspec(novtable) ID3D10StateBlock : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall Capture(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall Apply(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall ReleaseAllDeviceObjects(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDevice( ID3D10Device **ppDevice) = 0;
};


extern "C" {
#line 166 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
HRESULT __stdcall D3D10StateBlockMaskUnion(D3D10_STATE_BLOCK_MASK *pA, D3D10_STATE_BLOCK_MASK *pB, D3D10_STATE_BLOCK_MASK *pResult);
HRESULT __stdcall D3D10StateBlockMaskIntersect(D3D10_STATE_BLOCK_MASK *pA, D3D10_STATE_BLOCK_MASK *pB, D3D10_STATE_BLOCK_MASK *pResult);
HRESULT __stdcall D3D10StateBlockMaskDifference(D3D10_STATE_BLOCK_MASK *pA, D3D10_STATE_BLOCK_MASK *pB, D3D10_STATE_BLOCK_MASK *pResult);
HRESULT __stdcall D3D10StateBlockMaskEnableCapture(D3D10_STATE_BLOCK_MASK *pMask, D3D10_DEVICE_STATE_TYPES StateType, UINT RangeStart, UINT RangeLength);
HRESULT __stdcall D3D10StateBlockMaskDisableCapture(D3D10_STATE_BLOCK_MASK *pMask, D3D10_DEVICE_STATE_TYPES StateType, UINT RangeStart, UINT RangeLength);
HRESULT __stdcall D3D10StateBlockMaskEnableAll(D3D10_STATE_BLOCK_MASK *pMask);
HRESULT __stdcall D3D10StateBlockMaskDisableAll(D3D10_STATE_BLOCK_MASK *pMask);
BOOL __stdcall D3D10StateBlockMaskGetSetting(D3D10_STATE_BLOCK_MASK *pMask, D3D10_DEVICE_STATE_TYPES StateType, UINT Entry);
#line 195 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
HRESULT __stdcall D3D10CreateStateBlock(ID3D10Device *pDevice, D3D10_STATE_BLOCK_MASK *pStateBlockMask, ID3D10StateBlock **ppStateBlock);


}
#line 266 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef struct _D3D10_EFFECT_TYPE_DESC
{
    LPCSTR TypeName;


    D3D10_SHADER_VARIABLE_CLASS Class;
    D3D10_SHADER_VARIABLE_TYPE Type;

    UINT Elements;

    UINT Members;

    UINT Rows;

    UINT Columns;


    UINT PackedSize;

    UINT UnpackedSize;

    UINT Stride;

} D3D10_EFFECT_TYPE_DESC;

typedef struct ID3D10EffectType ID3D10EffectType;
typedef struct ID3D10EffectType *LPD3D10EFFECTTYPE;


extern "C" const GUID IID_ID3D10EffectType;





struct __declspec(novtable) ID3D10EffectType
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_TYPE_DESC *pDesc) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetMemberTypeByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetMemberTypeByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetMemberTypeBySemantic( LPCSTR Semantic) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberName( UINT Index) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberSemantic( UINT Index) = 0;
};
#line 322 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef struct _D3D10_EFFECT_VARIABLE_DESC
{
    LPCSTR Name;

    LPCSTR Semantic;



    UINT Flags;
    UINT Annotations;


    UINT BufferOffset;



    UINT ExplicitBindPoint;


} D3D10_EFFECT_VARIABLE_DESC;

typedef struct ID3D10EffectVariable ID3D10EffectVariable;
typedef struct ID3D10EffectVariable *LPD3D10EFFECTVARIABLE;


extern "C" const GUID IID_ID3D10EffectVariable;






typedef struct ID3D10EffectScalarVariable ID3D10EffectScalarVariable;
typedef struct ID3D10EffectVectorVariable ID3D10EffectVectorVariable;
typedef struct ID3D10EffectMatrixVariable ID3D10EffectMatrixVariable;
typedef struct ID3D10EffectStringVariable ID3D10EffectStringVariable;
typedef struct ID3D10EffectShaderResourceVariable ID3D10EffectShaderResourceVariable;
typedef struct ID3D10EffectRenderTargetViewVariable ID3D10EffectRenderTargetViewVariable;
typedef struct ID3D10EffectDepthStencilViewVariable ID3D10EffectDepthStencilViewVariable;
typedef struct ID3D10EffectConstantBuffer ID3D10EffectConstantBuffer;
typedef struct ID3D10EffectShaderVariable ID3D10EffectShaderVariable;
typedef struct ID3D10EffectBlendVariable ID3D10EffectBlendVariable;
typedef struct ID3D10EffectDepthStencilVariable ID3D10EffectDepthStencilVariable;
typedef struct ID3D10EffectRasterizerVariable ID3D10EffectRasterizerVariable;
typedef struct ID3D10EffectSamplerVariable ID3D10EffectSamplerVariable;

struct __declspec(novtable) ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectScalarVariable ID3D10EffectScalarVariable;
typedef struct ID3D10EffectScalarVariable *LPD3D10EFFECTSCALARVARIABLE;


extern "C" const GUID IID_ID3D10EffectScalarVariable;





struct __declspec(novtable) ID3D10EffectScalarVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetFloat( float Value) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloat( float *pValue) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetFloatArray( float *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloatArray( float *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetInt( int Value) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetInt( int *pValue) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetIntArray( int *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetIntArray( int *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBool( BOOL Value) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBool( BOOL *pValue) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBoolArray( BOOL *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBoolArray( BOOL *pData, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectVectorVariable ID3D10EffectVectorVariable;
typedef struct ID3D10EffectVectorVariable *LPD3D10EFFECTVECTORVARIABLE;


extern "C" const GUID IID_ID3D10EffectVectorVariable;





struct __declspec(novtable) ID3D10EffectVectorVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBoolVector ( BOOL *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetIntVector ( int *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetFloatVector( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetBoolVector ( BOOL *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetIntVector ( int *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloatVector( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetBoolVectorArray ( BOOL *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetIntVectorArray ( int *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SetFloatVectorArray( float *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetBoolVectorArray ( BOOL *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetIntVectorArray ( int *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetFloatVectorArray( float *pData, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectMatrixVariable ID3D10EffectMatrixVariable;
typedef struct ID3D10EffectMatrixVariable *LPD3D10EFFECTMATRIXVARIABLE;


extern "C" const GUID IID_ID3D10EffectMatrixVariable;





struct __declspec(novtable) ID3D10EffectMatrixVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT ByteOffset, UINT ByteCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrix( float *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrix( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrixArray( float *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrixArray( float *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrixTranspose( float *pData) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrixTranspose( float *pData) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetMatrixTransposeArray( float *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMatrixTransposeArray( float *pData, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectStringVariable ID3D10EffectStringVariable;
typedef struct ID3D10EffectStringVariable *LPD3D10EFFECTSTRINGVARIABLE;


extern "C" const GUID IID_ID3D10EffectStringVariable;





struct __declspec(novtable) ID3D10EffectStringVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetString( LPCSTR *ppString) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetStringArray( LPCSTR *ppStrings, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectShaderResourceVariable ID3D10EffectShaderResourceVariable;
typedef struct ID3D10EffectShaderResourceVariable *LPD3D10EFFECTSHADERRESOURCEVARIABLE;


extern "C" const GUID IID_ID3D10EffectShaderResourceVariable;






struct __declspec(novtable) ID3D10EffectShaderResourceVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetResource( ID3D10ShaderResourceView *pResource) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetResource( ID3D10ShaderResourceView **ppResource) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetResourceArray( ID3D10ShaderResourceView **ppResources, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetResourceArray( ID3D10ShaderResourceView **ppResources, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectRenderTargetViewVariable ID3D10EffectRenderTargetViewVariable;
typedef struct ID3D10EffectRenderTargetViewVariable *LPD3D10EFFECTRENDERTARGETVIEWVARIABLE;


extern "C" const GUID IID_ID3D10EffectRenderTargetViewVariable;





struct __declspec(novtable) ID3D10EffectRenderTargetViewVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRenderTarget( ID3D10RenderTargetView *pResource) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRenderTarget( ID3D10RenderTargetView **ppResource) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRenderTargetArray( ID3D10RenderTargetView **ppResources, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRenderTargetArray( ID3D10RenderTargetView **ppResources, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectDepthStencilViewVariable ID3D10EffectDepthStencilViewVariable;
typedef struct ID3D10EffectDepthStencilViewVariable *LPD3D10EFFECTDEPTHSTENCILVIEWVARIABLE;


extern "C" const GUID IID_ID3D10EffectDepthStencilViewVariable;





struct __declspec(novtable) ID3D10EffectDepthStencilViewVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetDepthStencil( ID3D10DepthStencilView *pResource) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDepthStencil( ID3D10DepthStencilView **ppResource) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetDepthStencilArray( ID3D10DepthStencilView **ppResources, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDepthStencilArray( ID3D10DepthStencilView **ppResources, UINT Offset, UINT Count) = 0;
};





typedef struct ID3D10EffectConstantBuffer ID3D10EffectConstantBuffer;
typedef struct ID3D10EffectConstantBuffer *LPD3D10EFFECTCONSTANTBUFFER;


extern "C" const GUID IID_ID3D10EffectConstantBuffer;





struct __declspec(novtable) ID3D10EffectConstantBuffer : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetConstantBuffer( ID3D10Buffer *pConstantBuffer) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetConstantBuffer( ID3D10Buffer **ppConstantBuffer) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetTextureBuffer( ID3D10ShaderResourceView *pTextureBuffer) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetTextureBuffer( ID3D10ShaderResourceView **ppTextureBuffer) = 0;
};
#line 878 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef struct _D3D10_EFFECT_SHADER_DESC
{
    const BYTE *pInputSignature;


    BOOL IsInline;




    const BYTE *pBytecode;
    UINT BytecodeLength;

    LPCSTR SODecl;

    UINT NumInputSignatureEntries;
    UINT NumOutputSignatureEntries;
} D3D10_EFFECT_SHADER_DESC;


typedef struct ID3D10EffectShaderVariable ID3D10EffectShaderVariable;
typedef struct ID3D10EffectShaderVariable *LPD3D10EFFECTSHADERVARIABLE;


extern "C" const GUID IID_ID3D10EffectShaderVariable;





struct __declspec(novtable) ID3D10EffectShaderVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetShaderDesc( UINT ShaderIndex, D3D10_EFFECT_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetVertexShader( UINT ShaderIndex, ID3D10VertexShader **ppVS) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetGeometryShader( UINT ShaderIndex, ID3D10GeometryShader **ppGS) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetPixelShader( UINT ShaderIndex, ID3D10PixelShader **ppPS) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputSignatureElementDesc( UINT ShaderIndex, UINT Element, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputSignatureElementDesc( UINT ShaderIndex, UINT Element, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
};





typedef struct ID3D10EffectBlendVariable ID3D10EffectBlendVariable;
typedef struct ID3D10EffectBlendVariable *LPD3D10EFFECTBLENDVARIABLE;


extern "C" const GUID IID_ID3D10EffectBlendVariable;





struct __declspec(novtable) ID3D10EffectBlendVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetBlendState( UINT Index, ID3D10BlendState **ppBlendState) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_BLEND_DESC *pBlendDesc) = 0;
};





typedef struct ID3D10EffectDepthStencilVariable ID3D10EffectDepthStencilVariable;
typedef struct ID3D10EffectDepthStencilVariable *LPD3D10EFFECTDEPTHSTENCILVARIABLE;


extern "C" const GUID IID_ID3D10EffectDepthStencilVariable;





struct __declspec(novtable) ID3D10EffectDepthStencilVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDepthStencilState( UINT Index, ID3D10DepthStencilState **ppDepthStencilState) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_DEPTH_STENCIL_DESC *pDepthStencilDesc) = 0;
};





typedef struct ID3D10EffectRasterizerVariable ID3D10EffectRasterizerVariable;
typedef struct ID3D10EffectRasterizerVariable *LPD3D10EFFECTRASTERIZERVARIABLE;


extern "C" const GUID IID_ID3D10EffectRasterizerVariable;





struct __declspec(novtable) ID3D10EffectRasterizerVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetRasterizerState( UINT Index, ID3D10RasterizerState **ppRasterizerState) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_RASTERIZER_DESC *pRasterizerDesc) = 0;
};





typedef struct ID3D10EffectSamplerVariable ID3D10EffectSamplerVariable;
typedef struct ID3D10EffectSamplerVariable *LPD3D10EFFECTSAMPLERVARIABLE;


extern "C" const GUID IID_ID3D10EffectSamplerVariable;





struct __declspec(novtable) ID3D10EffectSamplerVariable : public ID3D10EffectVariable
{
    virtual __declspec(nothrow) ID3D10EffectType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetMemberBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetElement( UINT Index) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetParentConstantBuffer(void) = 0;

    virtual __declspec(nothrow) ID3D10EffectScalarVariable* __stdcall AsScalar(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectVectorVariable* __stdcall AsVector(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectMatrixVariable* __stdcall AsMatrix(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectStringVariable* __stdcall AsString(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderResourceVariable* __stdcall AsShaderResource(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRenderTargetViewVariable* __stdcall AsRenderTargetView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilViewVariable* __stdcall AsDepthStencilView(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall AsConstantBuffer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectShaderVariable* __stdcall AsShader(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectBlendVariable* __stdcall AsBlend(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectDepthStencilVariable* __stdcall AsDepthStencil(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectRasterizerVariable* __stdcall AsRasterizer(void) = 0;
    virtual __declspec(nothrow) ID3D10EffectSamplerVariable* __stdcall AsSampler(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall SetRawValue( void *pData, UINT Offset, UINT Count) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetRawValue( void *pData, UINT Offset, UINT Count) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetSampler( UINT Index, ID3D10SamplerState **ppSampler) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBackingStore( UINT Index, D3D10_SAMPLER_DESC *pSamplerDesc) = 0;
};
#line 1165 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef struct _D3D10_PASS_DESC
{
    LPCSTR Name;
    UINT Annotations;

    BYTE *pIAInputSignature;

    SIZE_T IAInputSignatureSize;

    UINT StencilRef;
    UINT SampleMask;
    FLOAT BlendFactor[4];
} D3D10_PASS_DESC;







typedef struct _D3D10_PASS_SHADER_DESC
{
    ID3D10EffectShaderVariable *pShaderVariable;
#line 1198 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
    UINT ShaderIndex;

} D3D10_PASS_SHADER_DESC;

typedef struct ID3D10EffectPass ID3D10EffectPass;
typedef struct ID3D10EffectPass *LPD3D10EFFECTPASS;


extern "C" const GUID IID_ID3D10EffectPass;





struct __declspec(novtable) ID3D10EffectPass
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_PASS_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetVertexShaderDesc( D3D10_PASS_SHADER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetGeometryShaderDesc( D3D10_PASS_SHADER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetPixelShaderDesc( D3D10_PASS_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall Apply( UINT Flags) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall ComputeStateBlockMask( D3D10_STATE_BLOCK_MASK *pStateBlockMask) = 0;
};
#line 1239 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef struct _D3D10_TECHNIQUE_DESC
{
    LPCSTR Name;
    UINT Passes;
    UINT Annotations;
} D3D10_TECHNIQUE_DESC;

typedef struct ID3D10EffectTechnique ID3D10EffectTechnique;
typedef struct ID3D10EffectTechnique *LPD3D10EFFECTTECHNIQUE;


extern "C" const GUID IID_ID3D10EffectTechnique;





struct __declspec(novtable) ID3D10EffectTechnique
{
    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_TECHNIQUE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetAnnotationByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectPass* __stdcall GetPassByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectPass* __stdcall GetPassByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall ComputeStateBlockMask( D3D10_STATE_BLOCK_MASK *pStateBlockMask) = 0;
};
#line 1280 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
typedef struct _D3D10_EFFECT_DESC
{

    BOOL IsChildEffect;


    UINT ConstantBuffers;

    UINT SharedConstantBuffers;


    UINT GlobalVariables;

    UINT SharedGlobalVariables;


    UINT Techniques;

} D3D10_EFFECT_DESC;

typedef struct ID3D10Effect ID3D10Effect;
typedef struct ID3D10Effect *LPD3D10EFFECT;


extern "C" const GUID IID_ID3D10Effect;





struct __declspec(novtable) ID3D10Effect : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) BOOL __stdcall IsValid(void) = 0;
    virtual __declspec(nothrow) BOOL __stdcall IsPool(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall GetDevice( ID3D10Device** ppDevice) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_EFFECT_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetVariableByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) ID3D10EffectVariable* __stdcall GetVariableBySemantic( LPCSTR Semantic) = 0;

    virtual __declspec(nothrow) ID3D10EffectTechnique* __stdcall GetTechniqueByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10EffectTechnique* __stdcall GetTechniqueByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall Optimize(void) = 0;
    virtual __declspec(nothrow) BOOL __stdcall IsOptimized(void) = 0;

};





typedef struct ID3D10EffectPool ID3D10EffectPool;
typedef struct ID3D10EffectPool *LPD3D10EFFECTPOOL;


extern "C" const GUID IID_ID3D10EffectPool;





struct __declspec(novtable) ID3D10EffectPool : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) ID3D10Effect* __stdcall AsEffect(void) = 0;


};






extern "C" {
#line 1422 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
HRESULT __stdcall D3D10CompileEffectFromMemory(void *pData, SIZE_T DataLength, LPCSTR pSrcFileName, const D3D10_SHADER_MACRO *pDefines,
    ID3D10Include *pInclude, UINT HLSLFlags, UINT FXFlags,
    ID3D10Blob **ppCompiledEffect, ID3D10Blob **ppErrors);

HRESULT __stdcall D3D10CreateEffectFromMemory(void *pData, SIZE_T DataLength, UINT FXFlags, ID3D10Device *pDevice,
    ID3D10EffectPool *pEffectPool, ID3D10Effect **ppEffect);

HRESULT __stdcall D3D10CreateEffectPoolFromMemory(void *pData, SIZE_T DataLength, UINT FXFlags, ID3D10Device *pDevice,
    ID3D10EffectPool **ppEffectPool);
#line 1447 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10effect.h"
HRESULT __stdcall D3D10DisassembleEffect(ID3D10Effect *pEffect, BOOL EnableColorCode, ID3D10Blob **ppDisassembly);


}
#line 6683 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10.h"

extern "C" const GUID IID_ID3D10DeviceChild;
extern "C" const GUID IID_ID3D10DepthStencilState;
extern "C" const GUID IID_ID3D10BlendState;
extern "C" const GUID IID_ID3D10RasterizerState;
extern "C" const GUID IID_ID3D10Resource;
extern "C" const GUID IID_ID3D10Buffer;
extern "C" const GUID IID_ID3D10Texture1D;
extern "C" const GUID IID_ID3D10Texture2D;
extern "C" const GUID IID_ID3D10Texture3D;
extern "C" const GUID IID_ID3D10View;
extern "C" const GUID IID_ID3D10ShaderResourceView;
extern "C" const GUID IID_ID3D10RenderTargetView;
extern "C" const GUID IID_ID3D10DepthStencilView;
extern "C" const GUID IID_ID3D10VertexShader;
extern "C" const GUID IID_ID3D10GeometryShader;
extern "C" const GUID IID_ID3D10PixelShader;
extern "C" const GUID IID_ID3D10InputLayout;
extern "C" const GUID IID_ID3D10SamplerState;
extern "C" const GUID IID_ID3D10Asynchronous;
extern "C" const GUID IID_ID3D10Query;
extern "C" const GUID IID_ID3D10Predicate;
extern "C" const GUID IID_ID3D10Counter;
extern "C" const GUID IID_ID3D10Device;
extern "C" const GUID IID_ID3D10Multithread;


extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_0000_0024_v0_0_s_ifspec;






}
#line 120 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"


typedef
enum D3D10_FEATURE_LEVEL1
    { D3D10_FEATURE_LEVEL_10_0 = 0xa000,
 D3D10_FEATURE_LEVEL_10_1 = 0xa100,
 D3D10_FEATURE_LEVEL_9_1 = 0x9100,
 D3D10_FEATURE_LEVEL_9_2 = 0x9200,
 D3D10_FEATURE_LEVEL_9_3 = 0x9300
    } D3D10_FEATURE_LEVEL1;

typedef struct D3D10_RENDER_TARGET_BLEND_DESC1
    {
    BOOL BlendEnable;
    D3D10_BLEND SrcBlend;
    D3D10_BLEND DestBlend;
    D3D10_BLEND_OP BlendOp;
    D3D10_BLEND SrcBlendAlpha;
    D3D10_BLEND DestBlendAlpha;
    D3D10_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask;
    } D3D10_RENDER_TARGET_BLEND_DESC1;

typedef struct D3D10_BLEND_DESC1
    {
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D10_RENDER_TARGET_BLEND_DESC1 RenderTarget[ 8 ];
    } D3D10_BLEND_DESC1;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0000_v0_0_s_ifspec;
#line 162 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
extern "C" const IID IID_ID3D10BlendState1;



    struct __declspec(uuid("EDAD8D99-8A35-4d6d-8566-2EA276CDE161")) __declspec(novtable)
    ID3D10BlendState1 : public ID3D10BlendState
    {
    public:
        virtual void __stdcall GetDesc1(

                   D3D10_BLEND_DESC1 *pDesc) = 0;

    };
#line 291 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
typedef struct D3D10_TEXCUBE_ARRAY_SRV1
    {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
    } D3D10_TEXCUBE_ARRAY_SRV1;

typedef D3D_SRV_DIMENSION D3D10_SRV_DIMENSION1;

typedef struct D3D10_SHADER_RESOURCE_VIEW_DESC1
    {
    DXGI_FORMAT Format;
    D3D10_SRV_DIMENSION1 ViewDimension;
    union
        {
        D3D10_BUFFER_SRV Buffer;
        D3D10_TEX1D_SRV Texture1D;
        D3D10_TEX1D_ARRAY_SRV Texture1DArray;
        D3D10_TEX2D_SRV Texture2D;
        D3D10_TEX2D_ARRAY_SRV Texture2DArray;
        D3D10_TEX2DMS_SRV Texture2DMS;
        D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D10_TEX3D_SRV Texture3D;
        D3D10_TEXCUBE_SRV TextureCube;
        D3D10_TEXCUBE_ARRAY_SRV1 TextureCubeArray;
        } ;
    } D3D10_SHADER_RESOURCE_VIEW_DESC1;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0001_v0_0_s_ifspec;
#line 332 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
extern "C" const IID IID_ID3D10ShaderResourceView1;



    struct __declspec(uuid("9B7E4C87-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10ShaderResourceView1 : public ID3D10ShaderResourceView
    {
    public:
        virtual void __stdcall GetDesc1(

                   D3D10_SHADER_RESOURCE_VIEW_DESC1 *pDesc) = 0;

    };
#line 470 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
typedef
enum D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    { D3D10_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
 D3D10_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe
    } D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS;



extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0002_v0_0_s_ifspec;
#line 488 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
extern "C" const IID IID_ID3D10Device1;



    struct __declspec(uuid("9B7E4C8F-342C-4106-A19F-4F2704F689F0")) __declspec(novtable)
    ID3D10Device1 : public ID3D10Device
    {
    public:
        virtual HRESULT __stdcall CreateShaderResourceView1(

                  ID3D10Resource *pResource,

                      const D3D10_SHADER_RESOURCE_VIEW_DESC1 *pDesc,

                       ID3D10ShaderResourceView1 **ppSRView) = 0;

        virtual HRESULT __stdcall CreateBlendState1(

                  const D3D10_BLEND_DESC1 *pBlendStateDesc,

                       ID3D10BlendState1 **ppBlendState) = 0;

        virtual D3D10_FEATURE_LEVEL1 __stdcall GetFeatureLevel( void) = 0;

    };
#line 1657 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1shader.h"
#line 19 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1shader.h"
typedef enum _D3D10_SHADER_DEBUG_REGTYPE
{
    D3D10_SHADER_DEBUG_REG_INPUT,
    D3D10_SHADER_DEBUG_REG_OUTPUT,
    D3D10_SHADER_DEBUG_REG_CBUFFER,
    D3D10_SHADER_DEBUG_REG_TBUFFER,
    D3D10_SHADER_DEBUG_REG_TEMP,
    D3D10_SHADER_DEBUG_REG_TEMPARRAY,
    D3D10_SHADER_DEBUG_REG_TEXTURE,
    D3D10_SHADER_DEBUG_REG_SAMPLER,
    D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER,
    D3D10_SHADER_DEBUG_REG_LITERAL,
    D3D10_SHADER_DEBUG_REG_UNUSED,
    D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS,
    D3D11_SHADER_DEBUG_REG_UAV,
    D3D10_SHADER_DEBUG_REG_FORCE_DWORD = 0x7fffffff,
} D3D10_SHADER_DEBUG_REGTYPE;

typedef enum _D3D10_SHADER_DEBUG_SCOPETYPE
{
    D3D10_SHADER_DEBUG_SCOPE_GLOBAL,
    D3D10_SHADER_DEBUG_SCOPE_BLOCK,
    D3D10_SHADER_DEBUG_SCOPE_FORLOOP,
    D3D10_SHADER_DEBUG_SCOPE_STRUCT,
    D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS,
    D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK,
    D3D10_SHADER_DEBUG_SCOPE_NAMESPACE,
    D3D10_SHADER_DEBUG_SCOPE_ANNOTATION,
    D3D10_SHADER_DEBUG_SCOPE_FORCE_DWORD = 0x7fffffff,
} D3D10_SHADER_DEBUG_SCOPETYPE;

typedef enum _D3D10_SHADER_DEBUG_VARTYPE
{
    D3D10_SHADER_DEBUG_VAR_VARIABLE,
    D3D10_SHADER_DEBUG_VAR_FUNCTION,
    D3D10_SHADER_DEBUG_VAR_FORCE_DWORD = 0x7fffffff,
} D3D10_SHADER_DEBUG_VARTYPE;





typedef struct _D3D10_SHADER_DEBUG_TOKEN_INFO
{
    UINT File;
    UINT Line;
    UINT Column;

    UINT TokenLength;
    UINT TokenId;
} D3D10_SHADER_DEBUG_TOKEN_INFO;


typedef struct _D3D10_SHADER_DEBUG_VAR_INFO
{

    UINT TokenId;
    D3D10_SHADER_VARIABLE_TYPE Type;

    UINT Register;
    UINT Component;

    UINT ScopeVar;

    UINT ScopeVarOffset;
} D3D10_SHADER_DEBUG_VAR_INFO;

typedef struct _D3D10_SHADER_DEBUG_INPUT_INFO
{

    UINT Var;

    D3D10_SHADER_DEBUG_REGTYPE InitialRegisterSet;


    UINT InitialBank;

    UINT InitialRegister;

    UINT InitialComponent;

    UINT InitialValue;
} D3D10_SHADER_DEBUG_INPUT_INFO;

typedef struct _D3D10_SHADER_DEBUG_SCOPEVAR_INFO
{

    UINT TokenId;

    D3D10_SHADER_DEBUG_VARTYPE VarType;
    D3D10_SHADER_VARIABLE_CLASS Class;
    UINT Rows;
    UINT Columns;







    UINT StructMemberScope;


    UINT uArrayIndices;


    UINT ArrayElements;


    UINT ArrayStrides;

    UINT uVariables;

    UINT uFirstVariable;
} D3D10_SHADER_DEBUG_SCOPEVAR_INFO;


typedef struct _D3D10_SHADER_DEBUG_SCOPE_INFO
{
    D3D10_SHADER_DEBUG_SCOPETYPE ScopeType;
    UINT Name;
    UINT uNameLen;
    UINT uVariables;
    UINT VariableData;
} D3D10_SHADER_DEBUG_SCOPE_INFO;


typedef struct _D3D10_SHADER_DEBUG_OUTPUTVAR
{

    UINT Var;

    UINT uValueMin, uValueMax;
    INT iValueMin, iValueMax;
    FLOAT fValueMin, fValueMax;

    BOOL bNaNPossible, bInfPossible;
} D3D10_SHADER_DEBUG_OUTPUTVAR;

typedef struct _D3D10_SHADER_DEBUG_OUTPUTREG_INFO
{

    D3D10_SHADER_DEBUG_REGTYPE OutputRegisterSet;

    UINT OutputReg;

    UINT TempArrayReg;

    UINT OutputComponents[4];
    D3D10_SHADER_DEBUG_OUTPUTVAR OutputVars[4];





    UINT IndexReg;
    UINT IndexComp;
} D3D10_SHADER_DEBUG_OUTPUTREG_INFO;


typedef struct _D3D10_SHADER_DEBUG_INST_INFO
{
    UINT Id;
    UINT Opcode;


    UINT uOutputs;


    D3D10_SHADER_DEBUG_OUTPUTREG_INFO pOutputs[2];


    UINT TokenId;


    UINT NestingLevel;



    UINT Scopes;
    UINT ScopeInfo;



    UINT AccessedVars;
    UINT AccessedVarsInfo;
} D3D10_SHADER_DEBUG_INST_INFO;

typedef struct _D3D10_SHADER_DEBUG_FILE_INFO
{
    UINT FileName;
    UINT FileNameLen;
    UINT FileData;
    UINT FileLen;
} D3D10_SHADER_DEBUG_FILE_INFO;

typedef struct _D3D10_SHADER_DEBUG_INFO
{
    UINT Size;
    UINT Creator;
    UINT EntrypointName;
    UINT ShaderTarget;
    UINT CompileFlags;
    UINT Files;
    UINT FileInfo;
    UINT Instructions;
    UINT InstructionInfo;
    UINT Variables;
    UINT VariableInfo;
    UINT InputVariables;
    UINT InputVariableInfo;
    UINT Tokens;
    UINT TokenInfo;
    UINT Scopes;
    UINT ScopeInfo;
    UINT ScopeVariables;
    UINT ScopeVariableInfo;
    UINT UintOffset;
    UINT StringOffset;
} D3D10_SHADER_DEBUG_INFO;
#line 248 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1shader.h"
typedef struct ID3D10ShaderReflection1 ID3D10ShaderReflection1;
typedef struct ID3D10ShaderReflection1 *LPD3D10SHADERREFLECTION1;


extern "C" const GUID IID_ID3D10ShaderReflection1;





struct __declspec(novtable) ID3D10ShaderReflection1 : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D10_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D10ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDesc( UINT ResourceIndex, D3D10_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputParameterDesc( UINT ParameterIndex, D3D10_SIGNATURE_PARAMETER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D10ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDescByName( LPCSTR Name, D3D10_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetMovInstructionCount( UINT* pCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMovcInstructionCount( UINT* pCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetConversionInstructionCount( UINT* pCount) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetBitwiseInstructionCount( UINT* pCount) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetGSInputPrimitive( D3D10_PRIMITIVE* pPrim) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall IsLevel9Shader( BOOL* pbLevel9Shader) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall IsSampleFrequencyShader( BOOL* pbSampleFrequency) = 0;
};






extern "C" {



}
#line 1657 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
#line 1692 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
typedef HRESULT (__stdcall* PFN_D3D10_CREATE_DEVICE1)(IDXGIAdapter *,
    D3D10_DRIVER_TYPE, HMODULE, UINT, D3D10_FEATURE_LEVEL1, UINT, ID3D10Device1**);

HRESULT __stdcall D3D10CreateDevice1(
    IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    D3D10_FEATURE_LEVEL1 HardwareLevel,
    UINT SDKVersion,
    ID3D10Device1 **ppDevice);
#line 1744 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d10_1.h"
typedef HRESULT (__stdcall* PFN_D3D10_CREATE_DEVICE_AND_SWAP_CHAIN1)(IDXGIAdapter *,
    D3D10_DRIVER_TYPE, HMODULE, UINT, D3D10_FEATURE_LEVEL1, UINT, DXGI_SWAP_CHAIN_DESC *, IDXGISwapChain **, ID3D10Device1 **);

HRESULT __stdcall D3D10CreateDeviceAndSwapChain1(
    IDXGIAdapter *pAdapter,
    D3D10_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
    D3D10_FEATURE_LEVEL1 HardwareLevel,
    UINT SDKVersion,
    DXGI_SWAP_CHAIN_DESC *pSwapChainDesc,
    IDXGISwapChain **ppSwapChain,
    ID3D10Device1 **ppDevice);
extern "C" const GUID IID_ID3D10BlendState1;
extern "C" const GUID IID_ID3D10ShaderResourceView1;
extern "C" const GUID IID_ID3D10Device1;


extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d10_1_0000_0003_v0_0_s_ifspec;






}
#line 10041 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"


#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
#line 17 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
#pragma warning(disable: 4049)
#line 53 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
typedef struct ID3D11Debug ID3D11Debug;





typedef struct ID3D11SwitchToRef ID3D11SwitchToRef;





typedef struct ID3D11InfoQueue ID3D11InfoQueue;
#line 75 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
extern "C"{
#line 90 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
typedef
enum D3D11_RLDO_FLAGS
    { D3D11_RLDO_SUMMARY = 0x1,
 D3D11_RLDO_DETAIL = 0x2
    } D3D11_RLDO_FLAGS;


}
inline D3D11_RLDO_FLAGS operator~( D3D11_RLDO_FLAGS a )
{ return D3D11_RLDO_FLAGS( ~UINT( a ) ); }
inline D3D11_RLDO_FLAGS operator&( D3D11_RLDO_FLAGS a, D3D11_RLDO_FLAGS b )
{ return D3D11_RLDO_FLAGS( UINT( a ) & UINT( b ) ); }
inline D3D11_RLDO_FLAGS operator|( D3D11_RLDO_FLAGS a, D3D11_RLDO_FLAGS b )
{ return D3D11_RLDO_FLAGS( UINT( a ) | UINT( b ) ); }
inline D3D11_RLDO_FLAGS operator^( D3D11_RLDO_FLAGS a, D3D11_RLDO_FLAGS b )
{ return D3D11_RLDO_FLAGS( UINT( a ) ^ UINT( b ) ); }
inline D3D11_RLDO_FLAGS& operator&=( D3D11_RLDO_FLAGS& a, D3D11_RLDO_FLAGS b )
{ a = a & b; return a; }
inline D3D11_RLDO_FLAGS& operator|=( D3D11_RLDO_FLAGS& a, D3D11_RLDO_FLAGS b )
{ a = a | b; return a; }
inline D3D11_RLDO_FLAGS& operator^=( D3D11_RLDO_FLAGS& a, D3D11_RLDO_FLAGS b )
{ a = a ^ b; return a; }
extern "C"{



extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0000_v0_0_s_ifspec;
#line 126 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11Debug;



    struct __declspec(uuid("79cf2233-7536-4948-9d36-1e4692dc5760")) __declspec(novtable)
    ID3D11Debug : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetFeatureMask(
            UINT Mask) = 0;

        virtual UINT __stdcall GetFeatureMask( void) = 0;

        virtual HRESULT __stdcall SetPresentPerRenderOpDelay(
            UINT Milliseconds) = 0;

        virtual UINT __stdcall GetPresentPerRenderOpDelay( void) = 0;

        virtual HRESULT __stdcall SetSwapChain(

                      IDXGISwapChain *pSwapChain) = 0;

        virtual HRESULT __stdcall GetSwapChain(

                   IDXGISwapChain **ppSwapChain) = 0;

        virtual HRESULT __stdcall ValidateContext(

                  ID3D11DeviceContext *pContext) = 0;

        virtual HRESULT __stdcall ReportLiveDeviceObjects(
            D3D11_RLDO_FLAGS Flags) = 0;

        virtual HRESULT __stdcall ValidateContextForDispatch(

                  ID3D11DeviceContext *pContext) = 0;

    };
#line 289 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11SwitchToRef;



    struct __declspec(uuid("1ef337e3-58e7-4f83-a692-db221f5ed47e")) __declspec(novtable)
    ID3D11SwitchToRef : public IUnknown
    {
    public:
        virtual BOOL __stdcall SetUseRef(
            BOOL UseRef) = 0;

        virtual BOOL __stdcall GetUseRef( void) = 0;

    };
#line 372 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
typedef
enum D3D11_MESSAGE_CATEGORY
    { D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
 D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = ( D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1 ) ,
 D3D11_MESSAGE_CATEGORY_INITIALIZATION = ( D3D11_MESSAGE_CATEGORY_MISCELLANEOUS + 1 ) ,
 D3D11_MESSAGE_CATEGORY_CLEANUP = ( D3D11_MESSAGE_CATEGORY_INITIALIZATION + 1 ) ,
 D3D11_MESSAGE_CATEGORY_COMPILATION = ( D3D11_MESSAGE_CATEGORY_CLEANUP + 1 ) ,
 D3D11_MESSAGE_CATEGORY_STATE_CREATION = ( D3D11_MESSAGE_CATEGORY_COMPILATION + 1 ) ,
 D3D11_MESSAGE_CATEGORY_STATE_SETTING = ( D3D11_MESSAGE_CATEGORY_STATE_CREATION + 1 ) ,
 D3D11_MESSAGE_CATEGORY_STATE_GETTING = ( D3D11_MESSAGE_CATEGORY_STATE_SETTING + 1 ) ,
 D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = ( D3D11_MESSAGE_CATEGORY_STATE_GETTING + 1 ) ,
 D3D11_MESSAGE_CATEGORY_EXECUTION = ( D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1 )
    } D3D11_MESSAGE_CATEGORY;

typedef
enum D3D11_MESSAGE_SEVERITY
    { D3D11_MESSAGE_SEVERITY_CORRUPTION = 0,
 D3D11_MESSAGE_SEVERITY_ERROR = ( D3D11_MESSAGE_SEVERITY_CORRUPTION + 1 ) ,
 D3D11_MESSAGE_SEVERITY_WARNING = ( D3D11_MESSAGE_SEVERITY_ERROR + 1 ) ,
 D3D11_MESSAGE_SEVERITY_INFO = ( D3D11_MESSAGE_SEVERITY_WARNING + 1 )
    } D3D11_MESSAGE_SEVERITY;

typedef
enum D3D11_MESSAGE_ID
    { D3D11_MESSAGE_ID_UNKNOWN = 0,
 D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_UNKNOWN + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_THIS = ( D3D11_MESSAGE_ID_STRING_FROM_APPLICATION + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = ( D3D11_MESSAGE_ID_CORRUPTED_THIS + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 + 1 ) ,
 D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = ( D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 + 1 ) ,
 D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING + 1 ) ,
 D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = ( D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = ( D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA + 1 ) ,
 D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA + 1 ) ,
 D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN + 1 ) ,
 D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = ( D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX + 1 ) ,
 D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = ( D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED + 1 ) ,
 D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE + 1 ) ,
 D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = ( D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = ( D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT + 1 ) ,
 D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR + 1 ) ,
 D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = ( D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH + 1 ) ,
 D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = ( D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX + 1 ) ,
 D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE + 1 ) ,
 D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE + 1 ) ,
 D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = ( D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE + 1 ) ,
 D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE + 1 ) ,
 D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
 D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = ( D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE + 1 ) ,
 D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = ( D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = ( D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED + 1 ) ,
 D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = ( D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED + 1 ) ,
 D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = ( D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_REF_THREADING_MODE = ( D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE + 1 ) ,
 D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = ( D3D11_MESSAGE_ID_REF_THREADING_MODE + 1 ) ,
 D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = ( D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION + 1 ) ,
 D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = ( D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION + 1 ) ,
 D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = ( D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION + 1 ) ,
 D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = ( D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE + 1 ) ,
 D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = ( D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER + 1 ) ,
 D3D11_MESSAGE_ID_REF_INFO = ( D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_REF_INFO + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = ( D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC + 1 ) ,
 D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = ( D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = ( D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = ( D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = ( D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = ( D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC + 1 ) ,
 D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = ( D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER + 1 ) ,
 D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = ( D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = ( D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE + 1 ) ,
 D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = ( D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = ( D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = ( D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE + 1 ) ,
 D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = ( D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = ( D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = ( D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = ( D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE + 1 ) ,
 D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = ( D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = ( D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT + 1 ) ,
 D3D11_MESSAGE_ID_D3D10_MESSAGES_END = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = ( D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY + 1 ) ,
 D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE + 1 ) ,
 D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = ( D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = ( D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE + 1 ) ,
 D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS + 1 ) ,
 D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = ( D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS + 1 ) ,
 D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = ( D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY + 1 ) ,
 D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK + 1 ) ,
 D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = ( D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = ( D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE + 1 ) ,
 D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = ( D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = ( D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = ( D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = ( D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = ( D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = ( D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES + 1 ) ,
 D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED + 1 ) ,
 D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = ( D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = ( D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE + 1 ) ,
 D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = ( D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = ( D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 + 1 ) ,
 D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = ( D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = ( D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = ( D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = ( D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = ( D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR + 1 ) ,
 D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = ( D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA + 1 ) ,
 D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP + 1 ) ,
 D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = ( D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = ( D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT + 1 ) ,
 D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
 D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = ( D3D11_MESSAGE_ID_D3D11_MESSAGES_START + 1 ) ,
 D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = ( D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = ( D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT + 1 ) ,
 D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = ( D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES + 1 ) ,
 D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL + 1 ) ,
 D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = ( D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = ( D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = ( D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = ( D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = ( D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = ( D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD + 1 ) ,
 D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = ( D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_CONTEXT = ( D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_CONTEXT = ( D3D11_MESSAGE_ID_CREATE_CONTEXT + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_CONTEXT = ( D3D11_MESSAGE_ID_LIVE_CONTEXT + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_BUFFER = ( D3D11_MESSAGE_ID_DESTROY_CONTEXT + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_BUFFER = ( D3D11_MESSAGE_ID_CREATE_BUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_BUFFER = ( D3D11_MESSAGE_ID_LIVE_BUFFER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_TEXTURE1D = ( D3D11_MESSAGE_ID_DESTROY_BUFFER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_TEXTURE1D = ( D3D11_MESSAGE_ID_CREATE_TEXTURE1D + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE1D + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_TEXTURE2D = ( D3D11_MESSAGE_ID_DESTROY_TEXTURE1D + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_TEXTURE2D = ( D3D11_MESSAGE_ID_CREATE_TEXTURE2D + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE2D + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_TEXTURE3D = ( D3D11_MESSAGE_ID_DESTROY_TEXTURE2D + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_TEXTURE3D = ( D3D11_MESSAGE_ID_CREATE_TEXTURE3D + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = ( D3D11_MESSAGE_ID_LIVE_TEXTURE3D + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = ( D3D11_MESSAGE_ID_DESTROY_TEXTURE3D + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = ( D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = ( D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = ( D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = ( D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = ( D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = ( D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = ( D3D11_MESSAGE_ID_CREATE_VERTEXSHADER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = ( D3D11_MESSAGE_ID_LIVE_VERTEXSHADER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_HULLSHADER = ( D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_HULLSHADER = ( D3D11_MESSAGE_ID_CREATE_HULLSHADER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_HULLSHADER = ( D3D11_MESSAGE_ID_LIVE_HULLSHADER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = ( D3D11_MESSAGE_ID_DESTROY_HULLSHADER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = ( D3D11_MESSAGE_ID_CREATE_DOMAINSHADER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = ( D3D11_MESSAGE_ID_LIVE_DOMAINSHADER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = ( D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = ( D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = ( D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_PIXELSHADER = ( D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_PIXELSHADER = ( D3D11_MESSAGE_ID_CREATE_PIXELSHADER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = ( D3D11_MESSAGE_ID_LIVE_PIXELSHADER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = ( D3D11_MESSAGE_ID_DESTROY_PIXELSHADER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = ( D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = ( D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_SAMPLER = ( D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_SAMPLER = ( D3D11_MESSAGE_ID_CREATE_SAMPLER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_SAMPLER = ( D3D11_MESSAGE_ID_LIVE_SAMPLER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_BLENDSTATE = ( D3D11_MESSAGE_ID_DESTROY_SAMPLER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_BLENDSTATE = ( D3D11_MESSAGE_ID_CREATE_BLENDSTATE + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = ( D3D11_MESSAGE_ID_LIVE_BLENDSTATE + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = ( D3D11_MESSAGE_ID_DESTROY_BLENDSTATE + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = ( D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = ( D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = ( D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = ( D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = ( D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_QUERY = ( D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_QUERY = ( D3D11_MESSAGE_ID_CREATE_QUERY + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_QUERY = ( D3D11_MESSAGE_ID_LIVE_QUERY + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_PREDICATE = ( D3D11_MESSAGE_ID_DESTROY_QUERY + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_PREDICATE = ( D3D11_MESSAGE_ID_CREATE_PREDICATE + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_PREDICATE = ( D3D11_MESSAGE_ID_LIVE_PREDICATE + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_COUNTER = ( D3D11_MESSAGE_ID_DESTROY_PREDICATE + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_COUNTER = ( D3D11_MESSAGE_ID_CREATE_COUNTER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_COUNTER = ( D3D11_MESSAGE_ID_LIVE_COUNTER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_COMMANDLIST = ( D3D11_MESSAGE_ID_DESTROY_COUNTER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_COMMANDLIST = ( D3D11_MESSAGE_ID_CREATE_COMMANDLIST + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = ( D3D11_MESSAGE_ID_LIVE_COMMANDLIST + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = ( D3D11_MESSAGE_ID_DESTROY_COMMANDLIST + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = ( D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = ( D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = ( D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = ( D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_DEVICE = ( D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = ( D3D11_MESSAGE_ID_LIVE_DEVICE + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = ( D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = ( D3D11_MESSAGE_ID_CREATE_COMPUTESHADER + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = ( D3D11_MESSAGE_ID_LIVE_COMPUTESHADER + 1 ) ,
 D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = ( D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER + 1 ) ,
 D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = ( D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = ( D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = ( D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = ( D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = ( D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE + 1 ) ,
 D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE + 1 ) ,
 D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = ( D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = ( D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = ( D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS + 1 ) ,
 D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP + 1 ) ,
 D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = ( D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = ( D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY + 1 ) ,
 D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = ( D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = ( D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = ( D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT + 1 ) ,
 D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = ( D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE + 1 ) ,
 D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = ( D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT + 1 ) ,
 D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY + 1 ) ,
 D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = ( D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = ( D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = ( D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET + 1 ) ,
 D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET + 1 ) ,
 D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE + 1 ) ,
 D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = ( D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = ( D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET + 1 ) ,
 D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = ( D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS + 1 ) ,
 D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = ( D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT + 1 ) ,
 D3D11_MESSAGE_ID_REF_WARNING = ( D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED + 1 ) ,
 D3D11_MESSAGE_ID_D3D11_MESSAGES_END = ( D3D11_MESSAGE_ID_REF_WARNING + 1 )
    } D3D11_MESSAGE_ID;

typedef struct D3D11_MESSAGE
    {
    D3D11_MESSAGE_CATEGORY Category;
    D3D11_MESSAGE_SEVERITY Severity;
    D3D11_MESSAGE_ID ID;
    const char *pDescription;
    SIZE_T DescriptionByteLength;
    } D3D11_MESSAGE;

typedef struct D3D11_INFO_QUEUE_FILTER_DESC
    {
    UINT NumCategories;
    D3D11_MESSAGE_CATEGORY *pCategoryList;
    UINT NumSeverities;
    D3D11_MESSAGE_SEVERITY *pSeverityList;
    UINT NumIDs;
    D3D11_MESSAGE_ID *pIDList;
    } D3D11_INFO_QUEUE_FILTER_DESC;

typedef struct D3D11_INFO_QUEUE_FILTER
    {
    D3D11_INFO_QUEUE_FILTER_DESC AllowList;
    D3D11_INFO_QUEUE_FILTER_DESC DenyList;
    } D3D11_INFO_QUEUE_FILTER;




extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0002_v0_0_s_ifspec;
#line 1179 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
extern "C" const IID IID_ID3D11InfoQueue;



    struct __declspec(uuid("6543dbb6-1b48-42f5-ab82-e97ec74326f6")) __declspec(novtable)
    ID3D11InfoQueue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetMessageCountLimit(

                  UINT64 MessageCountLimit) = 0;

        virtual void __stdcall ClearStoredMessages( void) = 0;

        virtual HRESULT __stdcall GetMessageW(

                  UINT64 MessageIndex,

                                                   D3D11_MESSAGE *pMessage,

                     SIZE_T *pMessageByteLength) = 0;

        virtual UINT64 __stdcall GetNumMessagesAllowedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDeniedByStorageFilter( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessages( void) = 0;

        virtual UINT64 __stdcall GetNumStoredMessagesAllowedByRetrievalFilter( void) = 0;

        virtual UINT64 __stdcall GetNumMessagesDiscardedByMessageCountLimit( void) = 0;

        virtual UINT64 __stdcall GetMessageCountLimit( void) = 0;

        virtual HRESULT __stdcall AddStorageFilterEntries(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetStorageFilter(

                                                  D3D11_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfStorageFilter( void) = 0;

        virtual HRESULT __stdcall PushStorageFilter(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopStorageFilter( void) = 0;

        virtual UINT __stdcall GetStorageFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddRetrievalFilterEntries(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual HRESULT __stdcall GetRetrievalFilter(

                                                  D3D11_INFO_QUEUE_FILTER *pFilter,

                     SIZE_T *pFilterByteLength) = 0;

        virtual void __stdcall ClearRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushEmptyRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushCopyOfRetrievalFilter( void) = 0;

        virtual HRESULT __stdcall PushRetrievalFilter(

                  D3D11_INFO_QUEUE_FILTER *pFilter) = 0;

        virtual void __stdcall PopRetrievalFilter( void) = 0;

        virtual UINT __stdcall GetRetrievalFilterStackSize( void) = 0;

        virtual HRESULT __stdcall AddMessage(

                  D3D11_MESSAGE_CATEGORY Category,

                  D3D11_MESSAGE_SEVERITY Severity,

                  D3D11_MESSAGE_ID ID,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall AddApplicationMessage(

                  D3D11_MESSAGE_SEVERITY Severity,

                  LPCSTR pDescription) = 0;

        virtual HRESULT __stdcall SetBreakOnCategory(

                  D3D11_MESSAGE_CATEGORY Category,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnSeverity(

                  D3D11_MESSAGE_SEVERITY Severity,

                  BOOL bEnable) = 0;

        virtual HRESULT __stdcall SetBreakOnID(

                  D3D11_MESSAGE_ID ID,

                  BOOL bEnable) = 0;

        virtual BOOL __stdcall GetBreakOnCategory(

                  D3D11_MESSAGE_CATEGORY Category) = 0;

        virtual BOOL __stdcall GetBreakOnSeverity(

                  D3D11_MESSAGE_SEVERITY Severity) = 0;

        virtual BOOL __stdcall GetBreakOnID(

                  D3D11_MESSAGE_ID ID) = 0;

        virtual void __stdcall SetMuteDebugOutput(

                  BOOL bMute) = 0;

        virtual BOOL __stdcall GetMuteDebugOutput( void) = 0;

    };
#line 1651 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3d11sdklayers.h"
extern "C" const GUID IID_ID3D11Debug;
extern "C" const GUID IID_ID3D11SwitchToRef;
extern "C" const GUID IID_ID3D11InfoQueue;


extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11sdklayers_0000_0003_v0_0_s_ifspec;






}
#line 10043 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
#line 10089 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef HRESULT (__stdcall* PFN_D3D11_CREATE_DEVICE)( IDXGIAdapter*,
    D3D_DRIVER_TYPE, HMODULE, UINT,
                                     const D3D_FEATURE_LEVEL*,
    UINT FeatureLevels, UINT, ID3D11Device**,
              D3D_FEATURE_LEVEL*, ID3D11DeviceContext** );

HRESULT __stdcall D3D11CreateDevice(
             IDXGIAdapter* pAdapter,
    D3D_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
                                     const D3D_FEATURE_LEVEL* pFeatureLevels,
    UINT FeatureLevels,
    UINT SDKVersion,
              ID3D11Device** ppDevice,
              D3D_FEATURE_LEVEL* pFeatureLevel,
              ID3D11DeviceContext** ppImmediateContext );
#line 10160 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\D3D11.h"
typedef HRESULT (__stdcall* PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN)( IDXGIAdapter*,
    D3D_DRIVER_TYPE, HMODULE, UINT,
                                     const D3D_FEATURE_LEVEL*,
    UINT FeatureLevels, UINT, const DXGI_SWAP_CHAIN_DESC*,
              IDXGISwapChain**, ID3D11Device**,
              D3D_FEATURE_LEVEL*, ID3D11DeviceContext** );

HRESULT __stdcall D3D11CreateDeviceAndSwapChain(
             IDXGIAdapter* pAdapter,
    D3D_DRIVER_TYPE DriverType,
    HMODULE Software,
    UINT Flags,
                                     const D3D_FEATURE_LEVEL* pFeatureLevels,
    UINT FeatureLevels,
    UINT SDKVersion,
             const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,
              IDXGISwapChain** ppSwapChain,
              ID3D11Device** ppDevice,
              D3D_FEATURE_LEVEL* pFeatureLevel,
              ID3D11DeviceContext** ppImmediateContext );

extern "C" const GUID IID_ID3D11DeviceChild;
extern "C" const GUID IID_ID3D11DepthStencilState;
extern "C" const GUID IID_ID3D11BlendState;
extern "C" const GUID IID_ID3D11RasterizerState;
extern "C" const GUID IID_ID3D11Resource;
extern "C" const GUID IID_ID3D11Buffer;
extern "C" const GUID IID_ID3D11Texture1D;
extern "C" const GUID IID_ID3D11Texture2D;
extern "C" const GUID IID_ID3D11Texture3D;
extern "C" const GUID IID_ID3D11View;
extern "C" const GUID IID_ID3D11ShaderResourceView;
extern "C" const GUID IID_ID3D11RenderTargetView;
extern "C" const GUID IID_ID3D11DepthStencilView;
extern "C" const GUID IID_ID3D11UnorderedAccessView;
extern "C" const GUID IID_ID3D11VertexShader;
extern "C" const GUID IID_ID3D11HullShader;
extern "C" const GUID IID_ID3D11DomainShader;
extern "C" const GUID IID_ID3D11GeometryShader;
extern "C" const GUID IID_ID3D11PixelShader;
extern "C" const GUID IID_ID3D11ComputeShader;
extern "C" const GUID IID_ID3D11InputLayout;
extern "C" const GUID IID_ID3D11SamplerState;
extern "C" const GUID IID_ID3D11Asynchronous;
extern "C" const GUID IID_ID3D11Query;
extern "C" const GUID IID_ID3D11Predicate;
extern "C" const GUID IID_ID3D11Counter;
extern "C" const GUID IID_ID3D11ClassInstance;
extern "C" const GUID IID_ID3D11ClassLinkage;
extern "C" const GUID IID_ID3D11CommandList;
extern "C" const GUID IID_ID3D11DeviceContext;
extern "C" const GUID IID_ID3D11Device;


extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_d3d11_0000_0031_v0_0_s_ifspec;






}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 20 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtwrn.h"
#line 17 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtwrn.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 17 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtwrn.h"
#line 22 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
#line 38 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
extern "C" {
#line 117 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
                          __declspec(dllimport) unsigned int __cdecl _clearfp(void);
#pragma warning(push)
#pragma warning(disable: 4141)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) unsigned int __cdecl _controlfp( unsigned int _NewValue, unsigned int _Mask);
#pragma warning(pop)
 __declspec(dllimport) void __cdecl _set_controlfp( unsigned int _NewValue, unsigned int _Mask);
                          __declspec(dllimport) errno_t __cdecl _controlfp_s( unsigned int *_CurrentState, unsigned int _NewValue, unsigned int _Mask);
                          __declspec(dllimport) unsigned int __cdecl _statusfp(void);
                          __declspec(dllimport) void __cdecl _fpreset(void);


                          __declspec(dllimport) void __cdecl _statusfp2( unsigned int *_X86_status, unsigned int *_SSE2_status);
#line 202 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
                          __declspec(dllimport) unsigned int __cdecl _control87( unsigned int _NewValue, unsigned int _Mask);

                          __declspec(dllimport) int __cdecl __control87_2( unsigned int _NewValue, unsigned int _Mask,
                                            unsigned int* _X86_cw, unsigned int* _Sse2_cw);




               __declspec(dllimport) extern int * __cdecl __fpecode(void);
#line 241 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);
#line 274 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
                          __declspec(dllimport) void __cdecl fpreset(void);
#line 339 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\float.h"
}
#line 20 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 50 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 50 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11core.h"
#line 10 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11core.h"
#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 10 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11core.h"
#line 28 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11core.h"
extern "C" {
#line 48 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11core.h"
HRESULT __stdcall D3DX11CheckVersion(UINT D3DSdkVersion, UINT D3DX11SdkVersion);


}
#line 63 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11core.h"
struct __declspec(novtable) ID3DX11DataLoader
{
 virtual __declspec(nothrow) HRESULT __stdcall Load(void) = 0;
 virtual __declspec(nothrow) HRESULT __stdcall Decompress( void **ppData, SIZE_T *pcBytes) = 0;
 virtual __declspec(nothrow) HRESULT __stdcall Destroy(void) = 0;
};




struct __declspec(novtable) ID3DX11DataProcessor
{
 virtual __declspec(nothrow) HRESULT __stdcall Process( void *pData, SIZE_T cBytes) = 0;
 virtual __declspec(nothrow) HRESULT __stdcall CreateDeviceObject( void **ppDataObject) = 0;
 virtual __declspec(nothrow) HRESULT __stdcall Destroy(void) = 0;
};


extern "C" const GUID IID_ID3DX11ThreadPump;





struct __declspec(novtable) ID3DX11ThreadPump : public IUnknown
{

    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid, LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;


    virtual __declspec(nothrow) HRESULT __stdcall AddWorkItem( ID3DX11DataLoader *pDataLoader, ID3DX11DataProcessor *pDataProcessor, HRESULT *pHResult, void **ppDeviceObject) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetWorkItemCount(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall WaitForAllItems(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall ProcessDeviceWorkItems( UINT iWorkItemCount);

    virtual __declspec(nothrow) HRESULT __stdcall PurgeAllItems(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetQueueStatus( UINT *pIoQueue, UINT *pProcessQueue, UINT *pDeviceQueue) = 0;

};


extern "C" {


HRESULT __stdcall D3DX11CreateThreadPump(UINT cIoThreads, UINT cProcThreads, ID3DX11ThreadPump **ppThreadPump);

HRESULT __stdcall D3DX11UnsetAllDeviceObjects(ID3D11DeviceContext *pContext);


}
#line 51 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
#line 10 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 10 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
#line 65 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef enum D3DX11_FILTER_FLAG
{
    D3DX11_FILTER_NONE = (1 << 0),
    D3DX11_FILTER_POINT = (2 << 0),
    D3DX11_FILTER_LINEAR = (3 << 0),
    D3DX11_FILTER_TRIANGLE = (4 << 0),
    D3DX11_FILTER_BOX = (5 << 0),

    D3DX11_FILTER_MIRROR_U = (1 << 16),
    D3DX11_FILTER_MIRROR_V = (2 << 16),
    D3DX11_FILTER_MIRROR_W = (4 << 16),
    D3DX11_FILTER_MIRROR = (7 << 16),

    D3DX11_FILTER_DITHER = (1 << 19),
    D3DX11_FILTER_DITHER_DIFFUSION= (2 << 19),

    D3DX11_FILTER_SRGB_IN = (1 << 21),
    D3DX11_FILTER_SRGB_OUT = (2 << 21),
    D3DX11_FILTER_SRGB = (3 << 21),
} D3DX11_FILTER_FLAG;
#line 109 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef enum D3DX11_NORMALMAP_FLAG
{
    D3DX11_NORMALMAP_MIRROR_U = (1 << 16),
    D3DX11_NORMALMAP_MIRROR_V = (2 << 16),
    D3DX11_NORMALMAP_MIRROR = (3 << 16),
    D3DX11_NORMALMAP_INVERTSIGN = (8 << 16),
    D3DX11_NORMALMAP_COMPUTE_OCCLUSION = (16 << 16),
} D3DX11_NORMALMAP_FLAG;
#line 138 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef enum D3DX11_CHANNEL_FLAG
{
    D3DX11_CHANNEL_RED = (1 << 0),
    D3DX11_CHANNEL_BLUE = (1 << 1),
    D3DX11_CHANNEL_GREEN = (1 << 2),
    D3DX11_CHANNEL_ALPHA = (1 << 3),
    D3DX11_CHANNEL_LUMINANCE = (1 << 4),
} D3DX11_CHANNEL_FLAG;
#line 156 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef enum D3DX11_IMAGE_FILE_FORMAT
{
    D3DX11_IFF_BMP = 0,
    D3DX11_IFF_JPG = 1,
    D3DX11_IFF_PNG = 3,
    D3DX11_IFF_DDS = 4,
    D3DX11_IFF_TIFF = 10,
    D3DX11_IFF_GIF = 11,
    D3DX11_IFF_WMP = 12,
    D3DX11_IFF_FORCE_DWORD = 0x7fffffff

} D3DX11_IMAGE_FILE_FORMAT;
#line 177 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef enum D3DX11_SAVE_TEXTURE_FLAG
{
    D3DX11_STF_USEINPUTBLOB = 0x0001,
} D3DX11_SAVE_TEXTURE_FLAG;
#line 210 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef struct D3DX11_IMAGE_INFO
{
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT ArraySize;
    UINT MipLevels;
    UINT MiscFlags;
    DXGI_FORMAT Format;
    D3D11_RESOURCE_DIMENSION ResourceDimension;
    D3DX11_IMAGE_FILE_FORMAT ImageFileFormat;
} D3DX11_IMAGE_INFO;






extern "C" {
#line 275 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef struct D3DX11_IMAGE_LOAD_INFO
{
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT FirstMipLevel;
    UINT MipLevels;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CpuAccessFlags;
    UINT MiscFlags;
    DXGI_FORMAT Format;
    UINT Filter;
    UINT MipFilter;
    D3DX11_IMAGE_INFO* pSrcInfo;


    D3DX11_IMAGE_LOAD_INFO()
    {
        Width = ((UINT) -1);
        Height = ((UINT) -1);
        Depth = ((UINT) -1);
        FirstMipLevel = ((UINT) -1);
        MipLevels = ((UINT) -1);
        Usage = (D3D11_USAGE) ((UINT) -1);
        BindFlags = ((UINT) -1);
        CpuAccessFlags = ((UINT) -1);
        MiscFlags = ((UINT) -1);
        Format = ((DXGI_FORMAT) -3);
        Filter = ((UINT) -1);
        MipFilter = ((UINT) -1);
        pSrcInfo = 0;
    }


} D3DX11_IMAGE_LOAD_INFO;
#line 341 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11GetImageInfoFromFileA(
        LPCSTR pSrcFile,
        ID3DX11ThreadPump* pPump,
        D3DX11_IMAGE_INFO* pSrcInfo,
        HRESULT* pHResult);

HRESULT __stdcall
    D3DX11GetImageInfoFromFileW(
        LPCWSTR pSrcFile,
        ID3DX11ThreadPump* pPump,
        D3DX11_IMAGE_INFO* pSrcInfo,
        HRESULT* pHResult);
#line 362 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11GetImageInfoFromResourceA(
        HMODULE hSrcModule,
        LPCSTR pSrcResource,
        ID3DX11ThreadPump* pPump,
        D3DX11_IMAGE_INFO* pSrcInfo,
        HRESULT* pHResult);

HRESULT __stdcall
    D3DX11GetImageInfoFromResourceW(
        HMODULE hSrcModule,
        LPCWSTR pSrcResource,
        ID3DX11ThreadPump* pPump,
        D3DX11_IMAGE_INFO* pSrcInfo,
        HRESULT* pHResult);
#line 385 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11GetImageInfoFromMemory(
        LPCVOID pSrcData,
        SIZE_T SrcDataSize,
        ID3DX11ThreadPump* pPump,
        D3DX11_IMAGE_INFO* pSrcInfo,
        HRESULT* pHResult);
#line 438 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11CreateShaderResourceViewFromFileA(
        ID3D11Device* pDevice,
        LPCSTR pSrcFile,
        D3DX11_IMAGE_LOAD_INFO *pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11ShaderResourceView** ppShaderResourceView,
        HRESULT* pHResult);

HRESULT __stdcall
    D3DX11CreateShaderResourceViewFromFileW(
        ID3D11Device* pDevice,
        LPCWSTR pSrcFile,
        D3DX11_IMAGE_LOAD_INFO *pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11ShaderResourceView** ppShaderResourceView,
        HRESULT* pHResult);







HRESULT __stdcall
    D3DX11CreateTextureFromFileA(
        ID3D11Device* pDevice,
        LPCSTR pSrcFile,
        D3DX11_IMAGE_LOAD_INFO *pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11Resource** ppTexture,
        HRESULT* pHResult);

HRESULT __stdcall
    D3DX11CreateTextureFromFileW(
        ID3D11Device* pDevice,
        LPCWSTR pSrcFile,
        D3DX11_IMAGE_LOAD_INFO *pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11Resource** ppTexture,
        HRESULT* pHResult);
#line 489 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11CreateShaderResourceViewFromResourceA(
        ID3D11Device* pDevice,
        HMODULE hSrcModule,
        LPCSTR pSrcResource,
        D3DX11_IMAGE_LOAD_INFO* pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11ShaderResourceView** ppShaderResourceView,
        HRESULT* pHResult);

HRESULT __stdcall
    D3DX11CreateShaderResourceViewFromResourceW(
        ID3D11Device* pDevice,
        HMODULE hSrcModule,
        LPCWSTR pSrcResource,
        D3DX11_IMAGE_LOAD_INFO* pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11ShaderResourceView** ppShaderResourceView,
        HRESULT* pHResult);







HRESULT __stdcall
    D3DX11CreateTextureFromResourceA(
        ID3D11Device* pDevice,
        HMODULE hSrcModule,
        LPCSTR pSrcResource,
        D3DX11_IMAGE_LOAD_INFO *pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11Resource** ppTexture,
        HRESULT* pHResult);

HRESULT __stdcall
    D3DX11CreateTextureFromResourceW(
        ID3D11Device* pDevice,
        HMODULE hSrcModule,
        LPCWSTR pSrcResource,
        D3DX11_IMAGE_LOAD_INFO* pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11Resource** ppTexture,
        HRESULT* pHResult);
#line 544 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11CreateShaderResourceViewFromMemory(
        ID3D11Device* pDevice,
        LPCVOID pSrcData,
        SIZE_T SrcDataSize,
        D3DX11_IMAGE_LOAD_INFO* pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11ShaderResourceView** ppShaderResourceView,
        HRESULT* pHResult);

HRESULT __stdcall
    D3DX11CreateTextureFromMemory(
        ID3D11Device* pDevice,
        LPCVOID pSrcData,
        SIZE_T SrcDataSize,
        D3DX11_IMAGE_LOAD_INFO* pLoadInfo,
        ID3DX11ThreadPump* pPump,
        ID3D11Resource** ppTexture,
        HRESULT* pHResult);
#line 575 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
typedef struct _D3DX11_TEXTURE_LOAD_INFO
{
    D3D11_BOX *pSrcBox;
    D3D11_BOX *pDstBox;
    UINT SrcFirstMip;
    UINT DstFirstMip;
    UINT NumMips;
    UINT SrcFirstElement;
    UINT DstFirstElement;
    UINT NumElements;
    UINT Filter;
    UINT MipFilter;


    _D3DX11_TEXTURE_LOAD_INFO()
    {
        pSrcBox = 0;
        pDstBox = 0;
        SrcFirstMip = 0;
        DstFirstMip = 0;
        NumMips = ((UINT) -1);
        SrcFirstElement = 0;
        DstFirstElement = 0;
        NumElements = ((UINT) -1);
        Filter = ((UINT) -1);
        MipFilter = ((UINT) -1);
    }


} D3DX11_TEXTURE_LOAD_INFO;
#line 617 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11LoadTextureFromTexture(
  ID3D11DeviceContext *pContext,
        ID3D11Resource *pSrcTexture,
        D3DX11_TEXTURE_LOAD_INFO *pLoadInfo,
        ID3D11Resource *pDstTexture);
#line 641 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11FilterTexture(
  ID3D11DeviceContext *pContext,
        ID3D11Resource *pTexture,
        UINT SrcLevel,
        UINT MipFilter);
#line 664 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11SaveTextureToFileA(
  ID3D11DeviceContext *pContext,
        ID3D11Resource *pSrcTexture,
        D3DX11_IMAGE_FILE_FORMAT DestFormat,
        LPCSTR pDestFile);

HRESULT __stdcall
    D3DX11SaveTextureToFileW(
  ID3D11DeviceContext *pContext,
        ID3D11Resource *pSrcTexture,
        D3DX11_IMAGE_FILE_FORMAT DestFormat,
        LPCWSTR pDestFile);
#line 701 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11SaveTextureToMemory(
  ID3D11DeviceContext *pContext,
        ID3D11Resource* pSrcTexture,
        D3DX11_IMAGE_FILE_FORMAT DestFormat,
        ID3D10Blob** ppDestBuf,
        UINT Flags);
#line 729 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11ComputeNormalMap(
        ID3D11DeviceContext *pContext,
        ID3D11Texture2D *pSrcTexture,
        UINT Flags,
        UINT Channel,
        FLOAT Amplitude,
        ID3D11Texture2D *pDestTexture);
#line 758 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11tex.h"
HRESULT __stdcall
    D3DX11SHProjectCubeMap(
        ID3D11DeviceContext *pContext,
                        UINT Order,
        ID3D11Texture2D *pCubeMap,
                                  FLOAT *pROut,
                                      FLOAT *pGOut,
                                      FLOAT *pBOut);


}
#line 52 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11async.h"
#line 14 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11async.h"
#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"
#line 14 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11async.h"



extern "C" {
#line 75 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11async.h"
HRESULT __stdcall D3DX11CompileFromFileA(LPCSTR pSrcFile,const D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE pInclude,
        LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags1, UINT Flags2, ID3DX11ThreadPump* pPump, ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);

HRESULT __stdcall D3DX11CompileFromFileW(LPCWSTR pSrcFile, const D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE pInclude,
        LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags1, UINT Flags2, ID3DX11ThreadPump* pPump, ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);







HRESULT __stdcall D3DX11CompileFromResourceA(HMODULE hSrcModule, LPCSTR pSrcResource, LPCSTR pSrcFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags1, UINT Flags2, ID3DX11ThreadPump* pPump, ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);

HRESULT __stdcall D3DX11CompileFromResourceW(HMODULE hSrcModule, LPCWSTR pSrcResource, LPCWSTR pSrcFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags1, UINT Flags2, ID3DX11ThreadPump* pPump, ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);







HRESULT __stdcall D3DX11CompileFromMemory(LPCSTR pSrcData, SIZE_T SrcDataLen, LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE pInclude,
    LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags1, UINT Flags2, ID3DX11ThreadPump* pPump, ID3D10Blob** ppShader, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);

HRESULT __stdcall D3DX11PreprocessShaderFromFileA(LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, ID3DX11ThreadPump *pPump, ID3D10Blob** ppShaderText, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);

HRESULT __stdcall D3DX11PreprocessShaderFromFileW(LPCWSTR pFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, ID3DX11ThreadPump *pPump, ID3D10Blob** ppShaderText, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);

HRESULT __stdcall D3DX11PreprocessShaderFromMemory(LPCSTR pSrcData, SIZE_T SrcDataSize, LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, ID3DX11ThreadPump *pPump, ID3D10Blob** ppShaderText, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);

HRESULT __stdcall D3DX11PreprocessShaderFromResourceA(HMODULE hModule, LPCSTR pResourceName, LPCSTR pSrcFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, ID3DX11ThreadPump *pPump, ID3D10Blob** ppShaderText, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);

HRESULT __stdcall D3DX11PreprocessShaderFromResourceW(HMODULE hModule, LPCWSTR pResourceName, LPCWSTR pSrcFileName, const D3D10_SHADER_MACRO* pDefines,
    LPD3D10INCLUDE pInclude, ID3DX11ThreadPump *pPump, ID3D10Blob** ppShaderText, ID3D10Blob** ppErrorMsgs, HRESULT* pHResult);
#line 129 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11async.h"
HRESULT __stdcall D3DX11CreateAsyncCompilerProcessor(LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE pInclude,
        LPCSTR pFunctionName, LPCSTR pProfile, UINT Flags1, UINT Flags2,
        ID3D10Blob **ppCompiledShader, ID3D10Blob **ppErrorBuffer, ID3DX11DataProcessor **ppProcessor);

HRESULT __stdcall D3DX11CreateAsyncShaderPreprocessProcessor(LPCSTR pFileName, const D3D10_SHADER_MACRO* pDefines, LPD3D10INCLUDE pInclude,
        ID3D10Blob** ppShaderText, ID3D10Blob **ppErrorBuffer, ID3DX11DataProcessor **ppProcessor);





HRESULT __stdcall D3DX11CreateAsyncFileLoaderW(LPCWSTR pFileName, ID3DX11DataLoader **ppDataLoader);
HRESULT __stdcall D3DX11CreateAsyncFileLoaderA(LPCSTR pFileName, ID3DX11DataLoader **ppDataLoader);
HRESULT __stdcall D3DX11CreateAsyncMemoryLoader(LPCVOID pData, SIZE_T cbData, ID3DX11DataLoader **ppDataLoader);
HRESULT __stdcall D3DX11CreateAsyncResourceLoaderW(HMODULE hSrcModule, LPCWSTR pSrcResource, ID3DX11DataLoader **ppDataLoader);
HRESULT __stdcall D3DX11CreateAsyncResourceLoaderA(HMODULE hSrcModule, LPCSTR pSrcResource, ID3DX11DataLoader **ppDataLoader);
#line 154 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include/d3dx11async.h"
HRESULT __stdcall D3DX11CreateAsyncTextureProcessor(ID3D11Device *pDevice, D3DX11_IMAGE_LOAD_INFO *pLoadInfo, ID3DX11DataProcessor **ppDataProcessor);
HRESULT __stdcall D3DX11CreateAsyncTextureInfoProcessor(D3DX11_IMAGE_INFO *pImageInfo, ID3DX11DataProcessor **ppDataProcessor);
HRESULT __stdcall D3DX11CreateAsyncShaderResourceViewProcessor(ID3D11Device *pDevice, D3DX11_IMAGE_LOAD_INFO *pLoadInfo, ID3DX11DataProcessor **ppDataProcessor);


}
#line 53 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3dx11.h"







enum _D3DX11_ERR {
    D3DX11_ERR_CANNOT_MODIFY_INDEX_BUFFER = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2900))) ),
    D3DX11_ERR_INVALID_MESH = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2901))) ),
    D3DX11_ERR_CANNOT_ATTR_SORT = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2902))) ),
    D3DX11_ERR_SKINNING_NOT_SUPPORTED = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2903))) ),
    D3DX11_ERR_TOO_MANY_INFLUENCES = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2904))) ),
    D3DX11_ERR_INVALID_DATA = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2905))) ),
    D3DX11_ERR_LOADED_MESH_HAS_NO_DATA = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2906))) ),
    D3DX11_ERR_DUPLICATE_NAMED_FRAGMENT = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2907))) ),
    D3DX11_ERR_CANNOT_REMOVE_LAST_ITEM = ((HRESULT) (((unsigned long)(1)<<31) | ((unsigned long)(0x876)<<16) | ((unsigned long)(2908))) ),
};
#line 4 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"

#line 1 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3d11shader.h"
#line 16 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3d11shader.h"
typedef enum D3D11_SHADER_VERSION_TYPE
{
    D3D11_SHVER_PIXEL_SHADER = 0,
    D3D11_SHVER_VERTEX_SHADER = 1,
    D3D11_SHVER_GEOMETRY_SHADER = 2,


    D3D11_SHVER_HULL_SHADER = 3,
    D3D11_SHVER_DOMAIN_SHADER = 4,
    D3D11_SHVER_COMPUTE_SHADER = 5,
} D3D11_SHADER_VERSION_TYPE;
#line 35 "D:/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Include\\d3d11shader.h"
typedef D3D_RESOURCE_RETURN_TYPE D3D11_RESOURCE_RETURN_TYPE;

typedef D3D_CBUFFER_TYPE D3D11_CBUFFER_TYPE;


typedef struct _D3D11_SIGNATURE_PARAMETER_DESC
{
    LPCSTR SemanticName;
    UINT SemanticIndex;
    UINT Register;
    D3D_NAME SystemValueType;
    D3D_REGISTER_COMPONENT_TYPE ComponentType;
    BYTE Mask;

    BYTE ReadWriteMask;



    UINT Stream;
} D3D11_SIGNATURE_PARAMETER_DESC;

typedef struct _D3D11_SHADER_BUFFER_DESC
{
    LPCSTR Name;
    D3D_CBUFFER_TYPE Type;
    UINT Variables;
    UINT Size;
    UINT uFlags;
} D3D11_SHADER_BUFFER_DESC;

typedef struct _D3D11_SHADER_VARIABLE_DESC
{
    LPCSTR Name;
    UINT StartOffset;
    UINT Size;
    UINT uFlags;
    LPVOID DefaultValue;
    UINT StartTexture;
    UINT TextureSize;
    UINT StartSampler;
    UINT SamplerSize;
} D3D11_SHADER_VARIABLE_DESC;

typedef struct _D3D11_SHADER_TYPE_DESC
{
    D3D_SHADER_VARIABLE_CLASS Class;
    D3D_SHADER_VARIABLE_TYPE Type;
    UINT Rows;
    UINT Columns;
    UINT Elements;
    UINT Members;
    UINT Offset;
    LPCSTR Name;
} D3D11_SHADER_TYPE_DESC;

typedef D3D_TESSELLATOR_DOMAIN D3D11_TESSELLATOR_DOMAIN;

typedef D3D_TESSELLATOR_PARTITIONING D3D11_TESSELLATOR_PARTITIONING;

typedef D3D_TESSELLATOR_OUTPUT_PRIMITIVE D3D11_TESSELLATOR_OUTPUT_PRIMITIVE;

typedef struct _D3D11_SHADER_DESC
{
    UINT Version;
    LPCSTR Creator;
    UINT Flags;

    UINT ConstantBuffers;
    UINT BoundResources;
    UINT InputParameters;
    UINT OutputParameters;

    UINT InstructionCount;
    UINT TempRegisterCount;
    UINT TempArrayCount;
    UINT DefCount;
    UINT DclCount;
    UINT TextureNormalInstructions;
    UINT TextureLoadInstructions;
    UINT TextureCompInstructions;
    UINT TextureBiasInstructions;
    UINT TextureGradientInstructions;
    UINT FloatInstructionCount;
    UINT IntInstructionCount;
    UINT UintInstructionCount;
    UINT StaticFlowControlCount;
    UINT DynamicFlowControlCount;
    UINT MacroInstructionCount;
    UINT ArrayInstructionCount;
    UINT CutInstructionCount;
    UINT EmitInstructionCount;
    D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
    UINT GSMaxOutputVertexCount;
    D3D_PRIMITIVE InputPrimitive;
    UINT PatchConstantParameters;
    UINT cGSInstanceCount;
    UINT cControlPoints;
    D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
    D3D_TESSELLATOR_PARTITIONING HSPartitioning;
    D3D_TESSELLATOR_DOMAIN TessellatorDomain;

    UINT cBarrierInstructions;
    UINT cInterlockedInstructions;
    UINT cTextureStoreInstructions;
} D3D11_SHADER_DESC;

typedef struct _D3D11_SHADER_INPUT_BIND_DESC
{
    LPCSTR Name;
    D3D_SHADER_INPUT_TYPE Type;
    UINT BindPoint;
    UINT BindCount;

    UINT uFlags;
    D3D_RESOURCE_RETURN_TYPE ReturnType;
    D3D_SRV_DIMENSION Dimension;
    UINT NumSamples;
} D3D11_SHADER_INPUT_BIND_DESC;






typedef struct ID3D11ShaderReflectionType ID3D11ShaderReflectionType;
typedef struct ID3D11ShaderReflectionType *LPD3D11SHADERREFLECTIONTYPE;

typedef struct ID3D11ShaderReflectionVariable ID3D11ShaderReflectionVariable;
typedef struct ID3D11ShaderReflectionVariable *LPD3D11SHADERREFLECTIONVARIABLE;

typedef struct ID3D11ShaderReflectionConstantBuffer ID3D11ShaderReflectionConstantBuffer;
typedef struct ID3D11ShaderReflectionConstantBuffer *LPD3D11SHADERREFLECTIONCONSTANTBUFFER;

typedef struct ID3D11ShaderReflection ID3D11ShaderReflection;
typedef struct ID3D11ShaderReflection *LPD3D11SHADERREFLECTION;


extern "C" const GUID IID_ID3D11ShaderReflectionType;





struct __declspec(novtable) ID3D11ShaderReflectionType
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_TYPE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetMemberTypeByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetMemberTypeByName( LPCSTR Name) = 0;
    virtual __declspec(nothrow) LPCSTR __stdcall GetMemberTypeName( UINT Index) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall IsEqual( ID3D11ShaderReflectionType* pType) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetSubType(void) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetBaseClass(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetNumInterfaces(void) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetInterfaceByIndex( UINT uIndex) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall IsOfType( ID3D11ShaderReflectionType* pType) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall ImplementsInterface( ID3D11ShaderReflectionType* pBase) = 0;
};


extern "C" const GUID IID_ID3D11ShaderReflectionVariable;





struct __declspec(novtable) ID3D11ShaderReflectionVariable
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_VARIABLE_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionType* __stdcall GetType(void) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer* __stdcall GetBuffer(void) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetInterfaceSlot( UINT uArrayIndex) = 0;
};


extern "C" const GUID IID_ID3D11ShaderReflectionConstantBuffer;





struct __declspec(novtable) ID3D11ShaderReflectionConstantBuffer
{
    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_BUFFER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionVariable* __stdcall GetVariableByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;
};







extern "C" const GUID IID_ID3D11ShaderReflection;





struct __declspec(novtable) ID3D11ShaderReflection : public IUnknown
{
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface( const IID & iid,
                                    LPVOID *ppv) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef(void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetDesc( D3D11_SHADER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByIndex( UINT Index) = 0;
    virtual __declspec(nothrow) ID3D11ShaderReflectionConstantBuffer* __stdcall GetConstantBufferByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDesc( UINT ResourceIndex,
                                            D3D11_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetInputParameterDesc( UINT ParameterIndex,
                                           D3D11_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetOutputParameterDesc( UINT ParameterIndex,
                                            D3D11_SIGNATURE_PARAMETER_DESC *pDesc) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetPatchConstantParameterDesc( UINT ParameterIndex,
                                                   D3D11_SIGNATURE_PARAMETER_DESC *pDesc) = 0;

    virtual __declspec(nothrow) ID3D11ShaderReflectionVariable* __stdcall GetVariableByName( LPCSTR Name) = 0;

    virtual __declspec(nothrow) HRESULT __stdcall GetResourceBindingDescByName( LPCSTR Name,
                                                  D3D11_SHADER_INPUT_BIND_DESC *pDesc) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetMovInstructionCount(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetMovcInstructionCount(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetConversionInstructionCount(void) = 0;
    virtual __declspec(nothrow) UINT __stdcall GetBitwiseInstructionCount(void) = 0;

    virtual __declspec(nothrow) D3D_PRIMITIVE __stdcall GetGSInputPrimitive(void) = 0;
    virtual __declspec(nothrow) BOOL __stdcall IsSampleFrequencyShader(void) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetNumInterfaceSlots(void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetMinFeatureLevel( enum D3D_FEATURE_LEVEL* pLevel) = 0;

    virtual __declspec(nothrow) UINT __stdcall GetThreadGroupSize(
                                                   UINT* pSizeX,
                                                   UINT* pSizeY,
                                                   UINT* pSizeZ) = 0;
};






extern "C" {



}
#line 5 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"




#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\assert.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\assert.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\assert.h"
#line 32 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\assert.h"
extern "C" {


__declspec(dllimport) void __cdecl _wassert( const wchar_t * _Message, const wchar_t *_File, unsigned _Line);


}
#line 9 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\memory"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstdlib"




#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"






#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xkeycheck.h"
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"


#pragma pack(push,8)
#line 205 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1800")



#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 220 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
#line 367 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\use_ansi.h"
#line 57 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\use_ansi.h"
#pragma comment(lib, "msvcprt" "d" "")
#line 367 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
#line 568 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
namespace std {
typedef bool _Bool;
}
#line 586 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
typedef __int64 _Longlong;
typedef unsigned __int64 _ULonglong;
#line 605 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
typedef unsigned short char16_t;
typedef unsigned int char32_t;
#line 619 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
namespace std {
enum _Uninitialized
 {
 _Noinit
 };



#pragma warning(push)
#pragma warning(disable: 4412)
class __declspec(dllimport) _Lockit
 {
public:
#line 652 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit() throw ();


    static void __cdecl _Lockit_ctor(int);
    static void __cdecl _Lockit_dtor(int);

private:
    static void __cdecl _Lockit_ctor(_Lockit *);
    static void __cdecl _Lockit_ctor(_Lockit *, int);
    static void __cdecl _Lockit_dtor(_Lockit *);

public:
                    _Lockit(const _Lockit&) = delete;
 _Lockit& operator=(const _Lockit&) = delete;

private:
 int _Locktype;
#line 685 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
 };
#line 772 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
class __declspec(dllimport) _Init_locks
 {
public:
#line 788 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
    __thiscall _Init_locks();
 __thiscall ~_Init_locks() throw ();


private:
    static void __cdecl _Init_locks_ctor(_Init_locks *);
    static void __cdecl _Init_locks_dtor(_Init_locks *);
#line 805 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
 };

#pragma warning(pop)
}
#line 817 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef int _Mbstatet;
typedef unsigned long _Uint32t;








#pragma pack(pop)
#line 5 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstdlib"
#line 17 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstdlib"
namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;


using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;
}
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ymath.h"







#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
#line 33 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ymath.h"
void __cdecl _Feraise(int);

typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) double __cdecl _Divide(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Log(double, int);
__declspec(dllimport) double __cdecl _Recip(double);
__declspec(dllimport) double __cdecl _Sin(double, unsigned int);
__declspec(dllimport) double __cdecl _Sinx(double, unsigned int, int);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) float __cdecl _FDivide(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FLog(float, int);
__declspec(dllimport) float __cdecl _FRecip(float);
__declspec(dllimport) float __cdecl _FSin(float, unsigned int);
__declspec(dllimport) float __cdecl _FSinx(float, unsigned int, int);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) long double __cdecl _LDivide(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LLog(long double, int);
__declspec(dllimport) long double __cdecl _LRecip(long double);
__declspec(dllimport) long double __cdecl _LSin(long double, unsigned int);
__declspec(dllimport) long double __cdecl _LSinx(long double, unsigned int, int);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;



}




#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cfloat"
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\climits"
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cmath"
#line 16 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cmath"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
#line 18 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 18 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"






#pragma pack(push,8)


extern "C" {
#line 37 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
struct _exception {
        int type;
        char *name;
        double arg1;
        double arg2;
        double retval;
        } ;
#line 54 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
struct _complex {
        double x,y;
        } ;
#line 67 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
typedef float float_t;
typedef double double_t;
#line 90 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
__declspec(dllimport) extern double _HUGE;
#line 184 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
void __cdecl _fperrraise( int _Except);

short __declspec(dllimport) __cdecl _dclass( double _X);
short __declspec(dllimport) __cdecl _ldclass( long double _X);
short __declspec(dllimport) __cdecl _fdclass( float _X);

int __declspec(dllimport) __cdecl _dsign( double _X);
int __declspec(dllimport) __cdecl _ldsign( long double _X);
int __declspec(dllimport) __cdecl _fdsign( float _X);

int __declspec(dllimport) __cdecl _dpcomp( double _X, double _Y);
int __declspec(dllimport) __cdecl _ldpcomp( long double _X, long double _Y);
int __declspec(dllimport) __cdecl _fdpcomp( float _X, float _Y);

short __declspec(dllimport) __cdecl _dtest( double *_Px);
short __declspec(dllimport) __cdecl _ldtest( long double *_Px);
short __declspec(dllimport) __cdecl _fdtest( float *_Px);

short __declspec(dllimport) __cdecl _d_int( double *_Px, short _Xexp);
short __declspec(dllimport) __cdecl _ld_int( long double *_Px, short _Xexp);
short __declspec(dllimport) __cdecl _fd_int( float *_Px, short _Xexp);

short __declspec(dllimport) __cdecl _dscale( double *_Px, long _Lexp);
short __declspec(dllimport) __cdecl _ldscale( long double *_Px, long _Lexp);
short __declspec(dllimport) __cdecl _fdscale( float *_Px, long _Lexp);

short __declspec(dllimport) __cdecl _dunscale( short *_Pex, double *_Px);
short __declspec(dllimport) __cdecl _ldunscale( short *_Pex, long double *_Px);
short __declspec(dllimport) __cdecl _fdunscale( short *_Pex, float *_Px);

short __declspec(dllimport) __cdecl _dexp( double *_Px, double _Y, long _Eoff);
short __declspec(dllimport) __cdecl _ldexp( long double *_Px, long double _Y, long _Eoff);
short __declspec(dllimport) __cdecl _fdexp( float *_Px, float _Y, long _Eoff);

short __declspec(dllimport) __cdecl _dnorm( unsigned short *_Ps);
short __declspec(dllimport) __cdecl _fdnorm( unsigned short *_Ps);

double __cdecl _dpoly( double _X, const double *_Tab, int _N);
long double __cdecl _ldpoly( long double _X, const long double *_Tab, int _N);
float __cdecl _fdpoly( float _X, const float *_Tab, int _N);

double __declspec(dllimport) __cdecl _dlog( double _X, int _Baseflag);
long double __declspec(dllimport) __cdecl _ldlog( long double _X, int _Baseflag);
float __declspec(dllimport) __cdecl _fdlog( float _X, int _Baseflag);

double __declspec(dllimport) __cdecl _dsin( double _X, unsigned int _Qoff);
long double __declspec(dllimport) __cdecl _ldsin( long double _X, unsigned int _Qoff);
float __declspec(dllimport) __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[8];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[8];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[8];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[8];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
#line 302 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
extern "C++" {

inline __declspec(nothrow) int fpclassify(float _X)
{
    return (_fdtest(&_X));
}

inline __declspec(nothrow) int fpclassify(double _X)
{
    return (_dtest(&_X));
}

inline __declspec(nothrow) int fpclassify(long double _X)
{
    return (_ldtest(&_X));
}

inline __declspec(nothrow) bool signbit(float _X)
{
    return (_fdsign(_X) != 0);
}

inline __declspec(nothrow) bool signbit(double _X)
{
    return (_dsign(_X) != 0);
}

inline __declspec(nothrow) bool signbit(long double _X)
{
    return (_ldsign(_X) != 0);
}

inline __declspec(nothrow) int _fpcomp(float _X, float _Y)
{
    return (_fdpcomp(_X, _Y));
}

inline __declspec(nothrow) int _fpcomp(double _X, double _Y)
{
    return (_dpcomp(_X, _Y));
}

inline __declspec(nothrow) int _fpcomp(long double _X, long double _Y)
{
    return (_ldpcomp(_X, _Y));
}

template<class _Trc, class _Tre> struct _Combined_type
{
    typedef float _Type;
};

template<> struct _Combined_type<float, double>
{
    typedef double _Type;
};

template<> struct _Combined_type<float, long double>
{
    typedef long double _Type;
};

template<class _Ty, class _T2> struct _Real_widened
{
    typedef long double _Type;
};

template<> struct _Real_widened<float, float>
{
    typedef float _Type;
};

template<> struct _Real_widened<float, double>
{
    typedef double _Type;
};

template<> struct _Real_widened<double, float>
{
    typedef double _Type;
};

template<> struct _Real_widened<double, double>
{
    typedef double _Type;
};

template<class _Ty> struct _Real_type
{
    typedef double _Type;
};

template<> struct _Real_type<float>
{
    typedef float _Type;
};

template<> struct _Real_type<long double>
{
    typedef long double _Type;
};

template<class _T1, class _T2> inline __declspec(nothrow) int _fpcomp(_T1 _X, _T2 _Y)
{
    typedef typename _Combined_type<float,
        typename _Real_widened<
        typename _Real_type<_T1>::_Type,
        typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
    return (_fpcomp((_Tw)_X, (_Tw)_Y));
}

template<class _Ty> inline __declspec(nothrow) bool isfinite(_Ty _X)
{
    return (fpclassify(_X) <= 0);
}

template<class _Ty> inline __declspec(nothrow) bool isinf(_Ty _X)
{
    return (fpclassify(_X) == 1);
}

template<class _Ty> inline __declspec(nothrow) bool isnan(_Ty _X)
{
    return (fpclassify(_X) == 2);
}

template<class _Ty> inline __declspec(nothrow) bool isnormal(_Ty _X)
{
    return (fpclassify(_X) == (-1));
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isgreater(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & 4) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isgreaterequal(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (2 | 4)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isless(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & 1) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool islessequal(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (1 | 2)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool islessgreater(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (1 | 4)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isunordered(_Ty1 _X, _Ty2 _Y)
{
    return (_fpcomp(_X, _Y) == 0);
}

}






int __cdecl abs( int _X);
long __cdecl labs( long _X);
long long __cdecl llabs( long long _X);

double __cdecl acos( double _X);
__declspec(dllimport) double __cdecl acosh( double _X);
double __cdecl asin( double _X);
__declspec(dllimport) double __cdecl asinh( double _X);
double __cdecl atan( double _X);
__declspec(dllimport) double __cdecl atanh( double _X);
double __cdecl atan2( double _Y, double _X);

__declspec(dllimport) double __cdecl cbrt( double _X);
__declspec(dllimport) double __cdecl copysign( double _X, double _Y);
double __cdecl cos( double _X);
double __cdecl cosh( double _X);
__declspec(dllimport) double __cdecl erf( double _X);
__declspec(dllimport) double __cdecl erfc( double _X);
double __cdecl exp( double _X);
__declspec(dllimport) double __cdecl exp2( double _X);
__declspec(dllimport) double __cdecl expm1( double _X);
                   double __cdecl fabs( double _X);
__declspec(dllimport) double __cdecl fdim( double _X, double _Y);
__declspec(dllimport) double __cdecl fma( double _X, double _Y, double _Z);
__declspec(dllimport) double __cdecl fmax( double _X, double _Y);
__declspec(dllimport) double __cdecl fmin( double _X, double _Y);
double __cdecl fmod( double _X, double _Y);
__declspec(dllimport) int __cdecl ilogb( double _X);
__declspec(dllimport) double __cdecl lgamma( double _X);
__declspec(dllimport) long long __cdecl llrint( double _X);
__declspec(dllimport) long long __cdecl llround( double _X);
double __cdecl log( double _X);
double __cdecl log10( double _X);
__declspec(dllimport) double __cdecl log1p( double _X);
__declspec(dllimport) double __cdecl log2( double _X);
__declspec(dllimport) double __cdecl logb( double _X);
__declspec(dllimport) long __cdecl lrint( double _X);
__declspec(dllimport) long __cdecl lround( double _X);
__declspec(dllimport) double __cdecl nan( const char *);
__declspec(dllimport) double __cdecl nearbyint( double _X);
__declspec(dllimport) double __cdecl nextafter( double _X, double _Y);
__declspec(dllimport) double __cdecl nexttoward( double _X, long double _Y);
double __cdecl pow( double _X, double _Y);
__declspec(dllimport) double __cdecl remainder( double _X, double _Y);
__declspec(dllimport) double __cdecl remquo( double _X, double _Y, int *_Z);
__declspec(dllimport) double __cdecl rint( double _X);
__declspec(dllimport) double __cdecl round( double _X);
__declspec(dllimport) double __cdecl scalbln( double _X, long _Y);
__declspec(dllimport) double __cdecl scalbn( double _X, int _Y);
double __cdecl sin( double _X);
double __cdecl sinh( double _X);
                    double __cdecl sqrt( double _X);
double __cdecl tan( double _X);
double __cdecl tanh( double _X);
__declspec(dllimport) double __cdecl tgamma( double _X);
__declspec(dllimport) double __cdecl trunc( double _X);

               __declspec(dllimport) double __cdecl atof( const char *_String);
               __declspec(dllimport) double __cdecl _atof_l( const char *_String, _locale_t _Locale);

__declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
__declspec(dllimport) double __cdecl ceil( double _X);

               __declspec(dllimport) double __cdecl _chgsign ( double _X);
               __declspec(dllimport) double __cdecl _copysign ( double _Number, double _Sign);

__declspec(dllimport) double __cdecl floor( double _X);
__declspec(dllimport) double __cdecl frexp( double _X, int * _Y);
__declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
__declspec(dllimport) double __cdecl _j0( double _X );
__declspec(dllimport) double __cdecl _j1( double _X );
__declspec(dllimport) double __cdecl _jn(int _X, double _Y);
__declspec(dllimport) double __cdecl ldexp( double _X, int _Y);




int __cdecl _matherr( struct _exception * _Except);


__declspec(dllimport) double __cdecl modf( double _X, double * _Y);
__declspec(dllimport) double __cdecl _y0( double _X);
__declspec(dllimport) double __cdecl _y1( double _X);
__declspec(dllimport) double __cdecl _yn( int _X, double _Y);

__inline double __cdecl hypot( double _X, double _Y)
{
    return _hypot(_X, _Y);
}


__declspec(dllimport) float __cdecl acoshf( float _X);
__declspec(dllimport) float __cdecl asinhf( float _X);
__declspec(dllimport) float __cdecl atanhf( float _X);
__declspec(dllimport) float __cdecl cbrtf( float _X);
__declspec(dllimport) float __cdecl _chgsignf( float _X);
__declspec(dllimport) float __cdecl copysignf( float _X, float _Y);
__declspec(dllimport) float __cdecl _copysignf( float _Number, float _Sign);
__declspec(dllimport) float __cdecl erff( float _X);
__declspec(dllimport) float __cdecl erfcf( float _X);
__declspec(dllimport) float __cdecl expm1f( float _X);
__declspec(dllimport) float __cdecl exp2f( float _X);
__declspec(dllimport) float __cdecl fdimf( float _X, float _Y);
__declspec(dllimport) float __cdecl fmaf( float _X, float _Y, float _Z);
__declspec(dllimport) float __cdecl fmaxf( float _X, float _Y);
__declspec(dllimport) float __cdecl fminf( float _X, float _Y);
__declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
__declspec(dllimport) int __cdecl ilogbf( float _X);
__declspec(dllimport) float __cdecl lgammaf( float _X);
__declspec(dllimport) long long __cdecl llrintf( float _X);
__declspec(dllimport) long long __cdecl llroundf( float _X);
__declspec(dllimport) float __cdecl log1pf( float _X);
__declspec(dllimport) float __cdecl log2f( float _X);
__declspec(dllimport) float __cdecl logbf( float _X);
__declspec(dllimport) long __cdecl lrintf( float _X);
__declspec(dllimport) long __cdecl lroundf( float _X);
__declspec(dllimport) float __cdecl nanf( const char *);
__declspec(dllimport) float __cdecl nearbyintf( float _X);
__declspec(dllimport) float __cdecl nextafterf( float _X, float _Y);
__declspec(dllimport) float __cdecl nexttowardf( float _X, long double _Y);
__declspec(dllimport) float __cdecl remainderf( float _X, float _Y);
__declspec(dllimport) float __cdecl remquof( float _X, float _Y, int *_Z);
__declspec(dllimport) float __cdecl rintf( float _X);
__declspec(dllimport) float __cdecl roundf( float _X);
__declspec(dllimport) float __cdecl scalblnf( float _X, long _Y);
__declspec(dllimport) float __cdecl scalbnf( float _X, int _Y);
__declspec(dllimport) float __cdecl tgammaf( float _X);
__declspec(dllimport) float __cdecl truncf( float _X);



__declspec(dllimport) int __cdecl _set_SSE2_enable( int _Flag);
#line 637 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
__inline float __cdecl acosf( float _X)
{
    return (float)acos(_X);
}

__inline float __cdecl asinf( float _X)
{
    return (float)asin(_X);
}

__inline float __cdecl atan2f( float _Y, float _X)
{
    return (float)atan2(_Y, _X);
}

__inline float __cdecl atanf( float _X)
{
    return (float)atan(_X);
}

__inline float __cdecl ceilf( float _X)
{
    return (float)ceil(_X);
}

__inline float __cdecl cosf( float _X)
{
    return (float)cos(_X);
}

__inline float __cdecl coshf( float _X)
{
    return (float)cosh(_X);
}

__inline float __cdecl expf( float _X)
{
    return (float)exp(_X);
}
#line 685 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
__inline float __cdecl fabsf( float _X)
{
    return (float)fabs(_X);
}
#line 699 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
__inline float __cdecl floorf( float _X)
{
    return (float)floor(_X);
}

__inline float __cdecl fmodf( float _X, float _Y)
{
    return (float)fmod(_X, _Y);
}



__inline float __cdecl frexpf( float _X, int *_Y)
{
    return (float)frexp(_X, _Y);
}

__inline float __cdecl hypotf( float _X, float _Y)
{
    return _hypotf(_X, _Y);
}

__inline float __cdecl ldexpf( float _X, int _Y)
{
    return (float)ldexp(_X, _Y);
}
#line 740 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
__inline float __cdecl log10f( float _X)
{
    return (float)log10(_X);
}

__inline float __cdecl logf( float _X)
{
    return (float)log(_X);
}

__inline float __cdecl modff( float _X, float *_Y)
{
    double _F, _I;
    _F = modf(_X, &_I);
    *_Y = (float)_I;
    return (float)_F;
}

__inline float __cdecl powf( float _X, float _Y)
{
    return (float)pow(_X, _Y);
}

__inline float __cdecl sinf( float _X)
{
    return (float)sin(_X);
}

__inline float __cdecl sinhf( float _X)
{
    return (float)sinh(_X);
}

__inline float __cdecl sqrtf( float _X)
{
    return (float)sqrt(_X);
}

__inline float __cdecl tanf( float _X)
{
    return (float)tan(_X);
}

__inline float __cdecl tanhf( float _X)
{
    return (float)tanh(_X);
}



__declspec(dllimport) long double __cdecl acoshl( long double _X);

__inline long double __cdecl acosl( long double _X)
{
    return acos((double)_X);
}

__declspec(dllimport) long double __cdecl asinhl( long double _X);

__inline long double __cdecl asinl( long double _X)
{
    return asin((double)_X);
}

__inline long double __cdecl atan2l( long double _Y, long double _X)
{
    return atan2((double)_Y, (double)_X);
}

__declspec(dllimport) long double __cdecl atanhl( long double _X);

__inline long double __cdecl atanl( long double _X)
{
    return atan((double)_X);
}

__declspec(dllimport) long double __cdecl cbrtl( long double _X);

__inline long double __cdecl ceill( long double _X)
{
    return ceil((double)_X);
}

__inline long double __cdecl _chgsignl( long double _X)
{
    return _chgsign((double)_X);
}

__declspec(dllimport) long double __cdecl copysignl( long double _X, long double _Y);

__inline long double __cdecl _copysignl( long double _X, long double _Y)
{
    return _copysign((double)_X, (double)_Y);
}

__inline long double __cdecl coshl( long double _X)
{
    return cosh((double)_X);
}

__inline long double __cdecl cosl( long double _X)
{
    return cos((double)_X);
}

__declspec(dllimport) long double __cdecl erfl( long double _X);
__declspec(dllimport) long double __cdecl erfcl( long double _X);

__inline long double __cdecl expl( long double _X)
{
    return exp((double)_X);
}

__declspec(dllimport) long double __cdecl exp2l( long double _X);
__declspec(dllimport) long double __cdecl expm1l( long double _X);

__inline long double __cdecl fabsl( long double _X)
{
    return fabs((double)_X);
}

__declspec(dllimport) long double __cdecl fdiml( long double _X, long double _Y);

__inline long double __cdecl floorl( long double _X)
{
    return floor((double)_X);
}

__declspec(dllimport) long double __cdecl fmal( long double _X, long double _Y, long double _Z);
__declspec(dllimport) long double __cdecl fmaxl( long double _X, long double _Y);
__declspec(dllimport) long double __cdecl fminl( long double _X, long double _Y);

__inline long double __cdecl fmodl( long double _X, long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

__inline long double __cdecl frexpl( long double _X, int *_Y)
{
    return frexp((double)_X, _Y);
}

__declspec(dllimport) int __cdecl ilogbl( long double _X);

__inline long double __cdecl _hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

__inline long double __cdecl hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

__inline long double __cdecl ldexpl( long double _X, int _Y)
{
    return ldexp((double)_X, _Y);
}

__declspec(dllimport) long double __cdecl lgammal( long double _X);
__declspec(dllimport) long long __cdecl llrintl( long double _X);
__declspec(dllimport) long long __cdecl llroundl( long double _X);

__inline long double __cdecl logl( long double _X)
{
    return log((double)_X);
}

__inline long double __cdecl log10l( long double _X)
{
    return log10((double)_X);
}

__declspec(dllimport) long double __cdecl log1pl( long double _X);
__declspec(dllimport) long double __cdecl log2l( long double _X);
__declspec(dllimport) long double __cdecl logbl( long double _X);
__declspec(dllimport) long __cdecl lrintl( long double _X);
__declspec(dllimport) long __cdecl lroundl( long double _X);

__inline long double __cdecl modfl( long double _X, long double *_Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}
__declspec(dllimport) long double __cdecl nanl( const char *);
__declspec(dllimport) long double __cdecl nearbyintl( long double _X);
__declspec(dllimport) long double __cdecl nextafterl( long double _X, long double _Y);
__declspec(dllimport) long double __cdecl nexttowardl( long double _X, long double _Y);

__inline long double __cdecl powl( long double _X, long double _Y)
{
    return pow((double)_X, (double)_Y);
}

__declspec(dllimport) long double __cdecl remainderl( long double _X, long double _Y);
__declspec(dllimport) long double __cdecl remquol( long double _X, long double _Y, int *_Z);
__declspec(dllimport) long double __cdecl rintl( long double _X);
__declspec(dllimport) long double __cdecl roundl( long double _X);
__declspec(dllimport) long double __cdecl scalblnl( long double _X, long _Y);
__declspec(dllimport) long double __cdecl scalbnl( long double _X, int _Y);

__inline long double __cdecl sinhl( long double _X)
{
    return sinh((double)_X);
}

__inline long double __cdecl sinl( long double _X)
{
    return sin((double)_X);
}

__inline long double __cdecl sqrtl( long double _X)
{
    return sqrt((double)_X);
}

__inline long double __cdecl tanhl( long double _X)
{
    return tanh((double)_X);
}

__inline long double __cdecl tanl( long double _X)
{
    return tan((double)_X);
}

__declspec(dllimport) long double __cdecl tgammal( long double _X);
__declspec(dllimport) long double __cdecl truncl( long double _X);
#line 992 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
__declspec(dllimport) extern double HUGE;




__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);





}

extern "C++" {

template<class _Ty> inline
        _Ty _Pow_int(_Ty _X, int _Y) throw()
        {unsigned int _N;
        if (_Y >= 0)
                _N = (unsigned int)_Y;
        else
                _N = (unsigned int)(-_Y);
        for (_Ty _Z = _Ty(1); ; _X *= _X)
                {if ((_N & 1) != 0)
                        _Z *= _X;
                if ((_N >>= 1) == 0)
                        return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

inline double __cdecl abs( double _X) throw()
        {return (fabs(_X)); }
inline double __cdecl pow( double _X, int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl abs( float _X) throw()
        {return (fabsf(_X)); }
inline float __cdecl acos( float _X) throw()
        {return (acosf(_X)); }
inline float __cdecl acosh( float _X) throw()
        {return (acoshf(_X)); }
inline float __cdecl asin( float _X) throw()
        {return (asinf(_X)); }
inline float __cdecl asinh( float _X) throw()
        {return (asinhf(_X)); }
inline float __cdecl atan( float _X) throw()
        {return (atanf(_X)); }
inline float __cdecl atanh( float _X) throw()
        {return (atanhf(_X)); }
inline float __cdecl atan2( float _Y, float _X) throw()
        {return (atan2f(_Y, _X)); }
inline float __cdecl cbrt( float _X) throw()
        {return (cbrtf(_X)); }
inline float __cdecl ceil( float _X) throw()
        {return (ceilf(_X)); }
inline float __cdecl copysign( float _X, float _Y) throw()
        {return (copysignf(_X, _Y)); }
inline float __cdecl cos( float _X) throw()
        {return (cosf(_X)); }
inline float __cdecl cosh( float _X) throw()
        {return (coshf(_X)); }
inline float __cdecl erf( float _X) throw()
        {return (erff(_X)); }
inline float __cdecl erfc( float _X) throw()
        {return (erfcf(_X)); }
inline float __cdecl exp( float _X) throw()
        {return (expf(_X)); }
inline float __cdecl exp2( float _X) throw()
        {return (exp2f(_X)); }
inline float __cdecl expm1( float _X) throw()
        {return (expm1f(_X)); }
inline float __cdecl fabs( float _X) throw()
        {return (fabsf(_X)); }
inline float __cdecl fdim( float _X, float _Y) throw()
        {return (fdimf(_X, _Y)); }
inline float __cdecl floor( float _X) throw()
        {return (floorf(_X)); }
inline float __cdecl fma( float _X, float _Y, float _Z) throw()
        {return (fmaf(_X, _Y, _Z)); }
inline float __cdecl fmax( float _X, float _Y) throw()
        {return (fmaxf(_X, _Y)); }
inline float __cdecl fmin( float _X, float _Y) throw()
        {return (fminf(_X, _Y)); }
inline float __cdecl fmod( float _X, float _Y) throw()
        {return (fmodf(_X, _Y)); }
inline float __cdecl frexp( float _X, int * _Y) throw()
        {return (frexpf(_X, _Y)); }
inline float __cdecl hypot( float _X, float _Y) throw()
        {return (hypotf(_X, _Y)); }
inline int __cdecl ilogb( float _X) throw()
        {return (ilogbf(_X)); }
inline float __cdecl ldexp( float _X, int _Y) throw()
        {return (ldexpf(_X, _Y)); }
inline float __cdecl lgamma( float _X) throw()
        {return (lgammaf(_X)); }
inline long long __cdecl llrint( float _X) throw()
        {return (llrintf(_X)); }
inline long long __cdecl llround( float _X) throw()
        {return (llroundf(_X)); }
inline float __cdecl log( float _X) throw()
        {return (logf(_X)); }
inline float __cdecl log10( float _X) throw()
        {return (log10f(_X)); }
inline float __cdecl log1p( float _X) throw()
        {return (log1pf(_X)); }
inline float __cdecl log2( float _X) throw()
        {return (log2f(_X)); }
inline float __cdecl logb( float _X) throw()
        {return (logbf(_X)); }
inline long __cdecl lrint( float _X) throw()
        {return (lrintf(_X)); }
inline long __cdecl lround( float _X) throw()
        {return (lroundf(_X)); }
inline float __cdecl modf( float _X, float * _Y) throw()
        {return (modff(_X, _Y)); }
inline float __cdecl nearbyint( float _X) throw()
        {return (nearbyintf(_X)); }
inline float __cdecl nextafter( float _X, float _Y) throw()
        {return (nextafterf(_X, _Y)); }
inline float __cdecl nexttoward( float _X, long double _Y) throw()
        {return (nexttowardf(_X, _Y)); }
inline float __cdecl pow( float _X, float _Y) throw()
        {return (powf(_X, _Y)); }
inline float __cdecl pow( float _X, int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl remainder( float _X, float _Y) throw()
        {return (remainderf(_X, _Y)); }
inline float __cdecl remquo( float _X, float _Y, int *_Z) throw()
        {return (remquof(_X, _Y, _Z)); }
inline float __cdecl rint( float _X) throw()
        {return (rintf(_X)); }
inline float __cdecl round( float _X) throw()
        {return (roundf(_X)); }
inline float __cdecl scalbln( float _X, long _Y) throw()
        {return (scalblnf(_X, _Y)); }
inline float __cdecl scalbn( float _X, int _Y) throw()
        {return (scalbnf(_X, _Y)); }
inline float __cdecl sin( float _X) throw()
        {return (sinf(_X)); }
inline float __cdecl sinh( float _X) throw()
        {return (sinhf(_X)); }
inline float __cdecl sqrt( float _X) throw()
        {return (sqrtf(_X)); }
inline float __cdecl tan( float _X) throw()
        {return (tanf(_X)); }
inline float __cdecl tanh( float _X) throw()
        {return (tanhf(_X)); }
inline float __cdecl tgamma( float _X) throw()
        {return (tgammaf(_X)); }
inline float __cdecl trunc( float _X) throw()
        {return (truncf(_X)); }
inline long double __cdecl abs( long double _X) throw()
        {return (fabsl(_X)); }
inline long double __cdecl acos( long double _X) throw()
        {return (acosl(_X)); }
inline long double __cdecl acosh( long double _X) throw()
        {return (acoshl(_X)); }
inline long double __cdecl asin( long double _X) throw()
        {return (asinl(_X)); }
inline long double __cdecl asinh( long double _X) throw()
        {return (asinhl(_X)); }
inline long double __cdecl atan( long double _X) throw()
        {return (atanl(_X)); }
inline long double __cdecl atanh( long double _X) throw()
        {return (atanhl(_X)); }
inline long double __cdecl atan2( long double _Y, long double _X) throw()
        {return (atan2l(_Y, _X)); }
inline long double __cdecl cbrt( long double _X) throw()
        {return (cbrtl(_X)); }
inline long double __cdecl ceil( long double _X) throw()
        {return (ceill(_X)); }
inline long double __cdecl copysign( long double _X, long double _Y) throw()
        {return (copysignl(_X, _Y)); }
inline long double __cdecl cos( long double _X) throw()
        {return (cosl(_X)); }
inline long double __cdecl cosh( long double _X) throw()
        {return (coshl(_X)); }
inline long double __cdecl erf( long double _X) throw()
        {return (erfl(_X)); }
inline long double __cdecl erfc( long double _X) throw()
        {return (erfcl(_X)); }
inline long double __cdecl exp( long double _X) throw()
        {return (expl(_X)); }
inline long double __cdecl exp2( long double _X) throw()
        {return (exp2l(_X)); }
inline long double __cdecl expm1( long double _X) throw()
        {return (expm1l(_X)); }
inline long double __cdecl fabs( long double _X) throw()
        {return (fabsl(_X)); }
inline long double __cdecl fdim( long double _X, long double _Y) throw()
        {return (fdiml(_X, _Y)); }
inline long double __cdecl floor( long double _X) throw()
        {return (floorl(_X)); }
inline long double __cdecl fma( long double _X, long double _Y, long double _Z) throw()
        {return (fmal(_X, _Y, _Z)); }
inline long double __cdecl fmax( long double _X, long double _Y) throw()
        {return (fmaxl(_X, _Y)); }
inline long double __cdecl fmin( long double _X, long double _Y) throw()
        {return (fminl(_X, _Y)); }
inline long double __cdecl fmod( long double _X, long double _Y) throw()
        {return (fmodl(_X, _Y)); }
inline long double __cdecl frexp( long double _X, int * _Y) throw()
        {return (frexpl(_X, _Y)); }
inline long double __cdecl hypot( long double _X, long double _Y) throw()
        {return (hypotl(_X, _Y)); }
inline int __cdecl ilogb( long double _X) throw()
        {return (ilogbl(_X)); }
inline long double __cdecl ldexp( long double _X, int _Y) throw()
        {return (ldexpl(_X, _Y)); }
inline long double __cdecl lgamma( long double _X) throw()
        {return (lgammal(_X)); }
inline long long __cdecl llrint( long double _X) throw()
        {return (llrintl(_X)); }
inline long long __cdecl llround( long double _X) throw()
        {return (llroundl(_X)); }
inline long double __cdecl log( long double _X) throw()
        {return (logl(_X)); }
inline long double __cdecl log10( long double _X) throw()
        {return (log10l(_X)); }
inline long double __cdecl log1p( long double _X) throw()
        {return (log1pl(_X)); }
inline long double __cdecl log2( long double _X) throw()
        {return (log2l(_X)); }
inline long double __cdecl logb( long double _X) throw()
        {return (logbl(_X)); }
inline long __cdecl lrint( long double _X) throw()
        {return (lrintl(_X)); }
inline long __cdecl lround( long double _X) throw()
        {return (lroundl(_X)); }
inline long double __cdecl modf( long double _X, long double * _Y) throw()
        {return (modfl(_X, _Y)); }
inline long double __cdecl nearbyint( long double _X) throw()
        {return (nearbyintl(_X)); }
inline long double __cdecl nextafter( long double _X, long double _Y) throw()
        {return (nextafterl(_X, _Y)); }
inline long double __cdecl nexttoward( long double _X, long double _Y) throw()
        {return (nexttowardl(_X, _Y)); }
inline long double __cdecl pow( long double _X, long double _Y) throw()
        {return (powl(_X, _Y)); }
inline long double __cdecl pow( long double _X, int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline long double __cdecl remainder( long double _X, long double _Y) throw()
        {return (remainderl(_X, _Y)); }
inline long double __cdecl remquo( long double _X, long double _Y, int *_Z) throw()
        {return (remquol(_X, _Y, _Z)); }
inline long double __cdecl rint( long double _X) throw()
        {return (rintl(_X)); }
inline long double __cdecl round( long double _X) throw()
        {return (roundl(_X)); }
inline long double __cdecl scalbln( long double _X, long _Y) throw()
        {return (scalblnl(_X, _Y)); }
inline long double __cdecl scalbn( long double _X, int _Y) throw()
        {return (scalbnl(_X, _Y)); }
inline long double __cdecl sin( long double _X) throw()
        {return (sinl(_X)); }
inline long double __cdecl sinh( long double _X) throw()
        {return (sinhl(_X)); }
inline long double __cdecl sqrt( long double _X) throw()
        {return (sqrtl(_X)); }
inline long double __cdecl tan( long double _X) throw()
        {return (tanl(_X)); }
inline long double __cdecl tanh( long double _X) throw()
        {return (tanhl(_X)); }
inline long double __cdecl tgamma( long double _X) throw()
        {return (tgammal(_X)); }
inline long double __cdecl trunc( long double _X) throw()
        {return (truncl(_X)); }

}


#pragma pack(pop)
#line 16 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cmath"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtgmath.h"







#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtr1common"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _T1,
 class _Ret>
 struct unary_function;


template<class _T1,
 class _T2,
 class _Ret>
 struct binary_function;


struct _Nil
 {
 };
static _Nil _Nil_obj;


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static const _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;

 operator value_type() const
  {
  return (value);
  }
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool>
 struct _Cat_base
  : false_type
 {
 };

template<>
 struct _Cat_base<true>
  : true_type
 {
 };


template<bool _Test,
 class _Ty = void>
 struct enable_if
 {
 };

template<class _Ty>
 struct enable_if<true, _Ty>
 {
 typedef _Ty type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };


template<class _Ty1, class _Ty2>
 struct is_same
  : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
  : true_type
 {
 };


template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_const<const _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_volatile<volatile _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };
#line 253 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtr1common"
template<>
 struct _Is_integral<__int64>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned __int64>
  : true_type
 {
 };



template<class _Ty>
 struct is_integral
  : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct is_floating_point
  : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };

template<class _Ty>
 struct _Is_numeric
  : _Cat_base<is_integral<_Ty>::value
   || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 struct remove_reference
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&&>
 {
 typedef _Ty type;
 };


template<class _Tgt,
 class _Src>
 struct _Copy_cv
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const _Src>
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef const _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, volatile _Src>
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef volatile _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const volatile _Src>
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef const volatile _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, _Src&>
 {
 typedef typename _Copy_cv<_Tgt, _Src>::type type;
 };


struct _Wrap_int
 {
 _Wrap_int(int)
  {
  }
 };

template<class _Ty>
 struct _Identity
 {
 typedef _Ty type;
 };
#line 419 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtr1common"
template<class _Ty>
 struct _Has_result_type
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };
}

#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtgmath.h"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
template<class _Ty>
 struct _Promote_to_float
 {
 typedef typename conditional<is_integral<_Ty>::value,
  double, _Ty>::type type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Common_float_type
 {
 typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
 typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
 typedef typename conditional<is_same<_Ty1f, long double>::value
  || is_same<_Ty2f, long double>::value, long double,
  typename conditional<is_same<_Ty1f, double>::value
   || is_same<_Ty2f, double>::value, double,
   float>::type>::type type;
 };
}
#line 75 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtgmath.h"
extern "C" double __cdecl pow( double, double);
float __cdecl pow( float, float) throw ();
long double __cdecl pow( long double, long double) throw ();

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value
  && ::std:: _Is_numeric<_Ty2>::value,
  typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
 pow(const _Ty1 _Left, const _Ty2 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (:: pow(type(_Left), type(_Right)));
 }


extern "C" double __cdecl acos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C" double __cdecl asin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C" double __cdecl atan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C" double __cdecl atan2( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl ceil( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C" double __cdecl cos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C" double __cdecl cosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C" double __cdecl exp( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl floor( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C" double __cdecl fmod( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl frexp( double, int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left, int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl ldexp( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left, int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C" double __cdecl log( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C" double __cdecl log10( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C" double __cdecl sin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C" double __cdecl sinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C" double __cdecl sqrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C" double __cdecl tan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C" double __cdecl tanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }
#line 124 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtgmath.h"
inline float _Fma(float _Left, float _Middle, float _Right)
 {
 return (:: fmaf(_Left, _Middle, _Right));
 }

inline double _Fma(double _Left, double _Middle, double _Right)
 {
 return (:: fma(_Left, _Middle, _Right));
 }

inline long double _Fma(long double _Left, long double _Middle, long double _Right)
 {
 return (:: fmal(_Left, _Middle, _Right));
 }

template<class _Ty1,
 class _Ty2,
 class _Ty3> inline
 typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
 fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
 return (_Fma((type)_Left, (type)_Middle, (type)_Right));
 }


inline float _Remquo(float _Left, float _Right, int *_Pquo)
 {
 return (:: remquof(_Left, _Right, _Pquo));
 }

inline double _Remquo(double _Left, double _Right, int *_Pquo)
 {
 return (:: remquo(_Left, _Right, _Pquo));
 }

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
 {
 return (:: remquol(_Left, _Right, _Pquo));
 }

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
 remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (_Remquo((type)_Left, (type)_Right, _Pquo));
 }

extern "C" __declspec(dllimport) double __cdecl acosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl asinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl atanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl cbrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl copysign( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl erf( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl erfc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl expm1( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl exp2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl fdim( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl fmax( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl fmin( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C" double __cdecl hypot( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) int __cdecl ilogb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl lgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log1p( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl logb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nearbyint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nextafter( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl nexttoward( double, long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left, long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl remainder( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl rint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl round( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl scalbln( double, long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left, long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl scalbn( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left, int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl tgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl trunc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }




#pragma warning(pop)
#pragma pack(pop)
#line 18 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cmath"




namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
#line 9 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cwchar"
#line 13 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cwchar"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"


#pragma pack(push,8)


extern "C" {
#line 55 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
struct _iobuf {
        char *_ptr;
        int _cnt;
        char *_base;
        int _flag;
        int _file;
        int _charbuf;
        int _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;
#line 82 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
__declspec(dllimport) FILE * __cdecl __iob_func(void);
#line 93 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
typedef unsigned long _fsize_t;





struct _wfinddata32_t {
        unsigned attrib;
        __time32_t time_create;
        __time32_t time_access;
        __time32_t time_write;
        _fsize_t size;
        wchar_t name[260];
};

struct _wfinddata32i64_t {
        unsigned attrib;
        __time32_t time_create;
        __time32_t time_access;
        __time32_t time_write;
        __int64 size;
        wchar_t name[260];
};

struct _wfinddata64i32_t {
        unsigned attrib;
        __time64_t time_create;
        __time64_t time_access;
        __time64_t time_write;
        _fsize_t size;
        wchar_t name[260];
};

struct _wfinddata64_t {
        unsigned attrib;
        __time64_t time_create;
        __time64_t time_access;
        __time64_t time_write;
        __int64 size;
        wchar_t name[260];
};
#line 318 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
                                 __declspec(dllimport) wchar_t * __cdecl _wgetcwd( wchar_t * _DstBuf, int _SizeInWords);
                                 __declspec(dllimport) wchar_t * __cdecl _wgetdcwd( int _Drive, wchar_t * _DstBuf, int _SizeInWords);







               __declspec(dllimport) int __cdecl _wchdir( const wchar_t * _Path);



               __declspec(dllimport) int __cdecl _wmkdir( const wchar_t * _Path);
               __declspec(dllimport) int __cdecl _wrmdir( const wchar_t * _Path);






               __declspec(dllimport) int __cdecl _waccess( const wchar_t * _Filename, int _AccessMode);
                   __declspec(dllimport) errno_t __cdecl _waccess_s( const wchar_t * _Filename, int _AccessMode);
               __declspec(dllimport) int __cdecl _wchmod( const wchar_t * _Filename, int _Mode);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wcreat( const wchar_t * _Filename, int _PermissionMode);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst32( const wchar_t * _Filename, struct _wfinddata32_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext32( intptr_t _FindHandle, struct _wfinddata32_t * _FindData);
__declspec(dllimport) int __cdecl _wunlink( const wchar_t * _Filename);
               __declspec(dllimport) int __cdecl _wrename( const wchar_t * _OldFilename, const wchar_t * _NewFilename);
__declspec(dllimport) errno_t __cdecl _wmktemp_s( wchar_t * _TemplateName, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wmktemp( wchar_t *_TemplateName);

               __declspec(dllimport) intptr_t __cdecl _wfindfirst32i64( const wchar_t * _Filename, struct _wfinddata32i64_t * _FindData);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst64i32( const wchar_t * _Filename, struct _wfinddata64i32_t * _FindData);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst64( const wchar_t * _Filename, struct _wfinddata64_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext32i64( intptr_t _FindHandle, struct _wfinddata32i64_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext64i32( intptr_t _FindHandle, struct _wfinddata64i32_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext64( intptr_t _FindHandle, struct _wfinddata64_t * _FindData);

                   __declspec(dllimport) errno_t __cdecl _wsopen_s( int * _FileHandle, const wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionFlag);
#line 368 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wopen( const wchar_t * _Filename, int _OpenFlag, int _PermissionMode = 0);
extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wsopen( const wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionMode = 0);
#line 380 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
                   __declspec(dllimport) wchar_t * __cdecl _wsetlocale( int _Category, const wchar_t * _Locale);
                   __declspec(dllimport) _locale_t __cdecl _wcreate_locale( int _Category, const wchar_t * _Locale);
#line 392 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
__declspec(dllimport) intptr_t __cdecl _wexecl( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecle( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclp( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclpe( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecv( const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecve( const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wexecvp( const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecvpe( const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnl( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnle( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlp( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlpe( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnv( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnve( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnvp( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnvpe( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
#line 473 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
typedef unsigned short _ino_t;


typedef unsigned short ino_t;





typedef unsigned int _dev_t;


typedef unsigned int dev_t;





typedef long _off_t;


typedef long off_t;






struct _stat32 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };



struct stat {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };



struct _stat32i64 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        __int64 st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };

struct _stat64i32 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };

struct _stat64 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        __int64 st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };
#line 607 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
__declspec(dllimport) int __cdecl _wstat32( const wchar_t * _Name, struct _stat32 * _Stat);

__declspec(dllimport) int __cdecl _wstat32i64( const wchar_t * _Name, struct _stat32i64 * _Stat);
__declspec(dllimport) int __cdecl _wstat64i32( const wchar_t * _Name, struct _stat64i32 * _Stat);
__declspec(dllimport) int __cdecl _wstat64( const wchar_t * _Name, struct _stat64 * _Stat);
#line 627 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
                   __declspec(dllimport) errno_t __cdecl _cgetws_s( wchar_t * _Buffer, size_t _SizeInWords, size_t * _SizeRead);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t * _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_cgetws_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _cgetws( wchar_t *_Buffer);
               __declspec(dllimport) wint_t __cdecl _getwch(void);
               __declspec(dllimport) wint_t __cdecl _getwche(void);
               __declspec(dllimport) wint_t __cdecl _putwch(wchar_t _WCh);
               __declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _WCh);
                   __declspec(dllimport) int __cdecl _cputws( const wchar_t * _String);
                   __declspec(dllimport) int __cdecl _cwprintf( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _cwprintf_s( const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _cwscanf( const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _cwscanf_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _cwscanf_s( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _cwscanf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vcwprintf( const wchar_t *_Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vcwprintf_s( const wchar_t *_Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _cwprintf_p( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vcwprintf_p( const wchar_t* _Format, va_list _ArgList);

__declspec(dllimport) int __cdecl _cwprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _cwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_l( const wchar_t *_Format, _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _vcwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _cwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   wint_t __cdecl _putwch_nolock(wchar_t _WCh);
               wint_t __cdecl _getwch_nolock(void);
               wint_t __cdecl _getwche_nolock(void);
                   wint_t __cdecl _ungetwch_nolock(wint_t _WCh);
#line 673 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
               __declspec(dllimport) FILE * __cdecl _wfsopen( const wchar_t * _Filename, const wchar_t * _Mode, int _ShFlag);

                   __declspec(dllimport) wint_t __cdecl fgetwc( FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fgetwchar(void);
                   __declspec(dllimport) wint_t __cdecl fputwc( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fputwchar( wchar_t _Ch);
               __declspec(dllimport) wint_t __cdecl getwc( FILE * _File);
               __declspec(dllimport) wint_t __cdecl getwchar(void);
                   __declspec(dllimport) wint_t __cdecl putwc( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl putwchar( wchar_t _Ch);
                   __declspec(dllimport) wint_t __cdecl ungetwc( wint_t _Ch, FILE * _File);

                   __declspec(dllimport) wchar_t * __cdecl fgetws( wchar_t * _Dst, int _SizeInWords, FILE * _File);
                   __declspec(dllimport) int __cdecl fputws( const wchar_t * _Str, FILE * _File);
                   __declspec(dllimport) wchar_t * __cdecl _getws_s( wchar_t * _Str, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline wchar_t * __cdecl _getws_s(wchar_t (&_String)[_Size]) throw() { return _getws_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_getws_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _getws( wchar_t *_String);
                   __declspec(dllimport) int __cdecl _putws( const wchar_t * _Str);

                   __declspec(dllimport) int __cdecl fwprintf( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl fwprintf_s( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl wprintf( const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl wprintf_s( const wchar_t * _Format, ...);

               __declspec(dllimport) int __cdecl _scwprintf( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl vfwprintf( FILE * _File, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfwscanf( FILE * _File, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vfwprintf_s( FILE * _File, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfwscanf_s( FILE * _File, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vwprintf( const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vwscanf( const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vwprintf_s( const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vwscanf_s( const wchar_t * _Format, va_list _ArgList);



__declspec(dllimport) int __cdecl swprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, ...);

extern "C++" {
#line 717 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#pragma warning(push)
#line 717 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
;
#line 717 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#pragma warning(disable: 4793)
#line 717 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vswprintf_s(_Dest, _Size, _Format, _ArgList); }
#line 717 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#pragma warning(pop)
#line 717 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
; }

__declspec(dllimport) int __cdecl vswprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vswscanf_s(const wchar_t * _Dst, const wchar_t * _Format, va_list _ArgList);

extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, va_list _Args) throw() { return vswprintf_s(_Dest, _Size, _Format, _Args); } }
extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, va_list _Args) throw() { return vswscanf_s(_Dest, _Size, _Format, _Args); } }
                   __declspec(dllimport) int __cdecl vswscanf(const wchar_t * _srcBuf, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _swprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _snwprintf_s( wchar_t * _DstBuf, size_t _DstSizeInWords, size_t _MaxCount, const wchar_t * _Format, ...);
extern "C++" {
#line 730 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#pragma warning(push)
#line 730 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
;
#line 730 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#pragma warning(disable: 4793)
#line 730 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Dest)[_Size], size_t _Count, const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _ArgList); }
#line 730 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#pragma warning(pop)
#line 730 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
; }
                   __declspec(dllimport) int __cdecl _vsnwprintf_s( wchar_t * _DstBuf, size_t _DstSizeInWords, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Dest)[_Size], size_t _Count, const wchar_t * _Format, va_list _Args) throw() { return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _Args); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, va_list _Args);

                   __declspec(dllimport) int __cdecl _fwprintf_p( FILE * _File, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _wprintf_p( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vfwprintf_p( FILE * _File, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_p( const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _swprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _scwprintf_p( const wchar_t * _Format, ...);
               __declspec(dllimport) int __cdecl _vscwprintf_p( const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _wprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _wprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _wprintf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vfwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _swprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _swprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _swprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vswprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vswprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

               __declspec(dllimport) int __cdecl _scwprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(dllimport) int __cdecl _scwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(dllimport) int __cdecl _vscwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
#line 785 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _swprintf( wchar_t *_Dest, const wchar_t * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _vswprintf( wchar_t *_Dest, const wchar_t * _Format, va_list _Args);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __swprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __vswprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#pragma warning(pop)



#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\swprintf.inl"
#line 34 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\swprintf.inl"
#pragma warning(push)
#pragma warning(disable: 4793 4412)
static __inline int swprintf( wchar_t * _String, size_t _Count, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4412)
static __inline int __cdecl vswprintf( wchar_t * _String, size_t _Count, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap);
}
#pragma warning(pop)




#pragma warning(push)
#pragma warning(disable: 4793 4412)
static __inline int _swprintf_l( wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4412)
static __inline int __cdecl _vswprintf_l( wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#pragma warning(pop)


#pragma warning(push)
#pragma warning(disable: 4996)

#pragma warning(push)
#pragma warning(disable: 4793 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int swprintf( wchar_t * _String, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = _vswprintf(_String, _Format, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int __cdecl vswprintf( wchar_t * _String, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf(_String, _Format, _Ap);
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4793 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int _swprintf_l( wchar_t * _String, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int __cdecl _vswprintf_l( wchar_t * _String, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return __vswprintf_l(_String, _Format, _Plocinfo, _Ap);
}
#pragma warning(pop)

#pragma warning(pop)
#line 792 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
#line 809 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
               __declspec(dllimport) wchar_t * __cdecl _wtempnam( const wchar_t * _Directory, const wchar_t * _FilePrefix);





               __declspec(dllimport) int __cdecl _vscwprintf( const wchar_t * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _vscwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl fwscanf( FILE * _File, const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _fwscanf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);

                   __declspec(dllimport) int __cdecl fwscanf_s( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _fwscanf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl swscanf( const wchar_t * _Src, const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _swscanf_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);

                   __declspec(dllimport) int __cdecl swscanf_s( const wchar_t *_Src, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _swscanf_s_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwscanf( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwscanf_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snwscanf_s( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _snwscanf_s_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl wscanf( const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wscanf_l( const wchar_t * _Format, _locale_t _Locale, ...);

                   __declspec(dllimport) int __cdecl wscanf_s( const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _wscanf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);

               __declspec(dllimport) FILE * __cdecl _wfdopen( int _FileHandle , const wchar_t * _Mode);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl _wfopen( const wchar_t * _Filename, const wchar_t * _Mode);
                   __declspec(dllimport) errno_t __cdecl _wfopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl _wfreopen( const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);
                   __declspec(dllimport) errno_t __cdecl _wfreopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);







               __declspec(dllimport) FILE * __cdecl _wpopen( const wchar_t *_Command, const wchar_t * _Mode);


__declspec(dllimport) int __cdecl _wremove( const wchar_t * _Filename);
                   __declspec(dllimport) errno_t __cdecl _wtmpnam_s( wchar_t * _DstBuf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wtmpnam( wchar_t *_Buffer);

                   __declspec(dllimport) wint_t __cdecl _fgetwc_nolock( FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fputwc_nolock( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _ungetwc_nolock( wint_t _Ch, FILE * _File);
#line 874 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
               inline wint_t __cdecl getwchar(void)
        {return (fgetwc((&__iob_func()[0]))); }
                   inline wint_t __cdecl putwchar( wchar_t _C)
        {return (fputwc(_C, (&__iob_func()[1]))); }
#line 1170 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"
struct tm {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        };







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wasctime( const struct tm * _Tm);
__declspec(dllimport) errno_t __cdecl _wasctime_s( wchar_t *_Buf, size_t _SizeInWords, const struct tm * _Tm);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], const struct tm * _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wctime32( const __time32_t *_Time);
__declspec(dllimport) errno_t __cdecl _wctime32_s( wchar_t* _Buf, size_t _SizeInWords, const __time32_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], const __time32_t * _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

__declspec(dllimport) size_t __cdecl wcsftime( wchar_t * _Buf, size_t _SizeInWords, const wchar_t * _Format, const struct tm * _Tm);
__declspec(dllimport) size_t __cdecl _wcsftime_l( wchar_t * _Buf, size_t _SizeInWords, const wchar_t *_Format, const struct tm *_Tm, _locale_t _Locale);

__declspec(dllimport) errno_t __cdecl _wstrdate_s( wchar_t * _Buf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wstrdate( wchar_t *_Buffer);

__declspec(dllimport) errno_t __cdecl _wstrtime_s( wchar_t * _Buf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wstrtime( wchar_t *_Buffer);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wctime64( const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _wctime64_s( wchar_t* _Buf, size_t _SizeInWords, const __time64_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], const __time64_t * _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }



#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wtime.inl"
#line 27 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wtime.inl"
#pragma warning(push)
#pragma warning(disable: 4996)
#line 44 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wtime.inl"
static __inline wchar_t * __cdecl _wctime(const time_t * _Time)
{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wctime64(_Time);
#pragma warning(pop)
}

static __inline errno_t __cdecl _wctime_s( wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}


#pragma warning(pop)
#line 1212 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wchar.h"







typedef int mbstate_t;
typedef wchar_t _Wint_t;

__declspec(dllimport) wint_t __cdecl btowc(int);
__declspec(dllimport) size_t __cdecl mbrlen( const char * _Ch, size_t _SizeInBytes,
                                        mbstate_t * _State);
__declspec(dllimport) size_t __cdecl mbrtowc( wchar_t * _DstCh, const char * _SrcCh,
                                    size_t _SizeInBytes, mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s( size_t* _Retval, wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t * _Retval, wchar_t (&_Dest)[_Size], const char ** _PSource, size_t _Count, mbstate_t * _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State);

__declspec(dllimport) errno_t __cdecl wcrtomb_s( size_t * _Retval, char * _Dst,
             size_t _SizeInBytes, wchar_t _Ch, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t * _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t * _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl wcsrtombs_s( size_t * _Retval, char * _Dst,
             size_t _SizeInBytes, const wchar_t ** _Src, size_t _Size, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t * _Retval, char (&_Dest)[_Size], const wchar_t ** _PSrc, size_t _Count, mbstate_t * _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, const wchar_t ** _PSource, size_t _Count, mbstate_t * _State);
__declspec(dllimport) int __cdecl wctob( wint_t _WCh);




__declspec(dllimport) void * __cdecl memmove( void * _Dst, const void * _Src, size_t _Size);



void * __cdecl memcpy( void * _Dst, const void * _Src, size_t _Size);

__declspec(dllimport) errno_t __cdecl memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
__declspec(dllimport) errno_t __cdecl memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);

__inline int __cdecl fwide( FILE * _F, int _M)
        {(void)_F; return (_M); }
__inline int __cdecl mbsinit( const mbstate_t *_P)
        {return (_P == 0 || *_P == 0); }
__inline const wchar_t * __cdecl wmemchr( const wchar_t *_S, wchar_t _C, size_t _N)
        {for (; 0 < _N; ++_S, --_N)
                if (*_S == _C)
                        return (const wchar_t *)(_S);
        return (0); }
__inline int __cdecl wmemcmp( const wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {for (; 0 < _N; ++_S1, ++_S2, --_N)
                if (*_S1 != *_S2)
                        return (*_S1 < *_S2 ? -1 : +1);
        return (0); }



__inline wchar_t * __cdecl wmemcpy( wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
 return (wchar_t *)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }

__inline wchar_t * __cdecl wmemmove( wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
#pragma warning(disable: 6387)

 return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }


errno_t __cdecl wmemcpy_s( wchar_t *_S1, rsize_t _N1, const wchar_t *_S2, rsize_t _N);
errno_t __cdecl wmemmove_s( wchar_t *_S1, rsize_t _N1, const wchar_t *_S2, rsize_t _N);




__inline wchar_t * __cdecl wmemset( wchar_t *_S, wchar_t _C, size_t _N)
        {
            wchar_t *_Su = _S;
            for (; 0 < _N; ++_Su, --_N)
            {
                *_Su = _C;
            }
            return (_S);
        }


extern "C++" {
inline wchar_t * __cdecl wmemchr( wchar_t *_S, wchar_t _C, size_t _N)
        { return (wchar_t *)wmemchr((const wchar_t *)_S, _C, _N); }
}




}


#pragma pack(pop)
#line 13 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cwchar"



typedef mbstate_t _Mbstatet;


namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
#line 10 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstddef"






#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstddef"
#line 13 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstddef"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stddef.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stddef.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stddef.h"



extern "C" {
#line 36 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stddef.h"
namespace std { typedef decltype(__nullptr) nullptr_t; }
using ::std::nullptr_t;
#line 69 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);


}
#line 13 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstddef"




namespace std {
using :: ptrdiff_t; using :: size_t;
}



namespace std {
typedef double max_align_t;
}
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstddef"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\initializer_list"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;

 initializer_list() throw ()
  : _First(0), _Last(0)
  {
  }

 initializer_list(const _Elem *_First_arg,
  const _Elem *_Last_arg) throw ()
  : _First(_First_arg), _Last(_Last_arg)
  {
  }

 const _Elem *begin() const throw ()
  {
  return (_First);
  }

 const _Elem *end() const throw ()
  {
  return (_Last);
  }

 size_t size() const throw ()
  {
  return ((size_t)(_Last - _First));
  }

private:
 const _Elem *_First;
 const _Elem *_Last;
 };


template<class _Elem> inline
 const _Elem *begin(initializer_list<_Elem> _Ilist) throw ()
 {
 return (_Ilist.begin());
 }


template<class _Elem> inline
 const _Elem *end(initializer_list<_Elem> _Ilist) throw ()
 {
 return (_Ilist.end());
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstddef"




#pragma pack(push,8)
#pragma warning(push, 3)
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstddef"
namespace std {
#line 90 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstddef"
template<class _Ty> inline
 _Ty *addressof(_Ty& _Val) throw ()
 {
 return (reinterpret_cast<_Ty *>(
  (&const_cast<char&>(
  reinterpret_cast<const volatile char&>(_Val)))));
 }



template<bool,
 class _Ty1,
 class _Ty2>
 struct _If
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct _If<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

template<class _Ty>
 struct _Always_false
 {
 static const bool value = false;
 };



template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };


template<class _Ty = void>
 struct plus
  : public binary_function<_Ty, _Ty, _Ty>
 {
 _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left + _Right);
  }
 };


template<class _Ty = void>
 struct minus
  : public binary_function<_Ty, _Ty, _Ty>
 {
 _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left - _Right);
  }
 };


template<class _Ty = void>
 struct multiplies
  : public binary_function<_Ty, _Ty, _Ty>
 {
 _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left * _Right);
  }
 };


template<class _Ty = void>
 struct equal_to
  : public binary_function<_Ty, _Ty, bool>
 {
 bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left == _Right);
  }
 };


template<class _Ty = void>
 struct less
  : public binary_function<_Ty, _Ty, bool>
 {
 bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left < _Right);
  }
 };


template<>
 struct plus<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct minus<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct multiplies<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct equal_to<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct less<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right));
  }
 };


}



namespace std {

inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
 {






 static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
 const size_t _FNV_offset_basis = 2166136261U;
 const size_t _FNV_prime = 16777619U;


 size_t _Val = _FNV_offset_basis;
 for (size_t _Next = 0; _Next < _Count; ++_Next)
  {
  _Val ^= (size_t)_First[_Next];
  _Val *= _FNV_prime;
  }






 static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");


 return (_Val);
 }


template<class _Kty>
 struct _Bitwise_hash
  : public unary_function<_Kty, size_t>
 {
 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
  }
 };


template<class _Kty>
 struct hash
  : public _Bitwise_hash<_Kty>
 {
 static const bool _Value = __is_enum(_Kty);
 static_assert(_Value,
  "The C++ Standard doesn't provide a hash for this type.");
 };
template<>
 struct hash<bool>
  : public _Bitwise_hash<bool>
 {
 };

template<>
 struct hash<char>
  : public _Bitwise_hash<char>
 {
 };

template<>
 struct hash<signed char>
  : public _Bitwise_hash<signed char>
 {
 };

template<>
 struct hash<unsigned char>
  : public _Bitwise_hash<unsigned char>
 {
 };
#line 369 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstddef"
template<>
 struct hash<wchar_t>
  : public _Bitwise_hash<wchar_t>
 {
 };


template<>
 struct hash<short>
  : public _Bitwise_hash<short>
 {
 };

template<>
 struct hash<unsigned short>
  : public _Bitwise_hash<unsigned short>
 {
 };

template<>
 struct hash<int>
  : public _Bitwise_hash<int>
 {
 };

template<>
 struct hash<unsigned int>
  : public _Bitwise_hash<unsigned int>
 {
 };

template<>
 struct hash<long>
  : public _Bitwise_hash<long>
 {
 };

template<>
 struct hash<unsigned long>
  : public _Bitwise_hash<unsigned long>
 {
 };

template<>
 struct hash<long long>
  : public _Bitwise_hash<long long>
 {
 };

template<>
 struct hash<unsigned long long>
  : public _Bitwise_hash<unsigned long long>
 {
 };

template<>
 struct hash<float>
  : public _Bitwise_hash<float>
 {
 typedef float _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<double>
  : public _Bitwise_hash<double>
 {
 typedef double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<long double>
  : public _Bitwise_hash<long double>
 {
 typedef long double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<class _Ty>
 struct hash<_Ty *>
  : public _Bitwise_hash<_Ty *>
 {
 };
}


namespace std {
namespace tr1 {
using ::std:: hash;
}
}
#line 568 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstddef"
#pragma warning(pop)
#pragma pack(pop)
#line 11 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#line 30 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static const bool has_denorm_loss = (bool)(false);
 static const bool has_infinity = (bool)(false);
 static const bool has_quiet_NaN = (bool)(false);
 static const bool has_signaling_NaN = (bool)(false);
 static const bool is_bounded = (bool)(false);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(false);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const bool is_specialized = (bool)(false);
 static const bool tinyness_before = (bool)(false);
 static const bool traps = (bool)(false);
 static const float_round_style round_style = (float_round_style)(round_toward_zero);
 static const int digits = (int)(0);
 static const int digits10 = (int)(0);

 static const int max_digits10 = (int)(0);

 static const int max_exponent = (int)(0);
 static const int max_exponent10 = (int)(0);
 static const int min_exponent = (int)(0);
 static const int min_exponent10 = (int)(0);
 static const int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static _Ty (min)() throw ()
  {
  return (_Ty(0));
  }

 static _Ty (max)() throw ()
  {
  return (_Ty(0));
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (_Ty(0));
  }

 static _Ty round_error() throw ()
  {
  return (_Ty(0));
  }

 static _Ty denorm_min() throw ()
  {
  return (_Ty(0));
  }

 static _Ty infinity() throw ()
  {
  return (_Ty(0));
  }

 static _Ty quiet_NaN() throw ()
  {
  return (_Ty(0));
  }

 static _Ty signaling_NaN() throw ()
  {
  return (_Ty(0));
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(true);
 static const bool is_integer = (bool)(true);
 static const bool is_modulo = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static const bool has_denorm_loss = (bool)(true);
 static const bool has_infinity = (bool)(true);
 static const bool has_quiet_NaN = (bool)(true);
 static const bool has_signaling_NaN = (bool)(true);
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(true);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const bool tinyness_before = (bool)(true);
 static const bool traps = (bool)(false);
 static const float_round_style round_style = (float_round_style)(round_to_nearest);
 static const int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static _Ty (min)() throw ()
  {
  return ((-128));
  }

 static _Ty (max)() throw ()
  {
  return (127);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)((-128) != 0);
 static const int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static const int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static _Ty (min)() throw ()
  {
  return ((_Ty)0x0000);
  }

 static _Ty (max)() throw ()
  {
  return ((_Ty)0xffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(0x0000 != 0);
 static const int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static const int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<_Bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static _Ty (min)() throw ()
  {
  return (false);
  }

 static _Ty (max)() throw ()
  {
  return (true);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const int digits = (int)(1);
 static const int digits10 = (int)(0);
 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static _Ty (min)() throw ()
  {
  return ((-128));
  }

 static _Ty (max)() throw ()
  {
  return (127);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 - 1);
 static const int digits10 = (int)((8 - 1) * 301L / 1000);
 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8);
 static const int digits10 = (int)(8 * 301L / 1000);
 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static _Ty (min)() throw ()
  {
  return ((-32768));
  }

 static _Ty (max)() throw ()
  {
  return (32767);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (short) - 1);
 static const int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);

 };



template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned short));
 static const int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);

 };
#line 649 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"
template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static _Ty (min)() throw ()
  {
  return ((-2147483647 - 1));
  }

 static _Ty (max)() throw ()
  {
  return (2147483647);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (int) - 1);
 static const int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffffffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned int));
 static const int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static _Ty (min)() throw ()
  {
  return ((-2147483647L - 1));
  }

 static _Ty (max)() throw ()
  {
  return (2147483647L);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (long) - 1);
 static const int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffffffffUL);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned long));
 static const int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);

 };
#line 942 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"
template<> class numeric_limits<__int64>
 : public _Num_int_base
 {
public:
 typedef __int64 _Ty;

 static _Ty (min)() throw ()
  {
  return (-0x7fffffffffffffff - 1);
  }

 static _Ty (max)() throw ()
  {
  return (0x7fffffffffffffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (__int64) - 1);
 static const int digits10 = (int)((8 * sizeof (__int64) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned __int64>
 : public _Num_int_base
 {
public:
 typedef unsigned __int64 _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffffffffffffffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned __int64));
 static const int digits10 = (int)(8 * sizeof (unsigned __int64) * 301L / 1000);

 };



template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static _Ty (min)() throw ()
  {
  return (1.175494351e-38F);
  }

 static _Ty (max)() throw ()
  {
  return (3.402823466e+38F);
  }

 static _Ty lowest() throw ()
  {
  return (-(max)());
  }

 static _Ty epsilon() throw ()
  {
  return (1.192092896e-07F);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _FDenorm._Float);
  }

 static _Ty infinity() throw ()
  {
  return (:: _FInf._Float);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _FNan._Float);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _FSnan._Float);
  }

 static const int digits = (int)(24);
 static const int digits10 = (int)(6);

 static const int max_digits10 = (int)(2 + 24 * 301L / 1000);

 static const int max_exponent = (int)((int)128);
 static const int max_exponent10 = (int)((int)38);
 static const int min_exponent = (int)((int)(-125));
 static const int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static _Ty (min)() throw ()
  {
  return (2.2250738585072014e-308);
  }

 static _Ty (max)() throw ()
  {
  return (1.7976931348623158e+308);
  }

 static _Ty lowest() throw ()
  {
  return (-(max)());
  }

 static _Ty epsilon() throw ()
  {
  return (2.2204460492503131e-016);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _Denorm._Double);
  }

 static _Ty infinity() throw ()
  {
  return (:: _Inf._Double);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _Nan._Double);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _Snan._Double);
  }

 static const int digits = (int)(53);
 static const int digits10 = (int)(15);

 static const int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static const int max_exponent = (int)((int)1024);
 static const int max_exponent10 = (int)((int)308);
 static const int min_exponent = (int)((int)(-1021));
 static const int min_exponent10 = (int)((int)(-307));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static _Ty (min)() throw ()
  {
  return (2.2250738585072014e-308);
  }

 static _Ty (max)() throw ()
  {
  return (1.7976931348623158e+308);
  }

 static _Ty lowest() throw ()
  {
  return (-(max)());
  }

 static _Ty epsilon() throw ()
  {
  return (2.2204460492503131e-016);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _LDenorm._Long_double);
  }

 static _Ty infinity() throw ()
  {
  return (:: _LInf._Long_double);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _LNan._Long_double);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _LSnan._Long_double);
  }

 static const int digits = (int)(53);
 static const int digits10 = (int)(15);

 static const int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static const int max_exponent = (int)((int)1024);
 static const int max_exponent10 = (int)((int)308);
 static const int min_exponent = (int)((int)(-1021));
 static const int min_exponent10 = (int)((int)(-307));
 };
#line 1454 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\limits"
}

#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\new"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"








#pragma pack(push,8)
#pragma warning(push, 3)
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
namespace std {
#line 36 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
}




#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\eh.h"
#line 15 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\eh.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 15 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\eh.h"
#line 24 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\eh.h"
#pragma pack(push,8)







typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *unexpected_handler)();
#line 50 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\eh.h"
struct _EXCEPTION_POINTERS;

typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);


__declspec(dllimport) __declspec(noreturn) void __cdecl terminate(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl unexpected(void);

__declspec(dllimport) int __cdecl _is_exception_typeof( const type_info &_Type, struct _EXCEPTION_POINTERS * _ExceptionPtr);



__declspec(dllimport) terminate_function __cdecl set_terminate( terminate_function _NewPtFunc);
extern "C" __declspec(dllimport) terminate_function __cdecl _get_terminate(void);
__declspec(dllimport) unexpected_function __cdecl set_unexpected( unexpected_function _NewPtFunc);
extern "C" __declspec(dllimport) unexpected_function __cdecl _get_unexpected(void);




__declspec(dllimport) _se_translator_function __cdecl _set_se_translator( _se_translator_function _NewPtFunc);

__declspec(dllimport) bool __cdecl __uncaught_exception();
#line 82 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\eh.h"
#pragma pack(pop)
#line 40 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"






#pragma pack(push,8)


extern "C" {
#line 58 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;
#line 143 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
__declspec(dllimport) int __cdecl _resetstkoflw (void);




__declspec(dllimport) unsigned long __cdecl _set_malloc_crt_max_wait( unsigned long _NewValue);
#line 158 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
                                                                   __declspec(dllimport) void * __cdecl _expand( void * _Memory, size_t _NewSize);
               __declspec(dllimport) size_t __cdecl _msize( void * _Memory);






                                               void * __cdecl _alloca( size_t _Size);


__declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO * _EntryInfo);
__declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);



               __declspec(dllimport) int __cdecl _heapadd( void * _Memory, size_t _Size);
               __declspec(dllimport) int __cdecl _heapchk(void);
               __declspec(dllimport) int __cdecl _heapmin(void);
__declspec(dllimport) int __cdecl _heapset( unsigned int _Fill);
__declspec(dllimport) size_t __cdecl _heapused(size_t * _Used, size_t * _Commit);
#line 195 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
typedef char __static_assert_t[ (sizeof(unsigned int) <= 8) ];


#pragma warning(push)
#pragma warning(disable: 6540)
__inline void *_MarkAllocaS( void *_Ptr, unsigned int _Marker)
{
    if (_Ptr)
    {
        *((unsigned int*)_Ptr) = _Marker;
        _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
}

__inline int _MallocaIsSizeInRange(size_t size)
{
    return size + 8 > size;
}
#pragma warning(pop)
#line 253 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__declspec(noalias) __inline void __cdecl _freea( void * _Memory)
{
    unsigned int _Marker;
    if (_Memory)
    {
        _Memory = (char*)_Memory - 8;
        _Marker = *(unsigned int *)_Memory;
        if (_Marker == 0xDDDD)
        {
            free(_Memory);
        }







    }
}
#pragma warning(pop)
#line 289 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\malloc.h"
}


#pragma pack(pop)
#line 41 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
#line 80 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
 namespace std {
#line 89 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
class __declspec(dllimport) exception
 {
public:
                                      exception();
                   explicit exception(const char * const &);
                                      exception(const char * const &, int);
                                      exception(const exception&);
                   exception& operator=(const exception&);
                   virtual ~exception() throw ();
                   virtual const char * what() const;

private:
                   void _Copy_str(const char *);
                   void _Tidy();

 const char * _Mywhat;
 bool _Mydofree;
 };
#line 188 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);

__declspec(dllimport) bool __cdecl uncaught_exception();


inline terminate_handler __cdecl get_terminate()
 {
 return (_get_terminate());
 }

inline unexpected_handler __cdecl get_unexpected()
 {
 return (_get_unexpected());
 }


}
#line 328 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
namespace std {





class bad_exception : public exception
 {
public:
                    bad_exception(const char *_Message = "bad exception")
  throw ()
  : exception(_Message)
  {
  }

 virtual ~bad_exception() throw ()
  {
  }
#line 355 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
 };


class bad_alloc : public exception
 {
public:
                    bad_alloc() throw ()
  : exception("bad allocation", 1)
  {
  }

 virtual ~bad_alloc() throw ()
  {
  }

private:
 friend class bad_array_new_length;

                    bad_alloc(const char *_Message) throw ()
  : exception(_Message, 1)
  {
  }
#line 386 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
 };


class bad_array_new_length
 : public bad_alloc
 {
public:

 bad_array_new_length() throw ()
  : bad_alloc("bad array new length")
  {
  }
 };


}
#line 413 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCreate( void* );
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy( void* );
__declspec(dllimport) void __cdecl __ExceptionPtrCopy( void*, const void* );
__declspec(dllimport) void __cdecl __ExceptionPtrAssign( void*, const void* );
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare( const void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap( void*, void*);

__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrRethrow( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException( void*, const void*, const void*);

namespace std {

class exception_ptr
 {
public:
 exception_ptr()
  {
  __ExceptionPtrCreate(this);
  }
 exception_ptr(nullptr_t)
  {
  __ExceptionPtrCreate(this);
  }
 ~exception_ptr() throw ()
  {
  __ExceptionPtrDestroy(this);
  }
 exception_ptr(const exception_ptr& _Rhs)
  {
  __ExceptionPtrCopy(this, &_Rhs);
  }
 exception_ptr& operator=(const exception_ptr& _Rhs)
  {
  __ExceptionPtrAssign(this, &_Rhs);
  return *this;
  }
 exception_ptr& operator=(nullptr_t)
  {
  exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 typedef exception_ptr _Myt;

 explicit operator bool() const throw ()
  {
  return __ExceptionPtrToBool(this);
  }

 void _RethrowException() const
  {
  __ExceptionPtrRethrow(this);
  }

 static exception_ptr _Current_exception()
  {
  exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }
 static exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  exception_ptr _Retval = 0;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }
private:
 void* _Data1;
 void* _Data2;
 };

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs)
 {
 __ExceptionPtrSwap(&_Lhs, &_Rhs);
 }

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs)
 {
 return __ExceptionPtrCompare(&_Lhs, &_Rhs);
 }

inline bool operator==(nullptr_t, const exception_ptr& _Rhs)
 {
 return !_Rhs;
 }

inline bool operator==(const exception_ptr& _Lhs, nullptr_t)
 {
 return !_Lhs;
 }

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs)
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs)
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs)
 {
 return !(_Lhs == _Rhs);
 }

inline exception_ptr current_exception()
 {
 return exception_ptr::_Current_exception();
 }

inline void rethrow_exception( exception_ptr _P)
 {
 _P._RethrowException();
 }

template <class _E> void *__GetExceptionInfo(_E);

template<class _E> exception_ptr make_exception_ptr(_E _Except)
 {
 return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
 }
}








#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\new"


#pragma pack(push,8)
#pragma warning(push, 3)
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\new"
namespace std {







typedef void (__cdecl * new_handler) ();




struct nothrow_t
 {
 };

extern const nothrow_t nothrow;



__declspec(dllimport) new_handler __cdecl set_new_handler( new_handler)
 throw ();

__declspec(dllimport) new_handler __cdecl get_new_handler()
 throw ();
}


void __cdecl operator delete(void *) throw ();
#pragma warning(suppress: 4985)
 void *__cdecl operator new(size_t _Size) throw (...);



inline void *__cdecl operator new(size_t, void *_Where) throw ()
 {
 return (_Where);
 }

inline void __cdecl operator delete(void *, void *) throw ()
 {
 }




inline void *__cdecl operator new[](size_t, void *_Where) throw ()
 {
 return (_Where);
 }

inline void __cdecl operator delete[](void *, void *) throw ()
 {
 }


void __cdecl operator delete[](void *) throw ();

                                               void *__cdecl operator new[](size_t _Size)
 throw (...);



                                                 void *__cdecl operator new(size_t _Size, const ::std:: nothrow_t&)
 throw ();

                                                 void *__cdecl operator new[](size_t _Size, const ::std:: nothrow_t&)
 throw ();

void __cdecl operator delete(void *, const ::std:: nothrow_t&)
 throw ();

void __cdecl operator delete[](void *, const ::std:: nothrow_t&)
 throw ();




using ::std:: new_handler;



#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"







#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\utility"






#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstdio"
#line 13 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstdio"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"






#pragma pack(push,8)


extern "C" {
#line 137 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
__declspec(dllimport) FILE * __cdecl __iob_func(void);






typedef __int64 fpos_t;
#line 175 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
               __declspec(dllimport) int __cdecl _filbuf( FILE * _File );
                   __declspec(dllimport) int __cdecl _flsbuf( int _Ch, FILE * _File);

               __declspec(dllimport) FILE * __cdecl _fsopen( const char * _Filename, const char * _Mode, int _ShFlag);

__declspec(dllimport) void __cdecl clearerr( FILE * _File);

                   __declspec(dllimport) errno_t __cdecl clearerr_s( FILE * _File );

                   __declspec(dllimport) int __cdecl fclose( FILE * _File);
                   __declspec(dllimport) int __cdecl _fcloseall(void);

               __declspec(dllimport) FILE * __cdecl _fdopen( int _FileHandle, const char * _Mode);

               __declspec(dllimport) int __cdecl feof( FILE * _File);
               __declspec(dllimport) int __cdecl ferror( FILE * _File);
                   __declspec(dllimport) int __cdecl fflush( FILE * _File);
                   __declspec(dllimport) int __cdecl fgetc( FILE * _File);
                   __declspec(dllimport) int __cdecl _fgetchar(void);
                   __declspec(dllimport) int __cdecl fgetpos( FILE * _File , fpos_t * _Pos);
                   __declspec(dllimport) char * __cdecl fgets( char * _Buf, int _MaxCount, FILE * _File);

               __declspec(dllimport) int __cdecl _fileno( FILE * _File);






               __declspec(dllimport) char * __cdecl _tempnam( const char * _DirName, const char * _FilePrefix);





                   __declspec(dllimport) int __cdecl _flushall(void);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl fopen( const char * _Filename, const char * _Mode);

                   __declspec(dllimport) errno_t __cdecl fopen_s( FILE ** _File, const char * _Filename, const char * _Mode);

                   __declspec(dllimport) int __cdecl fprintf( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl fprintf_s( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl fputc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl _fputchar( int _Ch);
                   __declspec(dllimport) int __cdecl fputs( const char * _Str, FILE * _File);
                   __declspec(dllimport) size_t __cdecl fread( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);

                   __declspec(dllimport) size_t __cdecl fread_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl freopen( const char * _Filename, const char * _Mode, FILE * _File);

                   __declspec(dllimport) errno_t __cdecl freopen_s( FILE ** _File, const char * _Filename, const char * _Mode, FILE * _OldFile);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl fscanf( FILE * _File, const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _fscanf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(dllimport) int __cdecl fscanf_s( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _fscanf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl fsetpos( FILE * _File, const fpos_t * _Pos);
                   __declspec(dllimport) int __cdecl fseek( FILE * _File, long _Offset, int _Origin);
               __declspec(dllimport) long __cdecl ftell( FILE * _File);

                   __declspec(dllimport) int __cdecl _fseeki64( FILE * _File, __int64 _Offset, int _Origin);
               __declspec(dllimport) __int64 __cdecl _ftelli64( FILE * _File);

                   __declspec(dllimport) size_t __cdecl fwrite( const void * _Str, size_t _Size, size_t _Count, FILE * _File);
               __declspec(dllimport) int __cdecl getc( FILE * _File);
               __declspec(dllimport) int __cdecl getchar(void);
               __declspec(dllimport) int __cdecl _getmaxstdio(void);

__declspec(dllimport) char * __cdecl gets_s( char * _Buf, rsize_t _Size);

extern "C++" { template <size_t _Size> inline char * __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "gets_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl gets( char *_Buffer);
               int __cdecl _getw( FILE * _File);





                   __declspec(dllimport) int __cdecl _pclose( FILE * _File);
               __declspec(dllimport) FILE * __cdecl _popen( const char * _Command, const char * _Mode);

                   __declspec(dllimport) int __cdecl printf( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl printf_s( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl putc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl putchar( int _Ch);
                   __declspec(dllimport) int __cdecl puts( const char * _Str);
                   __declspec(dllimport) int __cdecl _putw( int _Word, FILE * _File);


__declspec(dllimport) int __cdecl remove( const char * _Filename);
               __declspec(dllimport) int __cdecl rename( const char * _OldFilename, const char * _NewFilename);
__declspec(dllimport) int __cdecl _unlink( const char * _Filename);

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_unlink" ". See online help for details.")) __declspec(dllimport) int __cdecl unlink( const char * _Filename);


__declspec(dllimport) void __cdecl rewind( FILE * _File);
                   __declspec(dllimport) int __cdecl _rmtmp(void);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl scanf( const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _scanf_l( const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(dllimport) int __cdecl scanf_s( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _scanf_s_l( const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl setbuf( FILE * _File, char * _Buffer);
                   __declspec(dllimport) int __cdecl _setmaxstdio( int _Max);
                   __declspec(dllimport) unsigned int __cdecl _set_output_format( unsigned int _Format);
                   __declspec(dllimport) unsigned int __cdecl _get_output_format(void);
                   __declspec(dllimport) int __cdecl setvbuf( FILE * _File, char * _Buf, int _Mode, size_t _Size);
                   __declspec(dllimport) int __cdecl _snprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, ...);
extern "C++" {
#line 298 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#pragma warning(push)
#line 298 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
;
#line 298 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#pragma warning(disable: 4793)
#line 298 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _ArgList); }
#line 298 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#pragma warning(pop)
#line 298 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
; }

                   __declspec(dllimport) int __cdecl sprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, ...);

extern "C++" {
#line 302 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#pragma warning(push)
#line 302 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
;
#line 302 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#pragma warning(disable: 4793)
#line 302 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Dest)[_Size], const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vsprintf_s(_Dest, _Size, _Format, _ArgList); }
#line 302 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
#pragma warning(pop)
#line 302 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
; }
               __declspec(dllimport) int __cdecl _scprintf( const char * _Format, ...);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl sscanf( const char * _Src, const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _sscanf_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(dllimport) int __cdecl sscanf_s( const char * _Src, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _sscanf_s_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snscanf( const char * _Src, size_t _MaxCount, const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snscanf_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snscanf_s( const char * _Src, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _snscanf_s_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl tmpfile(void);

                   __declspec(dllimport) errno_t __cdecl tmpfile_s( FILE ** _File);
                   __declspec(dllimport) errno_t __cdecl tmpnam_s( char * _Buf, rsize_t _Size);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buf)[_Size]) throw() { return tmpnam_s(_Buf, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl tmpnam( char *_Buffer);
                   __declspec(dllimport) int __cdecl ungetc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl vfprintf( FILE * _File, const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfscanf( FILE * _File, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vfprintf_s( FILE * _File, const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfscanf_s( FILE * _File, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vprintf( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vscanf( const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vprintf_s( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vscanf_s( const char * _Format, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl vsnprintf( char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vsnprintf_s( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, va_list _Args) throw() { return vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }

                   __declspec(dllimport) int __cdecl _vsnprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, va_list _Args) throw() { return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable: 4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snprintf( char *_Dest, size_t _Count, const char * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnprintf( char *_Dest, size_t _Count, const char * _Format, va_list _Args);
#pragma warning(pop)

__declspec(dllimport) int __cdecl vsprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Dest)[_Size], const char * _Format, va_list _Args) throw() { return vsprintf_s(_Dest, _Size, _Format, _Args); } }
                   __declspec(dllimport) int __cdecl vsscanf_s(const char * _Src, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(const char (&_Src)[_Size], const char * _Format, va_list _Args) throw() { return vsscanf_s(_Src, _Size, _Format, _Args); } }

#pragma warning(push)
#pragma warning(disable: 4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl sprintf( char *_Dest, const char * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl vsprintf( char *_Dest, const char * _Format, va_list _Args);
                   __declspec(dllimport) int __cdecl vsscanf(const char * _srcBuf, const char * _Format, va_list _ArgList);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl _vscprintf( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _snprintf_c( char * _DstBuf, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _vsnprintf_c( char *_DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fprintf_p( FILE * _File, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _printf_p( const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _sprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _vfprintf_p( FILE * _File, const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_p( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _scprintf_p( const char * _Format, ...);
               __declspec(dllimport) int __cdecl _vscprintf_p( const char * _Format, va_list _ArgList);
__declspec(dllimport) int __cdecl _set_printf_count_output( int _Value);
__declspec(dllimport) int __cdecl _get_printf_count_output(void);

                   __declspec(dllimport) int __cdecl _printf_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _printf_p_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _printf_s_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_s_l( const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vfprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _sprintf_l( char * _DstBuf, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _sprintf_p_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _sprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsprintf_l( char * _DstBuf, const char * _Format, _locale_t, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_p_l( char * _DstBuf, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _scprintf_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _scprintf_p_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vscprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vscprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snprintf_c_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnprintf_c_l( char * _DstBuf, size_t _MaxCount, const char *, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
#line 670 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
__declspec(dllimport) void __cdecl _lock_file( FILE * _File);
__declspec(dllimport) void __cdecl _unlock_file( FILE * _File);

                   __declspec(dllimport) int __cdecl _fclose_nolock( FILE * _File);
                   __declspec(dllimport) int __cdecl _fflush_nolock( FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fread_nolock( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fread_nolock_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);
                   __declspec(dllimport) int __cdecl _fseek_nolock( FILE * _File, long _Offset, int _Origin);
               __declspec(dllimport) long __cdecl _ftell_nolock( FILE * _File);
                   __declspec(dllimport) int __cdecl _fseeki64_nolock( FILE * _File, __int64 _Offset, int _Origin);
               __declspec(dllimport) __int64 __cdecl _ftelli64_nolock( FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fwrite_nolock( const void * _DstBuf, size_t _Size, size_t _Count, FILE * _File);
                   __declspec(dllimport) int __cdecl _ungetc_nolock( int _Ch, FILE * _File);
#line 709 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdio.h"
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tempnam" ". See online help for details.")) __declspec(dllimport) char * __cdecl tempnam( const char * _Directory, const char * _FilePrefix);





                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE * __cdecl fdopen( int _FileHandle, const char * _Format);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE * _File);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE * _File);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE * _File);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);




}


#pragma pack(pop)
#line 13 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstdio"
#line 32 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstdio"
typedef FILE _iobuf;


namespace std {
using :: _iobuf; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: gets; using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

                            using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstring"
#line 17 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cstring"
namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd"




#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
#line 15 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 15 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"





#pragma pack(push,8)
#line 35 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
extern "C" {
#line 44 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
typedef void *_HFILE;
#line 71 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);
typedef int (__cdecl * _CRT_REPORT_HOOKW)(int, wchar_t *, int *);
#line 103 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);
#line 164 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);







struct _CrtMemBlockHeader;
typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        size_t lCounts[5];
        size_t lSizes[5];
        size_t lHighWaterCount;
        size_t lTotalCount;
} _CrtMemState;
#line 385 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
__declspec(dllimport) extern long _crtAssertBusy;



__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(
    void
    );







__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
             _CRT_REPORT_HOOK _PFnNewHook
        );

__declspec(dllimport) int __cdecl _CrtSetReportHook2(
             int _Mode,
                 _CRT_REPORT_HOOK _PFnNewHook
        );

__declspec(dllimport) int __cdecl _CrtSetReportHookW2(
             int _Mode,
                 _CRT_REPORT_HOOKW _PFnNewHook
        );


__declspec(dllimport) int __cdecl _CrtSetReportMode(
             int _ReportType,
             int _ReportMode
        );

__declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(
             int _ReportType,
                 _HFILE _ReportFile
        );

__declspec(dllimport) int __cdecl _CrtDbgReport(
             int _ReportType,
                   const char * _Filename,
             int _Linenumber,
                   const char * _ModuleName,
                   const char * _Format,
        ...);

__declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(
             size_t _NewDebugFillThreshold
        );




__declspec(dllimport) int __cdecl _CrtDbgReportW(
             int _ReportType,
                   const wchar_t * _Filename,
             int _LineNumber,
                   const wchar_t * _ModuleName,
                   const wchar_t * _Format,
        ...);
#line 621 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
__declspec(dllimport) extern long _crtBreakAlloc;


__declspec(dllimport) long __cdecl _CrtSetBreakAlloc(
             long _BreakAlloc
        );





                                                                __declspec(dllimport) void * __cdecl _malloc_dbg(
             size_t _Size,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                                                       __declspec(dllimport) void * __cdecl _calloc_dbg(
             size_t _Count,
             size_t _Size,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );


                                                                   __declspec(dllimport) void * __cdecl _realloc_dbg(
                                       void * _Memory,
             size_t _NewSize,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );


                                                                                         __declspec(dllimport) void * __cdecl _recalloc_dbg
(
                                       void * _Memory,
             size_t _NumOfElements,
             size_t _SizeOfElements,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
);

                                                                   __declspec(dllimport) void * __cdecl _expand_dbg(
                      void * _Memory,
             size_t _NewSize,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

__declspec(dllimport) void __cdecl _free_dbg(
                                       void * _Memory,
             int _BlockType
        );

__declspec(dllimport) size_t __cdecl _msize_dbg (
                      void * _Memory,
             int _BlockType
        );

__declspec(dllimport) size_t __cdecl _aligned_msize_dbg (
                      void * _Memory,
             size_t _Alignment,
             size_t _Offset
        );

                                                                __declspec(dllimport) void * __cdecl _aligned_malloc_dbg(
             size_t _Size,
             size_t _Alignment,
                   const char * _Filename,
             int _LineNumber
        );


                                                                   __declspec(dllimport) void * __cdecl _aligned_realloc_dbg(
                                       void * _Memory,
             size_t _NewSize,
             size_t _Alignment,
                   const char * _Filename,
             int _LineNumber
        );


                                                                                         __declspec(dllimport) void * __cdecl _aligned_recalloc_dbg
(
                                       void * _Memory,
             size_t _NumOfElements,
             size_t _SizeOfElements,
             size_t _Alignment,
                   const char * _Filename,
             int _LineNumber
);

                                                                __declspec(dllimport) void * __cdecl _aligned_offset_malloc_dbg(
             size_t _Size,
             size_t _Alignment,
             size_t _Offset,
                   const char * _Filename,
             int _LineNumber
        );


                                                                   __declspec(dllimport) void * __cdecl _aligned_offset_realloc_dbg(
                                       void * _Memory,
             size_t _NewSize,
             size_t _Alignment,
             size_t _Offset,
                   const char * _Filename,
             int _LineNumber
        );


                                                                                         __declspec(dllimport) void * __cdecl _aligned_offset_recalloc_dbg
(
                                       void * _Memory,
             size_t _NumOfElements,
             size_t _SizeOfElements,
             size_t _Alignment,
             size_t _Offset,
                   const char * _Filename,
             int _LineNumber
);

__declspec(dllimport) void __cdecl _aligned_free_dbg(
                                       void * _Memory
        );

                                 __declspec(dllimport) char * __cdecl _strdup_dbg(
                   const char * _Str,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) wchar_t * __cdecl _wcsdup_dbg(
                   const wchar_t * _Str,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) char * __cdecl _tempnam_dbg(
                   const char * _DirName,
                   const char * _FilePrefix,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) wchar_t * __cdecl _wtempnam_dbg(
                   const wchar_t * _DirName,
                   const wchar_t * _FilePrefix,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) char * __cdecl _fullpath_dbg(
                                         char * _FullPath,
               const char * _Path,
             size_t _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) wchar_t * __cdecl _wfullpath_dbg(
                                         wchar_t * _FullPath,
               const wchar_t * _Path,
             size_t _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) char * __cdecl _getcwd_dbg(
                                         char * _DstBuf,
             int _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) wchar_t * __cdecl _wgetcwd_dbg(
                                         wchar_t * _DstBuf,
             int _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) char * __cdecl _getdcwd_dbg(
             int _Drive,
                                         char * _DstBuf,
             int _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 __declspec(dllimport) wchar_t * __cdecl _wgetdcwd_dbg(
             int _Drive,
                                         wchar_t * _DstBuf,
             int _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 char * __cdecl _getdcwd_lk_dbg(
             int _Drive,
                                         char * _DstBuf,
             int _SizeInBytes,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                                 wchar_t * __cdecl _wgetdcwd_lk_dbg(
             int _Drive,
                                         wchar_t * _DstBuf,
             int _SizeInWords,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                   __declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(
                                                                                 char ** _PBuffer,
                  size_t * _PBufferSizeInBytes,
               const char * _VarName,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );

                   __declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(
                                                                                 wchar_t ** _PBuffer,
                  size_t * _PBufferSizeInWords,
               const wchar_t * _VarName,
             int _BlockType,
                   const char * _Filename,
             int _LineNumber
        );
#line 886 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook
(
    void
);







__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook
(
             _CRT_ALLOC_HOOK _PfnNewHook
);
#line 922 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
__declspec(dllimport) extern int _crtDbgFlag;


__declspec(dllimport) int __cdecl _CrtCheckMemory(
        void
        );

__declspec(dllimport) int __cdecl _CrtSetDbgFlag(
             int _NewFlag
        );

__declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(
             void (__cdecl *_PFn)(void *, void *),
        void * _Context
        );

               __declspec(dllimport) int __cdecl _CrtIsValidPointer(
                 const void * _Ptr,
             unsigned int _Bytes,
             int _ReadWrite
        );

               __declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(
                 const void * _HeapPtr
        );

__declspec(dllimport) int __cdecl _CrtIsMemoryBlock(
                 const void * _Memory,
             unsigned int _Bytes,
                  long * _RequestNumber,
                  char ** _Filename,
                  int * _LineNumber
        );

               __declspec(dllimport) int __cdecl _CrtReportBlockType(
                 const void * _Memory
        );
#line 968 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient
(
    void
);







__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient
(
             _CRT_DUMP_CLIENT _PFnNewDump
);


__declspec(dllimport) void __cdecl _CrtMemCheckpoint(
              _CrtMemState * _State
        );

__declspec(dllimport) int __cdecl _CrtMemDifference(
              _CrtMemState * _State,
             const _CrtMemState * _OldState,
             const _CrtMemState * _NewState
        );

__declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(
                 const _CrtMemState * _State
        );

__declspec(dllimport) void __cdecl _CrtMemDumpStatistics(
             const _CrtMemState * _State
        );

__declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(
        void
        );

__declspec(dllimport) int __cdecl _CrtSetCheckCount(
             int _CheckCount
        );

__declspec(dllimport) int __cdecl _CrtGetCheckCount(
        void
        );




}



extern "C++" {
#line 1069 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
#pragma warning(suppress: 4985)
 void * __cdecl operator new[](size_t _Size);

                                               void * __cdecl operator new(
        size_t _Size,
        int,
        const char *,
        int
        );

#pragma warning(suppress: 4985)
 void * __cdecl operator new[](
        size_t _Size,
        int,
        const char *,
        int
        );

void __cdecl operator delete[](void *);
void __cdecl operator delete(void * _P, int, const char *, int);
void __cdecl operator delete[](void * _P, int, const char *, int);
#line 1113 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdbg.h"
}






#pragma pack(pop)
#line 11 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {


typedef _Longlong streamoff;
typedef _Longlong streamsize;
#line 31 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd"
extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate()
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((long long)(_Fpos))));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };






typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(
                     const _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t __cdecl length( const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *__cdecl copy(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl _Copy_s(
                           _Elem *_First1, size_t _Dest_size,
                     const _Elem *_First2, size_t _Count)
  {
  { if (!(_Count <= _Dest_size)) { (void) ((!!(("_Count <= _Dest_size" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd", 173, 0, L"%s", L"\"_Count <= _Dest_size\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"_Count <= _Dest_size", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd", 173, 0); return (0); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem *__cdecl find(
                     const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *__cdecl move(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl assign(
                       _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(
  const int_type& _Meta) throw ()
  {
  return ((_Elem)_Meta);
  }

 static int_type __cdecl to_int_type(
  const _Elem& _Ch) throw ()
  {
  return ((int_type)_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(
  const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };
#line 286 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd"
template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(
  const int_type& _Meta) throw ()
  {
  return (_Meta);
  }

 static int_type __cdecl to_int_type(
  const _Elem& _Ch) throw ()
  {
  return (_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(
  const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((wint_t)(0xFFFF));
  }
 };



template<>
 struct char_traits<unsigned short>
 {
 typedef unsigned short _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp((const wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen((const wchar_t *)_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));

  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr((const wchar_t *)_First,
    _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(const int_type& _Meta) throw ()
  {
  return (_Meta);
  }

 static int_type __cdecl to_int_type(const _Elem& _Ch) throw ()
  {
  return (_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((wint_t)(0xFFFF));
  }
 };



template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: memcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: strlen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_bytes,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static _Elem __cdecl to_char_type(
  const int_type& _Meta) throw ()
  {
  return ((_Elem)_Meta);
  }

 static int_type __cdecl to_int_type(
  const _Elem& _Ch) throw ()
  {
  return ((unsigned char)_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(
  const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;
#line 736 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iosfwd"
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
 numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
 numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

}


#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\utility"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"







#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4180 4296)
#line 66 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"
namespace std {

template<class _Ty>
 struct _Ptr_traits
 {
 };

template<class _Ty>
 struct _Ptr_traits<_Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<const _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<volatile _Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Ptr_traits<const volatile _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Is_funptr
  : false_type
 {
 };

template<class _Ty>
 struct _Is_memfunptr
  : false_type
 {
 };
#line 121 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"
template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__cdecl *)(_Types...)> : true_type { }; template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__stdcall *)(_Types...)> : true_type { }; template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__fastcall *)(_Types...)> : true_type { };
#line 133 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile> : true_type { };


template<class _Ret,
 class... _Types>
 struct _Is_funptr<_Ret (*)(_Types..., ...)>
  : true_type
 {
 };
#line 152 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> : true_type { };




template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef const volatile _Ty type;
 };


template<class _Ty>
 struct add_reference
 {
 typedef _Ty& type;
 };
#line 191 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"
template<> struct add_reference< void> { typedef void type; }; template<> struct add_reference<const void> { typedef const void type; }; template<> struct add_reference<volatile void> { typedef volatile void type; }; template<> struct add_reference<const volatile void> { typedef const volatile void type; };



template<class _Ty>
 struct add_lvalue_reference
 {
 typedef typename add_reference<_Ty>::type type;
 };



template<class _Ty>
 struct add_rvalue_reference
 {
 typedef _Ty&& type;
 };
#line 216 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"
template<> struct add_rvalue_reference< void> { typedef void type; }; template<> struct add_rvalue_reference<const void> { typedef const void type; }; template<> struct add_rvalue_reference<volatile void> { typedef volatile void type; }; template<> struct add_rvalue_reference<const volatile void> { typedef const volatile void type; };



template<class _Ty>
 typename add_rvalue_reference<_Ty>::type
  declval() throw ();


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };
#line 276 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"
template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };



template<class _Ty>
 struct add_pointer
 {
 typedef typename remove_reference<_Ty>::type *type;
 };



template<class _Ty>
 struct _Is_void
  : false_type
 {
 };

template<>
 struct _Is_void<void>
  : true_type
 {
 };

template<class _Ty>
 struct is_void
  : _Is_void<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_array
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
  : true_type
 {
 };


template<class _Ty>
 struct is_lvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
  : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
  : true_type
 {
 };


template<class _Ty>
 struct is_reference
  : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };



template<class _Ty>
 struct _Is_member_object_pointer
  : false_type
 {
 };

template<class _Ty1, class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*>
  : _Cat_base<!_Is_memfunptr<_Ty1 _Ty2::*>::value>
 {
 };

template<class _Ty>
 struct is_member_object_pointer
  : _Is_member_object_pointer<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_member_function_pointer
  : _Cat_base<_Is_memfunptr<typename remove_cv<_Ty>::type>::value>
 {
 };


template<class _Ty>
 struct _Is_pointer
  : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
  : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
  : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };



template<class _Ty>
 struct _Is_nullptr_t
  : _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
 {
 };


template<class _Ty>
 struct is_union : _Cat_base<__is_union(_Ty)>
 {
 };


template<class _Ty>
 struct is_class : _Cat_base<__is_class(_Ty)>
 {
 };


template<class _Ty>
 struct is_function
  : _Cat_base<_Is_funptr<typename remove_cv<_Ty>::type *>::value>
 {
 };

template<class _Ty>
 struct is_function<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_function<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_arithmetic
  : _Cat_base<is_integral<_Ty>::value
  || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_fundamental
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value
  || _Is_nullptr_t<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
  : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };



template<class _From, class _To>
 struct is_convertible
  : _Cat_base<__is_convertible_to(_From, _To)>
 {
 };


template<class _Ty>
 struct is_enum
  : _Cat_base<__is_enum(_Ty)>
 {
 };


template<class _Ty>
 struct is_compound
  : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
  : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value
  || _Is_nullptr_t<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_const
  : _Cat_base<_Ptr_traits<_Ty *>::_Is_const
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<_Ty[_Nx]>
  : false_type
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<const _Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_volatile
  : _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_pod : _Cat_base<__is_pod(_Ty)>
 {
 };


template<class _Ty>
 struct is_empty : _Cat_base<__is_empty(_Ty)>
 {
 };


template<class _Ty>
 struct is_polymorphic : _Cat_base<__is_polymorphic(_Ty)>
 {
 };


template<class _Ty>
 struct is_abstract : _Cat_base<__is_abstract(_Ty)>
 {
 };


template<class _Ty>
 struct is_standard_layout : _Cat_base<__is_standard_layout(_Ty)>
 {
 };


template<class _Ty>
 struct is_literal_type : _Cat_base<__is_literal_type(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivial : _Cat_base<__is_trivial(_Ty)>
 {
 };


template<class _Ty>
 struct has_virtual_destructor
  : _Cat_base<__has_virtual_destructor(_Ty)>
 {
 };





template<class _Ty,
 class... _Args>
 struct is_constructible
  : _Cat_base<__is_constructible(_Ty, _Args...)>
 {
 };




template<class _Ty>
 struct is_copy_constructible
  : is_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct has_copy_constructor
  : is_copy_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_default_constructible
  : is_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_default_constructor
  : is_default_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_move_constructible
  : is_constructible<

   _Ty,

   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct has_move_constructor
  : is_move_constructible<_Ty>::type
 {
 };



template<class _To,
 class _From>
 struct _Is_assignable
 {
 template<class _Dest,
  class _Src>
  static auto _Fn(int)
   -> decltype((::std:: declval<_Dest>() = ::std:: declval<_Src>()),
    true_type());

 template<class _Dest,
  class _Src>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_To, _From>(0)) type;
 };

template<class _To,
 class _From>
 struct is_assignable
  : _Is_assignable<_To, _From>::type

 {
 };



template<class _Ty>
 struct is_copy_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct has_copy_assign
  : is_copy_assignable<_Ty>::type
 {
 };



template<class _Ty>
 struct is_move_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };

template<class _Ty>
 struct has_move_assign
  : is_move_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_destructible
  : _Cat_base<__is_destructible(_Ty)>
 {
 };





template<class _Ty,
 class... _Args>
 struct is_trivially_constructible
  : _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
 {
 };



template<class _Ty>
 struct is_trivially_copy_constructible

  : is_trivially_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct is_trivially_copyable
  : is_trivially_copy_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_trivial_copy_constructor
  : is_trivially_copy_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_default_constructible
  : is_trivially_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_trivial_default_constructor
  : is_trivially_default_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_constructible

  : is_trivially_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct has_trivial_move_constructor
  : is_trivially_move_constructible<_Ty>::type
 {
 };


template<class _To,
 class _From>
 struct is_trivially_assignable

  : _Cat_base<__is_trivially_assignable(_To, _From)>

 {
 };


template<class _Ty>
 struct is_trivially_copy_assignable

  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct has_trivial_copy_assign
  : is_trivially_copy_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_assignable

  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct has_trivial_move_assign
  : is_trivially_move_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_destructible
  : _Cat_base<__has_trivial_destructor(_Ty)>
 {
 };





template<class _Ty,
 class... _Args>
 struct is_nothrow_constructible
  : _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
 {
 };




template<class _Ty>
 struct is_nothrow_copy_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct has_nothrow_copy_constructor

  : is_nothrow_copy_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct is_nothrow_default_constructible
  : is_nothrow_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_nothrow_default_constructor
  : is_nothrow_default_constructible<_Ty>::type
 {
 };



template<class _Ty>
 struct is_nothrow_move_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct has_nothrow_move_constructor
  : is_nothrow_move_constructible<_Ty>::type
 {
 };


template<class _To,
 class _From>
 struct is_nothrow_assignable

  : _Cat_base<__is_nothrow_assignable(_To, _From)>

 {
 };


template<class _Ty>
 struct is_nothrow_copy_assignable

  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct has_nothrow_copy_assign
  : is_nothrow_copy_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_assignable

  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct has_nothrow_move_assign
  : is_nothrow_move_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_destructible

  : _Cat_base<__is_nothrow_destructible(_Ty)>

 {
 };


template<class _Ty>
 struct has_trivial_constructor

  : is_trivially_default_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_trivial_copy

  : is_trivially_copy_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_trivial_assign

  : is_trivially_copy_assignable<_Ty>::type

 {
 };


template<class _Ty>
 struct has_trivial_destructor

  : is_trivially_destructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_nothrow_constructor

  : is_nothrow_default_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_nothrow_copy

  : is_nothrow_copy_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_nothrow_assign

  : is_nothrow_copy_assignable<_Ty>::type

 {
 };


template<class _Ty>
 struct _Has_signed_vals
  : _Cat_base<(typename remove_cv<_Ty>::type)(-1)
  < (typename remove_cv<_Ty>::type)(0)>
 {
 };

template<class _Ty>
 struct is_signed
  : _Cat_base<is_floating_point<_Ty>::value || (is_integral<_Ty>::value
  && _Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::type>::value)>
 {
 };


template<class _Ty>
 struct is_unsigned
  : _Cat_base<is_integral<_Ty>::value
  && !_Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::type>::value>
 {
 };


template<class _Ty>
 struct _Change_sign
 {
 static_assert(
  ((is_integral<_Ty>::value || is_enum<_Ty>::value)
   && !is_same<_Ty, bool>::value),
  "make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
  "cv-qualified) integral type or enumeration but not a bool type.");

 typedef
  typename _If<is_same<_Ty, signed char>::value
   || is_same<_Ty, unsigned char >::value, signed char,
  typename _If<is_same<_Ty, short >::value
   || is_same<_Ty, unsigned short >::value, short,
  typename _If<is_same<_Ty, int >::value
   || is_same<_Ty, unsigned int >::value, int,
  typename _If<is_same<_Ty, long >::value
   || is_same<_Ty, unsigned long >::value, long,
  typename _If<is_same<_Ty, long long >::value
   || is_same<_Ty, unsigned long long>::value, long long,
  typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
  typename _If<sizeof (_Ty) == sizeof (short ), short,
  typename _If<sizeof (_Ty) == sizeof (int ), int,
  typename _If<sizeof (_Ty) == sizeof (long ), long,
   long long
  >::type>::type>::type>::type>::type>::type>::type>::type>::type
   _Signed;

 typedef
  typename _If<is_same<_Signed, signed char>::value, unsigned char,
  typename _If<is_same<_Signed, short >::value, unsigned short,
  typename _If<is_same<_Signed, int >::value, unsigned int,
  typename _If<is_same<_Signed, long >::value, unsigned long,
   unsigned long long
  >::type>::type>::type>::type
   _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const _Ty>
 {
 typedef const typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<volatile _Ty>
 {
 typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const volatile _Ty>
 {
 typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };


template<class _Ty>
 struct make_signed
 {
 typedef typename _Change_sign<_Ty>::_Signed type;
 };


template<class _Ty>
 struct make_unsigned
 {
 typedef typename _Change_sign<_Ty>::_Unsigned type;
 };



template<class _Ty>
 struct _Get_align
 {
 _Ty _Elt0;
 char _Elt1;
 _Ty _Elt2;

 _Get_align();
 ~_Get_align();
 };




template<class _Ty>
 struct alignment_of
  : integral_constant<size_t, (sizeof (_Get_align<typename remove_reference<_Ty>::type>) - 2 * sizeof (typename remove_reference<_Ty>::type))>
 {
 };






template<class _Ty,
 size_t _Len>
 union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len,
 size_t _Align,
 class _Ty,
 bool _Ok>
 struct _Aligned;

template<size_t _Len,
 size_t _Align,
 class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, double, false>
 {
 typedef _Align_type<max_align_t, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
 };

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
 };





template<size_t... _Vals>
 struct _Maximum;

template<>
 struct _Maximum<>
 {
 static const size_t value = 0;
 };

template<size_t _Val>
 struct _Maximum<_Val>
 {
 static const size_t value = _Val;
 };

template<size_t _First,
 size_t _Second,
 size_t... _Rest>
 struct _Maximum<_First, _Second, _Rest...>
  : _Maximum<(_First < _Second ? _Second : _First), _Rest...>
 {
 };

template<size_t _Len,
 class... _Types>
 struct aligned_union
 {
 static const size_t _Max_len = _Maximum<
  _Len, sizeof(_Types)...>::value;
 static const size_t alignment_value = _Maximum<
  alignment_of<_Types>::value...>::value;
 typedef typename aligned_storage<_Max_len, alignment_value>::type type;
 };


template<class _Ty>
 struct underlying_type
 {
 typedef __underlying_type(_Ty) type;
 };


template<class _Ty>
 struct rank
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct rank<_Ty[_Ix]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], 0>
  : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
  : _Extent<_Ty, _Nx>
 {
 };


template<class _Base, class _Der>
 struct is_base_of : _Cat_base<__is_base_of(_Base, _Der)>
 {
 };


template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::type>::type type;
 };

namespace tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_reference;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_nothrow_assign;
using ::std:: has_nothrow_constructor;
using ::std:: has_nothrow_copy;
using ::std:: has_trivial_assign;
using ::std:: has_trivial_constructor;
using ::std:: has_trivial_copy;
using ::std:: has_trivial_destructor;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
 }


template<class... _Ty>
 struct common_type;

template<class _Ty>
 struct common_type<_Ty>
 {
 typedef typename decay<_Ty>::type type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type<_Ty0, _Ty1>
 {
 typedef typename decay<
  decltype(_Always_false<_Ty0>::value
   ? ::std:: declval<_Ty0>()
   : ::std:: declval<_Ty1>())
 >::type type;
 };

template<class _Ty0,
 class _Ty1,
 class... _Ty>
 struct common_type<_Ty0, _Ty1, _Ty...>
 {
 typedef typename common_type<
  typename common_type<_Ty0, _Ty1>::type, _Ty...
 >::type type;
 };


template<size_t... _Indexes>
 struct _Arg_idx
 {
 };


template<class _Ty>
 class reference_wrapper;

template<class _Ty>
 struct _Unrefwrap_helper
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct _Unrefwrap_helper<reference_wrapper<_Ty> >
 {
 typedef _Ty& type;
 };

template<class _Ty>
 struct _Unrefwrap
 {
 typedef typename decay<_Ty>::type _Ty1;
 typedef typename _Unrefwrap_helper<_Ty1>::type type;
 };


template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };


template<class _Ty> inline
 _Ty&& forward(typename remove_reference<_Ty>::type& _Arg)
 {
 return (static_cast<_Ty&&>(_Arg));
 }

template<class _Ty> inline
 _Ty&& forward(typename remove_reference<_Ty>::type&& _Arg) throw ()
 {
 static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
 return (static_cast<_Ty&&>(_Arg));
 }


template<class _Ty> inline
 typename remove_reference<_Ty>::type&&
  move(_Ty&& _Arg) throw ()
 {
 return ((typename remove_reference<_Ty>::type&&)_Arg);
 }


template<class _Ty> inline
 typename remove_reference<_Ty>::type&&
  _Move(_Ty&& _Arg) throw ()
 {
 return ((typename remove_reference<_Ty>::type&&)_Arg);
 }


template<class _Ty> inline
 typename _If<!has_nothrow_move_constructor<_Ty>::value
  && has_copy_constructor<_Ty>::value,
   const _Ty&, _Ty&&>::type
 move_if_noexcept(_Ty& _Arg) throw ()
 {
 return (::std:: move(_Arg));
 }


template<class _Ty> inline
 typename decay<_Ty>::type _Decay_copy(_Ty&& _Arg)
 {
 return (::std:: forward<_Ty>(_Arg));
 }
}


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xrefwrap"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180)

namespace std {
template<class _Ty>
 class reference_wrapper;


template<class _Ret,
 class... _Types>
 struct _Fun_class_base
 {
 };

template<class _Ret,
 class _Farg0>
 struct _Fun_class_base<_Ret, _Farg0>
  : public unary_function<_Farg0, _Ret>
 {
 };

template<class _Ret,
 class _Farg0,
 class _Farg1>
 struct _Fun_class_base<_Ret, _Farg0, _Farg1>
  : public binary_function<_Farg0, _Farg1, _Ret>
 {
 };

template<class _Ret,
 class _Farg0,
 class _Farg1,
 class... _Types>
 struct _Fun_class_base<_Ret, _Farg0, _Farg1, _Types...>
 {
 };




template<class _Fty,
 class... _Args>
 struct _Result_of
 {
 typedef decltype(
  ::std:: declval<_Fty>()(::std:: declval<_Args>()...)) type;
 };
#line 74 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xrefwrap"
template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; };


template<class _Ret,
 class _Ty,
 class _Obj,
 class... _Args>
 struct _Result_of<_Ret _Ty::*, _Obj, _Args...>
 {

 typedef typename _Copy_cv<_Ret,
  typename remove_pointer<
   typename remove_reference<_Obj>::type>::type>::type type;
 };

template<class _Ret,
 class _Ty,
 class _Obj,
 class... _Args>
 struct _Result_of<_Ret _Ty::*const, _Obj, _Args...>
 {

 typedef typename _Copy_cv<_Ret,
  typename remove_pointer<
   typename remove_reference<_Obj>::type>::type>::type const type;
 };

template<class _Fty>
 struct result_of;
#line 118 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xrefwrap"
template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __cdecl (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<_Fty __stdcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __stdcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<_Fty __fastcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __fastcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; };






template<class _Ret,
 class _Arg0>
 struct _Pmd_caller
 {
 template<class _Pmd,
  class _Farg0>
  static _Ret& _Call_pmd(_Pmd _Pm, _Farg0&& _Fx0, true_type)
  {
  return ((_Ret&)(_Fx0.*_Pm));
  }

 template<class _Pmd,
  class _Farg0>
  static _Ret& _Call_pmd(_Pmd _Pm, _Farg0&& _Fx0, false_type)
  {
  return ((_Ret&)((*_Fx0).*_Pm));
  }

 template<class _Pmd,
  class _Farg0>
  static _Ret& _Apply_pmd(_Pmd _Pm, _Farg0&& _Fx0)
  {
  typedef typename remove_cv<
   typename remove_reference<_Arg0>::type>::type _Arg0_bare;
  typedef typename remove_cv<
   typename remove_reference<_Farg0>::type>::type _Farg0_bare;
  typedef _Cat_base<is_same<_Arg0_bare, _Farg0_bare>::value
   || (is_base_of<_Arg0_bare, _Farg0_bare>::value
    && is_same<typename add_reference<_Farg0_bare>::type,
     _Farg0>::value)> _Is_obj;

  return (_Call_pmd<_Pmd, _Farg0>(_Pm,
   ::std:: forward<_Farg0>(_Fx0), _Is_obj()));
  }
 };


template<class _Ty,
 bool _Indirect>
 struct _Callable_base;

template<class _Ty>
 struct _Callable_base<_Ty, false>
 {
 enum {_EEN_INDIRECT = 0};
 typedef _Ty _MyTy;
 typedef const _Ty& _MyCnstTy;

 _Callable_base(const _Ty& _Val)
  : _Object(_Val)
  {
  }

 const _Ty& _Get() const
  {
  return (_Object);
  }

 _Ty& _Get()
  {
  return (_Object);
  }

 void _Reset(_Ty& _Val)
  {
  static_assert(_Always_false<_Ty>::value,
   "can't assign to reference_wrapper<T&>");
  }

private:
 _Callable_base& operator=(const _Callable_base&);

 _Ty _Object;
};

template<class _Ty>
 struct _Callable_base<_Ty, true>
 {

 enum {_EEN_INDIRECT = 1};
 typedef _Ty _MyTy;
 typedef _Ty& _MyCnstTy;

 _Callable_base(_Ty& _Val)
  : _Ptr(::std:: addressof(_Val))
  {
  }

 _MyCnstTy _Get() const
  {
  return (*_Ptr);
  }

 _Ty& _Get()
  {
  return (*_Ptr);
  }

 void _Reset(_Ty& _Val)
  {
  _Ptr = ::std:: addressof(_Val);
  }

private:
 _Ty *_Ptr;
};


template<class _Ty,
 class _Memty,
 bool _Indirect = false>
 struct _Callable_pmd
  : _Callable_base<_Ty, _Indirect>
 {
 _Callable_pmd(const _Callable_pmd& _Right)
  : _Callable_base<_Ty, _Indirect>(_Right._Get())
  {
  }

 _Callable_pmd(_Ty& _Val)
  : _Callable_base<_Ty, _Indirect>(_Val)
  {
  }

 template<class _Ret,
  class _Arg0>
  _Ret& _ApplyX(_Arg0&& _A0) const
  {
  return (_Pmd_caller<_Ret, _Memty>::
   _Apply_pmd(this->_Get(), ::std:: forward<_Arg0>(_A0)));
  }
 };


template<class _Ty,
 bool _Indirect = false>
 struct _Callable_obj
  : _Callable_base<_Ty, _Indirect>
 {
 typedef _Callable_base<_Ty, _Indirect> _Mybase;

 template<class _Ty2>
  _Callable_obj(_Ty2&& _Val)
  : _Mybase(::std:: forward<_Ty2>(_Val))
  {
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args) const
  {
  return (this->_Get()(::std:: forward<_Types>(_Args)...));
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args)
  {
  return (this->_Get()(::std:: forward<_Types>(_Args)...));
  }

 };



template<class _Ret,
 class _Arg0>
 struct _Pmf_caller
 {
 template<class _Pmf,
  class _Farg0,
  class... _Ftypes>
  static _Ret _Call_pmf(_Pmf _Pm, _Farg0&& _Fx0, true_type,
   _Ftypes&&... _Fargs)
  {
  typedef typename _Copy_cv<_Arg0, _Farg0>::type
   _Funobj_cv;
  return (((_Funobj_cv)_Fx0.*_Pm)(::std:: forward<_Ftypes>(_Fargs)...));
  }

 template<class _Pmf,
  class _Farg0,
  class... _Ftypes>
  static _Ret _Call_pmf(_Pmf _Pm, _Farg0&& _Fx0, false_type,
   _Ftypes&&... _Fargs)
  {
  return (((*_Fx0).*_Pm)(::std:: forward<_Ftypes>(_Fargs)...));
  }

 template<class _Pmf,
  class _Farg0,
  class... _Ftypes>
  static _Ret _Apply_pmf(_Pmf _Pm, _Farg0&& _Fx0,
   _Ftypes&&... _Fargs)
  {
  typedef typename remove_reference<_Arg0>::type _Arg0_bare0;
  typedef typename remove_cv<_Arg0_bare0>::type _Arg0_bare;
  typedef typename remove_reference<_Farg0>::type _Farg0_bare;
  typedef _Cat_base<is_same<_Arg0_bare, _Farg0_bare>::value
   || (is_base_of<_Arg0_bare, _Farg0_bare>::value
    && is_same<typename add_reference<_Farg0_bare>::type,
     _Farg0>::value)> _Is_obj;

  return (_Call_pmf<_Pmf, _Farg0&&, _Ftypes&&...>(_Pm,
   ::std:: forward<_Farg0>(_Fx0), _Is_obj(),
    ::std:: forward<_Ftypes>(_Fargs)...));
  }
 };



template<class _Ty,
 class _Memty,
 bool _Indirect = false>
 struct _Callable_pmf
  : _Callable_base<_Ty, _Indirect>
 {
 _Callable_pmf(const _Callable_pmf& _Right)
  : _Callable_base<_Ty, _Indirect>(_Right._Get())
  {
  }

 _Callable_pmf(_Ty& _Val)
  : _Callable_base<_Ty, _Indirect>(_Val)
  {
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args) const
  {
  return (_Pmf_caller<_Ret, _Memty>::
   _Apply_pmf(this->_Get(), ::std:: forward<_Types>(_Args)...));
  }

 };


template<class _Ty,
 bool _Indirect = false>
 struct _Callable_fun
  : _Callable_base<_Ty, _Indirect>
 {
 _Callable_fun(const _Callable_fun& _Right)
  : _Callable_base<_Ty, _Indirect>(_Right._Get())
  {
  }

 _Callable_fun(_Ty& _Val)
  : _Callable_base<_Ty, _Indirect>(_Val)
  {
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args) const
  {
  return (this->_Get()(::std:: forward<_Types>(_Args)...));
  }

 };


template<class _Callable>
 struct _Call_wrapper_base
 {
 typedef typename _Callable::_MyTy _MyTy;
 typedef typename _Callable::_MyCnstTy _MyCnstTy;

 _Call_wrapper_base(_MyTy& _Val)
  : _Callee(_Val)
  {
  }

 void _Reset(_MyTy& _Val)
  {
  _Callee._Reset(_Val);
  }

 _MyCnstTy _Get() const
  {
  return (_Callee._Get());
  }

 _MyCnstTy _Get()
  {
  return (_Callee._Get());
  }

 _Callable _Callee;
 };


template<class _Callable,
 bool _Is_abstract = false>
 struct _Call_wrapper
 : _Call_wrapper_base<_Callable>
 {
 typedef _Call_wrapper_base<_Callable> _Mybase;

 _Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
  : _Call_wrapper_base<_Callable>(_Val)
  {
  }

 template<class... _Types>
  typename result_of<
   typename _Callable::_MyTy(_Types...)>::type
   operator()(_Types&&... _Args) const
  {
  typedef typename result_of<
   typename _Callable::_MyTy(_Types...)>::type _Ret;
  return (this->_Callee.template _ApplyX<_Ret>(
   ::std:: forward<_Types>(_Args)...));
  }

 };

template<class _Callable>
 struct _Call_wrapper<_Callable, true>
 : _Call_wrapper_base<_Callable>
 {
 typedef _Call_wrapper_base<_Callable> _Mybase;

 _Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
  : _Call_wrapper_base<_Callable>(_Val)
  {
  }
 };


template<class _Ty>
 struct _Has_result_and_arg_type
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::argument_type> * = 0, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };


template<class _Ty>
 struct _Has_result_and_2arg_type
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::first_argument_type> * = 0, _Identity<typename _Uty::second_argument_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };


template<class _Ty,
 bool>
 struct _Refwrap_result0
 {
 typedef typename _Ty::result_type result_type;
 };

template<class _Ty>
 struct _Refwrap_result0<_Ty, false>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result1_helper
  : _Refwrap_result0<_Ty, _Has_result_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result1_helper<_Ty, true>
  : unary_function<typename _Ty::argument_type,
   typename _Ty::result_type>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result1
  : _Refwrap_result0<_Ty, _Has_result_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result1<_Ty, true>
  : _Refwrap_result1_helper<_Ty,
   is_base_of<unary_function<
    typename _Ty::argument_type,
    typename _Ty::result_type>, _Ty>::value>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result2_helper
  : _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result2_helper<_Ty, true>
  : binary_function<typename _Ty::first_argument_type,
   typename _Ty::second_argument_type,
   typename _Ty::result_type>,
  _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result2
  : _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result2<_Ty, true>
  : _Refwrap_result2_helper<_Ty,
   is_base_of<binary_function<
    typename _Ty::first_argument_type,
    typename _Ty::second_argument_type,
    typename _Ty::result_type>, _Ty>::value>
 {
 };


template<class _Ty>
 struct _Refwrap_impl
  : _Call_wrapper<_Callable_obj<_Ty, true>,
   is_abstract<_Ty>::value>,
   _Refwrap_result2<_Ty, _Has_result_and_2arg_type<_Ty>::type::value>
 {
 _Refwrap_impl(_Ty& _Val)
  : _Call_wrapper<_Callable_obj<_Ty, true>,
   is_abstract<_Ty>::value>(_Val)
  {
  }
 };

template<class _Rx,
 class _Arg0>
 struct _Refwrap_impl<_Rx _Arg0::*>
  : _Call_wrapper<_Callable_pmd<_Rx _Arg0::*, _Arg0, false> >
 {
 typedef _Rx _Arg0::* _Fty;
 typedef _Rx result_type;

 _Refwrap_impl(_Fty& _Val)
  : _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
  {
  }
 };

template<class _Rx,
 class _Arg0>
 struct _Refwrap_impl<_Rx _Arg0::*const>
  : _Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0, false> >
 {
 typedef _Rx _Arg0::*const _Fty;
 typedef _Rx result_type;
 _Refwrap_impl(_Fty& _Val)
  : _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
  {
  }
 };
#line 603 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xrefwrap"
template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __cdecl (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __stdcall (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __fastcall (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } };
#line 623 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xrefwrap"
template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__cdecl *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__stdcall *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__fastcall *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__cdecl *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__stdcall *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__fastcall *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } };
#line 645 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xrefwrap"
template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } };




template<class _Ty>
 class reference_wrapper
 : public _Refwrap_impl<_Ty>
 {
public:
 typedef reference_wrapper<_Ty> _Myt;
 typedef _Refwrap_impl<_Ty> _Mybase;
 typedef _Ty type;

 reference_wrapper(_Ty& _Val) throw ()
  : _Mybase(_Val)
  {
  }

 reference_wrapper(const _Myt& _Right) throw ()
  : _Mybase(_Right.get())
  {
  }

 _Myt& operator=(const _Myt& _Right) throw ()
  {
  this->_Reset(_Right.get());
  return (*this);
  }

 operator _Ty&() const throw ()
  {
  return (this->_Get());
  }

 _Ty& get() const throw ()
  {
  return (this->_Get());
  }

 reference_wrapper(_Ty&&) = delete;
 };


template<class _Ty>
 reference_wrapper<_Ty>
  ref(_Ty& _Val) throw ()
 {
 return (reference_wrapper<_Ty>(_Val));
 }

template<class _Ty>
 void ref(const _Ty&&) = delete;

template<class _Ty>
 reference_wrapper<_Ty>
  ref(reference_wrapper<_Ty> _Val) throw ()
 {
 return (_Val);
 }

template<class _Ty>
 reference_wrapper<const _Ty>
  cref(const _Ty& _Val) throw ()
 {
 return (reference_wrapper<const _Ty>(_Val));
 }

template<class _Ty>
 void cref(const _Ty&&) = delete;

template<class _Ty>
 reference_wrapper<const _Ty>
  cref(reference_wrapper<_Ty> _Val) throw ()
 {
 return (reference_wrapper<const _Ty>(_Val.get()));
 }

namespace tr1 {
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 1549 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\type_traits"


namespace std {

template<class _Ty>
 using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
 using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
 using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
 using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
 using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
 using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
 using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
 using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
 using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
 using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
 using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
 using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
 using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
 using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
 using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
 class... _Types>
 using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
 using decay_t = typename decay<_Ty>::type;

template<bool _Test,
 class _Ty = void>
 using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
 class _Ty1,
 class _Ty2>
 using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
 using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
 using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
 using result_of_t = typename result_of<_Ty>::type;
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\utility"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180 4512)

namespace std {

template<class _Ty> inline
 void swap(_Ty&, _Ty&)

                                             ;

template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _Ty,
 size_t _Size> inline
 void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])

 {
 if (&_Left != &_Right)
  {
  _Ty *_First1 = _Left;
  _Ty *_Last1 = _First1 + _Size;
  _Ty *_First2 = _Right;
  for (; _First1 != _Last1; ++_First1, ++_First2)
   ::std:: iter_swap(_First1, _First2);
  }
 }

template<class _Ty> inline
 void swap(_Ty& _Left, _Ty& _Right)


 {
 _Ty _Tmp = _Move(_Left);
 _Left = _Move(_Right);
 _Right = _Move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
 {
 swap(_Left, _Right);
 }


struct piecewise_construct_t
 {
 };

const piecewise_construct_t piecewise_construct =
 piecewise_construct_t();



template<class...>
 class tuple;


template<class _Ty1,
 class _Ty2>
 struct pair
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 pair()
  : first(), second()
  {
  }

 pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
   && is_convertible<const _Other2&, _Ty2>::value,
   void>::type>
  pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(const pair<_Other1, _Other2>& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }


 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   _Arg_idx<_Indexes1...>,
   _Arg_idx<_Indexes2...>);

 template<class... _Types1,
  class... _Types2> inline
  pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)

                                                            ;


 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<_Other1, _Ty1>::value
   && is_convertible<_Other2, _Ty2>::value,
   void>::type>
  pair(_Other1&& _Val1, _Other2&& _Val2)


  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<_Other1, _Ty1>::value
   && is_convertible<_Other2, _Ty2>::value,
   void>::type>
  pair(pair<_Other1, _Other2>&& _Right)


  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(pair<_Other1, _Other2>&& _Right)


  {
  first = ::std:: forward<_Other1>(_Right.first);
  second = ::std:: forward<_Other2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right)


  {
  first = ::std:: forward<_Ty1>(_Right.first);
  second = ::std:: forward<_Ty2>(_Right.second);
  return (*this);
  }

 void swap(_Myt& _Right)


  {
  if (this != &_Right)
   {
   _Swap_adl(first, _Right.first);
   _Swap_adl(second, _Right.second);
   }
  }

 _Myt& operator=(const _Myt& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 _Ty1 first;
 _Ty2 second;
 };



template<class _Ty1,
 class _Ty2> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)

 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  (!(_Right.first < _Left.first) && _Left.second < _Right.second));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Ty1,
 class _Ty2> inline
 pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  ::std:: forward<_Ty2>(_Val2)));
 }


 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}

namespace std {

template<class _Tuple>
 struct tuple_size
 {
 static_assert(_Always_false<_Tuple>::value,
  "The C++ Standard doesn't define tuple_size for this type.");
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_size<pair<_Ty1, _Ty2> >
 : integral_constant<size_t, 2>
 {
 };

template<class... _Types>
 struct tuple_size<tuple<_Types...> >
 : integral_constant<size_t, sizeof...(_Types)>
 {
 };


template<class _Tuple>
 struct tuple_size<const _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<const volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };


template<size_t _Idx,
 class _Tuple>
 struct tuple_element;

template<int _Idx,
 class _Ty>
 struct _Pair_data;

template<class _Ty1,
 class _Ty2>
 struct _Pair_data<0, pair<_Ty1, _Ty2> >
 {
 typedef typename add_lvalue_reference<const _Ty1>::type _Ctype;
 typedef typename add_lvalue_reference<_Ty1>::type _Rtype;
 typedef typename add_rvalue_reference<_Ty1>::type _RRtype;

 static _Rtype _Val(pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }

 static _Ctype _Val(const pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }

 static _RRtype _Val(pair<_Ty1, _Ty2>&& _Pr)
  {
  return (::std:: forward<_Ty1>(_Pr.first));
  }
 };

template<class _Ty1,
 class _Ty2>
 struct _Pair_data<1, pair<_Ty1, _Ty2> >
 {
 typedef typename add_lvalue_reference<const _Ty2>::type _Ctype;
 typedef typename add_lvalue_reference<_Ty2>::type _Rtype;
 typedef typename add_rvalue_reference<_Ty2>::type _RRtype;

 static _Rtype _Val(pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }

 static _Ctype _Val(const pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }

 static _RRtype _Val(pair<_Ty1, _Ty2>&& _Pr)
  {
  return (::std:: forward<_Ty2>(_Pr.second));
  }
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<int _Idx,
 class _Ty1,
 class _Ty2> inline
 typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Rtype
  get(pair<_Ty1, _Ty2>& _Pr) throw ()
 {
 return (_Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr));
 }

template<int _Idx,
 class _Ty1,
 class _Ty2> inline
 typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Ctype
  get(const pair<_Ty1, _Ty2>& _Pr) throw ()
 {
 return (_Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr));
 }

template<int _Idx,
 class _Ty1,
 class _Ty2> inline
 typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_RRtype
  get(pair<_Ty1, _Ty2>&& _Pr) throw ()
 {
 typedef typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_RRtype
  _RRtype;
 return (::std:: forward<_RRtype>(
  _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr)));
 }
}

namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#line 25 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
typedef const wchar_t *_Dbfile_t;
typedef unsigned int _Dbline_t;

__declspec(dllimport) void __cdecl _Debug_message(const wchar_t *,
 const wchar_t *, unsigned int);






struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct __declspec(dllimport) _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct __declspec(dllimport) _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12() throw ()
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy == _Right._Myproxy)
   ;
  else if (_Right._Myproxy != 0)
   _Adopt(_Right._Myproxy->_Mycont);
  else
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }
  return (*this);
  }

 ~_Iterator_base12() throw ()
  {

  _Lockit _Lock(3);
  _Orphan_me();

  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent == 0)
   {

   _Lockit _Lock(3);
   _Orphan_me();

   }
  else
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;


   if (_Myproxy != _Parent_proxy)
    {
    _Lockit _Lock(3);
    _Orphan_me();
    _Mynextiter = _Parent_proxy->_Myfirstiter;
    _Parent_proxy->_Myfirstiter = this;
    _Myproxy = _Parent_proxy;
    }




   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {

  if (_Myproxy != 0)
   {
   _Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   while (*_Pnext != 0 && *_Pnext != this)
    _Pnext = &(*_Pnext)->_Mynextiter;

   if (*_Pnext == 0)
    _Debug_message(L"ITERATOR LIST CORRUPTED!", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 201);
   *_Pnext = _Mynextiter;
   _Myproxy = 0;
   }

  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {

 if (_Myproxy != 0)
  {
  _Lockit _Lock(3);

  for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
   *_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
   (*_Pnext)->_Myproxy = 0;
  _Myproxy->_Myfirstiter = 0;
  }

 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {

 _Lockit _Lock(3);


 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }






typedef _Container_base12 _Container_base;
typedef _Iterator_base12 _Iterator_base;
#line 260 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _Ty>
 struct _Get_unchecked_type
  { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::_Unchecked_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Ty>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Is_checked_helper
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::_Unchecked_type> * = 0, _Identity<typename _Uty::_Unchecked_type> * = 0, _Identity<typename _Uty::_Unchecked_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };


template<class _Iter> inline
 typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
 {
 return (typename _Is_checked_helper<_Iter>::type());
 }


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }


template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }



struct input_iterator_tag
 {
 };

struct _Mutable_iterator_tag
 {
 };

struct output_iterator_tag
 : _Mutable_iterator_tag
 {
 };

struct forward_iterator_tag
 : input_iterator_tag, _Mutable_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : bidirectional_iterator_tag
 {
 };


struct _Nonscalar_ptr_iterator_tag
 {
 };
struct _Scalar_ptr_iterator_tag
 {
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;


template<class _Iter>
 struct iterator_traits
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;
 typedef difference_type distance_type;
 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };


template<class _Iter> inline
 typename iterator_traits<_Iter>::iterator_category
  _Iter_cat(const _Iter&)
 {
 typename iterator_traits<_Iter>::iterator_category _Cat;
 return (_Cat);
 }


template<class _Iter1,
 class _Iter2> inline
 _Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
 {
 _Nonscalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2>
 struct _Ptr_cat_helper
 {
 typedef _Nonscalar_ptr_iterator_tag type;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 typedef typename _If<is_scalar<_Elem>::value,
  _Scalar_ptr_iterator_tag,
  _Nonscalar_ptr_iterator_tag>::type type;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 typedef _Scalar_ptr_iterator_tag type;
 };

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type
  _Ptr_cat(_Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type
  _Ptr_cat(const _Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
 return (_Cat);
 }
#line 516 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _Pr, class _Ty1, class _Ty2> inline
 bool _Debug_lt_pred(_Pr _Pred,
  _Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 if (!_Pred(::std:: forward<_Ty1>(_Left), ::std:: forward<_Ty2>(_Right)))
  return (false);
 else if (_Pred(::std:: forward<_Ty2>(_Right), ::std:: forward<_Ty1>(_Left)))
  _Debug_message(L"invalid operator<", _File, _Line);
 return (true);
 }


template<class _Ty1, class _Ty2> inline
 bool _Debug_lt(_Ty1&& _Left, _Ty2&& _Right,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 return (_Debug_lt_pred(less<>(),
  ::std:: forward<_Ty1>(_Left), ::std:: forward<_Ty2>(_Right), _File, _Line));
 }


template<class _InIt> inline
 void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)
 {
 }

template<class _Ty> inline
 void _Debug_pointer(const _Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_First == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }

template<class _Ty> inline
 void _Debug_pointer(_Ty *_First, _Dbfile_t _File, _Dbline_t _Line)
 {
 if (_First == 0)
  _Debug_message(L"invalid null pointer", _File, _Line);
 }


template<class _InIt> inline
 void _Debug_range2(_InIt _First, _InIt _Last, _Dbfile_t, _Dbline_t,
  input_iterator_tag)
 {
 bool _Ans = _First == _Last;
 _Ans = _Ans;
 }

template<class _RanIt> inline
 void _Debug_range2(_RanIt _First, _RanIt _Last,
  _Dbfile_t _File, _Dbline_t _Line,
  random_access_iterator_tag)
 {
 if (_First != _Last)
  {
  _Debug_pointer(_First, _File, _Line);
  _Debug_pointer(_Last, _File, _Line);
  if (_Last < _First)
   _Debug_message(L"invalid iterator range", _File, _Line);
  }
 }

template<class _InIt> inline
 void _Debug_range(_InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));
 }


template<class _InIt> inline
 void _Debug_order2(_InIt, _InIt,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 }

template<class _FwdIt> inline
 void _Debug_order2(_FwdIt _First, _FwdIt _Last,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
 {
 for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
  if (_Debug_lt(*_Next, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 599))
   _Debug_message(L"sequence not ordered", _File, _Line);
 }

template<class _InIt> inline
 void _Debug_order(_InIt _First, _InIt _Last,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range(_First, _Last, _File, _Line);
 _Debug_order2(_First, _Last, _File, _Line, _Iter_cat(_First));
 }


template<class _InIt,
 class _Pr> inline
 void _Debug_order2(_InIt, _InIt, _Pr,
  _Dbfile_t, _Dbline_t, input_iterator_tag)
 {
 }

template<class _FwdIt,
 class _Pr> inline
 void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
  _Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)
 {
 for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 625))
   _Debug_message(L"sequence not ordered", _File, _Line);
 }

template<class _InIt,
 class _Pr> inline
 void _Debug_order(_InIt _First, _InIt _Last, _Pr _Pred,
  _Dbfile_t _File, _Dbline_t _Line)
 {
 _Debug_range(_First, _Last, _File, _Line);
 _Debug_pointer(_Pred, _File, _Line);
 _Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat(_First));
 }





template<class _Iter> inline
 typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
 void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {

 if (_Off < 0)
  _Debug_message(L"negative offset in advance", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 656);


 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _FwdIt,
 class _Diff> inline
 void _Advance(_FwdIt& _Where, _Diff _Off, forward_iterator_tag)
 {

 if (_Off < 0)
  _Debug_message(L"negative offset in advance", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 669);


 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BidIt,
 class _Diff> inline
 void _Advance(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RanIt,
 class _Diff> inline
 void _Advance(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }

template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {
 _Advance(_Where, _Off, _Iter_cat(_Where));
 }



template<class _Iter> inline
 typename iterator_traits<_Iter>::difference_type
  *_Dist_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
  void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
   input_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _FwdIt,
 class _Diff> inline
  void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
   forward_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _BidIt,
 class _Diff> inline
  void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
   bidirectional_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _RanIt,
 class _Diff> inline
  void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
   random_access_iterator_tag)
 {

 if (_First != _Last)
  {
  _Debug_pointer(_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 745);
  _Debug_pointer(_Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 746);
  }


 _Off += _Last - _First;
 }

template<class _InIt> inline
 typename iterator_traits<_InIt>::difference_type
  distance(_InIt _First, _InIt _Last)
 {
 typename iterator_traits<_InIt>::difference_type _Off = 0;
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 return (_Off);
 }

template<class _InIt,
 class _Diff> inline
  void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
 {
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 }


template<class _FwdIt> inline
 _FwdIt next(_FwdIt _First,
  typename iterator_traits<_FwdIt>::difference_type _Off = 1)
 {
 static_assert((is_base_of<forward_iterator_tag,
  typename iterator_traits<_FwdIt>::iterator_category>::value),
  "next requires forward iterator");

 ::std:: advance(_First, _Off);
 return (_First);
 }


template<class _BidIt> inline
 _BidIt prev(_BidIt _First,
  typename iterator_traits<_BidIt>::difference_type _Off = 1)
 {
 static_assert((is_base_of<bidirectional_iterator_tag,
  typename iterator_traits<_BidIt>::iterator_category>::value),
  "prev requires bidirectional iterator");

 ::std:: advance(_First, -_Off);
 return (_First);
 }



template<class _Ty>
 struct pointer_traits;

template<class _RanIt,
 class _Base>
 class _Revranit
  : public _Base
 {
public:
 typedef _Revranit<_RanIt, _Base> _Myt;
 typedef typename _Base::difference_type difference_type;
 typedef typename _Base::pointer pointer;
 typedef typename _Base::reference reference;
 typedef _RanIt iterator_type;

 _Revranit()
  {
  }

 explicit _Revranit(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2,
  class _Base2>
  _Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
  : current(_Right.base())
  {
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 template<class _RanIt2,
  class _Base2>
  bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 template<class _RanIt2,
  class _Base2>
  bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (_Right.base() < current);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Right.base() - current);
  }

protected:
 _RanIt current;
 };


template<class _RanIt,
 class _Base,
 class _Diff> inline
 _Revranit<_RanIt, _Base>
  operator+(_Diff _Off,
  const _Revranit<_RanIt, _Base>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2>
 auto inline operator-(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator==(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator!=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt>
 class reverse_iterator
  : public _Revranit<_RanIt, iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference> >
 {
 typedef reverse_iterator<_RanIt> _Myt;
 typedef _Revranit<_RanIt, iterator<
  typename iterator_traits<_RanIt>::iterator_category,
  typename iterator_traits<_RanIt>::value_type,
  typename iterator_traits<_RanIt>::difference_type,
  typename iterator_traits<_RanIt>::pointer,
  typename iterator_traits<_RanIt>::reference> > _Mybase;

public:
 typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : _Mybase(_Right.base())
  {
  }

 reverse_iterator(_Mybase _Right)
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Myt& operator=(const reverse_iterator<_Other>& _Right)
  {
  this->current = _Right.base();
  return (*this);
  }

 _Myt& operator++()
  {
  ++*((_Mybase *)this);
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --*((_Mybase *)this);
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  *((_Mybase *)this) += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  *((_Mybase *)this) -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 reverse_iterator<_RanIt> operator+(_Diff _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Container>
 auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline end(_Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Container>
 auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *begin(_Ty (&_Array)[_Size])
 {
 return (_Array);
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *end(_Ty (&_Array)[_Size])
 {
 return (_Array + _Size);
 }


template<class _Container>
 auto inline cbegin(const _Container& _Cont) -> decltype(::std:: begin(_Cont))
 {
 return (::std:: begin(_Cont));
 }

template<class _Container>
 auto inline cend(const _Container& _Cont) -> decltype(::std:: end(_Cont))
 {
 return (::std:: end(_Cont));
 }


template<class _Container>
 auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Container>
 auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array + _Size));
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *> rbegin(initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.end()));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *> rend(initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.begin()));
 }


template<class _Container>
 auto inline crbegin(const _Container& _Cont) -> decltype(::std:: rbegin(_Cont))
 {
 return (::std:: rbegin(_Cont));
 }

template<class _Container>
 auto inline crend(const _Container& _Cont) -> decltype(::std:: rend(_Cont))
 {
 return (::std:: rend(_Cont));
 }



template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 enum {_EEN_SIZE = _Size};
 enum {_EEN_IDL =
  2};
#line 1453 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
 _Array_const_iterator()
  {
  _Ptr = 0;
  _Idx = 0;
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  {
  _Ptr = _Parg;
  _Idx = _Off;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Idx = _Right - _Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr + _Idx);
  }

 reference operator*() const
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1484);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1485, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1485, 0); };
   }






                              ;

  return (_Ptr[_Idx]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (_Ptr == 0
   || _Size <= _Idx)
   {
   _Debug_message(L"array iterator not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1509);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1510, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1510, 0); };
   }






  ++_Idx;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (_Ptr == 0
   || _Idx <= 0)
   {
   _Debug_message(L"array iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1535);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1536, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1536, 0); };
   }






  --_Idx;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (_Size < _Idx + _Off)
   {
   _Debug_message(L"array iterator + offset out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1560);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1561, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1561, 0); };
   }





  _Idx += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx
   ? -(difference_type)(_Right._Idx - _Idx)
   : (difference_type)_Idx - _Right._Idx);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx == _Right._Idx);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Idx < _Right._Idx);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (_Ptr != _Right._Ptr)
   {
   _Debug_message(L"array iterators incompatible", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1639);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1640, 0, L"%s", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 1640, 0); };
   }
  }
#line 1651 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
 pointer _Ptr;
 size_t _Idx;

 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 enum {_EEN_IDL =
  2};

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _RanIt>
 class move_iterator
 {
public:
 typedef move_iterator<_RanIt> _Myt;
 typedef typename iterator_traits<_RanIt>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_RanIt>::value_type
  value_type;
 typedef typename iterator_traits<_RanIt>::difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef value_type&& reference;
 typedef _RanIt iterator_type;

 move_iterator()
  {
  }

 explicit move_iterator(iterator_type _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2>
  move_iterator(const move_iterator<_RanIt2>& _Right)
  : current(_Right.base())
  {
  }

 template<class _RanIt2>
  _Myt& operator=(const move_iterator<_RanIt2>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  return (::std:: move(*current));
  }

 pointer operator->() const
  {
  return (current);
  }

 _Myt& operator++()
  {
  ++current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 template<class _RanIt2>
  bool _Equal(const move_iterator<_RanIt2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (::std:: move(current[_Off]));
  }

 template<class _RanIt2>
  bool _Less(const move_iterator<_RanIt2>& _Right) const
  {
  return (current < _Right.base());
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (current - _Right.base());
  }

protected:
 iterator_type current;
 };

template<class _RanIt>
 struct _Is_checked_helper<move_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 move_iterator<_RanIt>
  operator+(_Diff _Off,
  const move_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(
  move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
   -> decltype(_Left.base() - _Right.base())
 {
 return (_Left.base() - _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
 {
 return (move_iterator<_RanIt>(_Iter));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2081 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Copy_impl(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Copy_impl(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, true_type)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, false_type)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 if (_First == _Last)
  return (_Dest);
 else
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2129);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2130);
  return (_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
   _Dest, _Is_checked(_Dest)));
  }
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 *_Dest = *_First;
 while (0 < --_Count)
  *++_Dest = *++_First;
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2220 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n2(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Mutable_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n2(_InIt _First, _Diff _Count,
  _OutIt _Dest, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Copy_n(_First, _Count,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n1(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 return (_Copy_n2(_First, _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n1(_InIt _First, _Diff _Count,
  _OutIt _Dest, random_access_iterator_tag)
 {
 _InIt _Last = _First + _Count;
 _Last = _Last;
 return (_Copy_n2(_Unchecked(_First), _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, true_type)
 {
 return (_Copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, false_type)
 {
 return (_Copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 _Debug_pointer(_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2291);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2292);
 if (_Count <= 0)
  return (_Dest);
 else
  return (_Copy_n(_First, _Count,
   _Dest, _Is_checked(_Dest)));
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutIt _Dest)
 {
 return (::std:: copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy_n(_First, _Count,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2382 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, true_type)
 {
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, false_type)
 {
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2406);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2407);
 return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }



template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, ++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Move(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2456 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Move(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Move(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, true_type)
 {
 return (_Move(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, false_type)
 {
 return (_Move(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2500);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2501);
 return (_Move(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *move(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: move(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Move_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 2563 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, true_type)
 {
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, false_type)
 {
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2587);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2588);
 return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }



template<class _FwdIt,
 class _Ty> inline
 void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

inline void _Fill(char *_First, char *_Last, char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(signed char *_First, signed char *_Last, signed char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(unsigned char *_First, unsigned char *_Last, unsigned char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2622);
 _Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 for (; 0 < _Count; --_Count, ++_Dest)
  *_Dest = _Val;
 return (_Dest);
 }

inline char *_Fill_n(char *_Dest, size_t _Count, char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }

inline signed char *_Fill_n(signed char *_Dest, size_t _Count,
 signed char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }

inline unsigned char *_Fill_n(unsigned char *_Dest, size_t _Count,
 unsigned char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }
#line 2667 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  _Mutable_iterator_tag)
 {
 return (_Fill_n(_Dest, _Count, _Val));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Fill_n(_Unchecked(_Dest), _Count, _Val);
 return (_Ans);
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  true_type)
 {
 return (_Fill_n1(_Dest, _Count, _Val,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,
  false_type)
 {
 return (_Fill_n1(_Dest, _Count, _Val,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2713);
 return (_Fill_n(_Dest, _Count, _Val,
  _Is_checked(_Dest)));
 }


template<class _OutTy,
 size_t _OutSize,
 class _Diff,
 class _Ty> inline
 _OutTy *fill_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, const _Ty& _Val)
 {
 return (_Unchecked(::std:: fill_n(_Array_iterator<_OutTy, _OutSize>(_Dest),
  _Count, _Val)));
 }




template<class _InIt1,
 class _InIt2> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!(*_First1 == *_First2))
   return (false);
 return (true);
 }

inline bool _Equal(const char *_First1, const char *_Last1,
 const char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
 const signed char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }
#line 2771 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, true_type)
 {
 return (_Equal(_First1, _Last1,
  _First2));
 }

template<class _InIt1,
 class _InIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 bool _Equal1(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, false_type)
 {
 return (_Equal(_First1, _Last1,
  _First2));
 }

template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2795);
 _Debug_pointer(_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2796);
 return (_Equal1(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Is_checked(_First2)));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize])
 {
 return (::std:: equal(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2)));
 }




template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }
#line 2839 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, true_type)
 {
 return (_Equal(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 bool _Equal2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred, false_type)
 {
 return (_Equal(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2866);
 _Debug_pointer(_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2867);
 return (_Equal2(_Unchecked(_First1), _Unchecked(_Last1),
  _First2, _Pred, _Is_checked(_First2)));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 return (::std:: equal(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 }




template<class _InIt1,
 class _InIt2> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (_Debug_lt(*_First1, *_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2893))
   return (true);
  else if (*_First2 < *_First1)
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

inline bool _Lexicographical_compare(
 const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2, const unsigned char *_Last2)
 {
 ptrdiff_t _Num1 = _Last1 - _First1;
 ptrdiff_t _Num2 = _Last2 - _First2;
 int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Ans < 0 || (_Ans == 0 && _Num1 < _Num2));
 }
#line 2922 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2927);
 _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2928);
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2)));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2941))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2954);
 _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2955);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 2956);
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, true_type, true_type, _Ignored)
 {
 return ((-128) <= _Val && _Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
 {
 return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
 {
 return (_Val <= 127);
 }

template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, false_type, true_type, _Ignored)
 {
 return (0 <= _Val && _Val <= 0xff);
 }

template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, false_type, false_type, _Ignored)
 {
 return (_Val <= 0xff);
 }

template<class _InIt,
 class _Ty> inline
 bool _Within_limits(_InIt, const _Ty& _Val)
 {
 typedef typename remove_pointer<_InIt>::type _Elem;
 return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
  integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
 }

template<class _InIt> inline
 bool _Within_limits(_InIt, const bool&)
 {
 return (true);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
 {
 if (!_Within_limits(_First, _Val))
  return (_Last);
 _First = static_cast<_InIt>(:: memchr(
  _First, static_cast<unsigned char>(_Val), _Last - _First));
 return (_First ? _First : _Last);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   break;
 return (_First);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {

 typedef integral_constant<bool,
  ( is_same<_InIt, char *>::value
  || is_same<_InIt, signed char *>::value
  || is_same<_InIt, unsigned char *>::value
  || is_same<_InIt, const char *>::value
  || is_same<_InIt, const signed char *>::value
  || is_same<_InIt, const unsigned char *>::value)
  && is_integral<_Ty>::value
 > _Memchr_opt;
 return (_Find(_First, _Last, _Val, _Memchr_opt()));
 }

template<class _InIt,
 class _Ty> inline
 _InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3052);
 return (_Rechecked(_First,
  _Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   break;
 return (_First);
 }


template<class _InIt,
 class _Ty> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_np(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Ty> inline
 typename iterator_traits<_InIt>::difference_type
  count(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3088);
 return (_Count_np(_Unchecked(_First), _Unchecked(_Last), _Val));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   ++_Count;
 return (_Count);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!_Pred(*_First1, *_First2))
   break;
 if (_First1 != _Last1)
  {
  _FwdIt2 _Last2 = _First2;
  advance(_Last2, distance(_First1, _Last1));
  for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
   if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
    {
    typename iterator_traits<_FwdIt2>::difference_type _Count =
     _Count_pr(_First2, _Last2, *_Next1, _Pred);
    if (_Count == 0
     || _Count != _Count_pr(_Next1, _Last1, *_Next1, _Pred))
     return (false);
    }
  }
 return (true);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3140);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3141);
 return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Pred);
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, equal_to<>()));
 }


template<class _BidIt> inline
 void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3167);
 _Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
 }


template<class _FwdIt> inline
 void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   if (++_Next == _Last)
    break;
   else
    _Mid = _Next;
  else if (++_Next == _Last)
   _Next = _Mid;
  }
 }

template<class _BidIt> inline
 void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 ::std:: reverse(_First, _Mid);
 ::std:: reverse(_Mid, _Last);
 ::std:: reverse(_First, _Last);
 }

template<class _RanIt,
 class _Diff,
 class _Ty> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
 {
 _Diff _Shift = _Mid - _First;
 _Diff _Count = _Last - _First;

 for (_Diff _Factor = _Shift; _Factor != 0; )
  {
  _Diff _Tmp = _Count % _Factor;
  _Count = _Factor;
  _Factor = _Tmp;
  }

 if (_Count < _Last - _First)
  for (; 0 < _Count; --_Count)
   {
   _RanIt _Hole = _First + _Count;
   _RanIt _Next = _Hole;
   _RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
   for (; ; )
    {
    iter_swap(_Next, _Next1);
    _Next = _Next1;
    _Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
     : _First + (_Shift - (_Last - _Next1));
    if (_Next1 == _Hole)
     break;
    }
   }
 }

template<class _RanIt> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 _Debug_range(_First, _Mid, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3241);
 _Debug_range(_Mid, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3242);
 if (_First != _Mid && _Mid != _Last)
  _Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
   _Iter_cat(_First));
 ::std:: advance(_First, ::std:: distance(_Mid, _Last));
 return (_First);
 }


template<class _Diff, class _Urng>
 class _Rng_from_urng
 {
public:
 typedef typename make_unsigned<_Diff>::type _Ty0;
 typedef typename _Urng::result_type _Ty1;

 typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
  _Ty0, _Ty1>::type _Udiff;


 explicit _Rng_from_urng(_Urng& _Func)
  : _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
  {
  for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
   --_Bits;
  }

 _Diff operator()(_Diff _Index)
  {
  for (; ; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while (_Mask < _Udiff(_Index - 1))
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits();
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if (_Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff(_Index - 1))
    return (_Ret % _Index);
   }
  }

 _Udiff _Get_all_bits()
  {
  _Udiff _Ret = 0;

  for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
   _Num += _Bits)
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits();
   }

  return (_Ret);
  }

private:
 _Udiff _Get_bits()
  {
  for (; ; )
   {
   _Udiff _Val = _Ref() - (_Urng::min)();

   if (_Val <= _Bmask)
    return (_Val);
   }
  }

 _Urng& _Ref;
 size_t _Bits;
 _Udiff _Bmask;

public:
 _Rng_from_urng(const _Rng_from_urng&) = delete;
 _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;
 };


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right);


    _Myptr = (_Elem *)_malloc_dbg(_Count, 2,
     "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xutility", 3373);





    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }
  return (*this);
  }

                    ~_Yarn() throw ()
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)


   _free_dbg(_Myptr, 2);





  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };


template<class _Ty,
 class _Alloc>
 struct _Has_allocator_type
 {
 template<class _Uty>
  static auto _Fn(int)
   -> is_convertible<_Alloc,
    typename _Uty::allocator_type>;
 template<class _Uty>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_Ty>(0)) type;
 };


struct allocator_arg_t
 {
 };

const allocator_arg_t allocator_arg = allocator_arg_t();

__declspec(dllimport) __declspec(noreturn) void __cdecl _Xbad_alloc();
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xinvalid_argument( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xlength_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xout_of_range( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xoverflow_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xruntime_error( const char *);
}

namespace std {

template<class _Ty,
 class _Alloc>
 struct uses_allocator
  : _Has_allocator_type<_Ty, _Alloc>::type
 {
 };
}

#pragma warning(pop)
#pragma pack(pop)
#line 9 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100)

namespace std {

template<class _Ty> inline
 _Ty *_Allocate(size_t _Count, _Ty *)
 {
 void *_Ptr = 0;

 if (_Count == 0)
  ;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count)
  || (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)
  _Xbad_alloc();

 return ((_Ty *)_Ptr);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
 }

template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Ty> inline
 void _Destroy(_Ty *_Ptr)
 {
 _Ptr->~_Ty();
 }

template<> inline
 void _Destroy(char *)
 {
 }

template<> inline
 void _Destroy(wchar_t *)
 {
 }


template<> inline
 void _Destroy(unsigned short *)
 {
 }



template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  _Al.destroy(_First);
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Scalar_ptr_iterator_tag)
 {
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al)
 {
 _Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
 }


template<class _Alty>
 struct _Is_simple_alloc
  : _Cat_base<is_same<typename _Alty::size_type, size_t>::value
  && is_same<typename _Alty::difference_type, ptrdiff_t>::value
  && is_same<typename _Alty::pointer,
   typename _Alty::value_type *>::value
  && is_same<typename _Alty::const_pointer,
   const typename _Alty::value_type *>::value
  && is_same<typename _Alty::reference,
   typename _Alty::value_type&>::value
  && is_same<typename _Alty::const_reference,
   const typename _Alty::value_type&>::value>
 {
 };


template<class _Value_type>
 struct _Simple_types
 {
 typedef _Value_type value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef value_type& reference;
 typedef const value_type& const_reference;
 };


template<class _Alty,
 class _Pointer>
 struct _Get_voidptr
 {
 typedef typename _Alty::template rebind<void>::other _Alvoid;
 typedef typename _Alvoid::pointer type;
 };

template<class _Alty,
 class _Ty>
 struct _Get_voidptr<_Alty, _Ty *>
 {
 typedef void *type;
 };


template<class _Iter>
 struct _Is_iterator
 : public integral_constant<bool, !is_integral<_Iter>::value>
 {
 };


template<class _Ty>
 struct _Get_first_parameter;

template<template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Get_first_parameter<_Ty<_First, _Rest...> >
 {
 typedef _First type;
 };


template<class _Newfirst,
 class _Ty>
 struct _Replace_first_parameter;

template<class _Newfirst,
 template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
 {
 typedef _Ty<_Newfirst, _Rest...> type;
 };


template<class _Ty>
 struct _Get_element_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_ptr_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Other>
 struct _Get_rebind_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct pointer_traits
 {
 typedef typename _Get_element_type<_Ty>::type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

 template<class _Other>
  using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

 typedef typename _If<is_void<element_type>::value,
  char&,
  typename add_reference<element_type>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (_Ty::pointer_to(_Val));
  }
 };


template<class _Ty>
 struct pointer_traits<_Ty *>
 {
 typedef _Ty element_type;
 typedef _Ty *pointer;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  using rebind = _Other *;

 typedef typename _If<is_void<_Ty>::value,
  char&,
  typename add_reference<_Ty>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (::std:: addressof(_Val));
  }
 };


template<class _Ty>
 struct _Get_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_const_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_const_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_size_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_propagate_on_container_copy
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_move
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_swap
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



struct _Alloc_allocate
 {


 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint)
   -> decltype(_Al.allocate(_Count, _Hint))
  {
  return (_Al.allocate(_Count, _Hint));
  }

 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(_Wrap_int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer)
   -> decltype(_Al.allocate(_Count))
  {
  return (_Al.allocate(_Count));
  }
 };


struct _Alloc_construct
 {


 template<class _Ty,
  class _Objty,
  class... _Types>
  static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
   _Types&&... _Args)
   -> decltype(
    _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...))
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class _Objty,
  class... _Types>
  static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
   _Types&&... _Args)
   -> void
  {
  ::new (static_cast<void *>(_Ptr))
   _Objty(::std:: forward<_Types>(_Args)...);
  }

 };


struct _Alloc_destroy
 {
 template<class _Ty,
  class _Objty>
  static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
   -> decltype(_Al.destroy(_Ptr))
  {
  _Al.destroy(_Ptr);
  }

 template<class _Ty,
  class _Objty>
  static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
   -> void
  {
  _Ptr->~_Objty();
  }
 };


struct _Alloc_max_size
 {
 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype(_Al.max_size())
  {
  return (_Al.max_size());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty&)
   -> typename _Get_size_type<_Ty>::type
  {
  return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
  }
 };


struct _Alloc_select
 {


 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype((_Ty)_Al.select_on_container_copy_construction())
  {
  return (_Al.select_on_container_copy_construction());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty& _Al)
   -> _Ty
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct allocator_traits
 {
 typedef allocator_traits<_Alloc> other;

 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef typename _Get_pointer_type<_Alloc>::type
  pointer;
 typedef typename _Get_const_pointer_type<_Alloc>::type
  const_pointer;
 typedef typename _Get_void_pointer_type<_Alloc>::type
  void_pointer;
 typedef typename _Get_const_void_pointer_type<_Alloc>::type
  const_void_pointer;

 typedef typename _Get_size_type<_Alloc>::type size_type;
 typedef typename _Get_difference_type<_Alloc>::type difference_type;

 typedef typename _Get_propagate_on_container_copy<_Alloc>::type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move<_Alloc>::type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap<_Alloc>::type
  propagate_on_container_swap;

 template<class _Other>
  using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

 template<class _Other>
  using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

 static pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  static void construct(_Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Alloc_construct::_Fn(0, _Al, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  static void destroy(_Alloc& _Al, _Ty *_Ptr)
  {
  _Alloc_destroy::_Fn(0, _Al, _Ptr);
  }

 static size_type max_size(const _Alloc& _Al)
  {
  return (_Alloc_max_size::_Fn(0, _Al));
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Alloc_select::_Fn(0, _Al));
  }
 };


template<class _Ty>
 struct _Allocator_base
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 struct _Allocator_base<const _Ty>
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 class allocator
  : public _Allocator_base<_Ty>
 {
public:
 typedef allocator<_Ty> other;

 typedef _Allocator_base<_Ty> _Mybase;
 typedef typename _Mybase::value_type value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef value_type& reference;
 typedef const value_type& const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef false_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;

 allocator<_Ty> select_on_container_copy_construction() const
  {
  return (*this);
  }

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const throw ()
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const throw ()
  {
  return (::std:: addressof(_Val));
  }

 allocator() throw ()
  {
  }

 allocator(const allocator<_Ty>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type)
  {
  ::operator delete(_Ptr);
  }

 pointer allocate(size_type _Count)
  {
  return (_Allocate(_Count, (pointer)0));
  }

 pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 void construct(_Ty *_Ptr)
  {
  ::new ((void *)_Ptr) _Ty();
  }

 void construct(_Ty *_Ptr, const _Ty& _Val)
  {
  ::new ((void *)_Ptr) _Ty(_Val);
  }

 template<class _Objty,
  class... _Types>
  void construct(_Objty *_Ptr, _Types&&... _Args)
  {
  ::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  void destroy(_Uty *_Ptr)
  {
  _Ptr->~_Uty();
  }

 size_t max_size() const throw ()
  {
  return ((size_t)(-1) / sizeof (_Ty));
  }
 };


template<>
 class allocator<void>
 {
public:
 typedef allocator<void> other;

 typedef void value_type;

 typedef void *pointer;
 typedef const void *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() throw ()
  {
  }

 allocator(const allocator<void>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<void>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) throw ()
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }


template<class _Ty>
 struct allocator_traits<allocator<_Ty> >
 {
 typedef allocator<_Ty> _Alloc;

 typedef allocator_traits<_Alloc> other;

 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef false_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;

 template<class _Other>
  using rebind_alloc = allocator<_Other>;

 template<class _Other>
  using rebind_traits = allocator_traits<allocator<_Other> >;

 static pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Al.allocate(_Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Objty,
  class... _Types>
  static void construct(_Alloc& _Al, _Objty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  static void destroy(_Alloc& _Al, _Uty *_Ptr)
  {
  _Al.destroy(_Ptr);
  }

 static size_type max_size(const _Alloc& _Al)
  {
  return (_Al.max_size());
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Al.select_on_container_copy_construction());
  }
 };


template<class _Alloc>
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Wrap_alloc<_Alloc> other;

 typedef _Alloc _Mybase;
 typedef allocator_traits<_Alloc> _Mytraits;

 typedef typename _Mytraits::value_type value_type;

 typedef typename _Mytraits::pointer pointer;
 typedef typename _Mytraits::const_pointer const_pointer;
 typedef typename _Mytraits::void_pointer void_pointer;
 typedef typename _Mytraits::const_void_pointer const_void_pointer;

 typedef typename _If<is_void<value_type>::value,
  int, value_type>::type& reference;
 typedef typename _If<is_void<const value_type>::value,
  const int, const value_type>::type& const_reference;

 typedef typename _Mytraits::size_type size_type;
 typedef typename _Mytraits::difference_type difference_type;

 typedef typename _Mytraits::propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits::propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits::propagate_on_container_swap
  propagate_on_container_swap;

 _Wrap_alloc select_on_container_copy_construction() const
  {
  return (_Mytraits::select_on_container_copy_construction(*this));
  }

 template<class _Other>
  struct rebind
  {
  typedef typename _Mytraits::template rebind_alloc<_Other> _Other_alloc;
  typedef _Wrap_alloc<_Other_alloc> other;
  };

 pointer address(reference _Val) const
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const
  {
  return (::std:: addressof(_Val));
  }

 _Wrap_alloc() throw ()
  : _Mybase()
  {
  }

 _Wrap_alloc(const _Mybase& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc(const _Wrap_alloc& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Wrap_alloc(const _Other& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Wrap_alloc(_Other& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc& operator=(const _Mybase& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 _Wrap_alloc& operator=(const _Wrap_alloc& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 template<class _Other>
  _Wrap_alloc& operator=(const _Other& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 pointer allocate(size_type _Count)
  {
  return (_Mybase::allocate(_Count));
  }

 pointer allocate(size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Mytraits::allocate(*this, _Count, _Hint));
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Mybase::deallocate(_Ptr, _Count);
  }

 void construct(value_type *_Ptr)
  {
  _Mytraits::construct(*this, _Ptr);
  }

 template<class _Ty,
  class... _Types>
  void construct(_Ty *_Ptr,
   _Types&&... _Args)
  {
  _Mytraits::construct(*this, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  void destroy(_Ty *_Ptr)
  {
  _Mytraits::destroy(*this, _Ptr);
  }

 size_type max_size() const throw ()
  {
  return (_Mytraits::max_size(*this));
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) throw ()
 {
 return (static_cast<_Ty>(_Left) == static_cast<_Other>(_Right));
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }
}





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xatomic0.h"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {





typedef enum memory_order {
 memory_order_relaxed,
 memory_order_consume,
 memory_order_acquire,
 memory_order_release,
 memory_order_acq_rel,
 memory_order_seq_cst
 } memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;
#line 70 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xatomic0.h"
typedef long _Atomic_flag_t;






inline _Uint4_t _Atomic_load_4(volatile _Uint4_t *, memory_order);
inline int _Atomic_compare_exchange_weak_4(
 volatile _Uint4_t *, _Uint4_t *, _Uint4_t, memory_order, memory_order);
inline _Uint4_t _Atomic_fetch_add_4(
 volatile _Uint4_t *, _Uint4_t, memory_order);
inline _Uint4_t _Atomic_fetch_sub_4(
 volatile _Uint4_t *, _Uint4_t, memory_order);

typedef _Atomic_integral_t _Atomic_counter_t;


inline _Atomic_integral_t
 _Get_atomic_count(const _Atomic_counter_t& _Counter)
 {
 return (_Counter);
 }

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
 _Atomic_integral_t _Value)
 {
 _Counter = _Value;
 }

inline _Atomic_integral_t _Inc_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_fetch_add_4(&_Counter, 1, _Order) + 1);
 }

inline _Atomic_integral_t _Inc_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Inc_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Dec_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_fetch_sub_4(&_Counter, 1, _Order) - 1);
 }

inline _Atomic_integral_t _Dec_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Dec_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Load_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_load_4(&_Counter, _Order));
 }

inline _Atomic_integral_t _Load_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Load_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Compare_increment_atomic_counter_explicit(
 _Atomic_counter_t& _Counter,
 _Atomic_integral_t _Expected,
 memory_order _Order)
 {
 return (_Atomic_compare_exchange_weak_4(
  &_Counter, &_Expected, _Expected + 1,
  _Order, _Order));
 }

inline _Atomic_integral_t _Compare_increment_atomic_counter(
 _Atomic_counter_t& _Counter, _Atomic_integral_t _Expected)
 {
 return (_Compare_increment_atomic_counter_explicit(
  _Counter, _Expected, memory_order_seq_cst));
 }
#line 184 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xatomic0.h"
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}

#pragma warning(pop)
#pragma pack(pop)
#line 908 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
#line 18 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 18 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\setjmp.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\setjmp.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\setjmp.h"
#line 37 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\setjmp.h"
#pragma pack(push,8)


extern "C" {
#line 63 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\setjmp.h"
typedef struct __JUMP_BUFFER {
    unsigned long Ebp;
    unsigned long Ebx;
    unsigned long Edi;
    unsigned long Esi;
    unsigned long Esp;
    unsigned long Eip;
    unsigned long Registration;
    unsigned long TryLevel;
    unsigned long Cookie;
    unsigned long UnwindFunc;
    unsigned long UnwindData[6];
} _JUMP_BUFFER;
#line 167 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\setjmp.h"
typedef int jmp_buf[16];







int __cdecl _setjmp( jmp_buf _Buf);


}



#pragma warning(push)
#pragma warning(disable: 4987)
extern "C"
{
__declspec(dllimport) __declspec(noreturn) void __cdecl longjmp( jmp_buf _Buf, int _Value) throw(...);
}
#pragma warning(pop)




#pragma pack(pop)
#line 19 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"







#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wmmintrin.h"
#line 26 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wmmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\nmmintrin.h"
#line 27 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\nmmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\smmintrin.h"
#line 27 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\smmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tmmintrin.h"
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tmmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\pmmintrin.h"
#line 31 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\pmmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\emmintrin.h"
#line 33 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\emmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
#line 41 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\mmintrin.h"
#line 19 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\mmintrin.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 19 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\mmintrin.h"







extern "C" {




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64 m64_u64;
    float m64_f32[2];
    __int8 m64_i8[8];
    __int16 m64_i16[4];
    __int32 m64_i32[2];
    __int64 m64_i64;
    unsigned __int8 m64_u8[8];
    unsigned __int16 m64_u16[4];
    unsigned __int32 m64_u32[2];
} __m64;


void _m_empty(void);
__m64 _m_from_int(int _I);
int _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);
#line 182 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\mmintrin.h"
};
#line 41 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
#line 60 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     __int8 m128_i8[16];
     __int16 m128_i16[8];
     __int32 m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned __int32 m128_u32[4];
 } __m128;
#line 178 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
extern "C" {







extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
extern float _mm_cvtss_f32(__m128 _A);
#line 280 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);





extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);
extern void _mm_stream_pi(__m64 *, __m64);
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
#line 378 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpi16_ps(__m64 a)
{
  __m128 tmp;
  __m64 ext_val = _m_pcmpgtw(_mm_setzero_si64(), a);

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}
#line 397 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpu16_ps(__m64 a)
{
  __m128 tmp;
  __m64 ext_val = _mm_setzero_si64();

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}
#line 416 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
__inline __m64 _mm_cvtps_pi16(__m128 a)
{
  return _m_packssdw(_mm_cvt_ps2pi(a),
                        _mm_cvt_ps2pi(_mm_movehl_ps(a, a)));
}
#line 431 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpi8_ps(__m64 a)
{
  __m64 ext_val = _m_pcmpgtb(_mm_setzero_si64(), a);

  return _mm_cvtpi16_ps(_m_punpcklbw(a, ext_val));
}
#line 448 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpu8_ps(__m64 a)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(a, _mm_setzero_si64()));
}
#line 462 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
__inline __m64 _mm_cvtps_pi8(__m128 a)
{
  return _m_packsswb(_mm_cvtps_pi16(a), _mm_setzero_si64());
}
#line 477 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmmintrin.h"
__inline __m128 _mm_cvtpi32x2_ps(__m64 a, __m64 b)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), a),
                       _mm_cvt_pi2ps(_mm_setzero_ps(), b));
}



};
#line 33 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\emmintrin.h"


typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8 m128i_i8[16];
    __int16 m128i_i16[8];
    __int32 m128i_i32[4];
    __int64 m128i_i64[2];
    unsigned __int8 m128i_u8[16];
    unsigned __int16 m128i_u16[8];
    unsigned __int32 m128i_u32[4];
    unsigned __int64 m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double m128d_f64[2];
} __m128d;
#line 60 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\emmintrin.h"
extern "C" {







extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);

extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);
extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);





extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_set1_epi64(__m64 _Q);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);
extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128 _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128 _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);
#line 409 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\emmintrin.h"
};
#line 31 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\pmmintrin.h"
#line 55 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\pmmintrin.h"
extern "C" {







extern __m128 _mm_addsub_ps(__m128 a, __m128 b);
extern __m128 _mm_hadd_ps(__m128 a, __m128 b);
extern __m128 _mm_hsub_ps(__m128 a, __m128 b);
extern __m128 _mm_movehdup_ps(__m128 a);
extern __m128 _mm_moveldup_ps(__m128 a);





extern __m128d _mm_addsub_pd(__m128d a, __m128d b);
extern __m128d _mm_hadd_pd(__m128d a, __m128d b);
extern __m128d _mm_hsub_pd(__m128d a, __m128d b);
extern __m128d _mm_loaddup_pd(double const * dp);
extern __m128d _mm_movedup_pd(__m128d a);




extern __m128i _mm_lddqu_si128(__m128i const *p);







extern void _mm_monitor(void const *p, unsigned extensions, unsigned hints);




extern void _mm_mwait(unsigned extensions, unsigned hints);


};
#line 20 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tmmintrin.h"
#line 30 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tmmintrin.h"
extern "C" {





    extern __m128i _mm_hadd_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hadd_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hadds_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hadd_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hadd_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hadds_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_hsub_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hsub_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hsubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hsub_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hsub_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hsubs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_maddubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_maddubs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_shuffle_epi8 (__m128i a, __m128i b);

    extern __m64 _mm_shuffle_pi8 (__m64 a, __m64 b);




    extern __m128i _mm_sign_epi8 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi32 (__m128i a, __m128i b);

    extern __m64 _mm_sign_pi8 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi32 (__m64 a, __m64 b);




    extern __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);

    extern __m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);




    extern __m128i _mm_abs_epi8 (__m128i a);
    extern __m128i _mm_abs_epi16 (__m128i a);
    extern __m128i _mm_abs_epi32 (__m128i a);

    extern __m64 _mm_abs_pi8 (__m64 a);
    extern __m64 _mm_abs_pi16 (__m64 a);
    extern __m64 _mm_abs_pi32 (__m64 a);


};
#line 27 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\smmintrin.h"
#line 78 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\smmintrin.h"
extern "C" {





        extern __m128i _mm_blend_epi16 (__m128i v1, __m128i v2,
                                        const int mask);
        extern __m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);




        extern __m128 _mm_blend_ps (__m128 v1, __m128 v2, const int mask);
        extern __m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);




        extern __m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
        extern __m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);




        extern __m128 _mm_dp_ps(__m128 val1, __m128 val2, const int mask);
        extern __m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);




        extern __m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);



        extern __m128i _mm_min_epi8 (__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi8 (__m128i val1, __m128i val2);

        extern __m128i _mm_min_epu16(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu16(__m128i val1, __m128i val2);

        extern __m128i _mm_min_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_min_epu32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu32(__m128i val1, __m128i val2);




        extern __m128i _mm_mullo_epi32(__m128i a, __m128i b);




        extern __m128i _mm_mul_epi32(__m128i a, __m128i b);




        extern int _mm_testz_si128(__m128i mask, __m128i val);




        extern int _mm_testc_si128(__m128i mask, __m128i val);





        extern int _mm_testnzc_si128(__m128i mask, __m128i s2);







        extern __m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);
#line 166 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\smmintrin.h"
        extern int _mm_extract_ps(__m128 src, const int ndx);
#line 184 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\smmintrin.h"
        extern __m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
        extern __m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);







        extern int _mm_extract_epi8 (__m128i src, const int ndx);
        extern int _mm_extract_epi32(__m128i src, const int ndx);
#line 203 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\smmintrin.h"
        extern __m128i _mm_minpos_epu16(__m128i shortValues);



        extern __m128d _mm_round_pd(__m128d val, int iRoundMode);
        extern __m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);



        extern __m128 _mm_round_ps(__m128 val, int iRoundMode);
        extern __m128 _mm_round_ss(__m128 dst, __m128 val, int iRoundMode);



        extern __m128i _mm_cvtepi8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepi16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi64 (__m128i byteValues);
        extern __m128i _mm_cvtepi32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepi16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi16 (__m128i byteValues);



        extern __m128i _mm_cvtepu8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepu16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi64 (__m128i shortValues);
        extern __m128i _mm_cvtepu32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepu16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi16 (__m128i byteValues);





        extern __m128i _mm_packus_epi32(__m128i val1, __m128i val2);





        extern __m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);





        extern __m128i _mm_stream_load_si128(__m128i* v1);


};
#line 27 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\nmmintrin.h"




extern "C" {
#line 78 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\nmmintrin.h"
    extern __m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistri (__m128i a, __m128i b, const int mode);

    extern __m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);





    extern int _mm_cmpistrz (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistrc (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistrs (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistro (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistra (__m128i a, __m128i b, const int mode);

    extern int _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);






    extern __m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);





    extern int _mm_popcnt_u32(unsigned int v);
#line 121 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\nmmintrin.h"
    extern unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
    extern unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
    extern unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);






};
#line 26 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\wmmintrin.h"




extern "C" {






extern __m128i _mm_aesdec_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesdeclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenc_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesimc_si128(__m128i v);






extern __m128i _mm_aeskeygenassist_si128(__m128i ckey, const int rcon);







extern __m128i _mm_clmulepi64_si128(__m128i v1, __m128i v2,
                                            const int imm8);





};
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"



extern "C" {





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8 m256i_i8[32];
    __int16 m256i_i16[16];
    __int32 m256i_i32[8];
    __int64 m256i_i64[4];
    unsigned __int8 m256i_u8[32];
    unsigned __int16 m256i_u16[16];
    unsigned __int32 m256i_u32[8];
    unsigned __int64 m256i_u64[4];
} __m256i;
#line 101 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);
#line 111 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_add_ps(__m256, __m256);
#line 124 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);
#line 137 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);
#line 146 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);
#line 155 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_and_ps(__m256, __m256);
#line 164 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);
#line 173 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);
#line 187 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);
#line 201 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);
#line 211 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);
#line 221 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);
#line 230 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);
#line 239 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_div_ps(__m256, __m256);
#line 254 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);
#line 263 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);
#line 272 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);
#line 281 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);
#line 290 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);
#line 299 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);
#line 308 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_max_ps(__m256, __m256);
#line 317 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);
#line 326 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_min_ps(__m256, __m256);
#line 336 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);
#line 346 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);
#line 355 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);
#line 364 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_or_ps(__m256, __m256);
#line 376 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);
#line 389 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);
#line 398 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);
#line 408 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);
#line 417 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);
#line 426 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);
#line 442 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);
#line 459 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);
#line 473 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);
#line 486 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);
#line 495 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);
#line 504 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i);
#line 514 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d);
#line 523 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtps_epi32(__m256);
#line 533 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtps_pd(__m128);
#line 546 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);
#line 555 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);
#line 568 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);
#line 603 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i);
#line 614 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_permute_ps(__m256, int);
extern __m128 __cdecl _mm_permute_ps(__m128, int);
#line 625 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);
#line 636 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);
#line 646 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);
#line 657 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcast_ss(float const *);
extern __m128 __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256 __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);
#line 685 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);
#line 696 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_load_pd(double const *);
extern void __cdecl _mm256_store_pd(double *, __m256d);
#line 706 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_load_ps(float const *);
extern void __cdecl _mm256_store_ps(float *, __m256);
#line 716 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void __cdecl _mm256_storeu_pd(double *, __m256d);
#line 726 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_loadu_ps(float const *);
extern void __cdecl _mm256_storeu_ps(float *, __m256);
#line 736 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void __cdecl _mm256_store_si256(__m256i *, __m256i);
#line 746 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i);
#line 819 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);
#line 842 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128 __cdecl _mm_maskload_ps(float const *, __m128i);
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256 __cdecl _mm256_movehdup_ps(__m256);







extern __m256 __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);
#line 879 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void __cdecl _mm256_stream_si256(__m256i *, __m256i);
#line 896 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern void __cdecl _mm256_stream_pd(double *, __m256d);
#line 905 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern void __cdecl _mm256_stream_ps(float *, __m256);
#line 915 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_rcp_ps(__m256);
#line 926 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_rsqrt_ps(__m256);
#line 935 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_sqrt_pd(__m256d);
#line 944 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_sqrt_ps(__m256);
#line 957 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_round_pd(__m256d, int);
#line 972 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256 __cdecl _mm256_round_ps(__m256, int);
#line 982 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256);
#line 1016 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i);
#line 1039 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int __cdecl _mm_testz_pd(__m128d, __m128d);
extern int __cdecl _mm_testc_pd(__m128d, __m128d);
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d);
#line 1057 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_testz_ps(__m256, __m256);
extern int __cdecl _mm256_testc_ps(__m256, __m256);
extern int __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int __cdecl _mm_testz_ps(__m128, __m128);
extern int __cdecl _mm_testc_ps(__m128, __m128);
extern int __cdecl _mm_testnzc_ps(__m128, __m128);
#line 1071 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_movemask_pd(__m256d);
#line 1080 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern int __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256 __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256 __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);
#line 1121 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256 __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256 __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256 __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128 __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256 __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128 __cdecl _mm_cvtph_ps(__m128i);
extern __m256 __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 m1, const int imm);
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);
#line 1202 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);
#line 1222 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern void __cdecl _xsaveopt(void *, unsigned __int64);
#line 1232 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern void __cdecl _xrstor(void const *, unsigned __int64);
#line 1241 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern void __cdecl _fxsave(void *);
#line 1250 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern void __cdecl _fxrstor(void const *);
#line 1261 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);
#line 1288 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);
extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128 __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256 __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i );

extern void __cdecl _mm_maskstore_epi32(int * ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i ,
                                        __m128i );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i );

extern void __cdecl _mm256_maskstore_epi32(int * ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i ,
                                           __m256i );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d ,
                                                double const * ,
                                                __m128i ,
                                                __m256d ,
                                                const int );
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256 ,
                                                float const * ,
                                                __m256i ,
                                                __m256 ,
                                                const int );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d ,
                                                double const * ,
                                                __m256i ,
                                                __m256d ,
                                                const int );
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128 ,
                                                float const * ,
                                                __m256i ,
                                                __m128 ,
                                                const int );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m128i ,
                                                   __m256i ,
                                                   const int );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m128i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i ,
                                           const int );
extern __m256 __cdecl _mm256_i32gather_ps(float const * ,
                                           __m256i ,
                                           const int );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i ,
                                           const int );
extern __m128 __cdecl _mm256_i64gather_ps(float const * ,
                                           __m256i ,
                                           const int );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i32gather_ps(float const * ,
                                        __m128i ,
                                        const int );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i64gather_ps(float const * ,
                                        __m128i ,
                                        const int );

extern __m256i __cdecl _mm256_i32gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i ,
                                              const int );
extern __m128i __cdecl _mm256_i64gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i ,
                                              const int );

extern __m128i __cdecl _mm_i32gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );





extern unsigned int _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int _blsi_u32(unsigned int);
extern unsigned int _blsmsk_u32(unsigned int);
extern unsigned int _blsr_u32(unsigned int);
extern unsigned int _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int _sarx_i32(int ,
                                  unsigned int );
extern unsigned int _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _shrx_u32(unsigned int ,
                                          unsigned int );
#line 1812 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern unsigned int _lzcnt_u32(unsigned int);
#line 1824 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern unsigned int _tzcnt_u32(unsigned int);
#line 1834 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *a,long b);
extern unsigned char _interlockedbittestandset_HLERelease(long *a,long b);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *a,long b);
extern unsigned char _interlockedbittestandreset_HLERelease(long *a,long b);
#line 1898 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern unsigned int __cdecl _xbegin(void);
extern void __cdecl _xend(void);
extern void __cdecl _xabort(const unsigned int);
extern unsigned char __cdecl _xtest(void);
#line 1910 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);
extern int __cdecl _rdseed64_step(unsigned __int64 *);
#line 1923 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );
#line 1935 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\immintrin.h"
};
#line 26 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ammintrin.h"
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ammintrin.h"
extern "C" {
#line 118 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ammintrin.h"
__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);
#line 217 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ammintrin.h"
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);






unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);
#line 269 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ammintrin.h"
unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);
#line 293 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ammintrin.h"
};
#line 27 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"




#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\mm3dnow.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\mm3dnow.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\mm3dnow.h"





extern "C" {




void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


};
#line 31 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
#line 43 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
extern "C" {
#line 107 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
#line 131 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
long _InterlockedAddLargeStatistic(__int64 volatile * _Addend, long _Value);



long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);
#line 146 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
char _InterlockedAnd8(char volatile * _Value, char _Mask);
#line 155 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
long __cdecl _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);



short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);




__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);




char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);
#line 182 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
long __cdecl _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);
#line 195 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
long __cdecl _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);







char _InterlockedExchange8(char volatile * _Target, char _Value);



long __cdecl _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);







char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);
#line 228 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
__forceinline static void * _Intrin_h_InterlockedExchangePointer(void * volatile * _Target, void * _Value)
{
    return (void *)_InterlockedExchange((long volatile *) _Target, (long) _Value);
}
#line 242 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
long __cdecl _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);
#line 255 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);
#line 266 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
char _InterlockedOr8(char volatile * _Value, char _Mask);
#line 275 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);
#line 286 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
char _InterlockedXor8(char volatile * _Value, char _Mask);
#line 303 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
void _ReadBarrier(void);

void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);

void __addfsbyte(unsigned long, unsigned char);
void __addfsdword(unsigned long, unsigned long);
void __addfsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);

unsigned int __getcallerseflags(void);
void __halt(void);

unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);
void __incfsbyte(unsigned long);
void __incfsdword(unsigned long);
void __incfsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
#line 353 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\intrin.h"
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);

void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);

void __movsw(unsigned short *, unsigned short const *, size_t);

void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);




unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);

unsigned long __readcr0(void);

unsigned long __readcr2(void);

unsigned long __readcr3(void);

unsigned long __readcr4(void);

unsigned long __readcr8(void);

unsigned int __readdr(unsigned int);

unsigned int __readeflags(void);
unsigned char __readfsbyte(unsigned long);
unsigned long __readfsdword(unsigned long);
unsigned __int64 __readfsqword(unsigned long);
unsigned short __readfsword(unsigned long);




unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);
unsigned long __segmentlimit(unsigned long);



void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);



void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);

void __vmx_off(void);




void __vmx_vmptrst(unsigned __int64 *);



void __wbinvd(void);



void __writecr0(unsigned int);

void __writecr3(unsigned int);

void __writecr4(unsigned int);

void __writecr8(unsigned int);

void __writedr(unsigned int, unsigned int);

void __writeeflags(unsigned int);
void __writefsbyte(unsigned long, unsigned char);
void __writefsdword(unsigned long, unsigned long);
void __writefsqword(unsigned long, unsigned __int64);
void __writefsword(unsigned long, unsigned short);




void __writemsr(unsigned long, unsigned __int64);

unsigned char _bittest(long const *, long);

unsigned char _bittestandcomplement(long *, long);

unsigned char _bittestandreset(long *, long);

unsigned char _bittestandset(long *, long);

unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64);
unsigned long __cdecl _byteswap_ulong( unsigned long);
unsigned short __cdecl _byteswap_ushort( unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);




unsigned char _interlockedbittestandset(long volatile *, long);






unsigned long __cdecl _lrotl( unsigned long, int);
unsigned long __cdecl _lrotr( unsigned long, int);
void _m_empty(void);
void _m_femms(void);
__m64 _m_from_float(float);
__m64 _m_from_int(int);
void _m_maskmovq(__m64, __m64, char *);
__m64 _m_packssdw(__m64, __m64);
__m64 _m_packsswb(__m64, __m64);
__m64 _m_packuswb(__m64, __m64);
__m64 _m_paddb(__m64, __m64);
__m64 _m_paddd(__m64, __m64);
__m64 _m_paddsb(__m64, __m64);
__m64 _m_paddsw(__m64, __m64);
__m64 _m_paddusb(__m64, __m64);
__m64 _m_paddusw(__m64, __m64);
__m64 _m_paddw(__m64, __m64);
__m64 _m_pand(__m64, __m64);
__m64 _m_pandn(__m64, __m64);
__m64 _m_pavgb(__m64, __m64);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pavgw(__m64, __m64);
__m64 _m_pcmpeqb(__m64, __m64);
__m64 _m_pcmpeqd(__m64, __m64);
__m64 _m_pcmpeqw(__m64, __m64);
__m64 _m_pcmpgtb(__m64, __m64);
__m64 _m_pcmpgtd(__m64, __m64);
__m64 _m_pcmpgtw(__m64, __m64);
int _m_pextrw(__m64, int);
__m64 _m_pf2id(__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pinsrw(__m64, int, int);
__m64 _m_pmaddwd(__m64, __m64);
__m64 _m_pmaxsw(__m64, __m64);
__m64 _m_pmaxub(__m64, __m64);
__m64 _m_pminsw(__m64, __m64);
__m64 _m_pminub(__m64, __m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhrw(__m64, __m64);
__m64 _m_pmulhuw(__m64, __m64);
__m64 _m_pmulhw(__m64, __m64);
__m64 _m_pmullw(__m64, __m64);
__m64 _m_por(__m64, __m64);
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
__m64 _m_psadbw(__m64, __m64);
__m64 _m_pshufw(__m64, int);
__m64 _m_pslld(__m64, __m64);
__m64 _m_pslldi(__m64, int);
__m64 _m_psllq(__m64, __m64);
__m64 _m_psllqi(__m64, int);
__m64 _m_psllw(__m64, __m64);
__m64 _m_psllwi(__m64, int);
__m64 _m_psrad(__m64, __m64);
__m64 _m_psradi(__m64, int);
__m64 _m_psraw(__m64, __m64);
__m64 _m_psrawi(__m64, int);
__m64 _m_psrld(__m64, __m64);
__m64 _m_psrldi(__m64, int);
__m64 _m_psrlq(__m64, __m64);
__m64 _m_psrlqi(__m64, int);
__m64 _m_psrlw(__m64, __m64);
__m64 _m_psrlwi(__m64, int);
__m64 _m_psubb(__m64, __m64);
__m64 _m_psubd(__m64, __m64);
__m64 _m_psubsb(__m64, __m64);
__m64 _m_psubsw(__m64, __m64);
__m64 _m_psubusb(__m64, __m64);
__m64 _m_psubusw(__m64, __m64);
__m64 _m_psubw(__m64, __m64);
__m64 _m_pswapd(__m64);
__m64 _m_punpckhbw(__m64, __m64);
__m64 _m_punpckhdq(__m64, __m64);
__m64 _m_punpckhwd(__m64, __m64);
__m64 _m_punpcklbw(__m64, __m64);
__m64 _m_punpckldq(__m64, __m64);
__m64 _m_punpcklwd(__m64, __m64);
__m64 _m_pxor(__m64, __m64);
float _m_to_float(__m64);
int _m_to_int(__m64);
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);
__m64 _mm_abs_pi16(__m64);
__m64 _mm_abs_pi32(__m64);
__m64 _mm_abs_pi8(__m64);
__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);
__m64 _mm_add_si64(__m64, __m64);
__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);
__m64 _mm_alignr_pi8(__m64, __m64, int);
__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);

unsigned int _mm_crc32_u8(unsigned int, unsigned char);
__m128 _mm_cvt_pi2ps(__m128, __m64);
__m64 _mm_cvt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
__m64 _mm_cvtpd_pi32(__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);


__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);


__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);






__m128d _mm_cvtss_sd(__m128d, __m128);


__m64 _mm_cvtt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);




__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);

int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);
__m64 _mm_hadd_pi16(__m64, __m64);
__m64 _mm_hadd_pi32(__m64, __m64);
__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);
__m64 _mm_hadds_pi16(__m64, __m64);
__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);
__m64 _mm_hsub_pi16(__m64, __m64);
__m64 _mm_hsub_pi32(__m64, __m64);
__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);
__m64 _mm_hsubs_pi16(__m64, __m64);
__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);

__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);
__m64 _mm_maddubs_pi16(__m64, __m64);
void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);
__m64 _mm_movepi64_pi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);
__m64 _mm_mul_su32(__m64, __m64);
__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);
__m64 _mm_mulhrs_pi16(__m64, __m64);
__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);

void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi64(__m64);

__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi8(char);
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);
__m128i _mm_set_epi64(__m64, __m64);

__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);
__m64 _mm_set_pi16(short, short, short, short);
__m64 _mm_set_pi32(int, int);
__m64 _mm_set_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);
__m128i _mm_setr_epi64(__m64, __m64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);
__m64 _mm_setr_pi16(short, short, short, short);
__m64 _mm_setr_pi32(int, int);
__m64 _mm_setr_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);
__m64 _mm_setzero_si64(void);
void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);
__m64 _mm_shuffle_pi8(__m64, __m64);
__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);
__m64 _mm_sign_pi16(__m64, __m64);
__m64 _mm_sign_pi32(__m64, __m64);
__m64 _mm_sign_pi8(__m64, __m64);
__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(__m128i *);
void _mm_stream_pd(double *, __m128d);
void _mm_stream_pi(__m64 *, __m64);
void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);

void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);
__m64 _mm_sub_si64(__m64, __m64);
__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);

unsigned int __cdecl _rotl( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);


void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);




}
#line 909 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"
#line 926 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory0"
#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4700)

namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t>

  get_temporary_buffer(ptrdiff_t _Count) throw ()

 {
 _Ty *_Pbuf;

 if (_Count < 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count))
  _Xbad_alloc();
 for (_Pbuf = 0; 0 < _Count; _Count /= 2)
  if ((_Pbuf = (_Ty *)operator new(
   (size_t)_Count * sizeof (_Ty), nothrow)) != 0)
   break;

 return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
 }


template<class _Ty> inline
 void return_temporary_buffer(_Ty *_Pbuf)
 {
 operator delete(_Pbuf);
 }


template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, input_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 _Construct(&*_Dest, *_First);
 while (0 < --_Count)
  _Construct(&*++_Dest, *++_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, forward_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, ++_Dest, ++_First)
  _Construct(&*_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 131 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory"
template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n2(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Mutable_iterator_tag)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n2(_InIt _First, _Diff _Count,
  _FwdIt _Dest, random_access_iterator_tag)
 {
 _FwdIt _Ans = _Dest + _Count;
 _Uninitialized_copy_n(_First, _Count,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, input_iterator_tag)
 {
 return (_Uninitialized_copy_n2(_First, _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n1(_InIt _First, _Diff _Count,
  _FwdIt _Dest, random_access_iterator_tag)
 {
 _InIt _Last = _First + _Count;
 _Last = _Last;
 return (_Uninitialized_copy_n2(_Unchecked(_First), _Count,
  _Dest, _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, true_type)
 {
 return (_Uninitialized_copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, false_type)
 {
 return (_Uninitialized_copy_n1(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 _Debug_pointer(_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 202);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 203);
 if (_Count <= 0)
  return (_Dest);
 else
  return (_Uninitialized_copy_n(_First,
   _Count, _Dest, _Is_checked(_Dest)));
 }


template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _FwdIt _Dest)
 {
 return (::std:: uninitialized_copy_n(_Array_iterator<_InTy, _InSize>(_First),
  _Count, _Dest));
 }

template<class _InIt,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InIt _First, _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy_n(_First,
   _Count, _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }

template<class _InTy,
 size_t _InSize,
 class _Diff,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy_n(_InTy (&_First)[_InSize], _Diff _Count,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy_n(_Array_iterator<_InTy, _InSize>(_First),
   _Count, _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Construct(&*_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }
#line 301 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory"
template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
 {
 _FwdIt _Ans = _Dest + (_Last - _First);
 _Uninitialized_copy0(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, true_type)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, false_type)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 345);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 346);
 return (_Uninitialized_copy0(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *uninitialized_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: uninitialized_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 372);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 373);
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Al.construct(_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_copy(_First, _Last, _Dest,
  _Al, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2> inline
 _Ty2 *_Uninit_copy(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<allocator<_Ty2> >&, _Scalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 402);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 403);
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_copy(_First, _Last, _Dest, _Al,
  _Ptr_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Rechecked(_Dest,
  _Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 438);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 439);
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Al.construct(_Dest, (_Valty&&)*_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_move(_First, _Last, _Dest,
  _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2,
 class _Valty> inline
 _Ty2 *_Uninit_move(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<allocator<_Ty2> >&, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 470);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 471);
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_move(_First, _Last, _Dest, _Al,
  _Val_type(_First), _Ptr_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Rechecked(_Dest,
  _Uninit_move(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _FwdIt,
 class _Tval> inline
 void _Uninit_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 504);
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  _Construct(&*_First, _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 }

template<class _Ty,
 class _Tval> inline
 void _Uninit_fill(_Ty *_First, _Ty *_Last, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 ::std:: fill(_First, _Last, _Val);
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Uninit_fill(_First, _Last, _Val, _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninit_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)
  _Construct(&*_First, _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(&*_Next);
 throw;
 }

 return (_First);
 }

template<class _Ty,
 class _Diff,
 class _Tval> inline
 _Ty *_Uninit_fill_n(_Ty *_First, _Diff _Count, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 return (_Fill_n(_First, _Count, _Val));
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval& _Val)
 {
 return (_Uninit_fill_n(_First, _Count, _Val, _Ptr_cat(_First, _First)));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
   _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)
  _Al.construct(_First, *_Pval);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_fill_n(_First, _Count,
  _Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Tval,
 class _Valty> inline
 void _Uninit_fill_n(_Ty *_First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<allocator<_Ty> >&,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, *_Pval);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc> inline
 void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al)
 {
 _Uninit_fill_n(_First, _Count, _Pval, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)

  _Al.construct(_First);

 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_def_fill_n(_First, _Count,
  _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Valty> inline
 void _Uninit_def_fill_n(_Ty *_First, _Diff _Count,
  _Wrap_alloc<allocator<_Ty> >&, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, (_Valty)0);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
  _Alloc& _Al)
 {
 _Uninit_def_fill_n(_First, _Count, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _OutIt,
 class _Ty>
 class raw_storage_iterator
  : public _Outit
 {
public:
 typedef _OutIt iterator_type;
 typedef _OutIt iter_type;
 typedef _Ty element_type;

 explicit raw_storage_iterator(_OutIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator<_OutIt, _Ty>& operator*()
  {
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty>& operator=(const _Ty& _Val)
  {
  _Construct(&*_Next, _Val);
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty>& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty> operator++(int)
  {
  raw_storage_iterator<_OutIt, _Ty> _Ans = *this;
  ++_Next;
  return (_Ans);
  }

private:
 _OutIt _Next;
 };


template<class _Ty>
 class _Temp_iterator
  : public _Outit
 {
public:
 typedef _Ty *_Pty;

 _Temp_iterator(ptrdiff_t _Count = 0)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = _Count;
  _Pbuf = &_Buf;
  }

 _Temp_iterator(const _Temp_iterator<_Ty>& _Right)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = 0;
  *this = _Right;
  }

 ~_Temp_iterator() throw ()
  {
  if (_Buf._Begin != 0)
   {
   for (_Pty _Next = _Buf._Begin;
    _Next != _Buf._Hiwater; ++_Next)
    _Destroy(&*_Next);
   ::std:: return_temporary_buffer(_Buf._Begin);
   }
  }

 _Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _Right)
  {
  _Pbuf = _Right._Pbuf;
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(const _Ty& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ = _Val;
  else
   {
   _Pty _Ptr = &*_Pbuf->_Current;
   _Construct(_Ptr, _Val);
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(_Ty&& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ =
    ::std:: forward<_Ty>(_Val);
  else
   {
   _Pty _Ptr = &*_Pbuf->_Current;
   _Construct(_Ptr, ::std:: forward<_Ty>(_Val));
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator*()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++(int)
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& _Init()
  {
  _Pbuf->_Current = _Pbuf->_Begin;
  return (*this);
  }

 _Pty _First() const
  {
  return (_Pbuf->_Begin);
  }

 _Pty _Last() const
  {
  return (_Pbuf->_Current);
  }

 ptrdiff_t _Maxlen()
  {
  if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
   {
   pair<_Pty, ptrdiff_t> _Pair =

    ::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

   _Pbuf->_Begin = _Pair.first;
   _Pbuf->_Current = _Pair.first;
   _Pbuf->_Hiwater = _Pair.first;
   _Pbuf->_Size = _Pair.second;
   }
  return (_Pbuf->_Size);
  }

private:
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar *_Pbuf;
 };


template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty *_Right)
  : _Ref(_Right)
  {
  }

 _Ty *_Ref;
 };

template<class _Ty>
 class auto_ptr
  {
public:
 typedef auto_ptr<_Ty> _Myt;
 typedef _Ty element_type;

 explicit auto_ptr(_Ty *_Ptr = 0) throw ()
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(_Myt& _Right) throw ()
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) throw ()
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() throw ()
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() throw ()
  {
  _Other *_Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  _Myt& operator=(auto_ptr<_Other>& _Right) throw ()
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) throw ()
  : _Myptr(_Right.release())
  {
  }

 _Myt& operator=(_Myt& _Right) throw ()
  {
  reset(_Right.release());
  return (*this);
  }

 _Myt& operator=(auto_ptr_ref<_Ty> _Right) throw ()
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr() throw ()
  {
  delete _Myptr;
  }

 _Ty& operator*() const throw ()
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 958);


  return (*get());
  }

 _Ty *operator->() const throw ()
  {

  if (_Myptr == 0)
   _Debug_message(L"auto_ptr not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xmemory", 968);


  return (get());
  }

 _Ty *get() const throw ()
  {
  return (_Myptr);
  }

 _Ty *release() throw ()
  {
  _Ty *_Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty *_Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty *_Myptr;
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\memory"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdint.h"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdint.h"


typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;
#line 53 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdint.h"
typedef long long intmax_t;
typedef unsigned long long uintmax_t;
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\memory"







#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
#line 23 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4275)
#line 37 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
struct __type_info_node {
    void *_MemPtr;
    __type_info_node* _Next;
};

extern __type_info_node __type_info_root_node;

class type_info {
public:
 size_t hash_code() const throw ()
  {
  return (::std:: _Hash_seq((const unsigned char *) name(),
   :: strlen(name())));
  }







    virtual ~type_info() throw ();




    __declspec(dllimport) bool operator==(const type_info& _Rhs) const;
    __declspec(dllimport) bool operator!=(const type_info& _Rhs) const;

    __declspec(dllimport) bool before(const type_info& _Rhs) const;
    __declspec(dllimport) const char* name(__type_info_node* __ptype_info_node = &__type_info_root_node) const;
    __declspec(dllimport) const char* raw_name() const;
private:
    void *_M_data;
    char _M_d_name[1];




public:
                       type_info(const type_info&) = delete;
    type_info& operator=(const type_info&) = delete;
private:

    __declspec(dllimport) static const char *__cdecl _Name_base(const type_info *,__type_info_node* __ptype_info_node);
    __declspec(dllimport) static void __cdecl _Type_info_dtor(type_info *);
#line 95 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
};



 namespace std {

using ::type_info;

 }






 namespace std {

class __declspec(dllimport) bad_cast : public exception {
public:
#line 132 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
                       bad_cast(const char * _Message = "bad cast");
                       bad_cast(const bad_cast &);
    virtual ~bad_cast() throw ();







};

class __declspec(dllimport) bad_typeid : public exception {
public:
#line 156 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
                       bad_typeid(const char * _Message = "bad typeid");
                       bad_typeid(const bad_typeid &);
    virtual ~bad_typeid() throw ();


};

class __declspec(dllimport) __non_rtti_object : public bad_typeid {
public:
#line 175 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
                       __non_rtti_object(const char * _Message);
                       __non_rtti_object(const __non_rtti_object &);
    virtual ~__non_rtti_object() throw ();

};

 }
#line 245 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\typeinfo"
#pragma pack(pop)
#pragma warning(pop)
#line 14 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\memory"



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 28197)

namespace std {
template<class _Ty>
 struct default_delete;

template<class _Ty,
 class _Dx = default_delete<_Ty> >
 class unique_ptr;


class bad_weak_ptr
 : public ::std:: exception
 {
public:
 explicit bad_weak_ptr(const char * = 0) throw ()
  {
  }

 virtual const char * what() const throw()
  {
  return ("bad_weak_ptr");
  }
 };


class _Ref_count_base
 {
private:
 virtual void _Destroy() = 0;
 virtual void _Delete_this() = 0;

private:
 _Atomic_counter_t _Uses;
 _Atomic_counter_t _Weaks;

protected:
 _Ref_count_base()
  {
  _Init_atomic_counter(_Uses, 1);
  _Init_atomic_counter(_Weaks, 1);
  }

public:
 virtual ~_Ref_count_base() throw ()
  {
  }

 bool _Incref_nz()
  {
  for (; ; )
   {

   _Atomic_integral_t _Count =
    static_cast<volatile _Atomic_counter_t&>(_Uses);

   if (_Count == 0)
    return (false);

   if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
     reinterpret_cast<volatile long *>(&_Uses),
     _Count + 1, _Count)) == _Count)
    return (true);
#line 96 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\memory"
   }
  }

 unsigned int _Get_uses() const
  {
  return (_Get_atomic_count(_Uses));
  }

 void _Incref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
  }

 void _Incwref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
  }

 void _Decref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
   {
   _Destroy();
   _Decwref();
   }
  }

 void _Decwref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
   _Delete_this();
  }

 long _Use_count() const
  {
  return (_Get_uses());
  }

 bool _Expired() const
  {
  return (_Get_uses() == 0);
  }

 virtual void *_Get_deleter(const type_info&) const
  {
  return (0);
  }
 };


template<class _Ty>
 class _Ref_count
 : public _Ref_count_base
 {
public:
 _Ref_count(_Ty *_Px)
  : _Ref_count_base(), _Ptr(_Px)
  {
  }

private:
 virtual void _Destroy()
  {
  delete _Ptr;
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 _Ty * _Ptr;
 };


template<class _Ty,
 class _Dx>
 class _Ref_count_del
 : public _Ref_count_base
 {
public:
 _Ref_count_del(_Ty *_Px, _Dx _Dt)
  : _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt)
  {
  }

 virtual void *_Get_deleter(const type_info& _Typeid) const
  {
  return ((void *)(_Typeid == typeid(_Dx) ? &_Dtor : 0));
  }

private:
 virtual void _Destroy()
  {
  _Dtor(_Ptr);
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 _Ty * _Ptr;
 _Dx _Dtor;
 };


template<class _Ty,
 class _Dx,
 class _Alloc>
 class _Ref_count_del_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myty;
 typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

 _Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, _Myalty _Al)
  : _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt), _Myal(_Al)
  {
  }

 virtual void *_Get_deleter(const type_info& _Typeid) const
  {
  return ((void *)(_Typeid == typeid(_Dx) ? &_Dtor : 0));
  }

private:
 virtual void _Destroy()
  {
  _Dtor(_Ptr);
  }

 virtual void _Delete_this()
  {
  _Myalty _Al = _Myal;
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Ty * _Ptr;
 _Dx _Dtor;
 _Myalty _Myal;
 };


template<class _Ty>
 class weak_ptr;
template<class _Ty>
 class shared_ptr;
template<class _Ty>
 class enable_shared_from_this;
struct _Static_tag {};
struct _Const_tag {};
struct _Dynamic_tag {};
template<class _Ty1,
 class _Ty2>
 void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
  _Ref_count_base *);

template<class _Ty>
 inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
  typename _Ty::_EStype * = 0)
 {
 if (_Ptr)
  _Do_enable(_Ptr,
   (enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
 }

inline void _Enable_shared(const volatile void *, const volatile void *)
 {
 }


template<class _Ty>
 class _Ptr_base
 {
public:
 typedef _Ptr_base<_Ty> _Myt;
 typedef _Ty element_type;

 _Ptr_base()
  : _Ptr(0), _Rep(0)
  {
  }

 _Ptr_base(_Myt&& _Right)
  : _Ptr(0), _Rep(0)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 template<class _Ty2>
  _Ptr_base(_Ptr_base<_Ty2>&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   _Swap(_Right);
  }

 long use_count() const throw ()
  {
  return (_Rep ? _Rep->_Use_count() : 0);
  }

 void _Swap(_Ptr_base& _Right)
  {
  ::std:: swap(_Rep, _Right._Rep);
  ::std:: swap(_Ptr, _Right._Ptr);
  }

 template<class _Ty2>
  bool owner_before(const _Ptr_base<_Ty2>& _Right) const
  {
  return (_Rep < _Right._Rep);
  }

 void *_Get_deleter(const type_info& _Typeid) const
  {
  return (_Rep ? _Rep->_Get_deleter(_Typeid) : 0);
  }

 _Ty *_Get() const
  {
  return (_Ptr);
  }

 bool _Expired() const
  {
  return (!_Rep || _Rep->_Expired());
  }

 void _Decref()
  {
  if (_Rep != 0)
   _Rep->_Decref();
  }

 void _Reset()
  {
  _Reset(0, 0);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
  {
  _Reset(_Other._Ptr, _Other._Rep, _Throw);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Static_tag&)
  {
  _Reset(static_cast<_Ty *>(_Other._Ptr), _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Const_tag&)
  {
  _Reset(const_cast<_Ty *>(_Other._Ptr), _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Dynamic_tag&)
  {
  _Ty *_Ptr = dynamic_cast<_Ty *>(_Other._Ptr);
  if (_Ptr)
   _Reset(_Ptr, _Other._Rep);
  else
   _Reset();
  }

 template<class _Ty2>
  void _Reset(auto_ptr<_Ty2>&& _Other)
  {
  _Ty2 *_Px = _Other.get();
  _Reset0(_Px, new _Ref_count<_Ty>(_Px));
  _Other.release();
  _Enable_shared(_Px, _Rep);
  }

 template<class _Ty2>
  void _Reset(_Ty *_Ptr, const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Ptr, _Other._Rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incref();
  _Reset0(_Other_ptr, _Other_rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
  {


  if (_Other_rep && _Other_rep->_Incref_nz())
   _Reset0(_Other_ptr, _Other_rep);
  else if (_Throw)
   throw bad_weak_ptr(0);
  }

 void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Rep != 0)
   _Rep->_Decref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

 void _Decwref()
  {
  if (_Rep != 0)
   _Rep->_Decwref();
  }

 void _Resetw()
  {
  _Resetw((_Ty *)0, 0);
  }

 template<class _Ty2>
  void _Resetw(const _Ptr_base<_Ty2>& _Other)
  {
  _Resetw(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Resetw(const _Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  _Resetw(const_cast<_Ty2*>(_Other_ptr), _Other_rep);
  }

 template<class _Ty2>
  void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incwref();
  if (_Rep != 0)
   _Rep->_Decwref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

private:
 _Ty *_Ptr;
 _Ref_count_base *_Rep;
 template<class _Ty0>
  friend class _Ptr_base;
 };


template<class _Ty>
 class shared_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef shared_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 shared_ptr() throw ()
  {
  }

 template<class _Ux>
  explicit shared_ptr(_Ux *_Px)
  {
  _Resetp(_Px);
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(_Ux *_Px, _Dx _Dt)
  {
  _Resetp(_Px, _Dt);
  }

 shared_ptr(nullptr_t)
  {
  }

 template<class _Dx>
  shared_ptr(nullptr_t, _Dx _Dt)
  {
  _Resetp((_Ty *)0, _Dt);
  }

 template<class _Dx,
  class _Alloc>
  shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp((_Ty *)0, _Dt, _Ax);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp(_Px, _Dt, _Ax);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px) throw ()
  {
  this->_Reset(_Px, _Right);
  }

 shared_ptr(const _Myt& _Other) throw ()
  {
  this->_Reset(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(const shared_ptr<_Ty2>& _Other) throw ()
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
   bool _Throw = true)
  {
  this->_Reset(_Other, _Throw);
  }

 template<class _Ty2>
  shared_ptr(auto_ptr<_Ty2>&& _Other)
  {
  this->_Reset(::std:: move(_Other));
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Static_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Const_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Dynamic_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 shared_ptr(_Myt&& _Right) throw ()
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(shared_ptr<_Ty2>&& _Right) throw ()
  : _Mybase(::std:: forward<shared_ptr<_Ty2> >(_Right))
  {
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(unique_ptr<_Ux, _Dx>&& _Right)
  {
  _Resetp(_Right.release(), _Right.get_deleter());
  }

 template<class _Ux,
  class _Dx>
  _Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(shared_ptr<_Ty2>&& _Right) throw ()
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 ~shared_ptr() throw ()
  {
  this->_Decref();
  }

 _Myt& operator=(const _Myt& _Right) throw ()
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(const shared_ptr<_Ty2>& _Right) throw ()
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(auto_ptr<_Ty2>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 void reset() throw ()
  {
  shared_ptr().swap(*this);
  }

 template<class _Ux>
  void reset(_Ux *_Px)
  {
  shared_ptr(_Px).swap(*this);
  }

 template<class _Ux,
  class _Dx>
  void reset(_Ux *_Px, _Dx _Dt)
  {
  shared_ptr(_Px, _Dt).swap(*this);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  shared_ptr(_Px, _Dt, _Ax).swap(*this);
  }

 void swap(_Myt& _Other) throw ()
  {
  this->_Swap(_Other);
  }

 _Ty *get() const throw ()
  {
  return (this->_Get());
  }

 typename add_reference<_Ty>::type operator*() const throw ()
  {
  return (*this->_Get());
  }

 _Ty *operator->() const throw ()
  {
  return (this->_Get());
  }

 bool unique() const throw ()
  {
  return (this->use_count() == 1);
  }

 explicit operator bool() const throw ()
  {
  return (this->_Get() != 0);
  }

private:
 template<class _Ux>
  void _Resetp(_Ux *_Px)
  {
  try {
  _Resetp0(_Px, new _Ref_count<_Ux>(_Px));
  } catch (...) {
  delete _Px;
  throw;
  }
  }

 template<class _Ux,
  class _Dx>
  void _Resetp(_Ux *_Px, _Dx _Dt)
  {
  try {
  _Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
  typename _Alloc::template rebind<_Refd>::other _Al = _Ax;

  try {
  _Refd *_Ptr = _Al.allocate(1);
  ::new (_Ptr) _Refd(_Px, _Dt, _Al);
  _Resetp0(_Px, _Ptr);
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

public:
 template<class _Ux>
  void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
  {
  this->_Reset0(_Px, _Rx);
  _Enable_shared(_Px, _Rx);
  }
 };

template<class _Ty1,
 class _Ty2>
 bool operator==(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator!=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator<(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (less<decltype(_Always_false<_Ty1>::value
  ? _Left.get() : _Right.get())>()(
   _Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2>
 bool operator<=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator==(const shared_ptr<_Ty>& _Left,
  nullptr_t) throw ()
 {
 return (_Left.get() == (_Ty *)0);
 }

template<class _Ty>
 bool operator==(nullptr_t,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return ((_Ty *)0 == _Right.get());
 }

template<class _Ty>
 bool operator!=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator!=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator<(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (less<_Ty *>()(_Left.get(), (_Ty *)0));
 }

template<class _Ty>
 bool operator<(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (less<_Ty *>()((_Ty *)0, _Right.get()));
 }

template<class _Ty>
 bool operator>=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator>(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator<=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator<=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>&
 operator<<(basic_ostream<_Elem, _Traits>& _Out,
  const shared_ptr<_Ty>& _Px)
 {
 return (_Out << _Px.get());
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left,
  shared_ptr<_Ty>& _Right) throw ()
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  static_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
 {
 return (shared_ptr<_Ty1>(_Other, _Static_tag()));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  const_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
 {
 return (shared_ptr<_Ty1>(_Other, _Const_tag()));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
 {
 return (shared_ptr<_Ty1>(_Other, _Dynamic_tag()));
 }

template<class _Dx,
 class _Ty>
 _Dx *get_deleter(const shared_ptr<_Ty>& _Sx) throw ()
 {
 return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
 }


template<class _Ty>
 class _Ref_count_obj
 : public _Ref_count_base
 {
public:
 template<class... _Types>
  _Ref_count_obj(_Types&&... _Args)
  : _Ref_count_base()
  {
  ::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy()
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 typename aligned_storage<sizeof (_Ty),
  alignment_of<_Ty>::value>::type _Storage;
 };


template<class _Ty,
 class _Alloc>
 class _Ref_count_obj_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myty;
 typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

 template<class... _Types>
  _Ref_count_obj_alloc(_Myalty _Al, _Types&&... _Args)
  : _Ref_count_base(), _Myal(_Al)
  {
  ::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy()
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this()
  {
  _Myalty _Al = _Myal;
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 typename aligned_storage<sizeof (_Ty),
  alignment_of<_Ty>::value>::type _Storage;
 _Myalty _Myal;
 };


template<class _Ty,
 class... _Types> inline
  shared_ptr<_Ty> make_shared(_Types&&... _Args)
 {
 _Ref_count_obj<_Ty> *_Rx =
  new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc,
 class... _Types> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg, _Types&&... _Args)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa *_Rx = _Alref.allocate(1);

 try {
  ::new (_Rx) _Refoa(_Al_arg, ::std:: forward<_Types>(_Args)...);
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }



template<class _Ty>
 class weak_ptr
  : public _Ptr_base<_Ty>
 {
public:
 weak_ptr() throw ()
  {
  }

 weak_ptr(const weak_ptr& _Other) throw ()
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const shared_ptr<_Ty2>& _Other) throw ()
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const weak_ptr<_Ty2>& _Other) throw ()
  {
  this->_Resetw(_Other.lock());
  }

 ~weak_ptr() throw ()
  {
  this->_Decwref();
  }

 weak_ptr& operator=(const weak_ptr& _Right) throw ()
  {
  this->_Resetw(_Right);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) throw ()
  {
  this->_Resetw(_Right.lock());
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) throw ()
  {
  this->_Resetw(_Right);
  return (*this);
  }

 void reset() throw ()
  {
  this->_Resetw();
  }

 void swap(weak_ptr& _Other) throw ()
  {
  this->_Swap(_Other);
  }

 bool expired() const throw ()
  {
  return (this->_Expired());
  }

 shared_ptr<_Ty> lock() const throw ()
  {
  return (shared_ptr<_Ty>(*this, false));
  }
 };

template<class _Ty>
 void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2) throw ()
 {
 _W1.swap(_W2);
 }


template<class _Ty>
 class enable_shared_from_this
 {
public:
 typedef _Ty _EStype;

 shared_ptr<_Ty> shared_from_this()
  {
  return (shared_ptr<_Ty>(_Wptr));
  }

 shared_ptr<const _Ty> shared_from_this() const
  {
  return (shared_ptr<const _Ty>(_Wptr));
  }

protected:
 enable_shared_from_this() throw ()
  {
  }

 enable_shared_from_this(const enable_shared_from_this&) throw ()
  {
  }

 enable_shared_from_this&
  operator=(const enable_shared_from_this&) throw ()
  {
  return (*this);
  }

 ~enable_shared_from_this() throw ()
  {
  }

private:
 template<class _Ty1,
  class _Ty2>
  friend void _Do_enable(
   _Ty1 *,
   enable_shared_from_this<_Ty2>*,
   _Ref_count_base *);

 mutable weak_ptr<_Ty> _Wptr;
 };

template<class _Ty1,
 class _Ty2>
 inline void _Do_enable(
  _Ty1 *_Ptr,
  enable_shared_from_this<_Ty2> *_Es,
  _Ref_count_base *_Refptr)
 {
 _Es->_Wptr._Resetw(_Ptr, _Refptr);
 }
}

namespace std {



template<class _Ty>
 struct default_delete
 {
 typedef default_delete<_Ty> _Myt;

 default_delete() throw ()
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  default_delete(const default_delete<_Ty2>&) throw ()
  {
  }

 void operator()(_Ty *_Ptr) const throw ()
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete _Ptr;
  }
 };

template<class _Ty>
 struct default_delete<_Ty[]>
 {
 typedef default_delete<_Ty> _Myt;

 default_delete() throw ()
  {
  }

 template<class _Other>
  void operator()(_Other *) const = delete;

 void operator()(_Ty *_Ptr) const throw ()
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete[] _Ptr;
  }
 };


template<class _Val,
 class _Ty>
 struct _Get_deleter_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Val *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Dx,
 bool _Empty_deleter>
 class _Unique_ptr_base
 {
public:
 typedef typename remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 _Unique_ptr_base(pointer _Ptr, _Dx _Dt)
  : _Myptr(_Ptr), _Mydel(_Dt)
  {
  }

 _Unique_ptr_base(pointer _Ptr)
  : _Myptr(_Ptr)
  {
  }

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
  : _Myptr(_Ptr), _Mydel(_Dt)
  {
  }

 template<class _Ptr2>
  _Unique_ptr_base(_Ptr2 _Ptr)
  : _Myptr(_Ptr)
  {
  }

 _Dx_noref& get_deleter()
  {
  return (_Mydel);
  }

 const _Dx_noref& get_deleter() const
  {
  return (_Mydel);
  }

 pointer _Myptr;
 _Dx _Mydel;
 };

template<class _Ty,
 class _Dx>
 class _Unique_ptr_base<_Ty, _Dx, true>
  : public _Dx
 {
public:
 typedef _Dx _Mybase;
 typedef typename remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 _Unique_ptr_base(pointer _Ptr, _Dx _Dt) throw ()
  : _Myptr(_Ptr), _Mybase(_Dt)
  {
  }

 _Unique_ptr_base(pointer _Ptr) throw ()
  : _Myptr(_Ptr)
  {
  }

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt) throw ()
  : _Myptr(_Ptr), _Mybase(_Dt)
  {
  }

 template<class _Ptr2>
  _Unique_ptr_base(_Ptr2 _Ptr) throw ()
  : _Myptr(_Ptr)
  {
  }

 _Dx_noref& get_deleter() throw ()
  {
  return (*this);
  }

 const _Dx_noref& get_deleter() const throw ()
  {
  return (*this);
  }

 pointer _Myptr;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr
  : private _Unique_ptr_base<_Ty, _Dx,
   is_empty<_Dx>::value
    || is_same<default_delete<_Ty>, _Dx>::value>
 {
public:
 typedef unique_ptr<_Ty, _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx,
  is_empty<_Dx>::value
   || is_same<default_delete<_Ty>, _Dx>::value> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 unique_ptr() throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(nullptr_t) throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) throw ()
  {
  reset();
  return (*this);
  }

 explicit unique_ptr(pointer _Ptr) throw ()
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) throw ()
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) throw ()
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) throw ()
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2,
  class = typename enable_if<!is_array<_Ty2>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value
   && ((is_reference<_Dx>::value && is_same<_Dx, _Dx2>::value)
    || (!is_reference<_Dx>::value
     && is_convertible<_Dx2, _Dx>::value)),
   void>::type>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) throw ()
   : _Mybase(_Right.release(),
    ::std:: forward<_Dx2>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value
   && is_same<_Dx, default_delete<_Ty> >::value,
   void>::type>
  unique_ptr(auto_ptr<_Ty2>&& _Right) throw ()
   : _Mybase(_Right.release())
  {
  }

 template<class _Ty2,
  class _Dx2>
  typename enable_if<!is_array<_Ty2>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value,
   _Myt&>::type
  operator=(unique_ptr<_Ty2, _Dx2>&& _Right) throw ()
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(_Myt& _Right) throw ()
  {
  _Swap_adl(this->_Myptr, _Right._Myptr);
  _Swap_adl(this->get_deleter(),
   _Right.get_deleter());
  }

 ~unique_ptr() throw ()
  {
  if (this->_Myptr != pointer())
   this->get_deleter()(this->_Myptr);
  }

 typename add_reference<_Ty>::type operator*() const
  {
  return (*this->_Myptr);
  }

 pointer operator->() const throw ()
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 pointer get() const throw ()
  {
  return (this->_Myptr);
  }

 explicit operator bool() const throw ()
  {
  return (this->_Myptr != pointer());
  }

 pointer release() throw ()
  {
  pointer _Ans = this->_Myptr;
  this->_Myptr = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) throw ()
  {
  pointer _Old = this->_Myptr;
  this->_Myptr = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr<_Ty[], _Dx>
  : private _Unique_ptr_base<_Ty, _Dx,
   is_empty<_Dx>::value
    || is_same<default_delete<_Ty[]>, _Dx>::value>
 {
public:
 typedef unique_ptr<_Ty[], _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx,
  is_empty<_Dx>::value
   || is_same<default_delete<_Ty[]>, _Dx>::value> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 unique_ptr() throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 explicit unique_ptr(pointer _Ptr) throw ()
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) throw ()
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) throw ()
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) throw ()
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 unique_ptr(nullptr_t) throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) throw ()
  {
  reset();
  return (*this);
  }

 void reset(nullptr_t) throw ()
  {
  reset();
  }

 void swap(_Myt& _Right) throw ()
  {
  _Swap_adl(this->_Myptr, _Right._Myptr);
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr() throw ()
  {
  _Delete();
  }

 typename add_reference<_Ty>::type operator[](size_t _Idx) const
  {
  return (this->_Myptr[_Idx]);
  }

 pointer get() const throw ()
  {
  return (this->_Myptr);
  }

 explicit operator bool() const throw ()
  {
  return (this->_Myptr != pointer());
  }

 pointer release() throw ()
  {
  pointer _Ans = this->_Myptr;
  this->_Myptr = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) throw ()
  {
  _Delete();
  this->_Myptr = _Ptr;
  }

 template<class _Ptr2>
  explicit unique_ptr(_Ptr2) = delete;

 template<class _Ptr2,
  class _Dx2>
  unique_ptr(_Ptr2, _Dx2) = delete;

 unique_ptr(const _Myt&) = delete;

 _Myt& operator=(const _Myt&) = delete;

 template<class _Ptr2>
  void reset(_Ptr2) = delete;

private:
 void _Delete()
  {
  if (this->_Myptr != pointer())
   this->get_deleter()(this->_Myptr);
  }
 };


template<class _Ty,
 class... _Types> inline
 typename enable_if<!is_array<_Ty>::value,
  unique_ptr<_Ty> >::type make_unique(_Types&&... _Args)
 {
 return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
 }

template<class _Ty> inline
 typename enable_if<is_array<_Ty>::value && extent<_Ty>::value == 0,
  unique_ptr<_Ty> >::type make_unique(size_t _Size)
 {
 typedef typename remove_extent<_Ty>::type _Elem;
 return (unique_ptr<_Ty>(new _Elem[_Size]()));
 }

template<class _Ty,
 class... _Types>
 typename enable_if<extent<_Ty>::value != 0,
  void>::type make_unique(_Types&&...) = delete;


template<class _Ty,
 class _Dx>
 void swap(unique_ptr<_Ty, _Dx>& _Left,
  unique_ptr<_Ty, _Dx>& _Right) throw ()
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
 typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
 typedef typename common_type<_Ptr1, _Ptr2>::type _Common;
 return (less<_Common>()(_Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator==(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t) throw ()
 {
 return (!_Left);
 }

template<class _Ty,
 class _Dx>
 bool operator==(nullptr_t,
  const unique_ptr<_Ty, _Dx>& _Right) throw ()
 {
 return (!_Right);
 }

template<class _Ty,
 class _Dx>
 bool operator!=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator!=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left.get(), _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left, _Right.get()));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator>(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator<=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator<=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Right < _Left));
 }



enum class pointer_safety {
 relaxed,
 preferred,
 strict
 };

typedef pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
 {
 }

template<class _Ty> inline
 _Ty *undeclare_reachable(_Ty *_Ptr)
 {
 return (_Ptr);
 }

inline void declare_no_pointers(char *, size_t)
 {
 }

inline void undeclare_no_pointers(char *, size_t)
 {
 }

inline _Pointer_safety get_pointer_safety() throw ()
 {
 return (pointer_safety::relaxed);
 }

namespace tr1 {
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}


template<class _Ty>
 struct owner_less;

template<class _Ty>
 struct owner_less<shared_ptr<_Ty> >
  : public binary_function<shared_ptr<_Ty>, shared_ptr<_Ty>, bool>
 {
 bool operator()(const shared_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<class _Ty>
 struct owner_less<weak_ptr<_Ty> >
  : public binary_function<weak_ptr<_Ty>, weak_ptr<_Ty>, bool>
 {
 bool operator()(const weak_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };


template<class _Ty,
 class _Dx>
 struct hash<unique_ptr<_Ty, _Dx> >
  : public unary_function<unique_ptr<_Ty, _Dx>, size_t>
 {
 typedef unique_ptr<_Ty, _Dx> _Kty;
 typedef typename _Kty::pointer _Ptrtype;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (hash<_Ptrtype>()(_Keyval.get()));
  }
 };

template<class _Ty>
 struct hash<shared_ptr<_Ty> >
  : public unary_function<shared_ptr<_Ty>, size_t>
 {
 typedef shared_ptr<_Ty> _Kty;
 typedef _Ty *_Ptrtype;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (hash<_Ptrtype>()(_Keyval.get()));
  }
 };


inline void *align(size_t _Bound, size_t _Size,
 void *& _Ptr, size_t& _Space) throw ()
 {
 size_t _Off = (size_t)((uintptr_t)_Ptr & (_Bound - 1));
 if (0 < _Off)
  _Off = _Bound - _Off;
 if (_Space < _Off || _Space - _Off < _Size)
  return (0);
 else
  {
  _Ptr = (char *)_Ptr + _Off;
  _Space -= _Off;
  return (_Ptr);
  }
 }


struct _Shared_ptr_spin_lock
 {
 _Shared_ptr_spin_lock()
  {
  _Lock_shared_ptr_spin_lock();
  }

 ~_Shared_ptr_spin_lock() throw ()
  {
  _Unlock_shared_ptr_spin_lock();
  }
 };

template <class _Ty> inline
 bool atomic_is_lock_free(const shared_ptr<_Ty> *)
 {
 return (false);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> *_Ptr,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 return (_Result);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> *_Ptr)
 {
 return (atomic_load_explicit(_Ptr, memory_order_seq_cst));
 }

template <class _Ty> inline
 void atomic_store_explicit(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 }

template <class _Ty> inline
 void atomic_store(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 atomic_store_explicit(_Ptr, _Other, memory_order_seq_cst);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_exchange_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 _Ptr->swap(_Other);
 return (_Result);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_exchange(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 return (atomic_exchange_explicit(_Ptr, _Other, memory_order_seq_cst));
 }

template <class _Ty> inline
 bool atomic_compare_exchange_weak_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 bool _Success = _Ptr->get() == _Exp->get();
 if (_Success)
  *_Ptr = _Value;
 else
  {
  *_Exp = *_Ptr;
  }
 return (_Success);
 }

template <class _Ty> inline
 bool atomic_compare_exchange_weak(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
   shared_ptr<_Ty> _Value)
 {
 return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }

template <class _Ty> inline
 bool atomic_compare_exchange_strong_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }

template <class _Ty> inline
 bool atomic_compare_exchange_strong(
 shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
  shared_ptr<_Ty> _Value)
 {
 return (atomic_compare_exchange_strong_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 11 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\math.h"
#line 12 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ios"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum"
#line 10 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\streambuf"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"







#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"






#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

#pragma warning(disable: 4251)

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;






template<class _Mystr>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Mystr::value_type,
   typename _Mystr::difference_type,
   typename _Mystr::const_pointer,
   typename _Mystr::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Mystr> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::const_pointer pointer;
 typedef typename _Mystr::const_reference reference;

 _String_const_iterator()
  {
  this->_Ptr = 0;
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  {
  this->_Adopt(_Pstring);
  this->_Ptr = _Parg;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
   {
   _Debug_message(L"string iterator not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 79);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 80, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 80, 0); };
   }
#line 91 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring"
                                    ;

  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
   {
   _Debug_message(L"string iterator not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 109);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 110, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 110, 0); };
   }
#line 120 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring"
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr <= ((_Mystr *)this->_Getcont())->_Myptr())
   {
   _Debug_message(L"string iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 138);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 139, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 139, 0); };
   }







  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr + _Off < ((_Mystr *)this->_Getcont())->_Myptr()
   || ((_Mystr *)this->_Getcont())->_Myptr()
    + ((_Mystr *)this->_Getcont())->_Mysize < this->_Ptr + _Off)
   {
   _Debug_message(L"string iterator + offset out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 168);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 169, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 169, 0); };
   }
#line 180 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring"
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"string iterators incompatible", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 250);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 251, 0, L"%s", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 251, 0); };
   }
  }
#line 268 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring"
 pointer _Ptr;
 };

template<class _Mystr> inline
 typename _String_const_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr>
  _Rechecked(_String_const_iterator<_Mystr>& _Iter,
   typename _String_const_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr> operator+(
  typename _String_const_iterator<_Mystr>
   ::difference_type _Off,
  _String_const_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mystr>
 class _String_iterator
  : public _String_const_iterator<_Mystr>
 {
public:
 typedef _String_iterator<_Mystr> _Myiter;
 typedef _String_const_iterator<_Mystr> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return ((_Mybase)*this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mystr> inline
 typename _String_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_iterator<_Mystr>
  _Rechecked(_String_iterator<_Mystr>& _Iter,
   typename _String_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_iterator<_Mystr> operator+(
  typename _String_iterator<_Mystr>
   ::difference_type _Off,
  _String_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _String_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _String_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _String_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Alty::pointer _Tptr;
 typedef typename _Alty::template rebind<_Tptr>::other _Alpty;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _String_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _String_val
  : public _Container_base
 {
public:
 typedef _String_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_Myt> iterator;
 typedef _String_const_iterator<_Myt> const_iterator;

 _String_val()
  {
  _Mysize = 0;
  _Myres = 0;
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
   : 16 / sizeof (value_type)};
 enum
  {
  _ALLOC_MASK = sizeof (value_type) <= 1 ? 15
   : sizeof (value_type) <= 2 ? 7
   : sizeof (value_type) <= 4 ? 3
   : sizeof (value_type) <= 8 ? 1 : 0};

 value_type *_Myptr()
  {
  return (this->_BUF_SIZE <= this->_Myres
   ? ::std:: addressof(*this->_Bx._Ptr)
   : this->_Bx._Buf);
  }

 const value_type *_Myptr() const
  {
  return (this->_BUF_SIZE <= this->_Myres
   ? ::std:: addressof(*this->_Bx._Ptr)
   : this->_Bx._Buf);
  }

 union _Bxty
  {
  value_type _Buf[_BUF_SIZE];
  pointer _Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _String_alloc
  : public _String_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alty _Alval;

 typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
#line 564 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring"
 _String_alloc(const _Alloc& _Al = _Alloc())
  : _Alval(_Al)
  {
  _Alloc_proxy();
  }

 ~_String_alloc() throw ()
  {
  _Free_proxy();
  }

 void _Change_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  this->_Alval = _Al;
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alval, _Right._Alval);
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alval);
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alval);
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Alty& _Getal()
  {
  return (this->_Alval);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alval);
  }
 };

template<class _Alloc_types>
 class _String_alloc<false, _Alloc_types>
  : public _String_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _String_alloc<false, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;

 typedef typename _Alloc_types::_Alty _Alty;
#line 643 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring"
 _String_alloc(const _Alloc& = _Alloc())
  {
  _Alloc_proxy();
  }

 ~_String_alloc() throw ()
  {
  _Free_proxy();
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alloc::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_string
  : public _String_alloc<!is_empty<_Alloc>::value,
   _String_base_types<_Elem, _Alloc> >
 {
public:
 typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
 typedef _String_alloc<!is_empty<_Alloc>::value,
  _String_base_types<_Elem, _Alloc> > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 basic_string(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string()
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, forward_iterator_tag)
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 843);
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);
  reserve(_Count);

  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 basic_string(const_pointer _First, const_pointer _Last)
  : _Mybase()
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 860);
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(const_pointer _First, const_pointer _Last,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 870);
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(const_iterator _First, const_iterator _Last)
  : _Mybase()
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 879);
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(_Myt&& _Right) throw ()
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 basic_string(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (this->_Getal() != _Right._Getal())
   assign(_Right.begin(), _Right.end());
  else
   _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  if (this != &_Right)
   {
   _Tidy(true);

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());

   if (this->_Getal() != _Right._Getal())
    assign(_Right.begin(), _Right.end());
   else
    _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 _Myt& assign(_Myt&& _Right) throw ()
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator()
   && this->_BUF_SIZE <= _Right._Myres)
   *this = _Right;
  else
   {
   _Tidy(true);
   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (_Right._Myres < this->_BUF_SIZE)
   _Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
    _Right._Mysize + 1);
  else
   {
   this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
   _Right._Bx._Ptr = pointer();
   }
  this->_Mysize = _Right._Mysize;
  this->_Myres = _Right._Myres;
  _Right._Tidy();
  }

 basic_string(::std:: initializer_list<_Elem> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& assign(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& append(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
  }

 ~basic_string() throw ()
  {
  _Tidy(true);
  }

          static const size_type npos;

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy(true);
    this->_Change_alloc(_Right._Getal());
    }

   assign(_Right);
   }
  return (*this);
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize,
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1066);


  if (_Inside(_Ptr))
   return (append(*this,
    _Ptr - this->_Myptr(), _Count));
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1086);
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Chassign(this->_Mysize, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  append(_Iter _First, _Iter _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Count < _Num)
   _Num = _Count;

  if (this == &_Right)
   erase((size_type)(_Roff + _Num)), erase(0, _Roff);
  else if (_Grow(_Num))
   {
   _Traits::copy(this->_Myptr(),
    _Right._Myptr() + _Roff, _Num);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1151);


  if (_Inside(_Ptr))
   return (assign(*this,
    _Ptr - this->_Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1168);
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  assign(_Iter _First, _Iter _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize - _Off);
   if (this == &_Right)
    _Traits::move(this->_Myptr() + _Off,
     this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(this->_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1241);


  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - this->_Myptr(), _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize - _Off);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1265);
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, _Count, _Ch);
  return (begin() + _Off);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Pdif(_Where, begin());
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  size_type _Off = _Pdif(_Where, begin());
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  size_type _Off = _Pdif(_Where, begin());
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 _Myt& erase(size_type _Off = 0)
  {
  if (this->_Mysize < _Off)
   _Xran();
  _Eos(_Off);
  return (*this);
  }

 _Myt& erase(size_type _Off, size_type _Count)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off <= _Count)
   _Eos(_Off);
  else if (0 < _Count)
   {
   value_type *_Ptr = this->_Myptr() + _Off;
   size_type _Newsize = this->_Mysize - _Count;
   _Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Pdif(_Where, begin());
  erase(_Count, 1);
  return (iterator(this->_Myptr() + _Count, this));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1366);
  size_type _Count = _Pdif(_First, begin());
  erase(_Count, _Pdif(_Last, _First));
  return (iterator(this->_Myptr() + _Count, this));
  }

 void clear() throw ()
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();

  size_type _Nm = this->_Mysize - _N0 - _Off;
  size_type _Newsize = this->_Mysize + _Count - _N0;
  if (this->_Mysize < _Newsize)
   _Grow(_Newsize);

  if (this != &_Right)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count <= _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + (_Roff + _Count - _N0),
    _Count);
   }
  else
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _N0);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off + _N0,
    this->_Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1449);


  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - this->_Myptr(),
    _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1483);
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  replace(const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin() throw ()
  {
  return (iterator(this->_Myptr(), this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(this->_Myptr(), this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Myptr() + this->_Mysize, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Myptr() + this->_Mysize, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if ((size() | this->_ALLOC_MASK) < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 reference at(size_type _Off)
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (this->_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (this->_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {

  if (this->_Mysize < _Off)
   _Debug_message(L"string subscript out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1685);





  return (this->_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {

  if (this->_Mysize < _Off)
   _Debug_message(L"string subscript out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1698);





  return (this->_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  insert(end(), _Ch);
  }

 void pop_back()
  {
  erase(this->_Mysize - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 const _Elem *c_str() const throw ()
  {
  return (this->_Myptr());
  }

 const _Elem *data() const throw ()
  {
  return (c_str());
  }

 size_type length() const throw ()
  {
  return (this->_Mysize);
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  size_type _Num = this->_Getal().max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize)
   _Eos(_Newsize);
  else
   append(_Newsize - this->_Mysize, _Ch);
  }

 size_type capacity() const throw ()
  {
  return (this->_Myres);
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
   {
   size_type _Size = this->_Mysize;
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const throw ()
  {
  return (this->_Mysize == 0);
  }

 __declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))

 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1803);


  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  _Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0) const
  {

  if (_Count != 0)
   _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1819);


  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  _Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 void _Swap_bx(_Myt& _Right)
  {
  if (this->_BUF_SIZE <= this->_Myres)
   if (this->_BUF_SIZE <= _Right._Myres)
    _Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
   else
    {
    pointer _Ptr = this->_Bx._Ptr;
    this->_Getal().destroy(&this->_Bx._Ptr);
    _Traits::copy(this->_Bx._Buf,
     _Right._Bx._Buf, _Right._Mysize + 1);
    this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
    }
  else
   if (_Right._Myres < this->_BUF_SIZE)
    ::std:: swap(this->_Bx._Buf, _Right._Bx._Buf);
   else
    {
    pointer _Ptr = _Right._Bx._Ptr;
    this->_Getal().destroy(&_Right._Bx._Ptr);
    _Traits::copy(_Right._Bx._Buf,
     this->_Bx._Buf, this->_Mysize + 1);
    this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
    }
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   ::std:: swap(this->_Myres, _Right._Myres);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Bx, _Right._Bx);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   ::std:: swap(this->_Myres, _Right._Myres);
   }

  else
   {
   _Myt _Tmp = *this;

   *this = _Right;
   _Right = _Tmp;
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const throw ()
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1896);


  if (_Count == 0 && _Off <= this->_Mysize)
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1918);
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const throw ()
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1937);


  if (_Count == 0)
   return (_Off < this->_Mysize ? _Off
    : this->_Mysize);
  if (_Count <= this->_Mysize)
   {
   const _Elem *_Uptr = this->_Myptr() +
    (_Off < this->_Mysize - _Count ? _Off
     : this->_Mysize - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1961);
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const throw ()
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1981);


  if (0 < _Count && _Off < this->_Mysize)
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 1999);
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const throw ()
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2020);


  if (0 < _Count && 0 < this->_Mysize)
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2040);
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const throw ()
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2062);


  if (_Off < this->_Mysize)
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2079);
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const throw ()
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2100);


  if (0 < this->_Mysize)
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2119);
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 int compare(const _Myt& _Right) const throw ()
  {
  return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
  }

 int compare(size_type _Off, size_type _N0,
  const _Myt& _Right) const
  {
  return (compare(_Off, _N0, _Right, 0, npos));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count) const
  {
  if (_Right.size() < _Roff)
   _Xran();
  if (_Right._Mysize - _Roff < _Count)
   _Count = _Right._Mysize - _Roff;
  return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
  }

 int compare(const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2158);
  return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
  _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2164);
  return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {

  if (_Count != 0)
   _Debug_pointer(_Ptr, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xstring", 2173);


  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;

  size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
   _N0 < _Count ? _N0 : _Count);
  return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
   : _N0 == _Count ? 0 : +1);
  }

 allocator_type get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(this->_Myptr() + _Off), _Ch);
  else
   _Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres / 2 <= _Newres / 3)
   ;
  else if (this->_Myres <= max_size() - this->_Myres / 2)
   _Newres = this->_Myres
    + this->_Myres / 2;
  else
   _Newres = max_size();

  _Elem *_Ptr;
  try {
   _Ptr = this->_Getal().allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Getal().allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Ptr, this->_Myptr(),
    _Oldlen);
  _Tidy(true);
  this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
  this->_Myres = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  _Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres < _Newsize)
   _Copy(_Newsize, this->_Mysize);
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize ? _Newsize : this->_Mysize);
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == 0 || _Ptr < this->_Myptr()
   || this->_Myptr() + this->_Mysize <= _Ptr)
   return (false);
  else
   return (true);
  }

 static size_type _Pdif(const_iterator _P2,
  const_iterator _P1)
  {
  return ((_P2)._Ptr == 0 ? 0 : _P2 - _P1);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres)
   {
   pointer _Ptr = this->_Bx._Ptr;
   this->_Getal().destroy(&this->_Bx._Ptr);
   if (0 < _Newsize)
    _Traits::copy(this->_Bx._Buf,
     ::std:: addressof(*_Ptr), _Newsize);
   this->_Getal().deallocate(_Ptr, this->_Myres + 1);
   }
  this->_Myres = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
          const typename basic_string<_Elem, _Traits, _Alloc>::size_type
  basic_string<_Elem, _Traits, _Alloc>::npos =
   (typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);



template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Traits::length(_Left) + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Traits::length(_Right));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 if (_Right.size() <= _Left.capacity() - _Left.size()
  || _Right.capacity() - _Right.size() < _Left.size())
  return (::std:: move(_Left.append(_Right)));
 else
  return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, 1, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem *_Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem _Right)
 {
 return (::std:: move(_Left.append(1, _Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left < _Right));
 }

typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


template<class _Elem,
 class _Traits,
 class _Alloc>
 struct hash<basic_string<_Elem, _Traits, _Alloc> >
  : public unary_function<basic_string<_Elem, _Traits, _Alloc>, size_t>
 {
 typedef basic_string<_Elem, _Traits, _Alloc> _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
   _Keyval.size() * sizeof (_Elem)));
  }
 };

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;
}


#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
#line 25 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
class logic_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 50 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 78 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 106 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 134 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 162 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class runtime_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 190 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 218 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 246 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 274 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\stdexcept"
 };
}

#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocinfo"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocinfo.h"






#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\locale.h"
#line 19 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\locale.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 19 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\locale.h"






#pragma pack(push,8)


extern "C" {
#line 55 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\locale.h"
struct lconv {
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        wchar_t *_W_decimal_point;
        wchar_t *_W_thousands_sep;
        wchar_t *_W_int_curr_symbol;
        wchar_t *_W_currency_symbol;
        wchar_t *_W_mon_decimal_point;
        wchar_t *_W_mon_thousands_sep;
        wchar_t *_W_positive_sign;
        wchar_t *_W_negative_sign;
        };
#line 107 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\locale.h"
                   __declspec(dllimport) int __cdecl _configthreadlocale( int _Flag);
                   __declspec(dllimport) char * __cdecl setlocale( int _Category, const char * _Locale);
                   __declspec(dllimport) struct lconv * __cdecl localeconv(void);
                   __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);
                   __declspec(dllimport) _locale_t __cdecl _create_locale( int _Category, const char * _Locale);
__declspec(dllimport) void __cdecl _free_locale( _locale_t _Locale);



               __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_get_current_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __get_current_locale(void);
               __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_create_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __create_locale( int _Category, const char * _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_free_locale" " instead. See online help for details.")) __declspec(dllimport) void __cdecl __free_locale( _locale_t _Locale);
#line 132 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\locale.h"
}


#pragma pack(pop)
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocinfo.h"




#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
#line 56 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocinfo.h"
typedef struct _Collvec
 {
 unsigned int _Page;
 wchar_t *_LocaleName;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 wchar_t *_LocaleName;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned int _Page;
 unsigned int _Mbcurmax;
 int _Isclocale;
 unsigned char _Isleadbyte[32];
 } _Cvtvec;


__declspec(dllimport) _Collvec __cdecl _Getcoll();
__declspec(dllimport) _Ctypevec __cdecl _Getctype();
__declspec(dllimport) _Cvtvec __cdecl _Getcvt();
__declspec(dllimport) int __cdecl _Getdateorder();
#line 93 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Mbrtowc( wchar_t *, const char *, size_t,
 mbstate_t *, const _Cvtvec *);


__declspec(dllimport) float __cdecl _Stof(const char *,
                                  char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
                                  char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
                                  char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
                                                             char *_String1,
        char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *,
 const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
                                                             wchar_t *_String1,
        wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
 const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);



}




extern "C" {
__declspec(dllimport) char *__cdecl _Getdays();
__declspec(dllimport) char *__cdecl _Getmonths();
__declspec(dllimport) void *__cdecl _Gettnames();
__declspec(dllimport) size_t __cdecl _Strftime( char *,
      size_t _Maxsize, const char *,
      const struct tm *, void *);

__declspec(dllimport) wchar_t *__cdecl _W_Getdays();
__declspec(dllimport) wchar_t *__cdecl _W_Getmonths();
__declspec(dllimport) void *__cdecl _W_Gettnames();
__declspec(dllimport) size_t __cdecl _Wcsftime( wchar_t *,
      size_t _Maxsize, const wchar_t *,
      const struct tm *, void *);
}
#line 156 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocinfo.h"
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);



#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocinfo"




#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)

namespace std {

class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec() throw ()
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };


class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 static void __cdecl _Locinfo_ctor(
  _Locinfo *, const char *);
 static void __cdecl _Locinfo_ctor(
  _Locinfo *, int, const char *);
 static void __cdecl _Locinfo_dtor(
  _Locinfo *);
 static _Locinfo& __cdecl _Locinfo_Addcats(
  _Locinfo *, int, const char *);

                    _Locinfo(const char *_Pch = "C")

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Pch);
  }

                    _Locinfo(int _Cat, const char *_Pch)

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Cat, _Pch);
  }

                    ~_Locinfo() throw ()
  {
  _Locinfo_dtor(this);
  }

 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return (_Locinfo_Addcats(this, _Cat, _Pch));
  }

 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return (::_Getdateorder());
  }

 _Timevec _W_Gettnames() const
  {
  return (_Timevec(::_W_Gettnames()));
  }

 const unsigned short * _W_Getdays() const
  {
  const wchar_t *_Ptr = ::_W_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Days = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Days._Empty()
   ? _W_Days._C_str()
   : L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
  }

 const unsigned short * _W_Getmonths() const
  {
  const wchar_t *_Ptr = ::_W_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Months = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Months._Empty()
   ? _W_Months._C_str()
   : L":Jan:January:Feb:February:Mar:March"
    L":Apr:April:May:May:Jun:June"
    L":Jul:July:Aug:August:Sep:September"
    L":Oct:October:Nov:November:Dec:December"));
  }

 _Locinfo(const _Locinfo&) = delete;
 _Locinfo& operator=(const _Locinfo&) = delete;

private:




 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<wchar_t> _W_Days;
 _Yarn<wchar_t> _W_Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 10 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xdebug"







#pragma pack(push,8)
#pragma warning(push, 3)






namespace std {
struct _DebugHeapTag_t
 {
 int _Type;
 };
}
#line 33 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xdebug"
                                               __declspec(dllimport) void * __cdecl operator new(size_t _Size,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw (...);

                                               __declspec(dllimport) void * __cdecl operator new[](size_t _Size,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw (...);

__declspec(dllimport) void __cdecl operator delete(void *,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw ();

__declspec(dllimport) void __cdecl operator delete[](void *,
 const ::std:: _DebugHeapTag_t&, char *, int)
  throw ();

namespace std {

__declspec(dllimport) const _DebugHeapTag_t& __cdecl _DebugHeapTag_func();


template<class _Ty>
 void __cdecl _DebugHeapDelete(_Ty *_Ptr)
 {
 if (_Ptr != 0)
  {
  _Ptr->~_Ty();


  free(_Ptr);
  }
 }

}
#line 77 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xdebug"
#pragma warning(pop)
#pragma pack(pop)
#line 11 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xfacet"







#pragma pack(push,8)
#pragma warning(push, 3)








namespace std {

class __declspec(dllimport) _Facet_base
 {
public:
 virtual ~_Facet_base() throw ()
  {
  }


 virtual void _Incref() = 0;


 virtual _Facet_base * _Decref() = 0;
 };





void __cdecl _Facet_Register(_Facet_base *);

}

#pragma warning(pop)
#pragma pack(pop)
#line 13 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412 28197)

namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << ((6 + 1))) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
 class collate;

class locale
 : public _Locbase<int>
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

 public:
                     id(const id&) = delete;
  id& operator=(const id&) = delete;
  };

 class _Locimp;


 class __declspec(dllimport) facet
  : public _Facet_base
  {
  friend class locale;
  friend class _Locimp;

  template<class _Ty>
   friend void __cdecl _DebugHeapDelete(_Ty *_Ptr);

 public:
  static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }


  void *__cdecl operator new(size_t _Size)
   {
   return (operator new(_Size, _DebugHeapTag_func(),
    "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 122));
   }

  void *__cdecl operator new(size_t _Size,
   const _DebugHeapTag_t& _Tag, char *_File, int _Line)
   {
   return (::operator new(_Size, _Tag, _File, _Line));
   }

  void __cdecl operator delete(void *_Ptr,
   const _DebugHeapTag_t&, char *, int)
   {
   operator delete(_Ptr);
   }

  void __cdecl operator delete(void *_Ptr)
   {
   _DebugHeapDelete((facet *)_Ptr);
   }


  virtual void _Incref()
   {
   _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Refs));
   }

  virtual _Facet_base * _Decref()
   {
   if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Refs)) == 0)
    return (this);
   else
    return (0);
   }

 private:
  _Atomic_counter_t _Refs;

 protected:
  explicit facet(size_t _Initrefs = 0)
   {
   _Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
   }

  virtual ~facet() throw ()
   {
   }

 public:
                     facet(const facet&) = delete;
  facet& operator=(const facet&) = delete;
  };


#pragma warning(push)
#pragma warning(disable: 4275)

 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp() throw ()
  {
  _Locimp_dtor(this);
  }

 private:
  static _Locimp *__cdecl
   _New_Locimp(bool _Transparent = false);
  static _Locimp *__cdecl
   _New_Locimp(const _Locimp& _Right);

  static void __cdecl
   _Locimp_dtor(_Locimp *);
  static void __cdecl
   _Locimp_Addfac(_Locimp *, facet *, size_t);
  static void __cdecl
   _Locimp_ctor(_Locimp *, const _Locimp&);

  friend class locale;

                     _Locimp(bool _Transparent)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

public:
  _Locimp& operator=(const _Locimp&) = delete;
  };

#pragma warning(pop)

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const ::std:: collate<_Elem>& _Coll_fac =
   use_facet< ::std:: collate<_Elem> >(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = 0;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   if (_Facet::_Getcat() != (size_t)(-1))
    {
    _Ptr->_Catmask = 0;
    _Ptr->_Name = "*";
    }
   }
  }

 locale(_Uninitialized)
  {
  }
#line 321 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"
 locale(const locale& _Right) throw ()
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() throw ()
  : _Ptr(_Init(true))
  {
  }


 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   _Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
    _Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
  }
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }
  }

private:
 void _Construct(const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  try {
  _Init();
  { _Locinfo _Lobj(_Cat, _Str.c_str());
   if (_Badname(_Lobj))
    _Bad = true;
   else
    _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }

  if (_Bad)
   {
   ::std:: _DebugHeapDelete(_Ptr->_Decref());
   _Xruntime_error("bad locale name");
   }
  }

 void _Construct(const locale& _Loc, const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   bool _Hadname = !_Badname(_Lobj);
   _Lobj._Addcats(_Cat, _Str.c_str());

   if (_Hadname && _Badname(_Lobj))
    _Bad = true;
   else
    _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  ::std:: _DebugHeapDelete(_Ptr->_Decref());
  throw;
  }

  if (_Bad)
   {
   ::std:: _DebugHeapDelete(_Ptr->_Decref());
   _Xruntime_error("bad locale name");
   }
  }

public:
 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Loc, _Locname, _Cat);
  }

 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {
  _Construct(_Str, _Cat);
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  _Construct(_Loc, _Str, _Cat);
  }


 ~locale() throw ()
  {
  if (_Ptr != 0)
   ::std:: _DebugHeapDelete(_Ptr->_Decref());
  }

 locale& operator=(const locale& _Right) throw ()
  {
  if (_Ptr != _Right._Ptr)
   {
   ::std:: _DebugHeapDelete(_Ptr->_Decref());
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }


 string name() const
  {
  return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr = _Getgloballocale();
   return (_Id < _Ptr->_Facetcount
    ? _Ptr->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || (name().compare("*") != 0
    && name().compare(_Loc.name()) == 0));
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static __declspec(dllimport) const locale& __cdecl
  classic();

 static __declspec(dllimport) locale __cdecl
  global(const locale&);

 static __declspec(dllimport) locale __cdecl
  empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

    static __declspec(dllimport) _Locimp *__cdecl
  _Init(bool _Do_incref = false);
 static __declspec(dllimport) _Locimp *__cdecl
  _Getgloballocale();
 static __declspec(dllimport) void __cdecl
  _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };
#line 543 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"
template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {





 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw ::std:: bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();





   _Facet_Register(_Pfmod);

   }

  return ((const _Facet&)(*_Pf));
 }

 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {0};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {0};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {0};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {0};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;
 _Elem *_Ptrdest = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 729) _Elem[_Count];

#pragma warning(push)
#pragma warning(disable: 6011)
 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
#pragma warning(pop)

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {0};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 758) wchar_t[_Wchars];
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {0};

#pragma warning(push)
#pragma warning(disable: 6011)
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
#pragma warning(pop)

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {0};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 794) wchar_t[_Wchars];
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {0};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



#pragma warning(push)
#pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const throw ()
  {
  return (do_always_noconv());
  }

 int max_length() const throw ()
  {
  return (do_max_length());
  }

 int encoding() const throw ()
  {
  return (do_encoding());
  }

                    ~codecvt_base() throw ()
  {
  }

protected:
 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (1);
  }

 virtual int do_encoding() const throw ()
  {
  return (1);
  }
 };

#pragma warning(pop)


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 920) codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() throw ()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (is_same<_Byte, _Elem>::value);
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Elem)*_Mid1;
   return (ok);
   }
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Byte)*_Mid1;
   return (ok);
   }
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (ok);
  }

 virtual int do_length(_Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;
#line 1590 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale"
template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1651) codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() throw ()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1670);
  _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1671);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1706);
  _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1707);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     return (_Ans);
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
     }
    }
  return (_Ans);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1744);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1769);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (5);
  }

 virtual int do_encoding() const throw ()
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1886) codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() throw ()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1905);
  _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1906);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1941);
  _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1942);
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     return (_Ans);
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
     }
    }
  return (_Ans);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 1979);
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2004);
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (5);
  }

 virtual int do_encoding() const throw ()
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~codecvt_byname() throw ()
  {
  }
 };


#pragma warning(push)
#pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x4 | 0x2 | 0x1 | 0x100, alpha = 0x2 | 0x1 | 0x100,
  cntrl = 0x20, digit = 0x4, graph = 0x4 | 0x2 | 0x10 | 0x1 | 0x100,
  lower = 0x2, print = 0x4 | 0x2 | 0x10 | 0x40 | 0x1 | 0x100 | 0x80,
  punct = 0x10, space = 0x8 | 0x40 | 0x000, upper = 0x1,
  xdigit = 0x80, blank = 0x8 | 0x40 | 0x000 | 0x000};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base() throw ()
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2204) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() throw ()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);

  free((void *)_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2233);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2234);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2243);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2252);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2270);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2292);
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2310);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2311);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2336);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2337);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2371);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2372);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2381);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2390);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }

  _Tidy();
  if (_Table != 0)
   {
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  else
   {
   _Ctype._Table = classic_table();
   _Ctype._Delfl = 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2472) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const throw ()
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() throw ()
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype() throw ()
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] (void *)_Ctype._Table;

  free((void *)_Ctype._LocaleName);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2520);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2534);
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2548);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2549);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2562);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2563);
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2668) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() throw ()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);

  free((void *)_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2696);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2697);
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2704);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2713);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2727);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2741);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {0};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)(wint_t)(0xFFFF) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2763);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2764);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {0};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2786);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2787);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2895) ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() throw ()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);

  free((void *)_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2923);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2924);
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2932);
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2941);
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2955);
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  _Debug_range((const _Elem *)_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2969);
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {0};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)(wint_t)(0xFFFF) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2991);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 2992);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {0};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 3014);
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocale", 3015);
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() throw ()
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() throw ()
  {
  }
 };




template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\system_error"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cerrno"
#line 14 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cerrno"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\errno.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\errno.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 21 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\errno.h"



extern "C" {
#line 135 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\errno.h"
}
#line 14 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\cerrno"
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\system_error"




#pragma pack(push,8)
#pragma warning(push, 3)





namespace std {


enum class errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_symbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };

typedef errc generic_errno;



enum class io_errc {
 stream = 1
 };

typedef io_errc _Io_errc;


template<class _Enum>
 struct is_error_code_enum
  : public false_type
 {
 };

template<>
 struct is_error_code_enum<_Io_errc>
  : public true_type
 {
 };


template<class _Enum>
 struct is_error_condition_enum
  : public false_type
 {
 };

template<>
 struct is_error_condition_enum<generic_errno>
  : public true_type
 {
 };

class error_code;
class error_condition;
error_code make_error_code(generic_errno) throw ();
error_code make_error_code(_Io_errc) throw ();
error_condition make_error_condition(generic_errno) throw ();
error_condition make_error_condition(_Io_errc) throw ();


class error_category;

const error_category& generic_category() throw ();
const error_category& iostream_category() throw ();
const error_category& system_category() throw ();

class error_category
 {
public:
 error_category()
  {
  }

 virtual ~error_category() throw ()
  {
  }

 virtual const char *name() const throw () = 0;

 virtual string message(int _Errval) const = 0;

 virtual error_condition
  default_error_condition(int _Errval) const throw ();

 virtual bool equivalent(int _Errval,
  const error_condition& _Cond) const throw ();

 virtual bool equivalent(const error_code& _Code,
  int _Errval) const throw ();

 bool operator==(const error_category& _Right) const throw ()
  {
  return (this == &_Right);
  }

 bool operator!=(const error_category& _Right) const throw ()
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const throw ()
  {
  return (this < &_Right);
  }

 error_category(const error_category&) = delete;
 error_category& operator=(const error_category&) = delete;
 };


class error_code
 {
public:
 typedef error_code _Myt;

 error_code()
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(int _Val, const error_category& _Cat)
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_code_enum<_Enum>::value,
   void>::type>
  error_code(_Enum _Errcode)
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat)
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode)
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear() throw ()
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 int value() const
  {
  return (_Myval);
  }

 const error_category& category() const
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const;

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const throw ()
  {
  return (value() != 0);
  }

 bool operator==(const error_code& _Right) const throw ()
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_code& _Right) const throw ()
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_code& _Right) const throw ()
  {
  return (category() < _Right.category()
   || (category() == _Right.category()
    && value() < _Right.value()));
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef error_condition _Myt;

 error_condition() throw ()
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(int _Val, const error_category& _Cat) throw ()
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_condition_enum<_Enum>::value,
   void>::type>
  error_condition(_Enum _Errcode) throw ()
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) throw ()
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode) throw ()
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear() throw ()
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 int value() const throw ()
  {
  return (_Myval);
  }

 const error_category& category() const throw ()
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const throw ()
  {
  return (value() != 0);
  }

 bool operator==(const error_condition& _Right) const throw ()
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_condition& _Right) const throw ()
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_condition& _Right) const throw ()
  {
  return (category() < _Right.category()
   || (category() == _Right.category()
    && value() < _Right.value()));
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


inline error_condition
 error_category::default_error_condition(int _Errval) const throw ()
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(int _Errval,
  const error_condition& _Cond) const throw ()
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  int _Errval) const throw ()
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const
 {
 return (category().default_error_condition(value()));
 }


inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right) throw ()
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right) throw ()
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }


inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right) throw ()
 {
 return (!(_Left == _Right));
 }


inline error_code make_error_code(generic_errno _Errno) throw ()
 {
 return (error_code((int)_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno) throw ()
 {
 return (error_code((int)_Errno, iostream_category()));
 }


inline error_condition make_error_condition(generic_errno _Errno) throw ()
 {
 return (error_condition((int)_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno) throw ()
 {
 return (error_condition((int)_Errno, iostream_category()));
 }


template<>
 struct hash<error_code>
  : public unary_function<error_code, size_t>
 {
 typedef error_code _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (hash<int>()(_Keyval.value()));
  }
 };


class _System_error
 : public runtime_error
 {
private:
 static string _Makestr(error_code _Errcode, string _Message)
  {
  if (!_Message.empty())
   _Message.append(": ");
  _Message.append(_Errcode.message());
  return (_Message);
  }

protected:
 _System_error(error_code _Errcode, const string& _Message)
  : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
  {
  }

 error_code _Mycode;
 };

class system_error
 : public _System_error
 {
private:
 typedef _System_error _Mybase;

public:
 explicit system_error(error_code _Errcode)
  : _Mybase(_Errcode, "")
  {
  }

 system_error(error_code _Errcode, const string& _Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(error_code _Errcode, const char *_Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat)
  : _Mybase(error_code(_Errval, _Errcat), "")
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const string& _Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const char *_Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 const error_code& code() const throw ()
  {
  return (_Mycode);
  }
#line 543 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\system_error"
 };

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) const char *__cdecl _Winerror_map(int);


class _Generic_error_category
 : public error_category
 {
public:
 _Generic_error_category()
  {
  }

 virtual const char *name() const throw ()
  {
  return ("generic");
  }

 virtual string message(int _Errcode) const
  {
  const char *_Name = _Syserror_map(_Errcode);
  return (string(_Name != 0 ? _Name : "unknown error"));
  }
 };


class _Iostream_error_category
 : public _Generic_error_category
 {
public:
 _Iostream_error_category()
  {
  }

 virtual const char *name() const throw ()
  {
  return ("iostream");
  }

 virtual string message(int _Errcode) const
  {
  if (_Errcode == (int)io_errc::stream)
   return ("iostream stream error");
  else
   return (_Generic_error_category::message(_Errcode));
  }
 };


class _System_error_category
 : public _Generic_error_category
 {
public:
 _System_error_category()
  {
  }

 virtual const char *name() const throw ()
  {
  return ("system");
  }

 virtual string message(int _Errcode) const
  {
  const char *_Name = _Winerror_map(_Errcode);
  return (string(_Name != 0 ? _Name : "unknown error"));
  }

 virtual error_condition
  default_error_condition(int _Errval) const throw ()
  {
  if (_Syserror_map(_Errval))
   return (error_condition(_Errval, generic_category()));
  else
   return (error_condition(_Errval, system_category()));
  }
 };

template<class _Cat>
 struct _Error_objects
 {
 _Error_objects()
  {
  }

 static _Generic_error_category _Generic_object;
 static _Iostream_error_category _Iostream_object;
 static _System_error_category _System_object;
 };

template<class _Cat>
 _Generic_error_category _Error_objects<_Cat>::_Generic_object;
template<class _Cat>
 _Iostream_error_category _Error_objects<_Cat>::_Iostream_object;
template<class _Cat>
 _System_error_category _Error_objects<_Cat>::_System_object;

inline const error_category& generic_category() throw ()
 {
 return (_Error_objects<int>::_Generic_object);
 }

inline const error_category& iostream_category() throw ()
 {
 return (_Error_objects<int>::_Iostream_object);
 }

inline const error_category& system_category() throw ()
 {
 return (_Error_objects<int>::_System_object);
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\share.h"
#line 10 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)



namespace std {
#line 47 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase"
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static const _Fmtflags skipws = (_Fmtflags)0x0001;
 static const _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static const _Fmtflags uppercase = (_Fmtflags)0x0004;
 static const _Fmtflags showbase = (_Fmtflags)0x0008;
 static const _Fmtflags showpoint = (_Fmtflags)0x0010;
 static const _Fmtflags showpos = (_Fmtflags)0x0020;
 static const _Fmtflags left = (_Fmtflags)0x0040;
 static const _Fmtflags right = (_Fmtflags)0x0080;
 static const _Fmtflags internal = (_Fmtflags)0x0100;
 static const _Fmtflags dec = (_Fmtflags)0x0200;
 static const _Fmtflags oct = (_Fmtflags)0x0400;
 static const _Fmtflags hex = (_Fmtflags)0x0800;
 static const _Fmtflags scientific = (_Fmtflags)0x1000;
 static const _Fmtflags fixed = (_Fmtflags)0x2000;

 static const _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static const _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static const _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static const _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static const _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static const _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static const _Iostate goodbit = (_Iostate)0x0;
 static const _Iostate eofbit = (_Iostate)0x1;
 static const _Iostate failbit = (_Iostate)0x2;
 static const _Iostate badbit = (_Iostate)0x4;
 static const _Iostate _Hardfail = (_Iostate)0x10;

 enum _Openmode
  {
  _Openmask = 0xff};

 static const _Openmode in = (_Openmode)0x01;
 static const _Openmode out = (_Openmode)0x02;
 static const _Openmode ate = (_Openmode)0x04;
 static const _Openmode app = (_Openmode)0x08;
 static const _Openmode trunc = (_Openmode)0x10;
 static const _Openmode _Nocreate = (_Openmode)0x40;
 static const _Openmode _Noreplace = (_Openmode)0x80;
 static const _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekmask = 0x3};

 static const _Seekdir beg = (_Seekdir)0;
 static const _Seekdir cur = (_Seekdir)1;
 static const _Seekdir end = (_Seekdir)2;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::_Hardfail;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;

 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;

 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);
 typedef unsigned int io_state, open_mode, seek_dir;


 class failure

  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
#line 246 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase"
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init() throw ()
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 explicit operator bool() const
  {
  return (!fail());
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }

 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }

 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | ((int)_Newfmtflags & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase", 455) _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base() throw ()
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl
  _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase", 537) locale;
  }

private:

 struct _Iosarray
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xiosbase", 591) _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   ::std:: _DebugHeapDelete(_Ptr1);
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   ::std:: _DebugHeapDelete(_Pfa1);
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl
  _Ios_base_dtor(ios_base *);

public:
 ios_base(const ios_base&) = delete;
 ios_base& operator=(const ios_base&) = delete;
 };





}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\streambuf"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4251)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\streambuf", 25) locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\streambuf", 35) locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Elem *_Pfirst = pbase();
   _Elem *_Pnext = pptr();
   _Elem *_Pend = epptr();
   _Elem *_Gfirst = eback();
   _Elem *_Gnext = gptr();
   _Elem *_Gend = egptr();

   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Pfirst, _Pnext, _Pend);

   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Gfirst, _Gnext, _Gend);

   ::std:: swap(_Plocale, _Right._Plocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf() throw ()
  {
  ::std:: _DebugHeapDelete(_Plocale);
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }

 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }

 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }

 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }

 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  }

 virtual void _Unlock()
  {
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

protected:
 locale *_Plocale;
 };




template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
#line 478 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\streambuf"
template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, const _Elem *, _Elem>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;
 typedef const _Elem *pointer;

 istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
  : _Strbuf(_Sb), _Got(_Sb == 0)
  {
  }

 istreambuf_iterator(istream_type& _Istr) throw ()
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();


  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\streambuf", 511);


  return (_Val);
  }

 const _Elem *operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {

  if (_Strbuf == 0)
   _Debug_message(L"istreambuf_iterator is not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\streambuf", 526);


  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return ((_Strbuf == 0 && _Right._Strbuf == 0)
   || (_Strbuf != 0 && _Right._Strbuf != 0));
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) throw ()
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) throw ()
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const throw ()
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 10 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4275)




extern "C" {


extern __declspec(dllimport) float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) __int64 __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned __int64 __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}


namespace std {

template<class _Elem> inline
 size_t _Find_elem(_Elem *_Base, _Elem _Ch)
 {
 _Elem *_Ptr = _Base;
 for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
  ;
 return ((size_t)(_Ptr - _Base));
 }

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
 {
 size_t _Count = :: wcslen(_Ptr) + 1;
 wchar_t *_Ptrdest = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 65) wchar_t[_Count];
 :: wmemcpy(_Ptrdest, _Ptr, _Count);
 return (_Ptrdest);
 }


template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 128) numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct() throw ()
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
  {
  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
  {
  _Dp = (_Elem)_Ptr->_W_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();
  _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
  } catch (...) {
  _Tidy();
  throw;
  }

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
   }
  else
   _Getvals((_Elem)0, _Ptr, _Cvt);
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  ::std:: _DebugHeapDelete((void *)(void *)_Grouping);
  ::std:: _DebugHeapDelete((void *)(void *)_Falsename);
  ::std:: _DebugHeapDelete((void *)(void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }

 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~numpunct_byname() throw ()
  {
  }
 };


template<class _Elem>
                         locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 271) num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get() throw ()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 389);
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 426);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 449);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 471);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 491);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 512);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const __int64 _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 532);
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned __int64 _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 553);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  float _Ans = :: _Stofx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 577);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  double _Ans = :: _Stodx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 601);
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  long double _Ans = :: _Stoldx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 625);
  char _Ac[32], *_Ep;
  int _Errno = 0;


  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned __int64 _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned __int64):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);







  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
  _Elem _Atoms[sizeof (_Src) - 1];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Loc);
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _Atoms[0])
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF])
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   {
   size_t _Idx = _Find_elem(_Atoms, *_First);
   if (_Idx < _Dlen)
    {
    *_Ptr = _Src[_Idx];
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }
   }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if ((0 < --_Group && *_Pg != _Groups[_Group])
    || (0 == _Group && *_Pg < _Groups[_Group]))
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  char *_Ptr = _Ac;
  bool _Bad = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12};
  static const char _Src[] = {"0123456789-+Ee"};
  _Elem _Atoms[sizeof (_Src) - 1];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     ++_Pten;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
     {
     _Seendigit = true;
     if (36 <= _Significant)
      ++_Pten;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_EOFF + 1]
    || *_First == _Atoms[_NUMGET_EOFF]))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
  _Elem _Atoms[sizeof (_Src) - 1];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

  char *_Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _Atoms[0])
   ;
  else if (++_First != _Last
   && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF]))
   ++_First;
  else
   _Seendigit = true;

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     ++_Phex;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
     {
     _Seendigit = true;
     if (36 <= _Significant)
      ++_Phex;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_POFF + 1]
    || *_First == _Atoms[_NUMGET_POFF]))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }
 };


template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new(::std:: _DebugHeapTag_func(), "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 1092) num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put() throw ()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 1180);
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  char _Buf[8 + 36 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 36 < _Precision
   ? 36 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
   && _Val * 0.5 != _Val)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf_s(_Buf, sizeof (_Buf),
     _Ffmt(_Fmt, 0, _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  char _Buf[8 + 36 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 36 < _Precision
   ? 36 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf_s(_Buf, sizeof (_Buf),
     _Ffmt(_Fmt, 'L', _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  if (_Flags & ios_base::uppercase)
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'A'
    : _Ffl == ios_base::scientific ? 'E' : 'G';
  else
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'a'
    : _Ffl == ios_base::scientific ? 'e' : 'g';

  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Beforepoint, size_t _Afterpoint,
    size_t _Trailing, size_t _Count) const
  {
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 1376);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;

  const char *_Exps;
  if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
    && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn(&_Buf[0], _Exps);
  char _Dp[2] = {"."};
  _Dp[0] = :: localeconv()->decimal_point[0];
  const size_t _Poff =
   :: strcspn(&_Buf[0], &_Dp[0]);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  const _Elem _E0 = _Ctype_fac.widen('0');
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();

  size_t _Off = _Beforepoint;
  if (_Poff == _Count)
   {
   _Off += _Eoff;
   _Groupstring.insert(_Eoff, _Beforepoint, _E0);
   }
  else
   {
   _Off += _Poff;
   _Groupstring.insert(_Eoff, _Trailing, _E0);
   _Groupstring.insert(_Poff + 1, _Afterpoint, _E0);
   _Groupstring[_Poff] = _Punct_fac.decimal_point();
   _Groupstring.insert(_Poff, _Beforepoint, _E0);
   }

  const char *_Pg = &_Grouping[0];
  while (*_Pg != 127 && '\0' < *_Pg
   && (size_t)*_Pg < _Off - _Prefix)
   {
   _Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
   if ('\0' < _Pg[1])
    ++_Pg;
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
  _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum", 1490);
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;
  if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
   && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
   && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
   _Prefix += 2;

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const char *_Pg = &_Grouping[0];
  if (*_Pg != 127 && '\0' < *_Pg)
   {
   const _Elem _Kseparator = _Punct_fac.thousands_sep();
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Count - _Prefix)
    {
    _Count -= *_Pg;
    _Groupstring.insert(_Count, 1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
#line 1593 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xlocnum"
}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ios"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios() throw ()
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void move(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right) throw ()
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

public:
                    basic_ios(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };




template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;
#line 209 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ios"
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }

namespace tr1 {
using ::std:: hexfloat;
}

inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4390)

namespace std {
#line 35 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream"
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   this->_Addstd(this);
  }

protected:
                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_ostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostream() throw ()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() throw ()
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry() throw ()
   {

   if (!::std:: uncaught_exception())
    this->_Myostr._Osfx();




   }

  explicit operator bool() const
   {
   return (_Ok);
   }

 private:
  bool _Ok;

 public:
                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;
  };

 bool opfx()
  {
  if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
   _Myios::tie()->flush();
  return (this->good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (this->good() && this->flags() & ios_base::unitbuf)
   if (_Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
  } catch (...) {
  }
  }
#line 197 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream"
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream", 199);
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream", 205);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream", 212);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(_Bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
#line 271 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream"
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(__int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned __int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  this->width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {

  if (0 < _Count)
   _Debug_pointer(_Str, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream", 560);


  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  if (_Myios::rdbuf() != 0)
   {
   const sentry _Ok(*this);

   if (_Ok && _Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
   }
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  const sentry _Ok(*this);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };

#pragma vtordisp(pop)
#line 683 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream"
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;
#line 697 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\ostream"
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;
#line 42 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"
 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  this->_Addstd(this);
  }

protected:
                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

public:
                    basic_istream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istream() throw ()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() throw ()
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  explicit operator bool() const
   {
   return (_Ok);
   }

 private:
  bool _Ok;

 public:
                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (this->good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && this->flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (this->good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
#line 198 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
  _Debug_pointer(_Pfn, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 200);
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
  _Debug_pointer(_Pfn, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 206);
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
  _Debug_pointer(_Pfn, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 213);
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(_Bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
#line 272 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(__int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned __int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  _Debug_pointer(_Str, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 556);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  _Debug_pointer(_Str, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 648);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     ++_Chcount;
     *_Str++ = _Traits::to_char_type(_Meta);
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != 2147483647 && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  _Debug_pointer(_Str, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 727);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  _Debug_pointer(_Str, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 749);
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Num)
   read(_Str, _Num < _Count ? _Num : _Count);

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  const sentry _Ok(*this, true);

  if (_Myios::rdbuf() == 0)
   return (-1);
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _Myios::setstate(ios_base::badbit);
   return (-1);
   }
  else
   return (0);
  }

 _Myt& seekg(pos_type _Pos)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  const sentry _Ok(*this, true);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };



#pragma vtordisp(pop)
#line 923 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
#line 934 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"
template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

protected:
                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_iostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_iostream() throw ()
  {
  }
 };






template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
#line 1004 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream"
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
 _Debug_pointer(_Str, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\istream", 1009);
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width() : 2147483647;
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
 {
 return (_Istr >> _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

__declspec(dllimport) inline basic_istream<char, char_traits<char> >&
 __cdecl ws(basic_istream<char, char_traits<char> >& _Istr)
 {
 typedef char _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

__declspec(dllimport) inline basic_istream<wchar_t, char_traits<wchar_t> >&
 __cdecl ws(basic_istream<wchar_t, char_traits<wchar_t> >& _Istr)
 {
 typedef wchar_t _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }


__declspec(dllimport) inline basic_istream<unsigned short, char_traits<unsigned short> >&
 __cdecl ws(basic_istream<unsigned short, char_traits<unsigned short> >& _Istr)
 {
 typedef unsigned short _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator"



#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Container>
 class back_insert_iterator
  : public _Outit
 {
public:
 typedef back_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit back_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_back(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_back(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<back_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 back_insert_iterator<_Container> back_inserter(_Container& _Cont)
 {
 return (::std:: back_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class front_insert_iterator
  : public _Outit
 {
public:
 typedef front_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit front_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_front(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_front(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<front_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 front_insert_iterator<_Container> front_inserter(_Container& _Cont)
 {
 return (::std:: front_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class insert_iterator
  : public _Outit
 {
public:
 typedef insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
  : container(::std:: addressof(_Cont)), iter(_Where)
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  iter = container->insert(iter, _Val);
  ++iter;
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
  ++iter;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 typename _Container::iterator iter;
 };

template<class _Container>
 struct _Is_checked_helper<insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 insert_iterator<_Container> inserter(_Container& _Cont,
  typename _Container::iterator _Where)
 {
 return (::std:: insert_iterator<_Container>(_Cont, _Where));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem>,
 class _Diff = ptrdiff_t>
 class istream_iterator
  : public iterator<input_iterator_tag, _Ty, _Diff,
   const _Ty *, const _Ty&>
 {
 typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef const _Ty *pointer;

 istream_iterator()
  : _Myistr(0)
  {
  }

 istream_iterator(istream_type& _Istr)
  : _Myistr(&_Istr)
  {
  _Getval();
  }

 const _Ty& operator*() const
  {
  return (_Myval);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  _Getval();
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool _Equal(const _Myt& _Right) const
  {
  return (_Myistr == _Right._Myistr);
  }

protected:
 void _Getval()
  {
  if (_Myistr != 0 && !(*_Myistr >> _Myval))
   _Myistr = 0;
  }

 istream_type *_Myistr;
 _Ty _Myval;
 };

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff>
 struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
  : public true_type
 {
 };


template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator==(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator!=(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (!(_Left == _Right));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem> >
 class ostream_iterator
  : public _Outit
 {
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostream_iterator(ostream_type& _Ostr,
  const _Elem *_Delim = 0)
  : _Myostr(&_Ostr), _Mydelim(_Delim)
  {
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator=(const _Ty& _Val)
  {
  *_Myostr << _Val;
  if (_Mydelim != 0)
   *_Myostr << _Mydelim;
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator*()
  {
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator++()
  {
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator++(int)
  {
  return (*this);
  }

protected:
 const _Elem *_Mydelim;
 ostream_type *_Myostr;
 };

template<class _Ty,
 class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
  : public true_type
 {
 };
}

namespace stdext {
using ::std:: iterator_traits;
using ::std:: size_t;


template<class _Iterator>
 class checked_array_iterator
 {
public:
 typedef checked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  distance_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 checked_array_iterator()
  : _Myarray(), _Mysize(0), _Myindex(0)
  {
  }

 checked_array_iterator(_Iterator _Array, size_t _Size,
  size_t _Index = 0)
  : _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
  {
  { if (!(_Index <= _Size)) { (void) ((!!(("_Index <= _Size" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 385, 0, L"%s", L"\"_Index <= _Size\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 385, 0); } ; };
  }

 _Iterator base() const
  {
  return (_Myarray + _Myindex);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myindex = _Right - _Myarray;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { (void) ((!!(("_Myarray != 0 && _Myindex < _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 409, 0, L"%s", L"\"_Myarray != 0 && _Myindex < _Mysize\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 409, 0); } ; };

  return (_Myarray[_Myindex]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { (void) ((!!(("_Myarray != 0 && _Myindex < _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 421, 0, L"%s", L"\"_Myarray != 0 && _Myindex < _Mysize\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 421, 0); } ; };

  ++_Myindex;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  { if (!(_Myarray != 0 && 0 < _Myindex)) { (void) ((!!(("_Myarray != 0 && 0 < _Myindex" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 436, 0, L"%s", L"\"_Myarray != 0 && 0 < _Myindex\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 436, 0); } ; };

  --_Myindex;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  { if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { (void) ((!!(("_Myarray != 0 && _Myindex + _Off <= _Mysize" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 451, 0, L"%s", L"\"_Myarray != 0 && _Myindex + _Off <= _Mysize\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 451, 0); } ; };

  _Myindex += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void) ((!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 475, 0, L"%s", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 475, 0); } ; };
  return (_Myindex - _Right._Myindex);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void) ((!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 486, 0, L"%s", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 486, 0); } ; };
  return (_Myindex == _Right._Myindex);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { (void) ((!!(("_Myarray == _Right._Myarray" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 497, 0, L"%s", L"\"_Myarray == _Right._Myarray\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\iterator", 497, 0); } ; };
  return (_Myindex < _Right._Myindex);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myarray;
 size_t _Mysize;
 size_t _Myindex;
 };

template<class _Iterator> inline
 typename checked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(checked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator>&
  _Rechecked(checked_array_iterator<_Iterator>& _Iter,
   typename checked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> operator+(
  typename checked_array_iterator<_Iterator>::difference_type _Off,
  checked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> make_checked_array_iterator(
  _Iterator _Array, size_t _Size, size_t _Index = 0)
 {
 return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
 }


template<class _Iterator>
 class unchecked_array_iterator
 {
public:
 typedef unchecked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  distance_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 unchecked_array_iterator()
  : _Myptr()
  {
  }

 explicit unchecked_array_iterator(_Iterator _Ptr)
  : _Myptr(_Ptr)
  {
  }

 _Iterator base() const
  {
  return (_Myptr);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  return (*_Myptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  ++_Myptr;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --_Myptr;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  _Myptr += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Myptr - _Right._Myptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  return (_Myptr == _Right._Myptr);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  return (_Myptr < _Right._Myptr);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myptr;
 };

template<class _Iterator> inline
 typename unchecked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(unchecked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator>&
  _Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
   typename unchecked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> operator+(
  typename unchecked_array_iterator<_Iterator>::difference_type _Off,
  unchecked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
  _Iterator _Ptr)
 {
 return (unchecked_array_iterator<_Iterator>(_Ptr));
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)
#pragma warning(disable: 4172)

namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if(_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 return (getline(::std:: move(_Istr), _Str, _Delim));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 _Mysizt _Size = _Str.size();
 _Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
  ? 0 : (_Mysizt)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }
#line 226 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string"
inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _Longlong stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 _Longlong _Ans = :: _strtoi64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _ULonglong stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 _ULonglong _Ans = :: _strtoui64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 float _Ans = (float):: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 long double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _Longlong stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 _Longlong _Ans = :: _wcstoi64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _ULonglong stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 _ULonglong _Ans = :: _wcstoui64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 float _Ans = (float):: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 long double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }
#line 500 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string"
inline string to_string(int _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%d", _Val);
 return (string(_Buf));
 }

inline string to_string(unsigned int _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%u", _Val);
 return (string(_Buf));
 }

inline string to_string(long _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%ld", _Val);
 return (string(_Buf));
 }

inline string to_string(unsigned long _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%lu", _Val);
 return (string(_Buf));
 }

inline string to_string(_Longlong _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%I64" "d", _Val);
 return (string(_Buf));
 }

inline string to_string(_ULonglong _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%I64" "u", _Val);
 return (string(_Buf));
 }

inline string to_string(long double _Val)
 {
 typedef back_insert_iterator<string> _Iter;
 typedef num_put<char, _Iter> _Nput;
 const _Nput& _Nput_fac = use_facet<_Nput>(locale());
 ostream _Ios((streambuf *)0);
 string _Str;

 _Ios.setf(ios_base::fixed);
 _Nput_fac.put(_Iter(_Str), _Ios, ' ', _Val);
 return (_Str);
 }

inline string to_string(double _Val)
 {
 return (to_string((long double)_Val));
 }

inline string to_string(float _Val)
 {
 return (to_string((long double)_Val));
 }
#line 578 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\string"
inline wstring to_wstring(int _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%d", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(unsigned int _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%u", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(long _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%ld", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(unsigned long _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%lu", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(_Longlong _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%I64" L"d", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(_ULonglong _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%I64" L"u", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(long double _Val)
 {
 typedef back_insert_iterator<wstring> _Iter;
 typedef num_put<wchar_t, _Iter> _Nput;
 const _Nput& _Nput_fac = use_facet<_Nput>(locale());
 ostream _Ios((streambuf *)0);
 wstring _Str;

 _Ios.setf(ios_base::fixed);
 _Nput_fac.put(_Iter(_Str), _Ios, L' ', _Val);
 return (_Str);
 }

inline wstring to_wstring(double _Val)
 {
 return (to_wstring((long double)_Val));
 }

inline wstring to_wstring(float _Val)
 {
 return (to_wstring((long double)_Val));
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 13 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
#line 18 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\crtdefs.h"
#line 18 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
#line 27 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
#pragma warning(disable: 4514)
#line 47 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
extern "C" {








#pragma deprecated("_ftcscat")
#pragma deprecated("_ftcschr")
#pragma deprecated("_ftcscpy")
#pragma deprecated("_ftcscspn")
#pragma deprecated("_ftcslen")
#pragma deprecated("_ftcsncat")
#pragma deprecated("_ftcsncpy")
#pragma deprecated("_ftcspbrk")
#pragma deprecated("_ftcsrchr")
#pragma deprecated("_ftcsspn")
#pragma deprecated("_ftcsstr")
#pragma deprecated("_ftcstok")
#pragma deprecated("_ftcsdup")
#pragma deprecated("_ftcsnset")
#pragma deprecated("_ftcsrev")
#pragma deprecated("_ftcsset")
#pragma deprecated("_ftcscmp")
#pragma deprecated("_ftcsicmp")
#pragma deprecated("_ftcsnccmp")
#pragma deprecated("_ftcsncmp")
#pragma deprecated("_ftcsncicmp")
#pragma deprecated("_ftcsnicmp")
#pragma deprecated("_ftcscoll")
#pragma deprecated("_ftcsicoll")
#pragma deprecated("_ftcsnccoll")
#pragma deprecated("_ftcsncoll")
#pragma deprecated("_ftcsncicoll")
#pragma deprecated("_ftcsnicoll")
#pragma deprecated("_ftcsclen")
#pragma deprecated("_ftcsnccat")
#pragma deprecated("_ftcsnccpy")
#pragma deprecated("_ftcsncset")
#pragma deprecated("_ftcsdec")
#pragma deprecated("_ftcsinc")
#pragma deprecated("_ftcsnbcnt")
#pragma deprecated("_ftcsnccnt")
#pragma deprecated("_ftcsnextc")
#pragma deprecated("_ftcsninc")
#pragma deprecated("_ftcsspnp")
#pragma deprecated("_ftcslwr")
#pragma deprecated("_ftcsupr")
#pragma deprecated("_ftclen")
#pragma deprecated("_ftccpy")
#pragma deprecated("_ftccmp")
#line 171 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
}







extern "C" {
#line 189 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
typedef wchar_t _TCHAR;
typedef wchar_t _TSCHAR;
typedef wchar_t _TUCHAR;
typedef wchar_t _TXCHAR;
typedef wint_t _TINT;
#line 664 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
               __inline size_t __cdecl _tclen( const wchar_t *_Cpc)
{

    (void *)_Cpc;
    return 1;
}
__inline void __cdecl _tccpy( wchar_t *_Pc1, const wchar_t *_Cpc2) { *_Pc1 = (wchar_t)*_Cpc2; }
__inline void __cdecl _tccpy_l( wchar_t *_Pc1, const wchar_t *_Cpc2, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 28719)
 _tccpy(_Pc1, _Cpc2);
#pragma warning(pop)
}
               __inline int __cdecl _tccmp( const wchar_t *_Cpc1, const wchar_t *_Cpc2) { return (int) ((*_Cpc1)-(*_Cpc2)); }
#line 744 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
               __inline wchar_t * __cdecl _wcsdec( const wchar_t * _Cpc1, const wchar_t * _Cpc2) { return (wchar_t *)((_Cpc1)>=(_Cpc2) ? 0 : ((_Cpc2)-1)); }
               __inline wchar_t * __cdecl _wcsinc( const wchar_t * _Pc) { return (wchar_t *)(_Pc+1); }
               __inline unsigned int __cdecl _wcsnextc( const wchar_t * _Cpc) { return (unsigned int)*_Cpc; }
               __inline wchar_t * __cdecl _wcsninc( const wchar_t * _Pc, size_t _Sz) { return (wchar_t *)(_Pc+_Sz); }
               __inline size_t __cdecl _wcsncnt( const wchar_t * _String, size_t _Cnt)
{
        size_t n = _Cnt;
        wchar_t *cp = (wchar_t *)_String;
        while (n-- && *cp)
                cp++;
        return _Cnt - n - 1;
}
               __inline wchar_t * __cdecl _wcsspnp
(
           const wchar_t * _Cpc1,
           const wchar_t * _Cpc2
)
{
    return _Cpc1==0 ? 0 : ((*(_Cpc1 += wcsspn(_Cpc1,_Cpc2))!='\0') ? (wchar_t*)_Cpc1 : 0);
}


                   __inline errno_t __cdecl _wcsncpy_s_l( wchar_t *_Destination, size_t _Destination_size_chars, const wchar_t *_Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return wcsncpy_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsncpy_s_l(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count, _locale_t _Locale) throw() { return _wcsncpy_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsncpy_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline wchar_t * __cdecl _wcsncpy_l(wchar_t *_Dst, const wchar_t * _Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 6054 28719)
 return wcsncpy(_Dst, _Source, _Count);
#pragma warning(pop)
}




                   __inline errno_t __cdecl _wcsncat_s_l( wchar_t *_Destination, size_t _Destination_size_chars, const wchar_t *_Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return wcsncat_s(_Destination, _Destination_size_chars, _Source, _Count);
}


extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsncat_s_l(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count, _locale_t _Locale) throw() { return _wcsncat_s_l(_Dest, _Size, _Source, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsncat_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline wchar_t * __cdecl _wcsncat_l(wchar_t *_Dst, const wchar_t * _Source, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 6054 6059 28719)

 return wcsncat(_Dst, _Source, _Count);
#pragma warning(pop)
}



__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstok_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline wchar_t * _wcstok_l( wchar_t * _String, const wchar_t * _Delimiters, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996 28727)
 return wcstok(_String,_Delimiters);
#pragma warning(pop)
}

__inline wchar_t * _wcstok_s_l( wchar_t * _String, const wchar_t * _Delimiters, wchar_t **_Current_position, _locale_t _Locale)
{
    (void)_Locale;
    return wcstok_s(_String, _Delimiters, _Current_position);
}

                   __inline errno_t _wcsnset_s_l( wchar_t * _Destination, size_t _Destination_size_chars, wchar_t _Value, size_t _Count, _locale_t _Locale)
{
    (void)_Locale;
    return _wcsnset_s(_Destination, _Destination_size_chars, _Value, _Count);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s_l(wchar_t (&_Dest)[_Size], wchar_t _Value, size_t _Count, _locale_t _Locale) throw() { return _wcsnset_s_l(_Dest, _Size, _Value, _Count, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline wchar_t * __cdecl _wcsnset_l(wchar_t *_Dst, wchar_t _Value, size_t _MaxCount, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wcsnset(_Dst, _Value, _MaxCount);
#pragma warning(pop)
}



                   __inline errno_t _wcsset_s_l( wchar_t * _Destination, size_t _Destination_size_chars, wchar_t _Value, _locale_t _Locale)
{
    (void)_Locale;
    return _wcsset_s(_Destination, _Destination_size_chars, _Value);
}

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s_l(wchar_t (&_Dest)[_Size], wchar_t _Value, _locale_t _Locale) throw() { return _wcsset_s_l(_Dest, _Size, _Value, _Locale); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline wchar_t * __cdecl _wcsset_l(wchar_t *_Dst, wchar_t _Value, _locale_t _Locale)
{
    (void)_Locale;
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wcsset(_Dst, _Value);
#pragma warning(pop)
}
#line 2503 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tchar.h"
}
#line 15 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"




#line 1 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windowsx.h"
#line 24 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windowsx.h"
extern "C" {
#line 1373 "D:/Program Files (x86)/Windows Kits/8.1/Include/shared\\windowsx.h"
}
#line 19 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
#pragma warning(disable: 4244)

namespace std {



template<class _Myvec>
 class _Vector_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Myvec::value_type,
   typename _Myvec::difference_type,
   typename _Myvec::const_pointer,
   typename _Myvec::const_reference,
   _Iterator_base>
 {
public:
 typedef _Vector_const_iterator<_Myvec> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::const_pointer pointer;
 typedef typename _Myvec::const_reference reference;
 typedef typename _Myvec::pointer _Tptr;

 _Vector_const_iterator()
  : _Ptr()
  {
  }

 _Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pvector);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = (_Tptr)_Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
   || ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
   {
   _Debug_message(L"vector iterator not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 72);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 73, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 73, 0); };
   }
#line 84 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
                                          ;

  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
   {
   _Debug_message(L"vector iterator not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 101);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 102, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 102, 0); };
   }
#line 112 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
   {
   _Debug_message(L"vector iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 130);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 131, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 131, 0); };
   }
#line 141 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  if (this->_Getcont() == 0
   || this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
   || ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
   {
   _Debug_message(L"vector iterator + offset out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 159);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 160, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 160, 0); };
   }
#line 170 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"vector iterators incompatible", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 240);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 241, 0, L"%s", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 241, 0); };
   }
  }
#line 258 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
 _Tptr _Ptr;
 };

template<class _Myvec> inline
 typename _Vector_const_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_const_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec>&
  _Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
   typename _Vector_const_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec> operator+(
  typename _Vector_const_iterator<_Myvec>::difference_type _Off,
  _Vector_const_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Myvec>
 class _Vector_iterator
  : public _Vector_const_iterator<_Myvec>
 {
public:
 typedef _Vector_iterator<_Myvec> _Myiter;
 typedef _Vector_const_iterator<_Myvec> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::pointer pointer;
 typedef typename _Myvec::reference reference;

 _Vector_iterator()
  {
  }

 _Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
  : _Mybase(_Parg, _Pvector)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Myvec> inline
 typename _Vector_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec>&
  _Rechecked(_Vector_iterator<_Myvec>& _Iter,
   typename _Vector_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec> operator+(
  typename _Vector_iterator<_Myvec>::difference_type _Off,
  _Vector_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _Vec_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _Vec_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Vec_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Alty::pointer _Tptr;
 typedef typename _Alty::template rebind<_Tptr>::other _Alpty;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _Vec_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Vector_val
  : public _Container_base
 {
public:
 typedef _Vector_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Myt> iterator;
 typedef _Vector_const_iterator<_Myt> const_iterator;

 _Vector_val()
  {
  _Myfirst = pointer();
  _Mylast = pointer();
  _Myend = pointer();
  }

 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _Vector_alloc
  : public _Vector_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alty _Alval;

 typedef _Vector_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;
#line 522 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
 _Vector_alloc(const _Alty& _Al = _Alty())
  : _Alval(_Al)
  {
  _Alloc_proxy();
  }

 ~_Vector_alloc() throw ()
  {
  _Free_proxy();
  }

 void _Change_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  this->_Alval = _Al;
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alval, _Right._Alval);
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alval);
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alval);
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Alty& _Getal()
  {
  return (this->_Alval);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alval);
  }
 };

template<class _Alloc_types>
 class _Vector_alloc<false, _Alloc_types>
  : public _Vector_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _Vector_alloc<false, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;

 typedef typename _Alloc_types::_Alty _Alty;
#line 601 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
 _Vector_alloc(const _Alloc& = _Alloc())
  {
  _Alloc_proxy();
  }

 ~_Vector_alloc() throw ()
  {
  _Free_proxy();
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class vector
  : public _Vector_alloc<!is_empty<_Alloc>::value,
   _Vec_base_types<_Ty, _Alloc> >
 {
public:
 typedef vector<_Ty, _Alloc> _Myt;
 typedef _Vector_alloc<!is_empty<_Alloc>::value,
  _Vec_base_types<_Ty, _Alloc> > _Mybase;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;




 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 vector()
  : _Mybase()
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  }

 explicit vector(size_type _Count)
  : _Mybase()
  {
  if (_Buy(_Count))
   {
   _Alty _Alval(this->_Getal());
   try {
   _Uninitialized_default_fill_n(this->_Myfirst, _Count, _Alval);
   this->_Mylast += _Count;
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(size_type _Count, const value_type& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst);
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst);
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>:: type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>:: type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last, input_iterator_tag)
  {
  try {

  for (; _First != _Last; ++_First)
   emplace_back(*_First);

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last, forward_iterator_tag)
  {
  if (_Buy(::std:: distance(_First, _Last)))
   {
   try {
   this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 void _Construct_n(size_type _Count, const value_type *_Pval)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast = _Ufill(this->_Myfirst, _Count, _Pval);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(_Myt&& _Right)
  : _Mybase(_Right._Getal())
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Tidy();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all((_Myt&)_Right);
  this->_Myfirst = _Right._Myfirst;
  this->_Mylast = _Right._Mylast;
  this->_Myend = _Right._Myend;

  _Right._Myfirst = pointer();
  _Right._Mylast = pointer();
  _Right._Myend = pointer();
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 void push_back(value_type&& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    ::std:: forward<value_type>(this->_Myfirst[_Idx]));
   ++this->_Mylast;
   }
  else
   {
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    ::std:: forward<value_type>(_Val));
   ++this->_Mylast;
   }
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  if (this->_Mylast == this->_Myend)
   _Reserve(1);
  _Orphan_range(this->_Mylast, this->_Mylast);
  this->_Getal().construct(this->_Mylast,
   ::std:: forward<_Valty>(_Val)...);
  ++this->_Mylast;
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst;


  if (size() < _Off)
   _Debug_message(L"vector emplace iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 910);


  emplace_back(::std:: forward<_Valty>(_Val)...);
  ::std:: rotate(begin() + _Off, end() - 1, end());
  return (begin() + _Off);
  }


 vector(::std:: initializer_list<value_type> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<value_type> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() throw ()
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy();
    this->_Change_alloc(_Right._Getal());
    }

   this->_Orphan_all();

   if (_Right.empty())
    clear();
   else if (_Right.size() <= size())
    {
    pointer _Ptr = _Copy_impl(_Right._Myfirst,
     _Right._Mylast, this->_Myfirst);
    _Destroy(_Ptr, this->_Mylast);
    this->_Mylast = this->_Myfirst + _Right.size();
    }
   else if (_Right.size() <= capacity())
    {
    pointer _Ptr = _Right._Myfirst + size();
    _Copy_impl(_Right._Myfirst,
     _Ptr, this->_Myfirst);
    this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
    }
   else
    {
    if (this->_Myfirst != pointer())
     {
     _Destroy(this->_Myfirst, this->_Mylast);
     this->_Getal().deallocate(this->_Myfirst,
      this->_Myend - this->_Myfirst);
     }
    if (_Buy(_Right.size()))
     try {
     this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
      this->_Myfirst);
     } catch (...) {
     _Tidy();
     throw;
     }
    }
   }
  return (*this);
  }

 void reserve(size_type _Count)
  {
  if (capacity() < _Count)
   {
   if (max_size() < _Count)
    _Xlen();
   _Reallocate(_Count);
   }
  }

 size_type capacity() const throw ()
  {
  return (this->_Myend - this->_Myfirst);
  }

 size_type _Unused_capacity() const throw ()
  {
  return (this->_Myend - this->_Mylast);
  }

 size_type _Has_unused_capacity() const throw ()
  {
  return (this->_Myend != this->_Mylast);
  }

 iterator begin() throw ()
  {
  return (iterator(this->_Myfirst, this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(this->_Myfirst, this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Mylast, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Mylast, this));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if (_Has_unused_capacity())
   {
   if (empty())
    _Tidy();
   else
    _Reallocate(size());
   }
  }

 void resize(size_type _Newsize)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   _Alty _Alval(this->_Getal());
   _Reserve(_Newsize - size());
   try {
   _Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
    _Alval);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast += _Newsize - size();
   }
  }

 void resize(size_type _Newsize, const value_type& _Val)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   const value_type *_Ptr = ::std:: addressof(_Val);

   if (_Inside(_Ptr))
    {
    const difference_type _Idx = _Ptr
     - ::std:: addressof(*this->_Myfirst);
    _Reserve(_Newsize - size());
    _Ptr = ::std:: addressof(*this->_Myfirst) + _Idx;
    }
   else
    _Reserve(_Newsize - size());

   try {
   _Ufill(this->_Mylast, _Newsize - size(), _Ptr);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast += _Newsize - size();
   }
  }

 size_type size() const throw ()
  {
  return (this->_Mylast - this->_Myfirst);
  }

 size_type max_size() const throw ()
  {
  return (this->_Getal().max_size());
  }

 bool empty() const throw ()
  {
  return (this->_Myfirst == this->_Mylast);
  }

 _Alloc get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 const_reference at(size_type _Pos) const
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1185);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1186, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1186, 0); };
   }





  return (*(this->_Myfirst + _Pos));
  }

 reference operator[](size_type _Pos)
  {

  if (size() <= _Pos)
   {
   _Debug_message(L"vector subscript out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1201);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1202, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1202, 0); };
   }





  return (*(this->_Myfirst + _Pos));
  }

 pointer data() throw ()
  {
  return (this->_Myfirst);
  }

 const_pointer data() const throw ()
  {
  return (this->_Myfirst);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const value_type& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    this->_Myfirst[_Idx]);
   ++this->_Mylast;
   }
  else
   {
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    _Val);
   ++this->_Mylast;
   }
  }


 void pop_back()
  {
  if (empty())
   _Debug_message(L"vector empty before pop", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1269);
  else
   {
   _Orphan_range(this->_Mylast - 1, this->_Mylast);
   this->_Getal().destroy(this->_Mylast - 1);
   --this->_Mylast;
   }
  }
#line 1286 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  clear();
  _Assign(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
  {
  for (; _First != _Last; ++_First)
   emplace_back(*_First);
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
  {
  if (_First == _Last)
   return;

  size_type _Newsize = ::std:: distance(_First, _Last);

  if (capacity() < _Newsize)
   {
   size_type _Newcapacity = _Grow_to(_Newsize);
   _Tidy();
   _Buy(_Newcapacity);
   }

  this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
  }

 void assign(size_type _Count, const value_type& _Val)
  {
  clear();
  insert(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const _Ty& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst;
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst;


  if (size() < _Off)
   _Debug_message(L"vector insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1355);


  if (_First != _Last)
   {
   size_type _Oldsize = size();

   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   erase(begin() + _Oldsize, end());
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  }

 template<class _Iter>
  void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {

  if (_Where._Getcont() != this
   || (_Where)._Ptr < this->_Myfirst
   || this->_Mylast < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1383);
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1384);


  size_type _Count = 0;
  _Distance(_First, _Last, _Count);

  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   pointer _Ptr = _Newvec;

   try {
   _Ptr = _Umove(this->_Myfirst, (_Where)._Ptr,
    _Newvec);
   _Ptr = _Ucopy(_First, _Last, _Ptr);
   _Umove((_Where)._Ptr, this->_Mylast,
    _Ptr);
   } catch (...) {
   _Destroy(_Newvec, _Ptr);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst != pointer())
    {
    _Destroy(this->_Myfirst, this->_Mylast);
    this->_Getal().deallocate(this->_Myfirst,
     this->_Myend - this->_Myfirst);
    }

   this->_Orphan_all();
   this->_Myend = _Newvec + _Capacity;
   this->_Mylast = _Newvec + _Count;
   this->_Myfirst = _Newvec;
   }
  else
   {
   _Ucopy(_First, _Last, this->_Mylast);
   ::std:: rotate((_Where)._Ptr, this->_Mylast,
    this->_Mylast + _Count);
   this->_Mylast += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast);
   }
  }


 iterator erase(const_iterator _Where)
  {
  if (_Where._Getcont() != this
   || (_Where)._Ptr < this->_Myfirst
   || this->_Mylast <= (_Where)._Ptr)
   _Debug_message(L"vector erase iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1442);
  _Move((_Where)._Ptr + 1, this->_Mylast, (_Where)._Ptr);
  _Destroy(this->_Mylast - 1, this->_Mylast);
  _Orphan_range((_Where)._Ptr, this->_Mylast);
  --this->_Mylast;
  return (_Make_iter(_Where));
  }
#line 1461 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  if (_First_arg == begin() && _Last_arg == end())
   clear();
  else if (_First_arg != _Last_arg)
   {
   iterator _First = _Make_iter(_First_arg);
   iterator _Last = _Make_iter(_Last_arg);

   if (_First != _Last)
    {

    if (_Last < _First || _First._Getcont() != this
     || (_First)._Ptr < this->_Myfirst
     || this->_Mylast < (_Last)._Ptr)
     _Debug_message(L"vector erase iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1477);
    pointer _Ptr = _Move((_Last)._Ptr, this->_Mylast,
     (_First)._Ptr);
    _Orphan_range((_First)._Ptr, this->_Mylast);






    _Destroy(_Ptr, this->_Mylast);
    this->_Mylast = _Ptr;
    }
   }
  return (_Make_iter(_First_arg));
  }

 void _Pop_back_n(size_type _Count)
  {
  pointer _Ptr = this->_Mylast - _Count;


  _Orphan_range(_Ptr, this->_Mylast);


  _Destroy(_Ptr, this->_Mylast);
  this->_Mylast = _Ptr;
  }

 void clear() throw ()
  {
  this->_Orphan_all();
  _Destroy(this->_Myfirst, this->_Mylast);
  this->_Mylast = this->_Myfirst;
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myfirst, _Right._Myfirst);
   _Swap_adl(this->_Mylast, _Right._Mylast);
   _Swap_adl(this->_Myend, _Right._Myend);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_adl(this->_Myfirst, _Right._Myfirst);
   _Swap_adl(this->_Mylast, _Right._Mylast);
   _Swap_adl(this->_Myend, _Right._Myend);
   }

  else
   {

   _Debug_message(L"vector containers incompatible for swap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1536);




   }
  }

protected:
 bool _Buy(size_type _Capacity)
  {
  this->_Myfirst = pointer();
  this->_Mylast = pointer();
  this->_Myend = pointer();

  if (_Capacity == 0)
   return (false);
  else if (max_size() < _Capacity)
   _Xlen();
  else
   {
   this->_Myfirst = this->_Getal().allocate(_Capacity);
   this->_Mylast = this->_Myfirst;
   this->_Myend = this->_Myfirst + _Capacity;
   }
  return (true);
  }

 void _Destroy(pointer _First, pointer _Last)
  {
  _Alty _Alval(this->_Getal());
  _Destroy_range(_First, _Last, _Alval);
  }

 size_type _Grow_to(size_type _Count) const
  {
  size_type _Capacity = capacity();

  _Capacity = max_size() - _Capacity / 2 < _Capacity
   ? 0 : _Capacity + _Capacity / 2;
  if (_Capacity < _Count)
   _Capacity = _Count;
  return (_Capacity);
  }

 bool _Inside(const value_type *_Ptr) const
  {
  return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
  }

 void _Reallocate(size_type _Count)
  {
  pointer _Ptr = this->_Getal().allocate(_Count);

  try {
  _Umove(this->_Myfirst, this->_Mylast, _Ptr);
  } catch (...) {
  this->_Getal().deallocate(_Ptr, _Count);
  throw;
  }

  size_type _Size = size();
  if (this->_Myfirst != pointer())
   {
   _Destroy(this->_Myfirst, this->_Mylast);
   this->_Getal().deallocate(this->_Myfirst,
    this->_Myend - this->_Myfirst);
   }

  this->_Orphan_all();
  this->_Myend = _Ptr + _Count;
  this->_Mylast = _Ptr + _Size;
  this->_Myfirst = _Ptr;
  }

 void _Reserve(size_type _Count)
  {
  if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();
   _Reallocate(_Grow_to(size() + _Count));
   }
  }

 void _Tidy()
  {
  if (this->_Myfirst != pointer())
   {
   this->_Orphan_all();
   _Destroy(this->_Myfirst, this->_Mylast);
   this->_Getal().deallocate(this->_Myfirst,
    this->_Myend - this->_Myfirst);
   this->_Myfirst = pointer();
   this->_Mylast = pointer();
   this->_Myend = pointer();
   }
  }

 template<class _Iter>
  pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  _Alty _Alval(this->_Getal());
  return (_Uninitialized_copy(_First, _Last,
   _Ptr, _Alval));
  }

 template<class _Iter>
  pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  _Alty _Alval(this->_Getal());
  return (_Uninitialized_move(_First, _Last,
   _Ptr, _Alval));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const value_type& _Val)
  {

  if (_Where._Getcont() != this
   || (_Where)._Ptr < this->_Myfirst
   || this->_Mylast < (_Where)._Ptr)
   _Debug_message(L"vector insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1658);


  size_type _Off = (_Where)._Ptr - this->_Myfirst;
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   size_type _Whereoff = (_Where)._Ptr - this->_Myfirst;
   int _Ncopied = 0;

   try {
   _Ufill(_Newvec + _Whereoff, _Count,
    ::std:: addressof(_Val));
   ++_Ncopied;
   _Umove(this->_Myfirst, (_Where)._Ptr,
    _Newvec);
   ++_Ncopied;
   _Umove((_Where)._Ptr, this->_Mylast,
    _Newvec + (_Whereoff + _Count));
   } catch (...) {
   if (1 < _Ncopied)
    _Destroy(_Newvec, _Newvec + _Whereoff);
   if (0 < _Ncopied)
    _Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst != pointer())
    {
    _Destroy(this->_Myfirst, this->_Mylast);
    this->_Getal().deallocate(this->_Myfirst,
     this->_Myend - this->_Myfirst);
    }

   this->_Orphan_all();
   this->_Myend = _Newvec + _Capacity;
   this->_Mylast = _Newvec + _Count;
   this->_Myfirst = _Newvec;
   }
  else if ((size_type)(this->_Mylast - (_Where)._Ptr)
   < _Count)
   {
   value_type _Tmp = _Val;

   _Umove((_Where)._Ptr, this->_Mylast,
    (_Where)._Ptr + _Count);

   try {
   _Ufill(this->_Mylast,
    _Count - (this->_Mylast - (_Where)._Ptr),
    ::std:: addressof(_Tmp));
   } catch (...) {
   _Destroy((_Where)._Ptr + _Count,
    this->_Mylast + _Count);
   throw;
   }

   this->_Mylast += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast);
   ::std:: fill((_Where)._Ptr, this->_Mylast - _Count,
    _Tmp);
   }
  else
   {
   value_type _Tmp = _Val;

   pointer _Oldend = this->_Mylast;
   this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
    this->_Mylast);

   _Orphan_range((_Where)._Ptr, this->_Mylast);
   _Copy_backward((_Where)._Ptr, _Oldend - _Count,
    _Oldend);
   ::std:: fill((_Where)._Ptr,
    (_Where)._Ptr + _Count, _Tmp);
   }
  return (begin() + _Off);
  }

 pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
  {
  _Alty _Alval(this->_Getal());
  _Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
  return (_Ptr + _Count);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("vector<T> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid vector<T> subscript");
  }


 void _Orphan_range(pointer _First, pointer _Last) const
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }






 };



template<class _Ty,
 class _Alloc> inline
 void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }




typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);


template<class _Alloc>
 class _Vb_iter_base
  : public _Iterator012<random_access_iterator_tag,
   _Bool,
   typename _Alloc::difference_type,
   bool *,
   bool,
   _Iterator_base>
 {
public:
 typedef typename _Alloc::size_type _Sizet;
 typedef vector<_Bool, _Alloc> _Mycont;

 _Vb_iter_base()
  : _Myptr(0), _Myoff(0)
  {
  }

 _Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
  const _Container_base *_Mypvbool)
  : _Myptr(_Ptr), _Myoff(_Off)
  {
  this->_Adopt(_Mypvbool);
  }

 void _Advance(_Sizet _Off)
  {
  _Myoff += _Off;
  _Myptr += _Myoff / _VBITS;
  _Myoff %= _VBITS;
  }

 int _Valid(_Sizet _Inc) const
  {

  _Sizet _Mysize = ((_Mycont *)this->_Getcont())->_Mysize;

  _Inc += _Myoff;
  _Inc += _VBITS * (_Myptr
   - (((_Mycont *)this->_Getcont())->_Myvec)._Myfirst);
  return (_Inc < _Mysize ? -1 : _Inc == _Mysize ? 0 : +1);





  }

 const _Vbase *_Myptr;
 _Sizet _Myoff;
 };


template<class _Alloc>
 class _Vb_reference
  : public _Vb_iter_base<_Alloc>
 {
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_reference<_Alloc> _Mytype;

 _Vb_reference() throw ()
  {
  }

public:
 _Vb_reference(const _Mybase& _Right)
  : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
  {
  }

 _Mytype& operator=(const _Mytype& _Right) throw ()
  {
  return (*this = bool(_Right));
  }

 _Mytype& operator=(bool _Val) throw ()
  {
  if (_Val)
   *(_Vbase *)_Getptr() |= _Mask();
  else
   *(_Vbase *)_Getptr() &= (~_Mask());
  return (*this);
  }

 void flip() throw ()
  {
  *(_Vbase *)_Getptr() ^= _Mask();
  }

 operator bool() const throw ()
  {
  return ((*_Getptr() & _Mask()) != 0);
  }

 const _Vbase *_Getptr() const
  {

  if (this->_Getcont() == 0
   || this->_Myptr == 0
   || 0 <= this->_Valid(0))
   {
   _Debug_message(L"vector<bool> iterator not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1952);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1953, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 1953, 0); };
   }






  return (this->_Myptr);
  }

protected:
 _Vbase _Mask() const
  {
  return ((_Vbase)(1 << this->_Myoff));
  }
 };

template<class _Alloc> inline
 void swap(_Vb_reference<_Alloc> _Left,
  _Vb_reference<_Alloc> _Right)
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template<class _Alloc>
 class _Vb_const_iterator
  : public _Vb_iter_base<_Alloc>
 {
public:
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_const_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef _Bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef const_reference *pointer;
 typedef const_reference reference;

 _Vb_const_iterator()
  {
  }

 _Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
  : _Mybase(_Ptr, 0, _Mypvbool)
  {
  }

 const_reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  _Inc();
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  _Dec();
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
   {
   this->_Myoff += _Off;
   this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
   this->_Myoff %= _VBITS;
   }
  else
   {
   this->_Myoff += _Off;
   this->_Myptr += this->_Myoff / _VBITS;
   this->_Myoff %= _VBITS;
   }
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(
  const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (_VBITS * (this->_Myptr - _Right._Myptr)
   + (difference_type)this->_Myoff
   - (difference_type)_Right._Myoff);
  }

 const_reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr == _Right._Myptr
   && this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Mytype& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr < _Right._Myptr
   || (this->_Myptr == _Right._Myptr
    && this->_Myoff < _Right._Myoff));
  }

 bool operator>(const _Mytype& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Mytype& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Mytype& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Mytype& _Right) const
  {
  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   _Debug_message(L"vector<bool> iterators incompatible", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2127);
  }
#line 2143 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
 void _Dec()
  {
  if (this->_Myoff != 0)
   --this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid((size_type)-1))
    {
    _Debug_message(L"vector<bool> iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2152);
    { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2153, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2153, 0); };
    }






   this->_Myoff = _VBITS - 1;
   --this->_Myptr;
   }
  }

 void _Inc()
  {
  if (this->_Myoff < _VBITS - 1)
   ++this->_Myoff;
  else
   {

   if (this->_Getcont() == 0 || 0 < this->_Valid(1))
    {
    _Debug_message(L"vector<bool> iterator not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2175);
    { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2176, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2176, 0); };
    }






   this->_Myoff = 0;
   ++this->_Myptr;
   }
  }
 };

template<class _Alloc> inline
 _Vb_const_iterator<_Alloc> operator+(
  typename _Alloc::difference_type _Off,
  _Vb_const_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_iterator
  : public _Vb_const_iterator<_Alloc>
 {
public:
 typedef _Vb_const_iterator<_Alloc> _Mybase;
 typedef _Vb_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef _Bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef _Reft *pointer;
 typedef _Reft reference;

 _Vb_iterator()
  {
  }

 _Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
  : _Mybase(_Ptr, _Mypvbool)
  {
  }

 reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Alloc> inline
 _Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
  _Vb_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_val
  : public _Container_base
 {
public:
 typedef ::std:: vector<_Vbase, _Alloc> _Vectype;
 typedef typename _Vectype::_Alty _Alty;
 typedef typename _Alty::size_type size_type;

 _Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(const _Vb_val& _Right)
  : _Myvec(_Right._Myvec),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
  : _Myvec(_Right._Myvec, _Al),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 ~_Vb_val() throw ()
  {
  _Free_proxy();
  }
#line 2376 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector"
 void _Swap_alloc(_Vb_val& _Right)
  {
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec.get_allocator());
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Myvec.get_allocator());
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 static size_type _Nw(size_type _Count)
  {
  return ((_Count + _VBITS - 1) / _VBITS);
  }

 _Vectype _Myvec;
 typename _Alty::size_type _Mysize;
 };



template<class _Alloc>
 class vector<_Bool, _Alloc>
  : public _Vb_val<_Alloc>
 {
public:
 typedef ::std:: vector<_Bool, _Alloc> _Myt;
 typedef _Vb_val<_Alloc> _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Vectype _Vectype;

 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef _Bool _Ty;
 typedef _Alloc allocator_type;

 typedef _Vb_reference<_Alty> reference;
 typedef bool const_reference;
 typedef bool value_type;

 typedef reference _Reft;
 typedef _Vb_const_iterator<_Alty> const_iterator;
 typedef _Vb_iterator<_Alty> iterator;

 typedef iterator pointer;
 typedef const_iterator const_pointer;
 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _VBITS = ::std:: _VBITS;
 enum {_EEN_VBITS = _VBITS};
 vector()
  : _Mybase(0, false)
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  }

 explicit vector(size_type _Count, const bool& _Val = false)
  : _Mybase(_Count, _Val)
  {
  _Trim(_Count);
  }

 vector(size_type _Count, const bool& _Val, const _Alloc& _Al)
  : _Mybase(_Count, _Val, _Al)
  {
  _Trim(_Count);
  }

 vector(const _Myt& _Right)
  : _Mybase(_Right)
  {
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase(0, false)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter>
  void _BConstruct(_Iter _First, _Iter _Last)
  {
  insert(begin(), _First, _Last);
  }

 vector(_Myt&& _Right)
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(::std:: forward<_Myt>(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->get_allocator() != _Right.get_allocator())
    {
    this->_Free_proxy();
    this->_Myvec = ::std:: move(_Right._Myvec);
    this->_Alloc_proxy();
    }
   else
    this->_Myvec = ::std:: move(_Right._Myvec);


   this->_Mysize = _Right._Mysize;
   _Right._Mysize = 0;
   }
  return (*this);
  }

 vector(::std:: initializer_list<bool> _Ilist,
   const _Alloc& _Al = allocator_type())
  : _Mybase(0, false, _Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
   ::std:: initializer_list<bool> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() throw ()
  {
  this->_Mysize = 0;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->_Mysize = _Right._Mysize;
  this->_Myvec = _Right._Myvec;
  return (*this);
  }

 void reserve(size_type _Count)
  {
  this->_Myvec.reserve(this->_Nw(_Count));
  }

 size_type capacity() const throw ()
  {
  return (this->_Myvec.capacity() * _VBITS);
  }

 iterator begin() throw ()
  {
  return (iterator((_Vbase *)this->_Myvec._Myfirst, this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator((_Vbase *)this->_Myvec._Myfirst, this));
  }

 iterator end() throw ()
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator end() const throw ()
  {
  const_iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if (this->_Myvec._Has_unused_capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 iterator _Make_iter(const_iterator _Where)
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += _Where - begin();
  return (_Tmp);
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 void resize(size_type _Newsize, bool _Val = false)
  {
  if (size() < _Newsize)
   _Insert_n(end(), _Newsize - size(), _Val);
  else if (_Newsize < size())
   erase(begin() + _Newsize, end());
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  const size_type _Maxsize = this->_Myvec.max_size();
  return (_Maxsize < (size_type)(-1) / _VBITS
   ? _Maxsize * _VBITS : (size_type)(-1));
  }

 bool empty() const throw ()
  {
  return (size() == 0);
  }

 _Alloc get_allocator() const throw ()
  {
  return (this->_Myvec.get_allocator());
  }

 const_reference at(size_type _Off) const
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 reference at(size_type _Off)
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
  const_iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference operator[](size_type _Off)
  {
  iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const bool& _Val)
  {
  insert(end(), _Val);
  }

 void pop_back()
  {
  erase(end() - 1);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign(size_type _Count, const bool& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const bool& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const bool& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  size_type _Off = _Where - begin();

  for (; _First != _Last; ++_First, ++_Off)
   insert(begin() + _Off, *_First);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2799);
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);

  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: copy(_First, _Last, begin() + _Off);
  }

 iterator erase(const_iterator _Where_arg)
  {
  iterator _Where = _Make_iter(_Where_arg);
  size_type _Off = _Where - begin();


  if (end() <= _Where)
   _Debug_message(L"vector<bool> erase iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2814);
  ::std:: copy(_Where + 1, end(), _Where);
  _Orphan_range(_Off, this->_Mysize);





  _Trim(this->_Mysize - 1);
  return (begin() + _Off);
  }

 iterator erase(const_iterator _First_arg, const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);
  size_type _Off = _First - begin();

  if (_First != _Last)
   {

   if (_Last < _First || end() < _Last)
    _Debug_message(L"vector<bool> erase iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2836);
   iterator _Next = ::std:: copy(_Last, end(), _First);
   size_type _Newsize = _Next - begin();
   _Orphan_range(_Newsize, this->_Mysize);
   _Trim(_Newsize);





   }
  return (begin() + _Off);
  }

 void clear() throw ()
  {
  erase(begin(), end());
  }

 void flip() throw ()
  {
  for (typename _Vectype::iterator _Next = this->_Myvec.begin();
   _Next != this->_Myvec.end(); ++_Next)
   *_Next = (_Vbase)~*_Next;
  _Trim(this->_Mysize);
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->get_allocator() == _Right.get_allocator())
   {
   this->_Swap_all(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else
   {

   _Debug_message(L"vector<bool> containers incompatible for swap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2884);




   }
  }

 static void swap(reference _Left, reference _Right) throw ()
  {
  bool _Val = _Left;

  _Left = _Right;
  _Right = _Val;
  }

 size_t hash() const
  {
  return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
   this->_Myvec.size() * sizeof (_Vbase)));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const bool& _Val)
  {
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
  return (begin() + _Off);
  }

 size_type _Insert_x(const_iterator _Where, size_type _Count)
  {
  size_type _Off = _Where - begin();


  if (end() < _Where)
   _Debug_message(L"vector<bool> insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\vector", 2920);
  bool _Realloc = capacity() - size() < _Count;


  if (_Count == 0)
   ;
  else if (max_size() - size() < _Count)
   _Xlen();
  else
   {
   this->_Myvec.resize(this->_Nw(size() + _Count), 0);
   if (empty())
    this->_Mysize += _Count;
   else
    {
    iterator _Oldend = end();
    this->_Mysize += _Count;
    ::std:: copy_backward(begin() + _Off, _Oldend, end());
    }


   _Orphan_range(_Realloc ? 0 : _Off, this->_Mysize);

   }
  return (_Off);
  }


 void _Orphan_range(size_type _Offlo, size_type _Offhi) const
  {
  typedef _Vb_iter_base<_Alty> _Myiterbase;

  _Lockit _Lock(3);
  _Vbase *_Base = (_Vbase *)this->_Myvec._Myfirst;

  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    {
    size_type _Off = _VBITS * ((*_Pnext)->_Myptr - _Base)
     + (*_Pnext)->_Myoff;
    if (_Off < _Offlo || _Offhi < _Off)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
    }
  }







 void _Trim(size_type _Size)
  {
  if (max_size() < _Size)
   _Xlen();
  size_type _Words = this->_Nw(_Size);

  if (_Words < this->_Myvec.size())
   this->_Myvec.erase(this->_Myvec.begin() + _Words,
    this->_Myvec.end());
  this->_Mysize = _Size;
  _Size %= _VBITS;
  if (0 < _Size)
   this->_Myvec[_Words - 1] &= (_Vbase)((1 << _Size) - 1);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("vector<bool> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid vector<bool> subscript");
  }
 };

template<class _Alloc> inline
 bool operator==(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left._Myvec.begin(), _Left._Myvec.end(),
   _Right._Myvec.begin()));
 }

template<class _Alloc> inline
 bool operator!=(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Alloc>
 struct hash<vector<_Bool, _Alloc> >
  : public unary_function<vector<_Bool, _Alloc>, size_t>
 {
 typedef vector<_Bool, _Alloc> _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Keyval.hash());
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 21 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\queue"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"







#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4244)

namespace std {

const int _ISORT_MAX = 32;


template<class _InIt,
 class _Fn1> inline
 void _For_each(_InIt _First, _InIt _Last, _Fn1& _Func)
 {
 for (; _First != _Last; ++_First)
  _Func(*_First);
 }

template<class _InIt,
 class _Fn1> inline
 _Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 31);
 _Debug_pointer(_Func, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 32);
 _For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

 return (::std:: move(_Func));
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 53);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 54);
 return (_Rechecked(_First,
  _Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    return (_Firstb);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 75);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 76);
 return (_Rechecked(_First,
  _Adjacent_find(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: adjacent_find(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  count_if(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 107);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 108);
 return (_Count_if(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
  ++_First1, ++_First2;
 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }
#line 142 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch2(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred, true_type)
 {
 return (_Mismatch(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_InIt1, _InIt2>
  _Mismatch2(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred, false_type)
 {
 return (_Mismatch(_First1, _Last1,
  _First2, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 172);
 _Debug_pointer(_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 173);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 174);
 pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
  _Mismatch2(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Pred, _Is_checked(_First2)));
 return (pair<_InIt1, _InIt2>(
  _Rechecked(_First1, _Ans.first),
  _Ans.second));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _Pr> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize], _Pr _Pred)
 {
 pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(
  ::std:: mismatch(_First1, _Last1,
   _Array_iterator<_InTy, _InSize>(_First2), _Pred));
 return (pair<_InIt1, _InTy *>(
  _Ans.first,
  _Unchecked(_Ans.second)));
 }




template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 return (::std:: mismatch(_First1, _Last1, _First2,
  equal_to<>()));
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize> inline
 pair<_InIt1, _InTy *>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InTy (&_First2)[_InSize])
 {
 return (::std:: mismatch(_First1, _Last1, _First2,
  equal_to<>()));
 }



template<class _InIt,
 class _Pr> inline
 bool _All_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 241);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 242);
 return (_All_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _Any_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (true);
 return (false);
 }

template<class _InIt,
 class _Pr> inline
 bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 261);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 262);
 return (_Any_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 bool _None_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 281);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 282);
 return (_None_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _InIt,
 class _Pr> inline
 _InIt _Find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 return (_First);
 }

template<class _InIt,
 class _Pr> inline
 _InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 301);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 302);
 return (_Rechecked(_First,
  _Find_if_not(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   *_Dest++ = *_First;
 return (_Dest);
 }
#line 332 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, true_type)
 {
 return (_Copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred, false_type)
 {
 return (_Copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
  _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 359);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 360);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 361);
 return (_Copy_if(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *copy_if(_InIt _First, _InIt _Last, _OutTy (&_Dest)[_OutSize],
  _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: copy_if(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   *_Dest1++ = *_First;
  else
   *_Dest2++ = *_First;
 return (pair<_OutIt1, _OutIt2>( _Dest1, _Dest2));
 }
#line 413 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   true_type, true_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   true_type, false_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   false_type, true_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 pair<_OutIt1, _OutIt2>
  _Partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,
   false_type, false_type)
 {
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_First, _Last,
   _Dest1, _Dest2, _Pred)));
 }

template<class _InIt,
 class _OutIt1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutIt1, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 480);
 _Debug_pointer(_Dest1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 481);
 _Debug_pointer(_Dest2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 482);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 483);
 return (pair<_OutIt1, _OutIt2>(
  _Partition_copy(_Unchecked(_First), _Unchecked(_Last),
   _Dest1, _Dest2, _Pred,
   _Is_checked(_Dest1), _Is_checked(_Dest2))));
 }


template<class _InIt,
 class _OutTy1,
 size_t _OutSize1,
 class _OutIt2,
 class _Pr> inline
 pair<_OutTy1 *, _OutIt2>
  partition_copy(_InIt _First, _InIt _Last,
   _OutTy1 (&_Dest1)[_OutSize1], _OutIt2 _Dest2, _Pr _Pred)
 {
 pair<_Array_iterator<_OutTy1, _OutSize1>, _OutIt2> _Ans =
  ::std:: partition_copy(_First, _Last,
   _Array_iterator<_OutTy1, _OutSize1>(_Dest1), _Dest2, _Pred);
 return (pair<_OutTy1 *, _OutIt2>(
  _Unchecked(_Ans.first),
  _Ans.second));
 }

template<class _InIt,
 class _OutIt1,
 class _OutTy2,
 size_t _OutSize2,
 class _Pr> inline
 pair<_OutIt1, _OutTy2 *>
  partition_copy(_InIt _First, _InIt _Last,
   _OutIt1 _Dest1, _OutTy2 (&_Dest2)[_OutSize2], _Pr _Pred)
 {
 pair<_OutIt1, _Array_iterator<_OutTy2, _OutSize2> > _Ans =
  ::std:: partition_copy(_First, _Last,
   _Dest1, _Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred);
 return (pair<_OutIt1, _OutTy2 *>(
  _Ans.first,
  _Unchecked(_Ans.second)));
 }

template<class _InIt,
 class _OutTy1,
 size_t _OutSize1,
 class _OutTy2,
 size_t _OutSize2,
 class _Pr> inline
 pair<_OutTy1 *, _OutTy2 *>
  partition_copy(_InIt _First, _InIt _Last,
   _OutTy1 (&_Dest1)[_OutSize1], _OutTy2 (&_Dest2)[_OutSize2],
   _Pr _Pred)
 {
 pair<_Array_iterator<_OutTy1, _OutSize1>,
  _Array_iterator<_OutTy2, _OutSize2> > _Ans =
   ::std:: partition_copy(_First, _Last,
    _Array_iterator<_OutTy1, _OutSize1>(_Dest1),
    _Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred);
 return (pair<_OutTy1 *, _OutTy2 *>(
  _Unchecked(_Ans.first),
  _Unchecked(_Ans.second)));
 }




template<class _InIt,
 class _Pr> inline
 bool _Is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   break;
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   return (false);
 return (true);
 }

template<class _InIt,
 class _Pr> inline
 bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 566);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 567);
 return (_Is_partitioned(_Unchecked(_First), _Unchecked(_Last),
  _Pred));
 }


template<class _FwdIt,
 class _Diff,
 class _Pr> inline
 _FwdIt _Partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);
 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }
 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 601);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 602);
 return (_Rechecked(_First,
  _Partition_point(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First))));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2,
 class _Pr> inline
 _FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
 {
 _Diff1 _Count1 = 0;
 _Distance(_First1, _Last1, _Count1);
 _Diff2 _Count2 = 0;
 _Distance(_First2, _Last2, _Count2);

 for (; _Count2 <= _Count1; ++_First1, --_Count1)
  {
  _FwdIt1 _Mid1 = _First1;
  for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)
   if (_Mid2 == _Last2)
    return (_First1);
   else if (!_Pred(*_Mid1, *_Mid2))
    break;
  }
 return (_Last1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 640);
 _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 641);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 642);
 return (_Rechecked(_First1,
  _Search(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Dist_type(_First1), _Dist_type(_First2))));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: search(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _Diff2,
 class _Ty,
 class _Pr> inline
 _FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
 {
 if (_Count <= 0)
  return (_First1);

 for (; _First1 != _Last1; ++_First1)
  if (_Pred(*_First1, _Val))
   {
   _FwdIt1 _Mid1 = _First1;

   for (_Diff2 _Count1 = _Count; ; )
    if (--_Count1 == 0)
     return (_First1);
    else if (++_Mid1 == _Last1)
     return (_Last1);
    else if (!_Pred(*_Mid1, _Val))
     {
     break;
     }

   _First1 = _Mid1;
   }
 return (_Last1);
 }

template<class _FwdIt1,
 class _Diff2,
 class _Ty,
 class _Pr> inline
 _FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
 {
 if (_Count <= 0)
  return (_First1);

 _FwdIt1 _Oldfirst1 = _First1;
 for (_Diff2 _Inc = 0; _Count <= _Last1 - _Oldfirst1; )
  {
  _First1 = _Oldfirst1 + _Inc;
  if (_Pred(*_First1, _Val))
   {
   _Diff2 _Count1 = _Count;
   _FwdIt1 _Mid1 = _First1;

   for (; _Oldfirst1 != _First1 && _Pred(_First1[-1], _Val);
    --_First1)
    --_Count1;

   if (_Count1 <= _Last1 - _Mid1)
    for (; ; )
     {
     if (--_Count1 == 0)
      return (_First1);
     else if (!_Pred(*++_Mid1, _Val))
      {
      break;
      }
     }
   _Oldfirst1 = ++_Mid1;
   _Inc = 0;
   }
  else
   {
   _Oldfirst1 = _First1 + 1;
   _Inc = _Count - 1;
   }
  }
 return (_Last1);
 }

template<class _FwdIt1,
 class _Diff2,
 class _Ty,
 class _Pr> inline
 _FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty& _Val, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 742);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 743);
 return (_Rechecked(_First1,
  _Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,
   _Pred, _Iter_cat(_First1))));
 }


template<class _FwdIt1,
 class _Diff2,
 class _Ty> inline
 _FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
  _Diff2 _Count, const _Ty& _Val)
 {
 return (::std:: search_n(_First1, _Last1, _Count, _Val,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Diff1,
 class _Diff2,
 class _Pr> inline
 _FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
 {
 _Diff1 _Count1 = 0;
 _Distance(_First1, _Last1, _Count1);
 _Diff2 _Count2 = 0;
 _Distance(_First2, _Last2, _Count2);
 _FwdIt1 _Ans = _Last1;

 if (0 < _Count2)
  for (; _Count2 <= _Count1; ++_First1, --_Count1)
   {
   _FwdIt1 _Mid1 = _First1;
   for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
    if (!_Pred(*_Mid1, *_Mid2))
     break;
    else if (++_Mid2 == _Last2)
     {
     _Ans = _First1;
     break;
     }
   }
 return (_Ans);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 797);
 _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 798);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 799);
 return (_Rechecked(_First1,
  _Find_end(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred,
   _Dist_type(_First1), _Dist_type(_First2))));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_end(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1)
  for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
   if (_Pred(*_First1, *_Mid2))
    return (_First1);
 return (_First1);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 836);
 _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 837);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 838);
 return (_Rechecked(_First1,
  _Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),
   _Unchecked(_First2), _Unchecked(_Last2), _Pred)));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _FwdIt2 _Last2)
 {
 return (::std:: find_first_of(_First1, _Last1, _First2, _Last2,
  equal_to<>()));
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 for (; _First1 != _Last1; ++_First1, ++_Dest)
  ::std:: iter_swap(_First1, _Dest);
 return (_Dest);
 }
#line 876 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  forward_iterator_tag, forward_iterator_tag)
 {
 return (_Swap_ranges(_First1, _Last1,
  _Dest));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _FwdIt2 _Ans = _Dest + (_Last1 - _First1);
 _Swap_ranges(_First1, _Last1,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest, true_type)
 {
 return (_Swap_ranges(_First1, _Last1,
  _Dest, _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest, false_type)
 {
 return (_Swap_ranges(_First1, _Last1,
  _Dest, _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _FwdIt1,
 class _FwdIt2> inline
 _FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _Dest)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 922);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 923);
 return (_Swap_ranges(_Unchecked(_First1), _Unchecked(_Last1),
  _Dest, _Is_checked(_Dest)));
 }


template<class _FwdIt1,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: swap_ranges(_First1, _Last1,
  _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func)
 {
 for (; _First != _Last; ++_First, ++_Dest)
  *_Dest = _Func(*_First);
 return (_Dest);
 }
#line 968 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Transform(_First, _Last,
  _Dest, _Func));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Transform(_First, _Last,
  _Unchecked(_Dest), _Func);
 return (_Ans);
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func, true_type)
 {
 return (_Transform1(_First, _Last,
  _Dest, _Func,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Transform1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func, false_type)
 {
 return (_Transform1(_First, _Last,
  _Dest, _Func,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Fn1> inline
 _OutIt transform(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Fn1 _Func)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1021);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1022);
 _Debug_pointer(_Func, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1023);
 if (_First != _Last)
  return (_Transform1(_Unchecked(_First), _Unchecked(_Last),
   _Dest, _Func, _Is_checked(_Dest)));
 return (_Dest);
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Fn1> inline
 _OutTy *transform(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Fn1 _Func)
 {
 return (_Unchecked(
  ::std:: transform(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2, ++_Dest)
  *_Dest = _Func(*_First1, *_First2);
 return (_Dest);
 }
#line 1073 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform3(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Transform(_First1, _Last1,
  _First2, _Dest, _Func));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform3(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last1 - _First1);
 _Transform(_First1, _Last1,
  _First2, _Unchecked(_Dest), _Func);
 return (_Ans);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  input_iterator_tag, input_iterator_tag)
 {
 return (_Transform3(_First1, _Last1,
  _First2, _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _InIt2 _Last2 = _First2 + (_Last1 - _First1);
 _Last2 = _Last2;
 return (_Transform3(_First1, _Last1,
  _Unchecked(_First2), _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  true_type)
 {
 return (_Transform2(_First1, _Last1,
  _First2, _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_First2)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func,
  false_type)
 {
 return (_Transform2(_First1, _Last1,
  _First2, _Dest, _Func,
  _Iter_cat(_First1), _Iter_cat(_First2)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Fn2> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1161);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1162);
 _Debug_pointer(_Func, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1163);
 if (_First1 != _Last1)
  return (_Transform2(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Dest, _Func,
   _Is_checked(_Dest)));
 return (_Dest);
 }


template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _OutIt,
 class _Fn2> inline
 _OutIt transform(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _OutIt _Dest, _Fn2 _Func)
 {
 return (::std:: transform(_First1, _Last1,
  _Array_iterator<_InTy, _InSize>(_First2), _Dest, _Func));
 }

template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Fn2> inline
 _OutTy *transform(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _OutTy (&_Dest)[_OutSize], _Fn2 _Func)
 {
 return (_Unchecked(
  ::std:: transform(_First1, _Last1,
   _First2, _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }

template<class _InIt1,
 class _InTy,
 size_t _InSize,
 class _OutTy,
 size_t _OutSize,
 class _Fn2> inline
 _OutTy *transform(_InIt1 _First1, _InIt1 _Last1,
  _InTy (&_First2)[_InSize], _OutTy (&_Dest)[_OutSize], _Fn2 _Func)
 {
 return (_Unchecked(
  ::std:: transform(_First1, _Last1,
   _Array_iterator<_InTy, _InSize>(_First2),
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));
 }




template<class _FwdIt,
 class _Ty> inline
 void _Replace(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Oldval)
   *_First = _Newval;
 }

template<class _FwdIt,
 class _Ty> inline
 void replace(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Oldval, const _Ty& _Newval)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1230);
 _Replace(_Unchecked(_First), _Unchecked(_Last),
  _Oldval, _Newval);
 }


template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void _Replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First))
   *_First = _Val;
 }

template<class _FwdIt,
 class _Pr,
 class _Ty> inline
 void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1251);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1252);
 _Replace_if(_Unchecked(_First), _Unchecked(_Last),
  _Pred, _Val);
 }


template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 for (; _First != _Last; ++_First, ++_Dest)
  *_Dest = *_First == _Oldval ? _Newval : *_First;
 return (_Dest);
 }
#line 1281 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Oldval, _Newval));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Replace_copy(_First, _Last,
  _Unchecked(_Dest), _Oldval, _Newval);
 return (_Ans);
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  true_type)
 {
 return (_Replace_copy(_First, _Last,
  _Dest, _Oldval, _Newval,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,
  false_type)
 {
 return (_Replace_copy(_First, _Last,
  _Dest, _Oldval, _Newval,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt replace_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1336);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1337);
 return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Oldval, _Newval,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Ty> inline
 _OutTy *replace_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], const _Ty& _Oldval, const _Ty& _Newval)
 {
 return (_Unchecked(
  ::std:: replace_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Oldval, _Newval)));
 }




template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First, ++_Dest)
  *_Dest = _Pred(*_First) ? _Val : *_First;
 return (_Dest);
 }
#line 1384 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Replace_copy_if(_First, _Last,
  _Dest, _Pred, _Val));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Replace_copy_if(_First, _Last,
  _Unchecked(_Dest), _Pred, _Val);
 return (_Ans);
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  true_type)
 {
 return (_Replace_copy_if(_First, _Last,
  _Dest, _Pred, _Val,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val,
  false_type)
 {
 return (_Replace_copy_if(_First, _Last,
  _Dest, _Pred, _Val,
  _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr,
 class _Ty> inline
 _OutIt replace_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1444);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1445);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1446);
 return (_Replace_copy_if(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred, _Val,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr,
 class _Ty> inline
 _OutTy *replace_copy_if(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred, const _Ty& _Val)
 {
 return (_Unchecked(
  ::std:: replace_copy_if(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred, _Val)));
 }




template<class _FwdIt,
 class _Fn0> inline
 void _Generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
 {
 for (; _First != _Last; ++_First)
  *_First = _Func();
 }

template<class _FwdIt,
 class _Fn0> inline
 void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1481);
 _Debug_pointer(_Func, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1482);
 _Generate(_Unchecked(_First), _Unchecked(_Last), _Func);
 }


template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
 {
 for (; 0 < _Count; --_Count, ++_Dest)
  *_Dest = _Func();
 return (_Dest);
 }
#line 1507 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n1(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  _Mutable_iterator_tag)
 {
 return (_Generate_n(_Dest, _Count, _Func));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n1(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + _Count;
 _Ans = _Ans;
 return (_Rechecked(_Dest,
  _Generate_n(_Unchecked(_Dest), _Count, _Func)));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  true_type)
 {
 return (_Generate_n1(_Dest, _Count, _Func,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func,
  false_type)
 {
 return (_Generate_n1(_Dest, _Count, _Func,
  _Iter_cat(_Dest)));
 }

template<class _OutIt,
 class _Diff,
 class _Fn0> inline
 _OutIt generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
 {
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1554);
 _Debug_pointer(_Func, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1555);
 return (_Generate_n(_Dest, _Count, _Func,
  _Is_checked(_Dest)));
 }


template<class _OutTy,
 size_t _OutSize,
 class _Diff,
 class _Fn0> inline
 _OutTy *generate_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, _Fn0 _Func)
 {
 return (_Unchecked(
  ::std:: generate_n(_Array_iterator<_OutTy, _OutSize>(_Dest),
   _Count, _Func)));
 }




template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  if (!(*_First == _Val))
   *_Dest++ = *_First;
 return (_Dest);
 }
#line 1599 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt _Remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val,
  true_type)
 {
 return (_Remove_copy(_First, _Last,
  _Dest, _Val));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val,
  false_type)
 {
 return (_Remove_copy(_First, _Last,
  _Dest, _Val));
 }

template<class _InIt,
 class _OutIt,
 class _Ty> inline
 _OutIt remove_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, const _Ty& _Val)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1628);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1629);
 return (_Remove_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Val,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Ty> inline
 _OutTy *remove_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], const _Ty& _Val)
 {
 return (_Unchecked(
  ::std:: remove_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Val)));
 }




template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (!_Pred(*_First))
   *_Dest++ = *_First;
 return (_Dest);
 }
#line 1675 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred,
  true_type)
 {
 return (_Remove_copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred,
  false_type)
 {
 return (_Remove_copy_if(_First, _Last,
  _Dest, _Pred));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt remove_copy_if(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1704);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1705);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1706);
 return (_Remove_copy_if(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Pred,
  _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *remove_copy_if(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: remove_copy_if(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _FwdIt,
 class _Ty> inline
 _FwdIt _Remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _FwdIt _Next = _First;
 for (++_First; _First != _Last; ++_First)
  if (!(*_First == _Val))
   *_Next++ = _Move(*_First);
 return (_Next);
 }

template<class _FwdIt,
 class _Ty> inline
 _FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 _First = ::std:: find(_First, _Last, _Val);
 if (_First == _Last)
  return (_First);
 else
  return (_Rechecked(_First,
   _Remove(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Next = _First;
 for (++_First; _First != _Last; ++_First)
 if (!_Pred(*_First))
  *_Next++ = _Move(*_First);
 return (_Next);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _First = ::std:: find_if(_First, _Last, _Pred);
 if (_First == _Last)
  return (_First);
 else
  return (_Rechecked(_First,
   _Remove_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
   if (_Pred(*_Firstb, *_First))
    {
    for (; ++_First != _Last; )
     if (!_Pred(*_Firstb, *_First))
      *++_Firstb = _Move(*_First);
    return (++_Firstb);
    }
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1796);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1797);
 return (_Rechecked(_First,
  _Unique(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt unique(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: unique(_First, _Last, equal_to<>()));
 }


template<class _InIt,
 class _OutIt,
 class _Ty,
 class _Pr> inline
 _OutIt _Unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, _Ty *)
 {
 _Ty _Val = *_First;

 for (*_Dest++ = _Val; ++_First != _Last; )
  if (!_Pred(_Val, *_First))
   {
   _Val = *_First;
   *_Dest++ = _Val;
   }
 return (_Dest);
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, input_iterator_tag)
 {
 return (_Unique_copy(_First, _Last, _Dest, _Pred,
  _Val_type(_First)));
 }

template<class _FwdIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,
  _OutIt _Dest, _Pr _Pred, forward_iterator_tag)
 {
 _FwdIt _Firstb = _First;

 for (*_Dest++ = *_Firstb; ++_First != _Last; )
  if (!_Pred(*_Firstb, *_First))
   {
   _Firstb = _First;
   *_Dest++ = *_Firstb;
   }
 return (_Dest);
 }
#line 1868 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt _Unique_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Unique_copy(_First, _Last,
  _Dest, _Pred, _Iter_cat(_First)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Unique_copy1(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Unique_copy(_First, _Last,
  _Dest, _Pred, _Iter_cat(_First)));
 }

template<class _InIt,
 class _OutIt,
 class _Pr> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1895);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 1896);
 return (_First == _Last ? _Dest :
  _Unique_copy1(_Unchecked(_First), _Unchecked(_Last),
   _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *unique_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: unique_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt,
 class _OutIt> inline
 _OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
 {
 return (::std:: unique_copy(_First, _Last, _Dest,
  equal_to<>()));
 }


template<class _InIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *unique_copy(_InIt _First, _InIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: unique_copy(_First, _Last, _Dest,
  equal_to<>()));
 }



template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 for (; _First != _Last; ++_Dest)
  *_Dest = *--_Last;
 return (_Dest);
 }
#line 1960 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Reverse_copy(_First, _Last,
  _Dest));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last - _First);
 _Reverse_copy(_First, _Last,
  _Unchecked(_Dest));
 return (_Ans);
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  true_type)
 {
 return (_Reverse_copy(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _BidIt,
 class _OutIt> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest,
  false_type)
 {
 return (_Reverse_copy(_First, _Last,
  _Dest, _Iter_cat(_First), _Iter_cat(_Dest)));
 }

template<class _BidIt,
 class _OutIt> inline
 _OutIt reverse_copy(_BidIt _First, _BidIt _Last,
  _OutIt _Dest)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2008);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2009);
 return (_Reverse_copy(_Unchecked(_First), _Unchecked(_Last),
  _Dest, _Is_checked(_Dest)));
 }


template<class _BidIt,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *reverse_copy(_BidIt _First, _BidIt _Last,
  _OutTy (&_Dest)[_OutSize])
 {
 return (_Unchecked(
  ::std:: reverse_copy(_First, _Last,
   _Array_iterator<_OutTy, _OutSize>(_Dest))));
 }




template<class _FwdIt,
 class _OutIt> inline
 _OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  _OutIt _Dest)
 {
 _Dest = ::std:: copy(_Mid, _Last, _Dest);
 return (::std:: copy(_First, _Mid, _Dest));
 }


template<class _RanIt,
 class _Fn1,
 class _Diff> inline
 void _Random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func, _Diff *)
 {
 _RanIt _Next = _First;
 for (_Diff _Index = 2; ++_Next != _Last; ++_Index)
  {
  _Diff _Off = _Func(_Index);


  if (_Off < 0 || _Index <= _Off)
   {
   _Debug_message(L"random value out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2052);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2053, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2053, 0); };
   }





  ::std:: iter_swap(_Next, _First + _Off);
  }
 }

template<class _RanIt,
 class _Fn1> inline
 void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1&& _Func)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2068);
 _Debug_pointer(_Func, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2069);
 if (_First != _Last)
  _Random_shuffle(_Unchecked(_First), _Unchecked(_Last), _Func,
   _Dist_type(_First));
 }


template<class _RanIt,
 class _Urng> inline
 void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
 {
 typedef typename iterator_traits<_RanIt>::difference_type _Diff;
 typedef typename remove_reference<_Urng>::type _Urng0;
 _Rng_from_urng<_Diff, _Urng0> _Rng(_Func);
 ::std:: random_shuffle(_First, _Last, _Rng);
 }


struct _Rand_urng_from_func
 {
 typedef unsigned int result_type;

 static result_type (min)()
  {
  return (0);
  }

 static result_type (max)()
  {
  return (0x7fff);
  }

 result_type operator()()
  {
  return (:: rand());
  }
 };


template<class _RanIt> inline
 void random_shuffle(_RanIt _First, _RanIt _Last)
 {
 _Rand_urng_from_func _Func;
 ::std:: shuffle(_First, _Last, _Func);
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
  forward_iterator_tag)
 {
 while (_First != _Last && _Pred(*_First))
  ++_First;

 if (_First == _Last)
  return (_First);

 for (_FwdIt _Next = ::std:: next(_First); _Next != _Last; ++_Next)
  if (_Pred(*_Next))
   ::std:: iter_swap(_First++, _Next);

 return (_First);
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt _Partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
  bidirectional_iterator_tag)
 {
 for (; ; ++_First)
  {
  for (; _First != _Last && _Pred(*_First); ++_First)
   ;
  if (_First == _Last)
   break;

  for (; _First != --_Last && !_Pred(*_Last); )
   ;
  if (_First == _Last)
   break;

  ::std:: iter_swap(_First, _Last);
  }
 return (_First);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2160);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2161);
 return (_Rechecked(_First,
  _Partition(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Iter_cat(_First))));
 }


template<class _BidIt,
 class _Diff,
 class _Ty> inline
 _BidIt _Buffered_rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count1 == 0 || _Count2 == 0)
  {
  ::std:: advance(_First, _Count2);
  return (_First);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move(_First, _Mid, _Tempbuf._Init());
  _Move(_Mid, _Last, _First);
  return (_Move_backward(_Tempbuf._First(), _Tempbuf._Last(),
   _Last));
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move(_Mid, _Last, _Tempbuf._Init());
  _Move_backward(_First, _Mid, _Last);
  return (_Move(_Tempbuf._First(), _Tempbuf._Last(), _First));
  }
 else
  {
  return (::std:: rotate(_First, _Mid, _Last));
  }
 }

template<class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty> inline
 _BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
  _Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
 {
 if (_Count == 0)
  return (_First);
 else if (_Count == 1)
  return (_Pred(*_First) ? _Last : _First);
 else if (_Count <= _Tempbuf._Maxlen())
  {
  _BidIt _Next = _First;
  for (_Tempbuf._Init(); _First != _Last; ++_First)
   if (_Pred(*_First))
    *_Next++ = _Move(*_First);
   else
    *_Tempbuf++ = _Move(*_First);

  _Move(_Tempbuf._First(), _Tempbuf._Last(), _Next);
  return (_Next);
  }
 else
  {
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count / 2);

  _BidIt _Left = _Stable_partition(_First, _Mid, _Pred,
   _Count / 2, _Tempbuf);
  _BidIt _Right = _Stable_partition(_Mid, _Last, _Pred,
   _Count - _Count / 2, _Tempbuf);

  _Diff _Count1 = 0;
  _Distance(_Left, _Mid, _Count1);
  _Diff _Count2 = 0;
  _Distance(_Mid, _Right, _Count2);

  return (_Buffered_rotate(_Left, _Mid, _Right,
   _Count1, _Count2, _Tempbuf));
  }
 }

template<class _BidIt,
 class _Pr,
 class _Diff,
 class _Ty> inline
 _BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
  _Diff *, _Ty *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);
 _Temp_iterator<_Ty> _Tempbuf(_Count);
 return (_Stable_partition(_First, _Last, _Pred, _Count, _Tempbuf));
 }

template<class _BidIt,
 class _Pr> inline
 _BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2258);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2259);
 return (_First == _Last ? _First
  : _Rechecked(_First,
   _Stable_partition(_Unchecked(_First), _Unchecked(_Last),
    _Pred, _Dist_type(_First), _Val_type(_First))));
 }



template<class _RanIt> inline
 void _Debug_heap(_RanIt _First, _RanIt _Last)
 {
 if (_First != _Last)
  for (_RanIt _Root = _First; ++_First != _Last; ++_Root)
   if (_Debug_lt(*_Root, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2273))
    _Debug_message(L"invalid heap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2274);
   else if (++_First == _Last)
    break;
   else if (_Debug_lt(*_Root, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2277))
    _Debug_message(L"invalid heap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2278);
 }


template<class _RanIt,
 class _Pr> inline
 void _Debug_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_RanIt _Root = _First; ++_First != _Last; ++_Root)
   if (_Debug_lt_pred(_Pred, *_Root, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2288))
    _Debug_message(L"invalid heap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2289);
   else if (++_First == _Last)
    break;
   else if (_Debug_lt_pred(_Pred, *_Root, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2292))
    _Debug_message(L"invalid heap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2293);
 }
#line 2307 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Push_heap(_RanIt _First, _Diff _Hole,
  _Diff _Top, _Ty&& _Val, _Pr _Pred)
 {
 for (_Diff _Idx = (_Hole - 1) / 2;
  _Top < _Hole && _Debug_lt_pred(_Pred, *(_First + _Idx), _Val, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2315);
  _Idx = (_Hole - 1) / 2)
  {
  *(_First + _Hole) = _Move(*(_First + _Idx));
  _Hole = _Idx;
  }

 *(_First + _Hole) = _Move(_Val);
 }

template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
 {
 _Diff _Count = _Last - _First;
 if (0 < _Count)
  {
  _Ty _Val = _Move(*_Last);
  _Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2343);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2344);
 if (_First != _Last)
  {
  --_Last;
  _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
  _Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First), _Val_type(_First));
  }
 }


template<class _RanIt> inline
 void push_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: push_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
  _Ty&& _Val, _Pr _Pred)
 {
 _Diff _Top = _Hole;
 _Diff _Idx = 2 * _Hole + 2;

 for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)
  {
  if (_Debug_lt_pred(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2374))
   --_Idx;
  *(_First + _Hole) = _Move(*(_First + _Idx));
  _Hole = _Idx;
  }

 if (_Idx == _Bottom)
  {
  *(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));
  _Hole = _Bottom - 1;
  }
 _Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);
 }

template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
  _Ty&& _Val, _Pr _Pred, _Diff *)
 {
 *_Dest = _Move(*_First);
 _Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
  _Move(_Val), _Pred);
 }

template<class _RanIt,
 class _Ty,
 class _Pr> inline
 void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
 {
 _Ty _Val = _Move(*(_Last - 1));
 _Pop_heap(_First, _Last - 1, _Last - 1,
  _Move(_Val), _Pred, _Dist_type(_First));
 }

template<class _RanIt,
 class _Pr> inline
 void _Pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
  _Val_type(_First));
 }

template<class _RanIt,
 class _Pr> inline
 void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2422);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2423);
 _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 if (1 < _Last - _First)
  _Pop_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void pop_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: pop_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
 {
 _Diff _Bottom = _Last - _First;
 for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )
  {
  --_Hole;
  _Ty _Val = _Move(*(_First + _Hole));
  _Adjust_heap(_First, _Hole, _Bottom,
   _Move(_Val), _Pred);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2457);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2458);
 if (1 < _Last - _First)
  _Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First), _Val_type(_First));
 }


template<class _RanIt> inline
 void make_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: make_heap(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Pr> inline
 void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 for (; 1 < _Last - _First; --_Last)
  _Pop_heap(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2484);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2485);
 _Debug_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 _Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void sort_heap(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort_heap(_First, _Last, less<>());
 }


template<class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr> inline
 _FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);

 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Pred(*_Mid, _Val))

   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }
 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {

 return (_Rechecked(_First,
  _Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
   _Dist_type(_First))));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: lower_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr> inline
 _FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);

 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (!_Pred(_Val, *_Mid))

   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else
   _Count = _Count2;
  }
 return (_First);
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {

 return (_Rechecked(_First,
  _Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
   _Dist_type(_First))));
 }


template<class _FwdIt,
 class _Ty> inline
 _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: upper_bound(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Diff,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr _Pred, _Diff *)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);

 while (0 < _Count)
  {
  _Diff _Count2 = _Count / 2;
  _FwdIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Debug_lt_pred(_Pred, *_Mid, _Val, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2613))
   {
   _First = ++_Mid;
   _Count -= _Count2 + 1;
   }
  else if (_Pred(_Val, *_Mid))
   _Count = _Count2;
  else
   {
   _FwdIt _First2 = ::std:: lower_bound(_First, _Mid, _Val, _Pred);
   ::std:: advance(_First, _Count);
   _FwdIt _Last2 = ::std:: upper_bound(++_Mid, _First, _Val, _Pred);
   return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
   }
  }

 return (pair<_FwdIt, _FwdIt>(_First, _First));
 }

template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val, _Pr _Pred)
 {
 _Debug_order(_First, _Last, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2639);
 pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
  _Equal_range(_Unchecked(_First), _Unchecked(_Last),
   _Val, _Pred, _Dist_type(_First)));
 return (pair<_FwdIt, _FwdIt>(
  _Rechecked(_First, _Ans.first),
  _Rechecked(_Last, _Ans.second)));
 }


template<class _FwdIt,
 class _Ty> inline
 pair<_FwdIt, _FwdIt>
  equal_range(_FwdIt _First, _FwdIt _Last,
   const _Ty& _Val)
 {
 return (::std:: equal_range(_First, _Last, _Val, less<>()));
 }


template<class _FwdIt,
 class _Ty,
 class _Pr> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last,
  const _Ty& _Val, _Pr _Pred)
 {
 _First = ::std:: lower_bound(_First, _Last, _Val, _Pred);
 return (_First != _Last && !_Pred(_Val, *_First));
 }


template<class _FwdIt,
 class _Ty> inline
 bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 return (::std:: binary_search(_First, _Last, _Val, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge0(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2689))
    {
    *_Dest++ = *_First2++;
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = *_First1++;
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Copy_impl(_First1, _Last1, _Dest);
 return (_Copy_impl(_First2, _Last2, _Dest));
 }
#line 2722 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, input_iterator_tag,
  input_iterator_tag, _Mutable_iterator_tag)
 {
 return (_Merge0(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, random_access_iterator_tag,
  random_access_iterator_tag, random_access_iterator_tag)
 {
 _OutIt _Ans = _Dest + (_Last1 - _First1)
  + (_Last2 - _First2);
 _Merge0(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred);
 return (_Ans);
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Merge2(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred, _Iter_cat(_First1),
  _Iter_cat(_First2), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Merge2(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred, _Iter_cat(_First1),
  _Iter_cat(_First2), _Iter_cat(_Dest)));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2790);
 _Debug_order(_First2, _Last2, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2791);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2792);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2793);
 return (_Merge2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  ::std:: merge(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _BidIt1,
 class _BidIt2,
 class _BidIt3,
 class _Pr> inline
 _BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
  _BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *--_Last2, *--_Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2854))
    {
    *--_Dest = _Move(*_Last1);
    ++_Last2;
    if (_First1 == _Last1)
     break;
    }
   else
    {
    *--_Dest = _Move(*_Last2);
    ++_Last1;
    if (_First2 == _Last2)
     break;
    }
   }

 _Dest = _Move_backward(_First2, _Last2, _Dest);
 return (_Move_backward(_First1, _Last1, _Dest));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 if (_First1 != _Last1 && _First2 != _Last2)
  for (; ; )
   {
   if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2885))
    {
    *_Dest++ = _Move(*_First2++);
    if (_First2 == _Last2)
     break;
    }
   else
    {
    *_Dest++ = _Move(*_First1++);
    if (_First1 == _Last1)
     break;
    }
   }

 _Dest = _Move(_First1, _Last1, _Dest);
 return (_Move(_First2, _Last2, _Dest));
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  _Diff _Count1, _Diff _Count2,
   _Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
 {
 if (_Count1 == 0 || _Count2 == 0)
  ;
 else if (_Count1 + _Count2 == 2)
  {
  if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2915))
   ::std:: iter_swap(_First, _Mid);
  }
 else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
  {
  _Move(_First, _Mid, _Tempbuf._Init());
  _Merge(_Tempbuf._First(), _Tempbuf._Last(),
   _Mid, _Last, _First, _Pred);
  }
 else if (_Count2 <= _Tempbuf._Maxlen())
  {
  _Move(_Mid, _Last, _Tempbuf._Init());
  _Merge_backward(_First, _Mid,
   _Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred);
  }
 else
  {
  _BidIt _Firstn, _Lastn;
  _Diff _Count1n, _Count2n;
  if (_Count2 < _Count1)
   {
   _Count1n = _Count1 / 2, _Count2n = 0;
   _Firstn = _First;
   ::std:: advance(_Firstn, _Count1n);
   _Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn, _Pred);
   _Distance(_Mid, _Lastn, _Count2n);
   }
  else
   {
   _Count1n = 0, _Count2n = _Count2 / 2;
   _Lastn = _Mid;
   ::std:: advance(_Lastn, _Count2n);
   _Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn, _Pred);
   _Distance(_First, _Firstn, _Count1n);
   }
  _BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
   _Count1 - _Count1n, _Count2n, _Tempbuf);
  _Buffered_merge(_First, _Firstn, _Midn,
   _Count1n, _Count2n, _Tempbuf, _Pred);
  _Buffered_merge(_Midn, _Lastn, _Last,
   _Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
  _Diff *, _Ty *)
 {
 _Diff _Count1 = 0;
 _Distance(_First, _Mid, _Count1);
 _Diff _Count2 = 0;
 _Distance(_Mid, _Last, _Count2);
 _Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
 _Buffered_merge(_First, _Mid, _Last,
  _Count1, _Count2, _Tempbuf, _Pred);
 }

template<class _BidIt,
 class _Pr> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
 {
 _Debug_order(_First, _Mid, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2979);
 _Debug_order(_Mid, _Last, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 2980);
 if (_First != _Mid && _Mid != _Last)
  _Inplace_merge(
   _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
   _Dist_type(_First), _Val_type(_First));
 }


template<class _BidIt> inline
 void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
 {
 ::std:: inplace_merge(_First, _Mid, _Last, less<>());
 }


template<class _BidIt,
 class _Pr,
 class _Ty> inline
 void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
 {
 if (_First != _Last)
  for (_BidIt _Next = _First; ++_Next != _Last; )
   {
   _BidIt _Next1 = _Next;
   _Ty _Val = _Move(*_Next);

   if (_Debug_lt_pred(_Pred, _Val, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3006))
    {
    _Move_backward(_First, _Next, ++_Next1);
    *_First = _Move(_Val);
    }
   else
    {
    for (_BidIt _First1 = _Next1;
     _Debug_lt_pred(_Pred, _Val, *--_First1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3014);
     _Next1 = _First1)
     *_Next1 = _Move(*_First1);
    *_Next1 = _Move(_Val);
    }
   }
 }

template<class _BidIt,
 class _Pr> inline
 void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));
 }

template<class _RanIt,
 class _Pr> inline
 void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3033))
  ::std:: iter_swap(_Mid, _First);
 if (_Debug_lt_pred(_Pred, *_Last, *_Mid, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3035))
  {
  ::std:: iter_swap(_Last, _Mid);
  if (_Debug_lt_pred(_Pred, *_Mid, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3038))
   ::std:: iter_swap(_Mid, _First);
  }
 }

template<class _RanIt,
 class _Pr> inline
 void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 if (40 < _Last - _First)
  {
  size_t _Step = (_Last - _First + 1) / 8;
  _Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);
  _Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
  _Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
  _Med3(_First + _Step, _Mid, _Last - _Step, _Pred);
  }
 else
  _Med3(_First, _Mid, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 pair<_RanIt, _RanIt>
  _Unguarded_partition(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _RanIt _Mid = _First + (_Last - _First) / 2;
 _Median(_First, _Mid, _Last - 1, _Pred);
 _RanIt _Pfirst = _Mid;
 _RanIt _Plast = _Pfirst + 1;

 while (_First < _Pfirst
  && !_Debug_lt_pred(_Pred, *(_Pfirst - 1), *_Pfirst, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3070)
  && !_Pred(*_Pfirst, *(_Pfirst - 1)))
  --_Pfirst;
 while (_Plast < _Last
  && !_Debug_lt_pred(_Pred, *_Plast, *_Pfirst, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3074)
  && !_Pred(*_Pfirst, *_Plast))
  ++_Plast;

 _RanIt _Gfirst = _Plast;
 _RanIt _Glast = _Pfirst;

 for (; ; )
  {
  for (; _Gfirst < _Last; ++_Gfirst)
   if (_Debug_lt_pred(_Pred, *_Pfirst, *_Gfirst, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3084))
    ;
   else if (_Pred(*_Gfirst, *_Pfirst))
    break;
   else if (_Plast++ != _Gfirst)
    ::std:: iter_swap(_Plast - 1, _Gfirst);
  for (; _First < _Glast; --_Glast)
   if (_Debug_lt_pred(_Pred, *(_Glast - 1), *_Pfirst, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3091))
    ;
   else if (_Pred(*_Pfirst, *(_Glast - 1)))
    break;
   else if (--_Pfirst != _Glast - 1)
    ::std:: iter_swap(_Pfirst, _Glast - 1);
  if (_Glast == _First && _Gfirst == _Last)
   return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  if (_Glast == _First)
   {
   if (_Plast != _Gfirst)
    ::std:: iter_swap(_Pfirst, _Plast);
   ++_Plast;
   ::std:: iter_swap(_Pfirst++, _Gfirst++);
   }
  else if (_Gfirst == _Last)
   {
   if (--_Glast != --_Pfirst)
    ::std:: iter_swap(_Glast, _Pfirst);
   ::std:: iter_swap(_Pfirst, --_Plast);
   }
  else
   ::std:: iter_swap(_Gfirst++, --_Glast);
  }
 }

template<class _RanIt,
 class _Diff,
 class _Pr> inline
 void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred)
 {
 _Diff _Count;
 for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )
  {
  pair<_RanIt, _RanIt> _Mid =
   _Unguarded_partition(_First, _Last, _Pred);
  _Ideal /= 2, _Ideal += _Ideal / 2;

  if (_Mid.first - _First < _Last - _Mid.second)
   {
   _Sort(_First, _Mid.first, _Ideal, _Pred);
   _First = _Mid.second;
   }
  else
   {
   _Sort(_Mid.second, _Last, _Ideal, _Pred);
   _Last = _Mid.first;
   }
  }

 if (_ISORT_MAX < _Count)
  {
  ::std:: make_heap(_First, _Last, _Pred);
  ::std:: sort_heap(_First, _Last, _Pred);
  }
 else if (1 < _Count)
  _Insertion_sort(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3155);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3156);
 _Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);
 }


template<class _RanIt> inline
 void sort(_RanIt _First, _RanIt _Last)
 {
 ::std:: sort(_First, _Last, less<>());
 }


template<class _BidIt,
 class _OutIt,
 class _Diff,
 class _Pr> inline
 void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,
  _Diff _Chunk, _Diff _Count, _Pr _Pred)
 {
 for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);
  _BidIt _Mid2 = _Mid1;
  ::std:: advance(_Mid2, _Chunk);

  _Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
  _First = _Mid2;
  }

 if (_Count <= _Chunk)
  _Move(_First, _Last, _Dest);
 else
  {
  _BidIt _Mid1 = _First;
  ::std:: advance(_Mid1, _Chunk);

  _Merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
 {
 _BidIt _Mid = _First;
 for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
  {
  _BidIt _Midn = _Mid;
  ::std:: advance(_Midn, (int)_ISORT_MAX);

  _Insertion_sort(_Mid, _Midn, _Pred);
  _Mid = _Midn;
  }
 _Insertion_sort(_Mid, _Last, _Pred);

 for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
  {
  _Chunked_merge(_First, _Last, _Tempbuf._Init(),
   _Chunk, _Count, _Pred);
  _Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
   _Chunk *= 2, _Count, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
  _Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
 {
 if (_Count <= _ISORT_MAX)
  _Insertion_sort(_First, _Last, _Pred);
 else
  {
  _Diff _Count2 = (_Count + 1) / 2;
  _BidIt _Mid = _First;
  ::std:: advance(_Mid, _Count2);

  if (_Count2 <= _Tempbuf._Maxlen())
   {
   _Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
    _Tempbuf, _Pred);
   }
  else
   {
   _Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
   _Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
   }

  _Buffered_merge(_First, _Mid, _Last,
   _Count2, _Count - _Count2, _Tempbuf, _Pred);
  }
 }

template<class _BidIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *, _Pr _Pred)
 {
 _Diff _Count = 0;
 _Distance(_First, _Last, _Count);
 _Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);
 _Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);
 }

template<class _BidIt,
 class _Pr> inline
 void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3272);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3273);
 if (_First != _Last)
  _Stable_sort(_Unchecked(_First), _Unchecked(_Last),
   _Dist_type(_First), _Val_type(_First), _Pred);
 }


template<class _BidIt> inline
 void stable_sort(_BidIt _First, _BidIt _Last)
 {
 ::std:: stable_sort(_First, _Last, less<>());
 }


template<class _RanIt,
 class _Ty,
 class _Pr> inline
 void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  _Pr _Pred, _Ty *)
 {
 _Debug_range(_First, _Mid, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3293);
 _Debug_range(_Mid, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3294);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3295);
 ::std:: make_heap(_First, _Mid, _Pred);

 for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
  if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3299))
   {
   _Ty _Val = _Move(*_Next);
   _Pop_heap(_First, _Mid, _Next, _Move(_Val), _Pred,
    _Dist_type(_First));
   }
 ::std:: sort_heap(_First, _Mid, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
 {
 _Partial_sort(
  _Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
  _Val_type(_First));
 }


template<class _RanIt> inline
 void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
 {
 ::std:: partial_sort(_First, _Mid, _Last, less<>());
 }


template<class _InIt,
 class _RanIt,
 class _Diff,
 class _Ty,
 class _Pr> inline
 _RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred, _Diff *, _Ty *)
 {
 _RanIt _Mid2 = _First2;
 for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)
  *_Mid2 = *_First1;
 ::std:: make_heap(_First2, _Mid2, _Pred);

 for (; _First1 != _Last1; ++_First1)
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3339))
   _Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),
    _Ty(*_First1), _Pred);

 ::std:: sort_heap(_First2, _Mid2, _Pred);
 return (_Mid2);
 }

template<class _InIt,
 class _RanIt,
 class _Pr> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2, _Pr _Pred)
 {
 _Debug_range(_First1, _Last1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3353);
 _Debug_range(_First2, _Last2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3354);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3355);
 return (_First1 == _Last1 || _First2 == _Last2 ? _First2
  : _Rechecked(_First2,
   _Partial_sort_copy(
    _Unchecked(_First1), _Unchecked(_Last1),
    _Unchecked(_First2), _Unchecked(_Last2), _Pred,
    _Dist_type(_First2), _Val_type(_First1))));
 }


template<class _InIt,
 class _RanIt> inline
 _RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
  _RanIt _First2, _RanIt _Last2)
 {
 return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _RanIt,
 class _Pr> inline
 void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
 {
 for (; _ISORT_MAX < _Last - _First; )
  {
  pair<_RanIt, _RanIt> _Mid =
   _Unguarded_partition(_First, _Last, _Pred);

  if (_Mid.second <= _Nth)
   _First = _Mid.second;
  else if (_Mid.first <= _Nth)
   return;
  else
   _Last = _Mid.first;
  }

 _Insertion_sort(_First, _Last, _Pred);
 }

template<class _RanIt,
 class _Pr> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3399);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3400);
 _Nth_element(
  _Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
 }


template<class _RanIt> inline
 void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
 {
 ::std:: nth_element(_First, _Nth, _Last, less<>());
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3420))
   return (false);
  else if (_Pred(*_First1, *_First2))
   ++_First1;
  else
   {
   ++_First1;
   ++_First2;
   }
 return (_First2 == _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3438);
 _Debug_order(_First2, _Last2, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3439);
 return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _InIt1,
 class _InIt2> inline
 bool includes(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 return (::std:: includes(_First1, _Last1, _First2, _Last2,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3463))
   {
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   *_Dest++ = *_First1;
   ++_First1;
   ++_First2;
   }
 _Dest = ::std:: copy(_First1, _Last1, _Dest);
 return (::std:: copy(_First2, _Last2, _Dest));
 }
#line 3497 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_union2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_union(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_union2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_union(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3531);
 _Debug_order(_First2, _Last2, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3532);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3533);
 return (_Set_union2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_union(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3589))
   ++_First1;
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
   *_Dest++ = *_First1++;
   ++_First2;
   }
 return (_Dest);
 }
#line 3615 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_intersection2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_intersection(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_intersection2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_intersection(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3649);
 _Debug_order(_First2, _Last2, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3650);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3651);
 return (_Set_intersection2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_intersection(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3708))
   {
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   ++_First2;
  else
   {
   ++_First1;
   ++_First2;
   }
 return (::std:: copy(_First1, _Last1, _Dest));
 }
#line 3738 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3773);
 _Debug_order(_First2, _Last2, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3774);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3775);
 return (_Set_difference2(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_difference(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
  less<>()));
 }



template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; )
  if (_Debug_lt_pred(_Pred, *_First1, *_First2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3835))
   {
   *_Dest++ = *_First1;
   ++_First1;
   }
  else if (_Pred(*_First2, *_First1))
   {
   *_Dest++ = *_First2;
   ++_First2;
   }
  else
   {
   ++_First1;
   ++_First2;
   }
 _Dest = ::std:: copy(_First1, _Last1, _Dest);
 return (::std:: copy(_First2, _Last2, _Dest));
 }
#line 3870 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm"
template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt _Set_symmetric_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, true_type)
 {
 return (_Set_symmetric_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
__declspec(deprecated("Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. " "To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'"))
 _OutIt _Set_symmetric_difference2(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred, false_type)
 {
 return (_Set_symmetric_difference(_First1, _Last1,
  _First2, _Last2,
  _Dest, _Pred));
 }

template<class _InIt1,
 class _InIt2,
 class _OutIt,
 class _Pr> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest, _Pr _Pred)
 {
 _Debug_order(_First1, _Last1, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3905);
 _Debug_order(_First2, _Last2, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3906);
 _Debug_pointer(_Dest, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3907);
 return (_Set_symmetric_difference2(
  _Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2),
  _Dest, _Pred, _Is_checked(_Dest)));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize,
 class _Pr> inline
 _OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize], _Pr _Pred)
 {
 return (_Unchecked(
  set_symmetric_difference(_First1, _Last1,
   _First2, _Last2,
   _Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));
 }




template<class _InIt1,
 class _InIt2,
 class _OutIt> inline
 _OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutIt _Dest)
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
  _Dest, less<>()));
 }


template<class _InIt1,
 class _InIt2,
 class _OutTy,
 size_t _OutSize> inline
 _OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2,
  _OutTy (&_Dest)[_OutSize])
 {
 return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
  _Dest, less<>()));
 }



template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Debug_lt_pred(_Pred, *_Found, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3966))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3975);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3976);
 return (_Rechecked(_First,
  _Max_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt max_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: max_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _FwdIt _Found = _First;
 if (_First != _Last)
  for (; ++_First != _Last; )
   if (_Debug_lt_pred(_Pred, *_First, *_Found, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 3996))
    _Found = _First;
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4005);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4006);
 return (_Rechecked(_First,
  _Min_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }


template<class _FwdIt> inline
 _FwdIt min_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: min_element(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  _Minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 pair<_FwdIt, _FwdIt> _Found(_First, _First);

 if (_First != _Last)
  for (; ++_First != _Last; )
   {
   _FwdIt _Next = _First;
   if (++_Next == _Last)
    {
    if (_Debug_lt_pred(_Pred, *_First, *_Found.first, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4032))
     _Found.first = _First;
    else if (!_Debug_lt_pred(_Pred, *_First, *_Found.second, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4034))
     _Found.second = _First;
    }
   else
    {
    if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4039))
     {
     if (_Debug_lt_pred(_Pred, *_Next, *_Found.first, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4041))
      _Found.first = _Next;
     if (!_Debug_lt_pred(_Pred, *_First, *_Found.second, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4043))
      _Found.second = _First;
     }
    else
     {
     if (_Debug_lt_pred(_Pred, *_First, *_Found.first, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4048))
      _Found.first = _First;
     if (!_Debug_lt_pred(_Pred, *_Next, *_Found.second, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4050))
      _Found.second = _Next;
     }
    _First = _Next;
    }
   }
 return (_Found);
 }

template<class _FwdIt,
 class _Pr> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4064);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4065);
 pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
  _Minmax_element(_Unchecked(_First), _Unchecked(_Last), _Pred));
 return (pair<_FwdIt, _FwdIt>(
  _Rechecked(_First, _Ans.first),
  _Rechecked(_Last, _Ans.second)));
 }


template<class _FwdIt> inline
 pair<_FwdIt, _FwdIt>
  minmax_element(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: minmax_element(_First, _Last, less<>()));
 }


template<class _Ty> inline



 const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Debug_lt(_Left, _Right, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4088) ? _Right : _Left);
 }

template<class _Ty> inline
 _Ty (max)(::std:: initializer_list<_Ty> _Ilist)
 {
 const _Ty *_Res = ::std:: max_element(_Ilist.begin(), _Ilist.end());
 return (*_Res);
 }


template<class _Ty,
 class _Pr> inline
 const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Debug_lt_pred(_Pred, _Left, _Right, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4103) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline
 _Ty (max)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = ::std:: max_element(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline



 const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Debug_lt(_Right, _Left, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4121) ? _Right : _Left);
 }

template<class _Ty> inline
 _Ty (min)(::std:: initializer_list<_Ty> _Ilist)
 {
 const _Ty *_Res = ::std:: min_element(_Ilist.begin(), _Ilist.end());
 return (*_Res);
 }


template<class _Ty,
 class _Pr> inline
 const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Debug_lt_pred(_Pred, _Right, _Left, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4136) ? _Right : _Left);
 }

template<class _Ty,
 class _Pr> inline
 _Ty (min)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_Res = ::std:: min_element(_Ilist.begin(), _Ilist.end(), _Pred);
 return (*_Res);
 }


template<class _Ty> inline
 pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty> inline
 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist)
 {
 pair<const _Ty *, const _Ty *> _Res = ::std:: minmax_element(
  _Ilist.begin(), _Ilist.end());
 return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
 }


template<class _Ty,
 class _Pr> inline
 pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left)
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }

template<class _Ty,
 class _Pr> inline
 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 pair<const _Ty *, const _Ty *> _Res = ::std:: minmax_element(
  _Ilist.begin(), _Ilist.end(), _Pred);
 return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Debug_lt_pred(_Pred, *--_Next, *_Next1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4197))
   {
   _BidIt _Mid = _Last;
   for (; !_Debug_lt_pred(_Pred, *_Next, *--_Mid, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4200); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   ::std:: reverse(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   ::std:: reverse(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4219);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4220);
 return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool next_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: next_permutation(_First, _Last, less<>()));
 }


template<class _BidIt,
 class _Pr> inline
 bool _Prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _BidIt _Next = _Last;
 if (_First == _Last || _First == --_Next)
  return (false);

 for (; ; )
  {
  _BidIt _Next1 = _Next;
  if (_Debug_lt_pred(_Pred, *_Next1, *--_Next, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4243))
   {
   _BidIt _Mid = _Last;
   for (; !_Debug_lt_pred(_Pred, *--_Mid, *_Next, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4246); )
    ;
   ::std:: iter_swap(_Next, _Mid);
   ::std:: reverse(_Next1, _Last);
   return (true);
   }

  if (_Next == _First)
   {
   ::std:: reverse(_First, _Last);
   return (false);
   }
  }
 }

template<class _BidIt,
 class _Pr> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4265);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4266);
 return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
 }


template<class _BidIt> inline
 bool prev_permutation(_BidIt _First, _BidIt _Last)
 {
 return (::std:: prev_permutation(_First, _Last, less<>()));
 }


template<class _RanIt,
 class _Diff,
 class _Pr> inline
 _RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *)
 {
 _Diff _Size = _Last - _First;

 if (2 <= _Size)
  for (_Diff _Off = 0; ++_Off < _Size; )
   if (_Debug_lt_pred(_Pred, *(_First + (_Off - 1) / 2), *(_First + _Off), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4288))

    return (_First + _Off);
 return (_Last);
 }

template<class _RanIt,
 class _Pr>
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4297);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4298);
 return (_Rechecked(_First,
  _Is_heap_until(_Unchecked(_First), _Unchecked(_Last), _Pred,
   _Dist_type(_First))));
 }

template<class _RanIt,
 class _Pr>
 bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
 {
 return (_Is_heap_until(_First, _Last, _Pred, _Dist_type(_First))
  == _Last);
 }


template<class _RanIt>
 _RanIt is_heap_until(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap_until(_First, _Last, less<>()));
 }

template<class _RanIt>
 bool is_heap(_RanIt _First, _RanIt _Last)
 {
 return (::std:: is_heap(_First, _Last, less<>()));
 }


template<class _FwdIt,
 class _Pr> inline
 _FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 if (_First != _Last)
  for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
   if (_Debug_lt_pred(_Pred, *_Next, *_First, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4332))
    return (_Next);
 return (_Last);
 }

template<class _FwdIt,
 class _Pr> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4341);
 _Debug_pointer(_Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\algorithm", 4342);
 return (_Rechecked(_First,
  _Is_sorted_until(_Unchecked(_First), _Unchecked(_Last), _Pred)));
 }

template<class _FwdIt,
 class _Pr> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
 {
 return (::std:: is_sorted_until(_First, _Last, _Pred) == _Last);
 }


template<class _FwdIt> inline
 _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted_until(_First, _Last, less<>()));
 }

template<class _FwdIt> inline
 bool is_sorted(_FwdIt _First, _FwdIt _Last)
 {
 return (::std:: is_sorted(_First, _Last, less<>()));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\queue"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)

namespace std {
#line 26 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"
template<class _Mydeque>
 class _Deque_unchecked_const_iterator

 {
public:
 typedef _Deque_unchecked_const_iterator<_Mydeque> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mydeque::value_type value_type;
 typedef typename _Mydeque::size_type size_type;
 typedef typename _Mydeque::difference_type difference_type;
 typedef typename _Mydeque::const_pointer pointer;
 typedef typename _Mydeque::const_reference reference;

 _Deque_unchecked_const_iterator()
  {
  _Mycont = 0;
  _Myoff = 0;
  }

 _Deque_unchecked_const_iterator(size_type _Off,
  const _Container_base12 *_Pdeque)
  {
  _Mycont = (_Mydeque *)_Pdeque;
  _Myoff = _Off;
  }

 reference operator*() const
  {
  size_type _Block = _Mycont->_Getblock(_Myoff);
  size_type _Off = _Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
  return (_Mycont->_Map[_Block][_Off]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++_Myoff;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --_Myoff;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  return (_Right._Myoff <= _Myoff
   ? _Myoff - _Right._Myoff
   : -(difference_type)(_Right._Myoff - _Myoff));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  return (_Myoff < _Right._Myoff);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Mycont);
  }

 const _Mydeque *_Mycont;
 size_type _Myoff;
 };

template<class _Mydeque> inline
 _Deque_unchecked_const_iterator<_Mydeque> operator+(
  typename _Deque_unchecked_const_iterator<_Mydeque>
   ::difference_type _Off,
  _Deque_unchecked_const_iterator<_Mydeque> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mydeque>
 class _Deque_unchecked_iterator
  : public _Deque_unchecked_const_iterator<_Mydeque>
 {
public:
 typedef _Deque_unchecked_iterator<_Mydeque> _Myiter;
 typedef _Deque_unchecked_const_iterator<_Mydeque> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mydeque::value_type value_type;
 typedef typename _Mydeque::size_type size_type;
 typedef typename _Mydeque::difference_type difference_type;
 typedef typename _Mydeque::pointer pointer;
 typedef typename _Mydeque::reference reference;

 _Deque_unchecked_iterator()
  {
  }

 _Deque_unchecked_iterator(size_type _Off,
  const _Container_base12 *_Pdeque)
  : _Mybase(_Off, _Pdeque)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mydeque> inline
 _Deque_unchecked_iterator<_Mydeque> operator+(
  typename _Deque_unchecked_iterator<_Mydeque>
   ::difference_type _Off,
  _Deque_unchecked_iterator<_Mydeque> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mydeque>
 class _Deque_const_iterator
  : public _Iterator_base12
 {
public:
 typedef _Deque_const_iterator<_Mydeque> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mydeque::value_type value_type;
 typedef typename _Mydeque::size_type size_type;
 typedef typename _Mydeque::difference_type difference_type;
 typedef typename _Mydeque::const_pointer pointer;
 typedef typename _Mydeque::const_reference reference;

 typedef _Mydeque _Mydeque_t;
 enum {_EEN_DS = (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)};
 _Deque_const_iterator()
  {
  _Setcont(0);
  _Myoff = 0;
  }

 _Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
  {
  _Setcont((_Mydeque *)_Pdeque);
  _Myoff = _Off;
  }

 typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Myoff = _Right._Myoff;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(_Myoff, this->_Getcont()));
  }

 reference operator*() const
  {
  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());


  if (_Mycont == 0
   || this->_Myoff < _Mycont->_Myoff
   || _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
  {
  _Debug_message(L"deque iterator not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 330);
  { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 331, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 331, 0); };
  }







                                 ;

  size_type _Block = _Mycont->_Getblock(_Myoff);
  size_type _Off = _Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
  return (_Mycont->_Map[_Block][_Off]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
  {
  _Debug_message(L"deque iterator not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 359);
  { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 360, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 360, 0); };
  }
#line 370 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"
  ++_Myoff;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || this->_Myoff <= _Mycont->_Myoff)
  {
  _Debug_message(L"deque iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 388);
  { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 389, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 389, 0); };
  }







  --_Myoff;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {

  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || this->_Myoff + _Off < _Mycont->_Myoff
   || _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
   {
   _Debug_message(L"deque iterator + offset out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 417);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 418, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 418, 0); };
   }
#line 428 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"
  _Myoff += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (_Right._Myoff <= this->_Myoff
   ? this->_Myoff - _Right._Myoff
   : -(difference_type)(_Right._Myoff - this->_Myoff));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Myoff < _Right._Myoff);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }


 void _Compat(const _Myiter& _Right) const
  {
  _Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
  if (_Mycont == 0
   || _Mycont != _Right._Getcont())
   {
   _Debug_message(L"deque iterators incompatible", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 501);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 502, 0, L"%s", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 502, 0); };
   }
  }

 void _Setcont(const _Mydeque *_Pdeque)
  {
  this->_Adopt(_Pdeque);
  }
#line 535 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"
 size_type _Myoff;
 };

template<class _Mydeque> inline
 typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
  _Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mydeque> inline
 _Deque_const_iterator<_Mydeque>&
  _Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
   typename _Deque_const_iterator<_Mydeque>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mydeque> inline
 _Deque_const_iterator<_Mydeque> operator+(
  typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
  _Deque_const_iterator<_Mydeque> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mydeque>
 class _Deque_iterator
  : public _Deque_const_iterator<_Mydeque>
  {
public:
 typedef _Deque_iterator<_Mydeque> _Myiter;
 typedef _Deque_const_iterator<_Mydeque> _Mybase;
 typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mydeque::value_type value_type;
 typedef typename _Mydeque::size_type size_type;
 typedef typename _Mydeque::difference_type difference_type;
 typedef typename _Mydeque::pointer pointer;
 typedef typename _Mydeque::reference reference;

 _Deque_iterator()
  {
  }

 _Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
  : _Mybase(_Off, _Pdeque)
  {
  }

 typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Myoff = _Right._Myoff;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Myoff, this->_Getcont()));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  this->_Myoff += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mydeque> inline
 typename _Deque_iterator<_Mydeque>::_Unchecked_type
  _Unchecked(_Deque_iterator<_Mydeque> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mydeque> inline
 _Deque_iterator<_Mydeque>&
  _Rechecked(_Deque_iterator<_Mydeque>& _Iter,
   typename _Deque_iterator<_Mydeque>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mydeque> inline
 _Deque_iterator<_Mydeque> operator+(
  typename _Deque_iterator<_Mydeque>::difference_type _Off,
  _Deque_iterator<_Mydeque> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Mapptr_type>
 struct _Deque_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 typedef _Mapptr_type _Mapptr;
 };

template<class _Ty>
 struct _Deque_simple_types
  : public _Simple_types<_Ty>
 {
 typedef _Ty **_Mapptr;
 };

template<class _Ty,
 class _Alloc0>
 struct _Deque_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Deque_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Alty::pointer _Tptr;
 typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
 typedef typename _Alpty::pointer _Mapptr;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Deque_simple_types<typename _Alty::value_type>,
  _Deque_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference,
   _Mapptr> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Deque_val
  : public _Container_base12
 {
public:
 typedef _Deque_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;
 typedef typename _Val_types::_Mapptr _Mapptr;

 typedef _Deque_iterator<_Myt> iterator;
 typedef _Deque_const_iterator<_Myt> const_iterator;

 _Deque_val()
  {
  _Map = _Mapptr();
  _Mapsize = 0;
  _Myoff = 0;
  _Mysize = 0;
  }

 size_type _Getblock(size_type _Off) const
  {

  return ((_Off / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) & (this->_Mapsize - 1));
  }

 _Mapptr _Map;
 size_type _Mapsize;
 size_type _Myoff;
 size_type _Mysize;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _Deque_alloc
  : public _Deque_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alty _Alval;

 typedef _Deque_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;

 typedef typename _Alloc_types::_Alpty _Alpty;

 _Deque_alloc(const _Alloc& _Al = _Alloc())
  : _Alval(_Al)
  {
  _Alloc_proxy();
  }

 ~_Deque_alloc() throw ()
  {
  _Free_proxy();
  }

 void _Change_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  this->_Alval = _Al;
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alval, _Right._Alval);
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alval);
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alval);
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }

 _Alty& _Getal()
  {
  return (this->_Alval);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alval);
  }
 };

template<class _Alloc_types>
 class _Deque_alloc<false, _Alloc_types>
  : public _Deque_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _Deque_alloc<false, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;

 typedef typename _Alloc_types::_Alty _Alty;

 typedef typename _Alloc_types::_Alpty _Alpty;

 _Deque_alloc(const _Alloc& = _Alloc())
  {
  _Alloc_proxy();
  }

 ~_Deque_alloc() throw ()
  {
  _Free_proxy();
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }

 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class deque
  : public _Deque_alloc<!is_empty<_Alloc>::value,
   _Deque_base_types<_Ty, _Alloc> >
 {
public:
 typedef deque<_Ty, _Alloc> _Myt;
 typedef _Deque_alloc<!is_empty<_Alloc>::value,
  _Deque_base_types<_Ty, _Alloc> > _Mybase;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Alpty _Alpty;
 typedef typename _Mybase::_Mapptr _Mapptr;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _EEM_DS = (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
 enum {_EEN_DS = (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)};
 deque()
  : _Mybase()
  {
  }

 explicit deque(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  }

 explicit deque(size_type _Count)
  : _Mybase()
  {
  resize(_Count);
  }

 deque(size_type _Count, const value_type& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, _Val);
  }

 deque(size_type _Count, const value_type& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, _Val);
  }

 deque(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  _Construct(_Right.begin(), _Right.end());
  }

 deque(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_Right.begin(), _Right.end());
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  deque(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  deque(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  try {

  for (; _First != _Last; ++_First)
   emplace_back(*_First);

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 void _Construct_n(size_type _Count, const value_type& _Val)
  {
  try {
  for (; 0 < _Count; --_Count)
   push_back(_Val);
  } catch (...) {
  _Tidy();
  throw;
  }
  }
#line 1063 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"
 deque(_Myt&& _Right)
  : _Mybase(_Right._Getal())
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 deque(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Tidy();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());
   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all((_Myt&)_Right);
  this->_Map = _Right._Map;
  this->_Mapsize = _Right._Mapsize;
  this->_Myoff = _Right._Myoff;
  this->_Mysize = _Right._Mysize;

  _Right._Map = _Mapptr();
  _Right._Mapsize = 0;
  _Right._Myoff = 0;
  _Right._Mysize = 0;
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 void push_front(value_type&& _Val)
  {
  this->_Orphan_all();
  if (this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); this->_Myoff &= this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1; size_type _Newoff = this->_Myoff != 0 ? this->_Myoff : this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); size_type _Block = this->_Getblock(--_Newoff); if (this->_Map[_Block] == pointer()) this->_Map[_Block] = this->_Getal().allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  this->_Getal().construct(
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<value_type>(_Val));
  this->_Myoff = _Newoff; ++this->_Mysize;
  }

 void push_back(value_type&& _Val)
  {
  this->_Orphan_all();
  if ((this->_Myoff + this->_Mysize) % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); this->_Myoff &= this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1; size_type _Newoff = this->_Myoff + this->_Mysize; size_type _Block = this->_Getblock(_Newoff); if (this->_Map[_Block] == pointer()) this->_Map[_Block] = this->_Getal().allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  this->_Getal().construct(
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<value_type>(_Val));
  ++this->_Mysize;
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  void emplace_front(_Valty&&... _Val)
  {
  this->_Orphan_all();
  if (this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); this->_Myoff &= this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1; size_type _Newoff = this->_Myoff != 0 ? this->_Myoff : this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); size_type _Block = this->_Getblock(--_Newoff); if (this->_Map[_Block] == pointer()) this->_Map[_Block] = this->_Getal().allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  this->_Getal().construct(
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<_Valty>(_Val)...);
  this->_Myoff = _Newoff; ++this->_Mysize;
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  this->_Orphan_all();
  if ((this->_Myoff + this->_Mysize) % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); this->_Myoff &= this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1; size_type _Newoff = this->_Myoff + this->_Mysize; size_type _Block = this->_Getblock(_Newoff); if (this->_Map[_Block] == pointer()) this->_Map[_Block] = this->_Getal().allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  this->_Getal().construct(
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1),
   ::std:: forward<_Valty>(_Val)...);
  ++this->_Mysize;
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  size_type _Off = _Where - begin();


  if (this->_Mysize < _Off)
   _Debug_message(L"deque emplace iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1172);


  if (_Off <= this->_Mysize / 2)
   {
   emplace_front(::std:: forward<_Valty>(_Val)...);
   ::std:: rotate(begin(), begin() + 1, begin() + 1 + _Off);
   }
  else
   {
   emplace_back(::std:: forward<_Valty>(_Val)...);
   ::std:: rotate(begin() + _Off, end() - 1, end());
   }
  return (begin() + _Off);
  }


 deque(::std:: initializer_list<value_type> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<value_type> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~deque() throw ()
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy();
    this->_Change_alloc(_Right._Getal());
    }

   this->_Orphan_all();

   if (_Right._Mysize == 0)
    clear();
   else if (_Right._Mysize <= this->_Mysize)
    {
    iterator _Mid = ::std:: copy(_Right.begin(), _Right.end(),
     begin());
    erase(_Mid, end());
    }
   else
    {
    const_iterator _Mid = _Right.begin() + this->_Mysize;
    ::std:: copy(_Right.begin(), _Mid, begin());
    insert(end(), _Mid, _Right.end());
    }
   }
  return (*this);
  }

 iterator begin() throw ()
  {
  return (iterator(this->_Myoff, this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(this->_Myoff, this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Myoff + this->_Mysize, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Myoff + this->_Mysize, this));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Myoff, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  size_type _Oldcapacity = (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) * this->_Mapsize;
  size_type _Newcapacity = _Oldcapacity / 2;

  if (_Newcapacity < (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) * 8)
   _Newcapacity = (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) * 8;

  if ((empty() && 0 < this->_Mapsize)
   || (!empty()
    && size() <= _Newcapacity
    && _Newcapacity < _Oldcapacity))
   {
   _Myt _Tmp(::std:: make_move_iterator(begin()),
    ::std:: make_move_iterator(end()));
   swap(_Tmp);
   }
  }

 void resize(size_type _Newsize)
  {
  while (this->_Mysize < _Newsize)
   emplace_back();

  while (_Newsize < this->_Mysize)
   pop_back();
  }

 void resize(size_type _Newsize, const value_type& _Val)
  {
  while (this->_Mysize < _Newsize)
   push_back(_Val);
  while (_Newsize < this->_Mysize)
   pop_back();
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  return (this->_Getal().max_size());
  }

 bool empty() const throw ()
  {
  return (this->_Mysize == 0);
  }

 allocator_type get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 const_reference at(size_type _Pos) const
  {
  if (this->_Mysize <= _Pos)
   _Xran();
  return (*(begin() + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (this->_Mysize <= _Pos)
   _Xran();
  return (*(begin() + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {

  if (this->_Mysize <= _Pos)
   _Debug_message(L"deque subscript out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1388);


  return (*(begin() + _Pos));
  }

 reference operator[](size_type _Pos)
  {

  if (this->_Mysize <= _Pos)
   _Debug_message(L"deque subscript out of range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1398);


  return (*(begin() + _Pos));
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_front(const value_type& _Val)
  {
  this->_Orphan_all();
  if (this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); this->_Myoff &= this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1; size_type _Newoff = this->_Myoff != 0 ? this->_Myoff : this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1); size_type _Block = this->_Getblock(--_Newoff); if (this->_Map[_Block] == pointer()) this->_Map[_Block] = this->_Getal().allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  this->_Getal().construct(
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1), _Val);
  this->_Myoff = _Newoff; ++this->_Mysize;
  }

 void pop_front()
  {

  if (empty())
   _Debug_message(L"deque empty before pop", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1437);
  else
   {
   _Orphan_off(this->_Myoff);
   size_type _Block = this->_Getblock(this->_Myoff);
   this->_Getal().destroy(
    this->_Map[_Block] + this->_Myoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
   if (--this->_Mysize == 0)
    this->_Myoff = 0;
   else
    ++this->_Myoff;
   }
#line 1459 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"
  }

 void push_back(const value_type& _Val)
  {
  this->_Orphan_all();
  if ((this->_Myoff + this->_Mysize) % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) == 0 && this->_Mapsize <= (this->_Mysize + (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1)) _Growmap(1); this->_Myoff &= this->_Mapsize * (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - 1; size_type _Newoff = this->_Myoff + this->_Mysize; size_type _Block = this->_Getblock(_Newoff); if (this->_Map[_Block] == pointer()) this->_Map[_Block] = this->_Getal().allocate((sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
  this->_Getal().construct(
   this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1), _Val);
  ++this->_Mysize;
  }

 void pop_back()
  {

  if (empty())
   _Debug_message(L"deque empty before pop", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1474);
  else
   {
   size_type _Newoff = this->_Myoff + this->_Mysize - 1;
   _Orphan_off(_Newoff);
   size_type _Block = this->_Getblock(_Newoff);
   this->_Getal().destroy(
    this->_Map[_Block] + _Newoff % (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
   if (--this->_Mysize == 0)
    this->_Myoff = 0;
   }
#line 1494 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque"
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  clear();

  for (; _First != _Last; ++_First)
   emplace_back(*_First);
  }

 void assign(size_type _Count, const value_type& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where,
  const value_type& _Val)
  {
  size_type _Off = _Where - begin();


  if (this->_Mysize < _Off)
   _Debug_message(L"deque insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1520);


  if (_Off <= this->_Mysize / 2)
   {
   push_front(_Val);
   ::std:: rotate(begin(), begin() + 1, begin() + 1 + _Off);
   }
  else
   {
   push_back(_Val);
   ::std:: rotate(begin() + _Off, end() - 1, end());
   }
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const value_type& _Val)
  {
  size_type _Off = _Where - begin();
  _Insert_n(_Where, _Count, _Val);
  return (begin() + _Off);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();


  if (this->_Mysize < _Off)
   _Debug_message(L"deque insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1553);
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1554);


  size_type _Oldsize = this->_Mysize;

  if (_First == _Last)
   ;
  else if (_Off <= this->_Mysize / 2)
   {
   try {
   for (; _First != _Last; ++_First)
    push_front(*_First);

   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_front();
   throw;
   }

   size_type _Num = this->_Mysize - _Oldsize;
   ::std:: reverse(begin(), begin() + _Num);
   ::std:: rotate(begin(), begin() + _Num, begin() + _Num + _Off);
   }
  else
   {
   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_back();
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  return (begin() + _Off);
  }

 iterator erase(const_iterator _Where)
  {
  return (erase(_Where, _Where + 1));
  }

 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);


  if (_Last < _First
   || _First < begin() || end() < _Last)
   _Debug_message(L"deque erase iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1608);
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1609);

  size_type _Off = _First - begin();
  size_type _Count = _Last - _First;
  bool _Moved = 0 < _Off && _Off + _Count < this->_Mysize;






  if (_Off < (size_type)(end() - _Last))
   {
   _Move_backward(begin(), _First, _Last);
   for (; 0 < _Count; --_Count)
    pop_front();
   }
  else
   {
   _Move(_Last, end(), _First);
   for (; 0 < _Count; --_Count)
    pop_back();
   }


  if (_Moved)
   this->_Orphan_all();


  return (begin() + _Off);
  }

 void clear() throw ()
  {
  _Tidy();
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Map, _Right._Map);
   ::std:: swap(this->_Mapsize, _Right._Mapsize);
   ::std:: swap(this->_Myoff, _Right._Myoff);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_adl(this->_Map, _Right._Map);
   ::std:: swap(this->_Mapsize, _Right._Mapsize);
   ::std:: swap(this->_Myoff, _Right._Myoff);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }
  else
   {

   _Debug_message(L"deque containers incompatible for swap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1670);




   }

  }

protected:
 void _Insert_n(const_iterator _Where,
  size_type _Count, const value_type& _Val)
  {
  iterator _Mid;
  size_type _Num;
  size_type _Off = _Where - begin();
  size_type _Rem = this->_Mysize - _Off;
  size_type _Oldsize = this->_Mysize;


  if (this->_Mysize < _Off)
   _Debug_message(L"deque insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\deque", 1691);


  if (_Off < _Rem)
   {
   try {
   if (_Off < _Count)
    {
    for (_Num = _Count - _Off; 0 < _Num; --_Num)
     push_front(_Val);
    for (_Num = _Off; 0 < _Num; --_Num)
     push_front(begin()[_Count - 1]);

    _Mid = begin() + _Count;
    ::std:: fill(_Mid, _Mid + _Off,
     _Val);
    }
   else
    {
    for (_Num = _Count; 0 < _Num; --_Num)
     push_front(begin()[_Count - 1]);

    _Mid = begin() + _Count;
    value_type _Tmp = _Val;
    _Move(_Mid + _Count, _Mid + _Off,
     _Mid);
    ::std:: fill(begin() + _Off, _Mid + _Off,
     _Tmp);
    }
   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_front();
   throw;
   }
   }
  else
   {
   try {
   if (_Rem < _Count)
    {
    for (_Num = _Count - _Rem; 0 < _Num; --_Num)
     push_back(_Val);
    for (_Num = 0; _Num < _Rem; ++_Num)
     push_back(begin()[_Off + _Num]);

    _Mid = begin() + _Off;
    ::std:: fill(_Mid, _Mid + _Rem,
     _Val);
    }
   else
    {
    for (_Num = 0; _Num < _Count; ++_Num)
     push_back(begin()[_Off + _Rem
      - _Count + _Num]);

    _Mid = begin() + _Off;
    value_type _Tmp = _Val;
    _Move_backward(_Mid, _Mid + _Rem - _Count,
     _Mid + _Rem);
    ::std:: fill(_Mid, _Mid + _Count,
     _Tmp);
    }
   } catch (...) {
   for (; _Oldsize < this->_Mysize; )
    pop_back();
   throw;
   }
   }
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("deque<T> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid deque<T> subscript");
  }

 void _Growmap(size_type _Count)
  {
  static_assert(1 < 8,
   "The _Xlen() test should always be performed.");

  typedef typename _Alpty::pointer _Blockptr;
  _Alpty _Almap(this->_Getal());
  size_type _Newsize = 0 < this->_Mapsize ? this->_Mapsize : 1;
  while (_Newsize - this->_Mapsize < _Count || _Newsize < 8)
   {
   if (max_size() / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1) - _Newsize < _Newsize)
    _Xlen();
   _Newsize *= 2;
   }
  _Count = _Newsize - this->_Mapsize;

  size_type _Myboff = this->_Myoff / (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1);
  _Mapptr _Newmap = _Almap.allocate(this->_Mapsize + _Count);
  _Mapptr _Myptr = _Newmap + _Myboff;

  _Myptr = _Uninitialized_copy(this->_Map + _Myboff,
   this->_Map + this->_Mapsize,
   _Myptr, _Almap);
  if (_Myboff <= _Count)
   {
   _Myptr = _Uninitialized_copy(this->_Map,
    this->_Map + _Myboff,
    _Myptr, _Almap);
   _Uninitialized_default_fill_n(_Myptr, _Count - _Myboff,
    _Almap);
   _Uninitialized_default_fill_n(_Newmap, _Myboff,
    _Almap);
   }
  else
   {
   _Uninitialized_copy(this->_Map,
    this->_Map + _Count,
    _Myptr, _Almap);
   _Myptr = _Uninitialized_copy(this->_Map + _Count,
    this->_Map + _Myboff,
    _Newmap, _Almap);
   _Uninitialized_default_fill_n(_Myptr, _Count,
    _Almap);
   }

  _Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
   _Almap);
  if (this->_Map != _Mapptr())
   _Almap.deallocate(this->_Map,
    this->_Mapsize);

  this->_Map = _Newmap;
  this->_Mapsize += _Count;
  }

 void _Tidy()
  {
  _Alpty _Almap(this->_Getal());
  while (!empty())
   pop_back();
  for (size_type _Block = this->_Mapsize; 0 < _Block; )
   {
   if (this->_Map[--_Block] != pointer())
    {
    this->_Getal().deallocate(this->_Map[_Block], (sizeof (value_type) <= 1 ? 16 : sizeof (value_type) <= 2 ? 8 : sizeof (value_type) <= 4 ? 4 : sizeof (value_type) <= 8 ? 2 : 1));
    this->_Getal().destroy(&this->_Map[_Block]);
    }
   }

  if (this->_Map != _Mapptr())
   _Almap.deallocate(this->_Map,
    this->_Mapsize);
  this->_Mapsize = 0;
  this->_Map = _Mapptr();
  }


 void _Orphan_off(size_type _Offlo) const
  {
  size_type _Offhigh = this->_Myoff + this->_Mysize <= _Offlo + 1
   ? (size_type)(-1) : _Offlo;
  if (_Offlo == this->_Myoff)
   _Offlo = 0;

  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Myoff < _Offlo
     || _Offhigh < (*_Pnext)->_Myoff)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }

 };



template<class _Ty,
 class _Alloc> inline
 void swap(deque<_Ty, _Alloc>& _Left, deque<_Ty, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const deque<_Ty, _Alloc>& _Left,
  const deque<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
  }
}


#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\queue"



#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {

template<class _Ty,
 class _Container = deque<_Ty> >
 class queue
 {
public:
 typedef queue<_Ty, _Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type value_type;
 typedef typename _Container::size_type size_type;
 typedef typename _Container::reference reference;
 typedef typename _Container::const_reference const_reference;

 queue()
  : c()
  {
  }

 queue(const _Myt& _Right)
  : c(_Right.c)
  {
  }

 explicit queue(const _Container& _Cont)
  : c(_Cont)
  {
  }

 _Myt& operator=(const _Myt& _Right)
  {
  c = _Right.c;
  return (*this);
  }


 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  explicit queue(const _Alloc& _Al)
  : c(_Al)
  {
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  queue(const _Container& _Cont, const _Alloc& _Al)
  : c(_Cont, _Al)
  {
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  queue(const _Myt& _Right, const _Alloc& _Al)
  : c(_Right.c, _Al)
  {
  }

 queue(_Myt&& _Right)

  : c(::std:: move(_Right.c))
  {
  }

 explicit queue(_Container&& _Cont)
  : c(::std:: move(_Cont))
  {
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  queue(_Container&& _Cont, const _Alloc& _Al)
  : c(::std:: move(_Cont), _Al)
  {
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
    void>::type>
  queue(_Myt&& _Right, const _Alloc& _Al)
  : c(::std:: move(_Right.c), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)

  {
  c = ::std:: move(_Right.c);
  return (*this);
  }

 void push(value_type&& _Val)
  {
  c.push_back(::std:: move(_Val));
  }

 template<class... _Valty>
  void emplace(_Valty&&... _Val)
  {
  c.emplace_back(::std:: forward<_Valty>(_Val)...);
  }


 bool empty() const
  {
  return (c.empty());
  }

 size_type size() const
  {
  return (c.size());
  }

 reference front()
  {
  return (c.front());
  }

 const_reference front() const
  {
  return (c.front());
  }

 reference back()
  {
  return (c.back());
  }

 const_reference back() const
  {
  return (c.back());
  }

 void push(const value_type& _Val)
  {
  c.push_back(_Val);
  }

 void pop()
  {
  c.pop_front();
  }

 const _Container& _Get_container() const
  {
  return (c);
  }

 void swap(_Myt& _Right)

  {
  _Swap_adl(c, _Right.c);
  }

protected:
 _Container c;
 };


template<class _Ty,
 class _Container> inline
 void swap(queue<_Ty, _Container>& _Left,
  queue<_Ty, _Container>& _Right)

 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Container> inline
 bool operator==(const queue<_Ty, _Container>& _Left,
  const queue<_Ty, _Container>& _Right)
 {
 return (_Left._Get_container() == _Right._Get_container());
 }

template<class _Ty,
 class _Container> inline
 bool operator!=(const queue<_Ty, _Container>& _Left,
  const queue<_Ty, _Container>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Container> inline
 bool operator<(const queue<_Ty, _Container>& _Left,
  const queue<_Ty, _Container>& _Right)
 {
 return (_Left._Get_container() < _Right._Get_container());
 }

template<class _Ty,
 class _Container> inline
 bool operator>(const queue<_Ty, _Container>& _Left,
  const queue<_Ty, _Container>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Container> inline
 bool operator<=(const queue<_Ty, _Container>& _Left,
  const queue<_Ty, _Container>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Container> inline
 bool operator>=(const queue<_Ty, _Container>& _Left,
  const queue<_Ty, _Container>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _Ty,
 class _Container = vector<_Ty>,
 class _Pr = less<typename _Container::value_type> >
 class priority_queue
 {
public:
 typedef priority_queue<_Ty, _Container, _Pr> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type value_type;
 typedef typename _Container::size_type size_type;
 typedef typename _Container::reference reference;
 typedef typename _Container::const_reference const_reference;

 priority_queue()
  : c(), comp()
  {
  }

 priority_queue(const _Myt& _Right)
  : c(_Right.c), comp(_Right.comp)
  {
  }

 explicit priority_queue(const _Pr& _Pred)
  : c(), comp(_Pred)
  {
  }

 priority_queue(const _Pr& _Pred, const _Container& _Cont)
  : c(_Cont), comp(_Pred)
  {
  make_heap(c.begin(), c.end(), comp);
  }

 template<class _InIt>
  priority_queue(_InIt _First, _InIt _Last)
  : c(_First, _Last), comp()
  {
  make_heap(c.begin(), c.end(), comp);
  }

 template<class _InIt>
  priority_queue(_InIt _First, _InIt _Last, const _Pr& _Pred)
  : c(_First, _Last), comp(_Pred)
  {
  make_heap(c.begin(), c.end(), comp);
  }

 template<class _InIt>
  priority_queue(_InIt _First, _InIt _Last, const _Pr& _Pred,
   const _Container& _Cont)
  : c(_Cont), comp(_Pred)
  {
  c.insert(c.end(), _First, _Last);
  make_heap(c.begin(), c.end(), comp);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  c = _Right.c;
  comp = _Right.comp;
  return (*this);
  }


 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  explicit priority_queue(const _Alloc& _Al)
  : c(_Al)
  {
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  priority_queue(const _Pr& _Pred, const _Alloc& _Al)
  : c(_Al), comp(_Pred)
  {
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  priority_queue(const _Pr& _Pred, const _Container& _Cont,
   const _Alloc& _Al)
  : c(_Cont, _Al), comp(_Pred)
  {
  make_heap(c.begin(), c.end(), comp);
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  priority_queue(const _Myt& _Right, const _Alloc& _Al)
  : c(_Right.c, _Al), comp(_Right.comp)
  {
  }

 priority_queue(_Myt&& _Right)


  : c(::std:: move(_Right.c)), comp(::std:: move(_Right.comp))
  {
  }

 priority_queue(const _Pr& _Pred, _Container&& _Cont)
  : c(::std:: move(_Cont)), comp(_Pred)
  {
  make_heap(c.begin(), c.end(), comp);
  }

 template<class _InIt>
  priority_queue(_InIt _First, _InIt _Last, const _Pr& _Pred,
   _Container&& _Cont)
  : c(::std:: move(_Cont)), comp(_Pred)
  {
  c.insert(c.end(), _First, _Last);
  make_heap(c.begin(), c.end(), comp);
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
   void>::type>
  priority_queue(const _Pr& _Pred, _Container&& _Cont,
   const _Alloc& _Al)
  : c(::std:: move(_Cont), _Al), comp(_Pred)
  {
  make_heap(c.begin(), c.end(), comp);
  }

 template<class _Alloc,
  class = typename enable_if<uses_allocator<_Container, _Alloc>::value,
    void>::type>
  priority_queue(_Myt&& _Right, const _Alloc& _Al)
  : c(::std:: move(_Right.c), _Al), comp(::std:: move(_Right.comp))
  {
  }

 _Myt& operator=(_Myt&& _Right)


  {
  c = ::std:: move(_Right.c);
  comp = ::std:: move(_Right.comp);
  return (*this);
  }

 void push(value_type&& _Val)
  {
  c.push_back(::std:: move(_Val));
  push_heap(c.begin(), c.end(), comp);
  }

 template<class... _Valty>
  void emplace(_Valty&&... _Val)
  {
  c.emplace_back(::std:: forward<_Valty>(_Val)...);
  push_heap(c.begin(), c.end(), comp);
  }


 bool empty() const
  {
  return (c.empty());
  }

 size_type size() const
  {
  return (c.size());
  }

 const_reference top() const
  {
  return (c.front());
  }

 reference top()
  {
  return (c.front());
  }

 void push(const value_type& _Val)
  {
  c.push_back(_Val);
  push_heap(c.begin(), c.end(), comp);
  }

 void pop()
  {
  pop_heap(c.begin(), c.end(), comp);
  c.pop_back();
  }

 void swap(_Myt& _Right)


  {
  _Swap_adl(c, _Right.c);
  _Swap_adl(comp, _Right.comp);
  }

protected:
 _Container c;
 _Pr comp;
 };


template<class _Ty,
 class _Container,
 class _Pr> inline
 void swap(priority_queue<_Ty, _Container, _Pr>& _Left,
  priority_queue<_Ty, _Container, _Pr>& _Right)

 {
 _Left.swap(_Right);
 }
}

namespace std {
template<class _Ty,
 class _Container,
 class _Alloc>
 struct uses_allocator<queue<_Ty, _Container>, _Alloc>
  : uses_allocator<_Container, _Alloc>
 {
 };

template<class _Ty,
 class _Container,
 class _Pr,
 class _Alloc>
 struct uses_allocator<priority_queue<_Ty, _Container, _Pr>, _Alloc>
  : uses_allocator<_Container, _Alloc>
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 22 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\map"





#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
namespace std {

template<class _Mytree,
 class _Base = _Iterator_base0>
 class _Tree_unchecked_const_iterator
  : public _Iterator012<bidirectional_iterator_tag,
   typename _Mytree::value_type,
   typename _Mytree::difference_type,
   typename _Mytree::const_pointer,
   typename _Mytree::const_reference,
   _Base>
 {
public:
 typedef _Tree_unchecked_const_iterator<_Mytree, _Base> _Myiter;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_unchecked_const_iterator()
  : _Ptr(0)
  {
  }

 _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Mytree::_Myval(_Ptr));
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  if (_Mytree::_Isnil(_Ptr))
   ;
  else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
   _Ptr = _Mytree::_Min(
    _Mytree::_Right(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Right(_Pnode))
    _Ptr = _Pnode;
   _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  if (_Mytree::_Isnil(_Ptr))
   _Ptr = _Mytree::_Right(_Ptr);
  else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
   _Ptr = _Mytree::_Max(
    _Mytree::_Left(_Ptr));
  else
   {
   _Nodeptr _Pnode;
   while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
    && _Ptr == _Mytree::_Left(_Pnode))
    _Ptr = _Pnode;
   if (_Mytree::_Isnil(_Ptr))
    ;
   else
    _Ptr = _Pnode;
   }
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Mynode() const
  {
  return (_Ptr);
  }

 _Nodeptr _Ptr;
 };


template<class _Mytree>
 class _Tree_unchecked_iterator
  : public _Tree_unchecked_const_iterator<_Mytree>
 {
public:
 typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_unchecked_iterator()
  {
  }

 _Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mytree>
 class _Tree_const_iterator
  : public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
 {
public:
 typedef _Tree_const_iterator<_Mytree> _Myiter;
 typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;
 typedef typename _Mytree::const_pointer pointer;
 typedef typename _Mytree::const_reference reference;

 _Tree_const_iterator()
  : _Mybase()
  {
  }

 _Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
   {
   _Debug_message(L"map/set iterator not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 237);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 238, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 238, 0); };
   }







  return (_Mytree::_Myval(this->_Ptr));
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || _Mytree::_Isnil(this->_Ptr))
   {
   _Debug_message(L"map/set iterator not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 262);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 263, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 263, 0); };
   }






  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0)
   {
   _Debug_message(L"map/set iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 288);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 289, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 289, 0); };
   }

  _Nodeptr _Ptrsav = this->_Ptr;
  --(*(_Mybase *)this);
  if (_Ptrsav == this->_Ptr)
   {
   _Debug_message(L"map/set iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 296);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 297, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 297, 0); };
   }
#line 311 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree"
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {

  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"map/set iterators incompatible", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 327);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 328, 0, L"%s", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 328, 0); };
   }






  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mytree> inline
 typename _Tree_const_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_const_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_const_iterator<_Mytree>&
  _Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
   typename _Tree_const_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Mytree>
 class _Tree_iterator
  : public _Tree_const_iterator<_Mytree>
 {
public:
 typedef _Tree_iterator<_Mytree> _Myiter;
 typedef _Tree_const_iterator<_Mytree> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mytree::_Nodeptr _Nodeptr;
 typedef typename _Mytree::value_type value_type;
 typedef typename _Mytree::difference_type difference_type;

 typedef typename _Mytree::pointer pointer;
 typedef typename _Mytree::reference reference;

 _Tree_iterator()
  {
  }

 _Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mytree> inline
 typename _Tree_iterator<_Mytree>::_Unchecked_type
  _Unchecked(_Tree_iterator<_Mytree> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mytree> inline
 _Tree_iterator<_Mytree>&
  _Rechecked(_Tree_iterator<_Mytree>& _Iter,
   typename _Tree_iterator<_Mytree>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _Tree_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 typedef _Nodeptr_type _Nodeptr;
 };

template<class _Value_type,
 class _Voidptr>
 struct _Tree_node
  {
  _Voidptr _Left;
  _Voidptr _Parent;
  _Voidptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Value_type>
 struct _Tree_node<_Value_type, void *>
  {
  typedef _Tree_node<_Value_type, void *> *_Nodeptr;
  _Nodeptr _Left;
  _Nodeptr _Parent;
  _Nodeptr _Right;
  char _Color;
  char _Isnil;
  _Value_type _Myval;

 private:
  _Tree_node& operator=(const _Tree_node&);
  };

template<class _Ty>
 struct _Tree_simple_types
  : public _Simple_types<_Ty>
 {
 typedef _Tree_node<_Ty, void *> _Node;
 typedef _Node *_Nodeptr;
 };

template<class _Ty,
 class _Alloc0>
 struct _Tree_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Tree_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
  _Voidptr;
 typedef _Tree_node<typename _Alty::value_type,
  _Voidptr> _Node;

 typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
 typedef typename _Alnod_type::pointer _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Tree_simple_types<typename _Alty::value_type>,
  _Tree_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference,
   _Nodeptr> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Tree_val
  : public _Container_base
 {
public:
 typedef _Tree_val<_Val_types> _Myt;

 typedef typename _Val_types::_Nodeptr _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Tree_const_iterator<_Myt> const_iterator;
 typedef _Tree_iterator<_Myt> iterator;

 _Tree_val()
  {
  this->_Myhead = 0;
  this->_Mysize = 0;
  }

 enum _Redbl
  {
  _Red, _Black};

 static char& _Color(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Color);
  }

 static char& _Isnil(_Nodeptr _Pnode)
  {
  return ((char&)_Pnode->_Isnil);
  }

 static _Nodepref _Left(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Left);
  }

 static _Nodepref _Parent(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Parent);
  }

 static _Nodepref _Right(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Right);
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return ((reference)_Pnode->_Myval);
  }

 static _Nodeptr _Max(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Right(_Pnode)))
   _Pnode = _Right(_Pnode);
  return (_Pnode);
  }

 static _Nodeptr _Min(_Nodeptr _Pnode)
  {
  while (!_Isnil(_Left(_Pnode)))
   _Pnode = _Left(_Pnode);
  return (_Pnode);
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _Tree_alloc
  : public _Tree_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alnod_type _Alnod;

 typedef _Tree_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;
#line 663 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree"
 _Tree_alloc(const _Alloc& _Al = _Alloc())
  : _Alnod(_Al)
  {
  this->_Myhead = _Buyheadnode();
  try {
  _Alloc_proxy();
  } catch (...) {
  _Freeheadnode(this->_Myhead);
  throw;
  }
  }

 ~_Tree_alloc() throw ()
  {
  _Freeheadnode(this->_Myhead);
  _Free_proxy();
  }

 void _Change_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  this->_Alnod = _Al;
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alnod, _Right._Alnod);
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alnod);
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alnod);
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Nodeptr _Buyheadnode()
  {
  _Nodeptr _Pnode = this->_Alnod.allocate(1);

  try {
  this->_Alnod.construct(
   ::std:: addressof(this->_Left(_Pnode)), _Pnode);
  this->_Alnod.construct(
   ::std:: addressof(this->_Parent(_Pnode)), _Pnode);
  this->_Alnod.construct(
   ::std:: addressof(this->_Right(_Pnode)), _Pnode);
  } catch (...) {
  this->_Alnod.deallocate(_Pnode, 1);
  throw;
  }

  this->_Color(_Pnode) = this->_Black;
  this->_Isnil(_Pnode) = true;
  return (_Pnode);
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  this->_Alnod.destroy(
   ::std:: addressof(this->_Left(_Pnode)));
  this->_Alnod.destroy(
   ::std:: addressof(this->_Parent(_Pnode)));
  this->_Alnod.destroy(
   ::std:: addressof(this->_Right(_Pnode)));
  this->_Alnod.deallocate(_Pnode, 1);
  }

 _Alty& _Getal()
  {
  return (this->_Alnod);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alnod);
  }
 };


template<class _Alloc_types>
 class _Tree_alloc<false, _Alloc_types>
  : public _Tree_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _Tree_alloc<false, _Alloc_types> _Myt;
 typedef _Tree_val<typename _Alloc_types::_Val_types> _Mybase;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;
#line 790 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree"
 _Tree_alloc(const _Alloc& = _Alloc())
  {
  this->_Myhead = _Buyheadnode();
  try {
  _Alloc_proxy();
  } catch (...) {
  _Freeheadnode(this->_Myhead);
  throw;
  }
  }

 ~_Tree_alloc() throw ()
  {
  _Freeheadnode(this->_Myhead);
  _Free_proxy();
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt&)
  {
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(_Getal());
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Nodeptr _Buyheadnode()
  {
  _Nodeptr _Pnode = this->_Getal().allocate(1);

  try {
  this->_Getal().construct(
   ::std:: addressof(this->_Left(_Pnode)), _Pnode);
  this->_Getal().construct(
   ::std:: addressof(this->_Parent(_Pnode)), _Pnode);
  this->_Getal().construct(
   ::std:: addressof(this->_Right(_Pnode)), _Pnode);
  } catch (...) {
  this->_Getal().deallocate(_Pnode, 1);
  throw;
  }

  this->_Color(_Pnode) = this->_Black;
  this->_Isnil(_Pnode) = true;
  return (_Pnode);
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Left(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Parent(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Right(_Pnode)));
  this->_Getal().deallocate(_Pnode, 1);
  }

 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Ty,
 class _Alloc>
 class _Tree_buy
  : public _Tree_alloc<!is_empty<_Alloc>::value,
   _Tree_base_types<_Ty, _Alloc> >
 {
public:
 typedef _Tree_alloc<!is_empty<_Alloc>::value,
  _Tree_base_types<_Ty, _Alloc> > _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Nodeptr _Nodeptr;
 typedef typename _Mybase::value_type value_type;

 _Tree_buy(const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  }

 _Nodeptr _Buynode0()
  {
  _Nodeptr _Pnode = this->_Getal().allocate(1);

  try {
  this->_Getal().construct(
   ::std:: addressof(this->_Left(_Pnode)), this->_Myhead);
  this->_Getal().construct(
   ::std:: addressof(this->_Parent(_Pnode)), this->_Myhead);
  this->_Getal().construct(
   ::std:: addressof(this->_Right(_Pnode)), this->_Myhead);
  } catch (...) {
  this->_Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 void _Freenode0(_Nodeptr _Pnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Left(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Parent(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Right(_Pnode)));
  this->_Getal().deallocate(_Pnode, 1);
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Valty&&... _Val)
  {
  _Nodeptr _Pnode = _Buynode0();

  this->_Color(_Pnode) = this->_Red;
  this->_Isnil(_Pnode) = false;

  try {
  this->_Getal().construct(
   ::std:: addressof(this->_Myval(_Pnode)),
    ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  _Freenode0(_Pnode);
  throw;
  }

  return (_Pnode);
  }

 };


template<bool _Pr_has_storage,
 class _Traits>
 class _Tree_comp
  : public _Tree_buy<typename _Traits::value_type,
   typename _Traits::allocator_type>
 {
public:
 typedef _Tree_comp<_Pr_has_storage, _Traits> _Myt;
 typedef _Tree_buy<typename _Traits::value_type,
  typename _Traits::allocator_type> _Mybase;

 typedef typename _Traits::allocator_type allocator_type;
 typedef typename _Traits::key_compare key_compare;

 _Tree_comp(const key_compare& _Parg, const allocator_type& _Al)
  : _Mybase(_Al), comp(_Parg)
  {
  }

 key_compare& _Getcomp()
  {
  return (comp);
  }

 const key_compare& _Getcomp() const
  {
  return (comp);
  }

 void _Setcomp(const key_compare& _Right)
  {
  comp = _Right;
  }

 void _Swapcomp(key_compare& _Right)
  {
  _Swap_adl(comp, _Right);
  }

 key_compare comp;
 };

template<class _Traits>
 class _Tree_comp<false, _Traits>
  : public _Tree_buy<typename _Traits::value_type,
   typename _Traits::allocator_type>
 {
public:
 typedef _Tree_comp<false, _Traits> _Myt;
 typedef _Tree_buy<typename _Traits::value_type,
  typename _Traits::allocator_type> _Mybase;

 typedef typename _Traits::allocator_type allocator_type;
 typedef typename _Traits::key_compare key_compare;

 _Tree_comp(const key_compare&, const allocator_type& _Al)
  : _Mybase(_Al)
  {
  }

 key_compare _Getcomp() const
  {
  return (key_compare());
  }

 void _Setcomp(const key_compare&)
  {
  }

 void _Swapcomp(const key_compare&)
  {
  }
 };


template<class _Traits>
 class _Tree
  : public _Tree_comp<
   !is_empty<typename _Traits::key_compare>::value, _Traits>
 {
public:
 typedef _Tree<_Traits> _Myt;
 typedef _Tree_comp<
  !is_empty<typename _Traits::key_compare>::value, _Traits> _Mybase;

 typedef typename _Traits::key_type key_type;
 typedef typename _Traits::value_compare value_compare;
 enum
  {
  _Multi = _Traits::_Multi};

 typedef typename _Mybase::_Node _Node;
 typedef typename _Mybase::_Nodeptr _Nodeptr;
 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::key_compare key_compare;
 typedef typename _Mybase::allocator_type allocator_type;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _If<is_same<key_type, value_type>::value,
  typename _Mybase::const_iterator,
  typename _Mybase::iterator>::type iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 typedef pair<iterator, bool> _Pairib;
 typedef pair<iterator, iterator> _Pairii;
 typedef pair<const_iterator, const_iterator> _Paircc;

 _Tree(const key_compare& _Parg,
  const allocator_type& _Al)
  : _Mybase(_Parg, _Al)
  {
  }

 _Tree(const value_type *_First, const value_type *_Last,
  const key_compare& _Parg, const allocator_type& _Al)
  : _Mybase(_Parg, _Al)
  {
  try {
  insert(_First, _Last);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 _Tree(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right.key_comp(), _Al)
  {
  try {
  _Copy(_Right, false_type());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 _Tree(_Myt&& _Right)
  : _Mybase(_Right.key_comp(), _Right._Getal())
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 _Tree(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(_Right.key_comp(), _Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all(_Right);
  this->_Swapcomp(_Right._Getcomp());
  _Swap_adl(this->_Myhead, _Right._Myhead);
  ::std:: swap(this->_Mysize, _Right._Mysize);
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Copy(_Right, true_type());
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 _Pairib insert(value_type&& _Val)
  {
  return (_Insert_nohint(false,
   ::std:: forward<value_type>(_Val), _Nil_obj));
  }

 iterator insert(const_iterator _Where, value_type&& _Val)
  {
  return (_Insert_hint(_Where,
   ::std:: forward<value_type>(_Val), _Nil_obj));
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   _Pairib>::type
  insert(_Valty&& _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val));
  return (_Insert_nohint(false,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(const_iterator _Where, _Valty&& _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val));
  return (_Insert_hint(_Where,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class... _Valty>
  _Pairib emplace(_Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_nohint(false,
   this->_Myval(_Newnode), _Newnode));
  }

 template<class... _Valty>
  iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
  {
  _Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
  return (_Insert_hint(_Where,
   this->_Myval(_Newnode), _Newnode));
  }


 ~_Tree() throw ()
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   clear();
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    this->_Change_alloc(_Right._Getal());

   this->_Setcomp(_Right._Getcomp());
   _Copy(_Right, false_type());
   }
  return (*this);
  }

 iterator begin() throw ()
  {
  return (iterator(_Lmost(), this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(_Lmost(), this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Myhead, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Myhead, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  return (this->_Getal().max_size());
  }

 bool empty() const throw ()
  {
  return (size() == 0);
  }

 allocator_type get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 key_compare key_comp() const
  {
  return (this->_Getcomp());
  }

 value_compare value_comp() const
  {
  return (value_compare(key_comp()));
  }

 _Pairib insert(const value_type& _Val)
  {
  return (_Insert_nohint(false,
   _Val, _Nil_obj));
  }

 iterator insert(const_iterator _Where,
  const value_type& _Val)
  {
  return (_Insert_hint(_Where,
   _Val, _Nil_obj));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1316);
  for (; _First != _Last; ++_First)

   emplace_hint(end(), *_First);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  insert(_Ilist.begin(), _Ilist.end());
  }

 iterator erase(const_iterator _Where)
  {

  if (_Where._Getcont() != this || this->_Isnil(_Where._Mynode()))
   _Debug_message(L"map/set erase iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1331);
  _Nodeptr _Erasednode = _Where._Mynode();
  ++_Where;
  _Orphan_ptr(*this, _Erasednode);






  _Nodeptr _Fixnode;
  _Nodeptr _Fixnodeparent;
  _Nodeptr _Pnode = _Erasednode;

  if (this->_Isnil(this->_Left(_Pnode)))
   _Fixnode = this->_Right(_Pnode);
  else if (this->_Isnil(this->_Right(_Pnode)))
   _Fixnode = this->_Left(_Pnode);
  else
   {
   _Pnode = _Where._Mynode();
   _Fixnode = this->_Right(_Pnode);
   }

  if (_Pnode == _Erasednode)
   {
   _Fixnodeparent = this->_Parent(_Erasednode);
   if (!this->_Isnil(_Fixnode))
    this->_Parent(_Fixnode) = _Fixnodeparent;

   if (_Root() == _Erasednode)
    _Root() = _Fixnode;
   else if (this->_Left(_Fixnodeparent) == _Erasednode)
    this->_Left(_Fixnodeparent) = _Fixnode;
   else
    this->_Right(_Fixnodeparent) =
     _Fixnode;

   if (_Lmost() == _Erasednode)
    _Lmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Min(_Fixnode);

   if (_Rmost() == _Erasednode)
    _Rmost() = this->_Isnil(_Fixnode)
     ? _Fixnodeparent
     : this->_Max(_Fixnode);
   }
  else
   {
   this->_Parent(this->_Left(_Erasednode)) =
    _Pnode;
   this->_Left(_Pnode) =
    this->_Left(_Erasednode);

   if (_Pnode == this->_Right(_Erasednode))
    _Fixnodeparent = _Pnode;
   else
    {
    _Fixnodeparent =
     this->_Parent(_Pnode);
    if (!this->_Isnil(_Fixnode))
     this->_Parent(_Fixnode) = _Fixnodeparent;
    this->_Left(_Fixnodeparent) = _Fixnode;
    this->_Right(_Pnode) =
     this->_Right(_Erasednode);
    this->_Parent(this->_Right(_Erasednode)) =
     _Pnode;
    }

   if (_Root() == _Erasednode)
    _Root() = _Pnode;
   else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
    this->_Left(this->_Parent(_Erasednode)) =
     _Pnode;
   else
    this->_Right(this->_Parent(_Erasednode)) =
     _Pnode;

   this->_Parent(_Pnode) =
    this->_Parent(_Erasednode);
   ::std:: swap(this->_Color(_Pnode),
    this->_Color(_Erasednode));
   }

  if (this->_Color(_Erasednode) == this->_Black)
   {
   for (; _Fixnode != _Root()
    && this->_Color(_Fixnode) == this->_Black;
    _Fixnodeparent = this->_Parent(_Fixnode))
    if (_Fixnode == this->_Left(_Fixnodeparent))
     {
     _Pnode = this->_Right(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Lrotate(_Fixnodeparent);
      _Pnode = this->_Right(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Left(_Pnode)) == this->_Black
      && this->_Color(this->_Right(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Right(_Pnode))
       == this->_Black)
       {
       this->_Color(this->_Left(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Rrotate(_Pnode);
       _Pnode = this->_Right(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Right(_Pnode)) = this->_Black;
      _Lrotate(_Fixnodeparent);
      break;
      }
     }
    else
     {
     _Pnode = this->_Left(_Fixnodeparent);
     if (this->_Color(_Pnode) == this->_Red)
      {
      this->_Color(_Pnode) = this->_Black;
      this->_Color(_Fixnodeparent) = this->_Red;
      _Rrotate(_Fixnodeparent);
      _Pnode = this->_Left(_Fixnodeparent);
      }

     if (this->_Isnil(_Pnode))
      _Fixnode = _Fixnodeparent;
     else if (this->_Color(this->_Right(_Pnode)) ==
      this->_Black
      && this->_Color(this->_Left(_Pnode)) == this->_Black)
      {
      this->_Color(_Pnode) = this->_Red;
      _Fixnode = _Fixnodeparent;
      }
     else
      {
      if (this->_Color(this->_Left(_Pnode)) == this->_Black)
       {
       this->_Color(this->_Right(_Pnode)) = this->_Black;
       this->_Color(_Pnode) = this->_Red;
       _Lrotate(_Pnode);
       _Pnode = this->_Left(_Fixnodeparent);
       }

      this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
      this->_Color(_Fixnodeparent) = this->_Black;
      this->_Color(this->_Left(_Pnode)) = this->_Black;
      _Rrotate(_Fixnodeparent);
      break;
      }
     }

   this->_Color(_Fixnode) = this->_Black;
   }

  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Erasednode)));

  this->_Getal().deallocate(_Erasednode, 1);

  if (0 < this->_Mysize)
   --this->_Mysize;

  return (iterator(_Where._Ptr, this));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (begin());
   }
  else
   {
   while (_First != _Last)
    erase(_First++);
   return (iterator(_First._Ptr, this));
   }
  }

 size_type erase(const key_type& _Keyval)
  {
  _Pairii _Where = equal_range(_Keyval);
  size_type _Num = 0;
  _Distance(_Where.first, _Where.second, _Num);
  erase(_Where.first, _Where.second);
  return (_Num);
  }

 void clear() throw ()
  {

  this->_Orphan_ptr(*this, 0);


  _Erase(_Root());
  _Root() = this->_Myhead;
  _Lmost() = this->_Myhead;
  _Rmost() = this->_Myhead;
  this->_Mysize = 0;
  }

 iterator find(const key_type& _Keyval)
  {
  iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1552)

     ? end() : _Where);
  }

 const_iterator find(const key_type& _Keyval) const
  {
  const_iterator _Where = lower_bound(_Keyval);
  return (_Where == end()
   || _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Where._Mynode()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1561)

     ? end() : _Where);
  }

 size_type count(const key_type& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  size_type _Num = 0;
  _Distance(_Ans.first, _Ans.second, _Num);
  return (_Num);
  }

 iterator lower_bound(const key_type& _Keyval)
  {
  return (iterator(_Lbound(_Keyval), this));
  }

 const_iterator lower_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Lbound(_Keyval), this));
  }

 iterator upper_bound(const key_type& _Keyval)
  {
  return (iterator(_Ubound(_Keyval), this));
  }

 const_iterator upper_bound(const key_type& _Keyval) const
  {
  return (const_iterator(_Ubound(_Keyval), this));
  }

 _Pairii equal_range(const key_type& _Keyval)
  {
  return (_Eqrange(_Keyval));
  }

 _Paircc equal_range(const key_type& _Keyval) const
  {
  return (_Eqrange(_Keyval));
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   this->_Swapcomp(_Right._Getcomp());
   _Swap_adl(this->_Myhead, _Right._Myhead);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   this->_Swapcomp(_Right._Getcomp());
   _Swap_adl(this->_Myhead, _Right._Myhead);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else
   {

   _Debug_message(L"map/set containers incompatible for swap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1626);




   }
  }

protected:
 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
  {
  return (_Node);
  }

 template<class _Valty>
  _Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
  {
  return (this->_Buynode(::std:: forward<_Valty>(_Val)));
  }

 void _Destroy_if_not_nil(_Nodeptr _Newnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Newnode)));

  this->_Getal().deallocate(_Newnode, 1);
  }

 void _Destroy_if_not_nil(_Nil)
  {
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_hint(const_iterator _Where,
   _Valty&& _Val, _Nodety _Newnode)
  {
  const_iterator _Next;
  bool _Leftish = false;

  try {


  if (_Where._Getcont() != this)
   _Debug_message(L"map/set insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1671);


  if (size() == 0)
   return (_Insert_at(true, this->_Myhead,
    ::std:: forward<_Valty>(_Val), _Newnode));
  else if (this->_Multi)
   {
   if (_Where == begin())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1682))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    _Leftish = true;
    }
   else if (_Where == end())
    {
    if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Rmost()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1690))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1695)

    && !_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key((--(_Next = _Where))._Mynode()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1698))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (!_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1708)

    && (++(_Next = _Where) == end()
     || !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Next._Mynode()), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1711)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else
    _Leftish = true;
   }
  else
   {
   if (_Where == begin())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1728))

     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Where == end())
    {
    if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Rmost()), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1735))

     return (_Insert_at(false, _Rmost(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Where._Mynode()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1740)

    && _Debug_lt_pred(this->_Getcomp(), this->_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1743))


    {
    if (this->_Isnil(this->_Right(_Next._Mynode())))
     return (_Insert_at(false, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   else if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1753)

    && (++(_Next = _Where) == end()
     || _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Next._Mynode()), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1756)))

    {
    if (this->_Isnil(this->_Right(_Where._Mynode())))
     return (_Insert_at(false, _Where._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    else
     return (_Insert_at(true, _Next._Mynode(),
      ::std:: forward<_Valty>(_Val), _Newnode));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }

  return (_Insert_nohint(_Leftish,
   ::std:: forward<_Valty>(_Val), _Newnode).first);
  }

 template<class _Valty,
  class _Nodety>
  _Pairib _Insert_nohint(bool _Leftish,
   _Valty&& _Val, _Nodety _Newnode)
  {
  try {
  _Nodeptr _Trynode = _Root();
  _Nodeptr _Wherenode = this->_Myhead;
  bool _Addleft = true;

  while (!this->_Isnil(_Trynode))
   {
   _Wherenode = _Trynode;
   if (_Leftish)
    _Addleft = !_Debug_lt_pred(this->_Getcomp(), this->_Key(_Trynode), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1791);


   else
    _Addleft = _Debug_lt_pred(this->_Getcomp(), this->_Kfn(_Val), this->_Key(_Trynode), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1795);


   _Trynode = _Addleft ? this->_Left(_Trynode)
    : this->_Right(_Trynode);
   }

  if (this->_Multi)
   return (_Pairib(_Insert_at(_Addleft, _Wherenode,
    ::std:: forward<_Valty>(_Val), _Newnode), true));
  else
   {
   iterator _Where = iterator(_Wherenode, this);
   if (!_Addleft)
    ;
   else if (_Where == begin())
    return (_Pairib(_Insert_at(true, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    --_Where;

   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Where._Mynode()), this->_Kfn(_Val), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 1816))


    return (_Pairib(_Insert_at(_Addleft, _Wherenode,
     ::std:: forward<_Valty>(_Val), _Newnode), true));
   else
    {
    _Destroy_if_not_nil(_Newnode);
    return (_Pairib(_Where, false));
    }
   }
  } catch (...) {
  _Destroy_if_not_nil(_Newnode);
  throw;
  }
  }

 template<class _Valty,
  class _Nodety>
  iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
  _Valty&& _Val, _Nodety _Node)
  {
  if (max_size() - 1 <= this->_Mysize)
   {
   _Destroy_if_not_nil(_Node);
   _Xlength_error("map/set<T> too long");
   }
  _Nodeptr _Newnode = _Buynode_if_nil(_Node,
   ::std:: forward<_Valty>(_Val));

  ++this->_Mysize;
  _Newnode->_Parent = _Wherenode;

  if (_Wherenode == this->_Myhead)
   {
   _Root() = _Newnode;
   _Lmost() = _Newnode;
   _Rmost() = _Newnode;
   }
  else if (_Addleft)
   {
   this->_Left(_Wherenode) = _Newnode;
   if (_Wherenode == _Lmost())
    _Lmost() = _Newnode;
   }
  else
   {
   this->_Right(_Wherenode) = _Newnode;
   if (_Wherenode == _Rmost())
    _Rmost() = _Newnode;
   }

  for (_Nodeptr _Pnode = _Newnode;
   this->_Color(this->_Parent(_Pnode)) == this->_Red; )
   if (this->_Parent(_Pnode)
    == this->_Left(this->_Parent(this->_Parent(_Pnode))))
    {
    _Wherenode =
     this->_Right(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode)))
      = this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Right(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Lrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Rrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }
   else
    {
    _Wherenode =
     this->_Left(this->_Parent(this->_Parent(_Pnode)));
    if (this->_Color(_Wherenode) == this->_Red)
     {
     this->_Color(this->_Parent(_Pnode)) = this->_Black;
     this->_Color(_Wherenode) = this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Pnode = this->_Parent(this->_Parent(_Pnode));
     }
    else
     {
     if (_Pnode == this->_Left(this->_Parent(_Pnode)))
      {
      _Pnode = this->_Parent(_Pnode);
      _Rrotate(_Pnode);
      }
     this->_Color(this->_Parent(_Pnode)) =
      this->_Black;
     this->_Color(this->_Parent(this->_Parent(_Pnode))) =
      this->_Red;
     _Lrotate(this->_Parent(this->_Parent(_Pnode)));
     }
    }

  this->_Color(_Root()) = this->_Black;
  return (iterator(_Newnode, this));
  }

 template<class _Moveit>
  void _Copy(const _Myt& _Right,
   _Moveit _Movefl)
  {
  _Root() = _Copy_nodes(_Right._Root(), this->_Myhead, _Movefl);
  this->_Mysize = _Right.size();
  if (!this->_Isnil(_Root()))
   {
   _Lmost() = this->_Min(_Root());
   _Rmost() = this->_Max(_Root());
   }
  else
   {
   _Lmost() = this->_Myhead;
   _Rmost() = this->_Myhead;
   }
  }

 template<class _Want_to_move,
  class _Can_move,
  class _Is_set,
  class _Dummy>
  _Nodeptr _Copy_or_move(_Nodeptr _Rootnode, _Want_to_move,
   _Can_move, _Is_set, _Dummy)
  {
  return (this->_Buynode(this->_Myval(_Rootnode)));
  }

 template<class _Dummy>
  _Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
   true_type, true_type, _Dummy)
  {
  return (this->_Buynode(
   ::std:: forward<value_type>(this->_Myval(_Rootnode))));
  }

 template<class _Dummy>
  _Nodeptr _Copy_or_move(_Nodeptr _Rootnode, true_type,
   true_type, false_type, _Dummy)
  {
  return (this->_Buynode(
   ::std:: forward<key_type>(const_cast<key_type&>(
    this->_Myval(_Rootnode).first)),
   ::std:: forward<typename value_type::second_type>(this->_Myval(
    _Rootnode).second)));
  }

 template<class _Moveit>
  _Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
   _Moveit _Movefl)
  {
  _Nodeptr _Newroot = this->_Myhead;

  if (!this->_Isnil(_Rootnode))
   {
   _Nodeptr _Pnode = _Copy_or_move(_Rootnode, _Movefl,
    typename is_move_constructible<value_type>::type(),
    typename is_same<key_type, value_type>::type(), 0);
   _Pnode->_Parent = _Wherenode;
   _Pnode->_Color = this->_Color(_Rootnode);
   if (this->_Isnil(_Newroot))
    _Newroot = _Pnode;

   try {
   this->_Left(_Pnode) =
    _Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
   this->_Right(_Pnode) =
    _Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
   } catch (...) {
   _Erase(_Newroot);
   throw;
   }
   }

  return (_Newroot);
  }

 _Paircc _Eqrange(const key_type& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Lonode = this->_Myhead;
  _Nodeptr _Hinode = this->_Myhead;

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Pnode), _Keyval, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2010))
    _Pnode = this->_Right(_Pnode);
   else
    {
    if (this->_Isnil(_Hinode)
      && _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2016))

     _Hinode = _Pnode;
    _Lonode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  _Pnode = this->_Isnil(_Hinode) ? _Root()
   : this->_Left(_Hinode);
  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2025))
    {
    _Hinode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  const_iterator _First = const_iterator(_Lonode, this);
  const_iterator _Last = const_iterator(_Hinode, this);
  return (_Paircc(_First, _Last));
  }

 _Pairii _Eqrange(const key_type& _Keyval)
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Lonode = this->_Myhead;
  _Nodeptr _Hinode = this->_Myhead;

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Pnode), _Keyval, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2045))
    _Pnode = this->_Right(_Pnode);
   else
    {
    if (this->_Isnil(_Hinode)
      && _Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2051))

     _Hinode = _Pnode;
    _Lonode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  _Pnode = this->_Isnil(_Hinode) ? _Root()
   : this->_Left(_Hinode);
  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2060))
    {
    _Hinode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  iterator _First = iterator(_Lonode, this);
  iterator _Last = iterator(_Hinode, this);
  return (_Pairii(_First, _Last));
  }

 void _Erase(_Nodeptr _Rootnode)
  {
  for (_Nodeptr _Pnode = _Rootnode;
   !this->_Isnil(_Pnode); _Rootnode = _Pnode)
   {
   _Erase(this->_Right(_Pnode));
   _Pnode = this->_Left(_Pnode);
   this->_Getal().destroy(
    ::std:: addressof(this->_Myval(_Rootnode)));

   this->_Getal().deallocate(_Rootnode, 1);
   }
  }

 _Nodeptr _Lbound(const key_type& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead;

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Pnode), _Keyval, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2093))
    _Pnode = this->_Right(_Pnode);
   else
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  return (_Wherenode);
  }

 _Nodeptr _Lbound(const key_type& _Keyval)
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead;

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), this->_Key(_Pnode), _Keyval, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2110))
    _Pnode = this->_Right(_Pnode);
   else
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }

  return (_Wherenode);
  }

 _Nodeptr& _Lmost() const
  {
  return (this->_Left(this->_Myhead));
  }

 void _Lrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Right(_Wherenode);
  this->_Right(_Wherenode) = this->_Left(_Pnode);

  if (!this->_Isnil(this->_Left(_Pnode)))
   this->_Parent(this->_Left(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  this->_Left(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 _Nodeptr& _Rmost() const
  {
  return (this->_Right(this->_Myhead));
  }

 _Nodeptr& _Root() const
  {
  return (this->_Parent(this->_Myhead));
  }

 void _Rrotate(_Nodeptr _Wherenode)
  {
  _Nodeptr _Pnode = this->_Left(_Wherenode);
  this->_Left(_Wherenode) = this->_Right(_Pnode);

  if (!this->_Isnil(this->_Right(_Pnode)))
   this->_Parent(this->_Right(_Pnode)) = _Wherenode;
  this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  if (_Wherenode == _Root())
   _Root() = _Pnode;
  else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
   this->_Right(this->_Parent(_Wherenode)) = _Pnode;
  else
   this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  this->_Right(_Pnode) = _Wherenode;
  this->_Parent(_Wherenode) = _Pnode;
  }

 _Nodeptr _Ubound(const key_type& _Keyval) const
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead;

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2182))
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  return (_Wherenode);
  }

 _Nodeptr _Ubound(const key_type& _Keyval)
  {
  _Nodeptr _Pnode = _Root();
  _Nodeptr _Wherenode = this->_Myhead;

  while (!this->_Isnil(_Pnode))
   if (_Debug_lt_pred(this->_Getcomp(), _Keyval, this->_Key(_Pnode), L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\xtree", 2199))
    {
    _Wherenode = _Pnode;
    _Pnode = this->_Left(_Pnode);
    }
   else
    _Pnode = this->_Right(_Pnode);

  return (_Wherenode);
  }


 void _Orphan_ptr(_Myt& _Cont, _Nodeptr _Ptr) const
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)_Cont._Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr == this->_Myhead
     || _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }


 void _Tidy()
  {
  erase(begin(), end());
  }

 const key_type& _Kfn(const value_type& _Val) const
  {
  return (_Traits::_Kfn(_Val));
  }

 const key_type& _Key(_Nodeptr _Pnode) const
  {
  return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));
  }
 };


template<class _Traits> inline
 bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Traits> inline
 bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Traits> inline
 bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Traits> inline
 bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Traits> inline
 bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Traits> inline
 bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
 {
 return (!(_Left < _Right));
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\map"


#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tuple"
#line 10 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\tuple"
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4521 4522)

namespace std {

template<class _Src,
 class _Dest>
 struct _Tuple_enable
 {
 };

template<>
 struct _Tuple_enable<tuple<>, tuple<> >
 {
 typedef void ** type;
 };

template<class _Src0,
 class... _Types1,
 class _Dest0,
 class... _Types2>
 struct _Tuple_enable<tuple<_Src0, _Types1...>,
  tuple<_Dest0, _Types2...> >
 : _If<is_convertible<_Src0, _Dest0>::value,
  _Tuple_enable<tuple<_Types1...>, tuple<_Types2...> >,
  _Tuple_enable<int, int>
 >::type
 {
 };



class _Ignore
 {
public:
 _Ignore()
  {
  }

 template<class _Ty>
  void operator=(const _Ty&) const
  {
  }
 };

const _Ignore ignore;


struct _Tuple_alloc_t
 {
 };

const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();


template<class _Ty>
 struct _Tuple_val
 {
 _Tuple_val()
  : _Val()
  {
  }

 template<class _Other>
  _Tuple_val(_Other&& _Arg)
  : _Val(::std:: forward<_Other>(_Arg))
  {
  }

 template<class _Other>
  _Tuple_val& operator=(_Other&& _Right)
  {
  _Val = ::std:: forward<_Other>(_Right);
  return (*this);
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc&,
   typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && !is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)..., _Al)
  {
  }


 _Ty _Val;
 };


template<class... _Types>
 class tuple;

template<>
 class tuple<>
 {
public:
 typedef tuple<> _Myt;

 tuple()
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&) throw ()
  {
  }

 tuple(const tuple&) throw ()
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&, const tuple&) throw ()
  {
  }

 void swap(_Myt&) throw ()
  {
  }

 bool _Equals(const _Myt&) const throw ()
  {
  return (true);
  }

 bool _Less(const _Myt&) const throw ()
  {
  return (false);
  }
 };

template<class _This,
 class... _Rest>
 class tuple<_This, _Rest...>
  : private tuple<_Rest...>
 {
public:
 typedef _This _This_type;
 typedef tuple<_This, _Rest...> _Myt;
 typedef tuple<_Rest...> _Mybase;
 static const size_t _Mysize = 1 + sizeof...(_Rest);

 tuple()
  : _Mybase(),
   _Myfirst()
  {
  }

 template<class... _Rest2>
  explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
   : _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
    _Myfirst(allocator_arg)
  {
  }

 template<class... _Other,
  class = typename _Tuple_enable<
   tuple<const _Other&...>, _Myt>::type>
  tuple(const tuple<_Other...>& _Right)
  : _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class _Alloc,
  class... _Other,
  class = typename _Tuple_enable<
   tuple<const _Other&...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : _Mybase(allocator_arg, _Al, _Right._Get_rest()),
   _Myfirst(_Al, _Tuple_alloc,
    _Right._Myfirst._Val)
  {
  }

 explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
  : _Mybase(_Rest_arg...),
   _Myfirst(_This_arg)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : _Mybase(allocator_arg, _Al, _Rest_arg...),
   _Myfirst(_Al, _Tuple_alloc, _This_arg)
  {
  }

 template<class _This2,
  class... _Rest2,
  class = typename _Tuple_enable<
   tuple<_This2, _Rest2...>, _Myt>::type>
  explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  class = typename _Tuple_enable<
   tuple<_This2, _Rest2...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_This2>(_This_arg))
  {
  }

 template<class... _Other,
  class = typename _Tuple_enable<
   tuple<_Other...>, _Myt>::type>
  tuple(tuple<_Other...>&& _Right)
  : _Mybase(::std:: forward<typename tuple<_Other...>::_Mybase>
   (_Right._Get_rest())),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>
    (_Right._Myfirst._Val))
  {
  }

 template<class _Alloc,
  class... _Other,
  class = typename _Tuple_enable<
   tuple<_Other...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<typename tuple<_Other...>::_Mybase>
     (_Right._Get_rest())),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<typename tuple<_Other...>::_This_type>
     (_Right._Myfirst._Val))
  {
  }

 template<class... _Other>
  _Myt& operator=(const tuple<_Other...>& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  (_Mybase&)*this = _Right._Get_rest();
  return (*this);
  }

 template<class... _Other>
  _Myt& operator=(tuple<_Other...>&& _Right)
  {
  _Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
   (_Right._Myfirst._Val);
  (_Mybase&)*this = ::std:: forward<typename tuple<_Other...>::_Mybase>
   (_Right._Get_rest());
  return (*this);
  }

 template<class... _Other>
  bool _Equals(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val == _Right._Myfirst._Val
   && _Mybase::_Equals(_Right._Get_rest()));
  }

 template<class... _Other>
  bool _Less(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val < _Right._Myfirst._Val
   || (!(_Right._Myfirst._Val < _Myfirst._Val)
    && _Mybase::_Less(_Right._Get_rest())));
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al)
  : _Mybase(allocator_arg, _Al),
   _Myfirst(_Al, _Tuple_alloc)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _Myt& _Right)
  : _Mybase(allocator_arg, _Al, _Right._Get_rest()),
   _Myfirst(_Al, _Tuple_alloc,
    _Right._Myfirst._Val)
  {
  }

 template<class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<const _First&, const _Second&>, _Myt>::type>
  tuple(const pair<_First, _Second>& _Right)

  : _Mybase(tuple<_Second>(_Right.second)),
   _Myfirst(_Right.first)
  {

  }

 template<class _Alloc,
  class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<const _First&, const _Second&>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)

  : _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
   _Myfirst(_Al, _Tuple_alloc,
    _Right.first)
  {

  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  (_Mybase&)*this = _Right._Get_rest();
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(const pair<_First, _Second>& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = _Right.first;
  (_Mybase&)*this = tuple<_Second>(_Right.second);
  return (*this);
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _Myt&& _Right)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<_Mybase>(_Right._Get_rest())),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_This>(_Right._Myfirst._Val))
  {
  }

 template<class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<_First, _Second>, _Myt>::type>
  tuple(pair<_First, _Second>&& _Right)

  : _Mybase(tuple<_Second>(::std:: forward<_Second>(_Right.second))),
   _Myfirst(::std:: forward<_First>(_Right.first))
  {

  }

 template<class _Alloc,
  class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<_First, _Second>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)

  : _Mybase(allocator_arg, _Al,
    tuple<_Second>(::std:: forward<_Second>(_Right.second))),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_First>(_Right.first))
  {

  }

 _Myt& operator=(_Myt&& _Right)


  {
  _Myfirst = ::std:: forward<_This>(_Right._Myfirst._Val);
  (_Mybase&)*this = ::std:: forward<_Mybase>(_Right._Get_rest());
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(pair<_First, _Second>&& _Right)




  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = ::std:: forward<_First>(_Right.first);
  (_Mybase&)*this =
   tuple<_Second>(::std:: forward<_Second>(_Right.second));
  return (*this);
  }

 _Mybase& _Get_rest()
  {
  return (*this);
  }

 const _Mybase& _Get_rest() const
  {
  return (*this);
  }

 void swap(tuple& _Right)



  {
  _Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
  _Mybase::swap((_Mybase&)_Right);
  }

 _Tuple_val<_This> _Myfirst;
 };




template<class... _Types1,
 class... _Types2> inline
 bool operator==(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator!=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator<(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator>=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator>(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Right < _Left);
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator<=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class... _Types> inline
 void swap(tuple<_Types...>& _Left,
  tuple<_Types...>& _Right)

 {
 return (_Left.swap(_Right));
 }



template<size_t _Index,
 class _Tuple>
 struct tuple_element;

template<class _This,
 class... _Rest>
 struct tuple_element<0, tuple<_This, _Rest...> >
 {
 typedef _This type;
 typedef typename add_lvalue_reference<const _This>::type _Ctype;
 typedef typename add_lvalue_reference<_This>::type _Rtype;
 typedef typename add_rvalue_reference<_This>::type _RRtype;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<size_t _Index,
 class _This,
 class... _Rest>
 struct tuple_element<_Index, tuple<_This, _Rest...> >
  : public tuple_element<_Index - 1, tuple<_Rest...> >
 {
 };


template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const _Tuple>
 : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, volatile _Tuple>
 : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const volatile _Tuple>
 : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };


template<size_t _Index,
 class... _Types> inline
 typename tuple_element<_Index, tuple<_Types...> >::_Rtype
  get(tuple<_Types...>& _Tuple)
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 typename tuple_element<_Index, tuple<_Types...> >::_Ctype
  get(const tuple<_Types...>& _Tuple)
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 typename tuple_element<_Index, tuple<_Types...> >::_RRtype
  get(tuple<_Types...>&& _Tuple)
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
  _RRtype;
 return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class... _Types> inline
 tuple<typename _Unrefwrap<_Types>::type...>
  make_tuple(_Types&&... _Args)
 {
 typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
 return (_Ttype(::std:: forward<_Types>(_Args)...));
 }


template<class... _Types> inline
 tuple<_Types&...>
  tie(_Types&... _Args) throw ()
 {
 typedef tuple<_Types&...> _Ttype;
 return (_Ttype(_Args...));
 }




template<class... _Types> inline
 tuple<_Types&&...>
  forward_as_tuple(_Types&&... _Args) throw ()
 {
 return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
 }



template<class _Arg_idx_type,
 class... _Types>
 struct _Make_arg_idx1
 {
 typedef _Arg_idx_type type;
 };

template<size_t... _Indexes,
 class _Ty,
 class... _Types>
 struct _Make_arg_idx1<_Arg_idx<_Indexes...>, _Ty, _Types...>
  : _Make_arg_idx1<_Arg_idx<sizeof...(_Types), _Indexes...>, _Types...>
 {
 };

template<class... _Types>
 struct _Make_arg_idx
  : _Make_arg_idx1<_Arg_idx<>, _Types...>
 {
 };

template<class _Arg_idx_type1,
 class _Arg_idx_type2>
 struct _Cat_arg_idx;

template<size_t... _Indexes1,
 size_t... _Indexes2>
 struct _Cat_arg_idx<_Arg_idx<_Indexes1...>, _Arg_idx<_Indexes2...> >
 {
 typedef _Arg_idx<_Indexes1..., _Indexes2...> type;
 };

template<size_t _Nx,
 class _Ty>
 struct _Repeat_for
  : integral_constant<size_t, _Nx>
 {
 };


template<class _Ret,
 class _Kx_arg,
 class _Ix_arg,
 size_t _Ix_next,
 class... _Tuples>
 struct _Tuple_cat2
 {
 static_assert(sizeof...(_Tuples) == 0,
  "Unsupported tuple_cat arguments.");
 typedef _Ret type;
 typedef _Kx_arg _Kx_arg_idx;
 typedef _Ix_arg _Ix_arg_idx;
 };

template<class... _Types1,
 class _Kx_arg,
 size_t... _Ix,
 size_t _Ix_next,
 class... _Types2,
 class... _Rest>
 struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, _Arg_idx<_Ix...>, _Ix_next,
  tuple<_Types2...>, _Rest...>
  : _Tuple_cat2<
   tuple<_Types1..., _Types2...>,
   typename _Cat_arg_idx<_Kx_arg,
    typename _Make_arg_idx<_Types2...>::type>::type,
   _Arg_idx<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
   _Ix_next + 1,
   _Rest...>
 {
 };

template<class... _Tuples>
 struct _Tuple_cat1
  : _Tuple_cat2<tuple<>, _Arg_idx<>, _Arg_idx<>, 0,
   typename decay<_Tuples>::type...>
 {
 };

template<class _Ret,
 size_t... _Kx,
 size_t... _Ix,
 class _Ty> inline
 _Ret _Tuple_cat(_Arg_idx<_Kx...>, _Arg_idx<_Ix...>, _Ty&& _Arg)
 {
 return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
 }

template<class... _Tuples> inline
 typename _Tuple_cat1<_Tuples...>::type
  tuple_cat(_Tuples&&... _Tpls)
 {
 typedef _Tuple_cat1<_Tuples...> _Cat1;
 return (_Tuple_cat<typename _Cat1::type>(
  typename _Cat1::_Kx_arg_idx(), typename _Cat1::_Ix_arg_idx(),
  ::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
 }



template<class _Ty1,
 class _Ty2>
 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   _Arg_idx<_Indexes1...>,
   _Arg_idx<_Indexes2...>)
  : first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
   second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
  {
  }


template<class _Ty1,
 class _Ty2>
 template<class... _Types1,
  class... _Types2> inline
  pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)


  : pair(_Val1, _Val2,
   typename _Make_arg_idx<_Types1...>::type(),
   typename _Make_arg_idx<_Types2...>::type())
  {
  }
}

namespace std {

template<class... _Types,
 class _Alloc>
 struct uses_allocator<tuple<_Types...>, _Alloc>
  : true_type
 {
 };

}

namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
using ::std:: tuple_element;
}
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\map"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc,
 bool _Mfl>
 class _Tmap_traits
 {
public:
 typedef _Kty key_type;
 typedef pair<const _Kty, _Ty> value_type;
 typedef _Pr key_compare;
 typedef _Alloc allocator_type;

 enum
  {
  _Multi = _Mfl};

 class value_compare
  : public binary_function<value_type, value_type, bool>
  {
  friend class _Tmap_traits<_Kty, _Ty, _Pr, _Alloc, _Mfl>;

 public:
  bool operator()(const value_type& _Left,
   const value_type& _Right) const
   {
   return (comp(_Left.first, _Right.first));
   }

  value_compare(key_compare _Pred)
   : comp(_Pred)
   {
   }

 protected:
  key_compare comp;
  };

 template<class _Ty1,
  class _Ty2>
  static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
  {
  return (_Val.first);
  }
 };


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class map
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> >
 {
public:
 typedef map<_Kty, _Ty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false> > _Mybase;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Ty referent_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 map()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit map(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 map(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())


  {
  }

 map(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit map(const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  }

 map(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  map(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 map(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 map(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 mapped_type& operator[](key_type&& _Keyval)
  {
  iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode())))

   _Where = this->emplace_hint(_Where,
    piecewise_construct,
    ::std:: forward_as_tuple(::std:: move(_Keyval)),
    tuple<>());


  return (_Where->second);
  }

 void swap(_Myt& _Right)
  {
  _Mybase::swap(_Right);
  }

 map(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 map(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 map(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }






 mapped_type& operator[](const key_type& _Keyval)
  {
  iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode())))

   _Where = this->emplace_hint(_Where,
    piecewise_construct,
    ::std:: forward_as_tuple(_Keyval),
    tuple<>());


  return (_Where->second);
  }

 mapped_type& at(const key_type& _Keyval)
  {
  iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode())))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }

 const mapped_type& at(const key_type& _Keyval) const
  {
  const_iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end()
   || this->_Getcomp()(_Keyval, this->_Key(_Where._Mynode())))
   _Xout_of_range("invalid map<K, T> key");
  return (_Where->second);
  }
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(map<_Kty, _Ty, _Pr, _Alloc>& _Left,
  map<_Kty, _Ty, _Pr, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Kty,
 class _Ty,
 class _Pr = less<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class multimap
  : public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> >
 {
public:
 typedef multimap<_Kty, _Ty, _Pr, _Alloc> _Myt;
 typedef _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true> > _Mybase;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Ty referent_type;
 typedef _Pr key_compare;
 typedef typename _Mybase::value_compare value_compare;
 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::reverse_iterator reverse_iterator;
 typedef typename _Mybase::const_reverse_iterator
  const_reverse_iterator;
 typedef typename _Mybase::value_type value_type;

 multimap()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit multimap(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 multimap(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._Getal().select_on_container_copy_construction())


  {
  }

 multimap(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit multimap(const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  }

 multimap(const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  multimap(_Iter _First, _Iter _Last,
   const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 multimap(_Myt&& _Right)
  : _Mybase(::std:: move(_Right))
  {
  }

 multimap(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(_Valty&& _Val)
  {
  return (_Mybase::insert(::std:: forward<_Valty>(_Val)).first);
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(const_iterator _Where, _Valty&& _Val)
  {
  return (_Mybase::insert(_Where, ::std:: forward<_Valty>(_Val)));
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }


 void swap(_Myt& _Right)
  {
  _Mybase::swap(_Right);
  }

 multimap(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 multimap(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred)
  : _Mybase(_Pred, allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 multimap(::std:: initializer_list<value_type> _Ilist,
  const key_compare& _Pred, const allocator_type& _Al)
  : _Mybase(_Pred, _Al)
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const value_type& _Val)
  {
  return (_Mybase::insert(_Val).first);
  }

 iterator insert(const_iterator _Where, const value_type& _Val)
  {
  return (_Mybase::insert(_Where, _Val));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Mybase::insert(_First, _Last);
  }
 };

template<class _Kty,
 class _Ty,
 class _Pr,
 class _Alloc> inline
 void swap(multimap<_Kty, _Ty, _Pr, _Alloc>& _Left,
  multimap<_Kty, _Ty, _Pr, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 23 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"

#line 1 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
namespace std {

template<class _Mylist,
 class _Base = _Iterator_base0>
 class _List_unchecked_const_iterator
  : public _Iterator012<bidirectional_iterator_tag,
   typename _Mylist::value_type,
   typename _Mylist::difference_type,
   typename _Mylist::const_pointer,
   typename _Mylist::const_reference,
   _Base>
 {
public:
 typedef _List_unchecked_const_iterator<_Mylist, _Base> _Myiter;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::const_pointer pointer;
 typedef typename _Mylist::const_reference reference;

 _List_unchecked_const_iterator()
  : _Ptr(0)
  {
  }

 _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Mylist::_Myval(_Ptr));
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  _Ptr = _Mylist::_Nextnode(_Ptr);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  _Ptr = _Mylist::_Prevnode(_Ptr);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Mynode() const
  {
  return (_Ptr);
  }

 _Nodeptr _Ptr;
 };


template<class _Mylist>
 class _List_unchecked_iterator
  : public _List_unchecked_const_iterator<_Mylist>
 {
public:
 typedef _List_unchecked_iterator<_Mylist> _Myiter;
 typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::pointer pointer;
 typedef typename _Mylist::reference reference;

 _List_unchecked_iterator()
  {
  }

 _List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mylist>
 class _List_const_iterator
  : public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
 {
public:
 typedef _List_const_iterator<_Mylist> _Myiter;
 typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::const_pointer pointer;
 typedef typename _Mylist::const_reference reference;

 _List_const_iterator()
  : _Mybase()
  {
  }

 _List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
  }

 reference operator*() const
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
   {
   _Debug_message(L"list iterator not dereferencable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 210);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 211, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 211, 0); };
   }







  return (_Mylist::_Myval(this->_Ptr));
  }

 _Myiter& operator++()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
   {
   _Debug_message(L"list iterator not incrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 230);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 231, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 231, 0); };
   }







  this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {

  if (this->_Getcont() == 0
   || this->_Ptr == 0
   || (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
    == ((_Mylist *)this->_Getcont())->_Myhead)
   {
   _Debug_message(L"list iterator not decrementable", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 259);
   { (void) ((!!(("Standard C++ Libraries Out of Range" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 260, 0, L"%s", L"\"Standard C++ Libraries Out of Range\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"out of range\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 260, 0); };
   }
#line 273 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list"
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {

  if (this->_Getcont() == 0
   || this->_Getcont() != _Right._Getcont())
   {
   _Debug_message(L"list iterators incompatible", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 289);
   { (void) ((!!(("Standard C++ Libraries Invalid Argument" && 0))) || (1 != _CrtDbgReportW(2, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 290, 0, L"%s", L"\"Standard C++ Libraries Invalid Argument\" && 0")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\"invalid argument\"", L__FUNCTION__, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 290, 0); };
   }






  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mylist> inline
 typename _List_const_iterator<_Mylist>::_Unchecked_type
  _Unchecked(_List_const_iterator<_Mylist> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mylist> inline
 _List_const_iterator<_Mylist>&
  _Rechecked(_List_const_iterator<_Mylist>& _Iter,
   typename _List_const_iterator<_Mylist>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Mylist>
 class _List_iterator
  : public _List_const_iterator<_Mylist>
 {
public:
 typedef _List_iterator<_Mylist> _Myiter;
 typedef _List_const_iterator<_Mylist> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::pointer pointer;
 typedef typename _Mylist::reference reference;

 _List_iterator()
  {
  }

 _List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mylist> inline
 typename _List_iterator<_Mylist>::_Unchecked_type
  _Unchecked(_List_iterator<_Mylist> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mylist> inline
 _List_iterator<_Mylist>&
  _Rechecked(_List_iterator<_Mylist>& _Iter,
   typename _List_iterator<_Mylist>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _List_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 typedef _Nodeptr_type _Nodeptr;
 };

template<class _Value_type,
 class _Voidptr>
 struct _List_node
  {
  _Voidptr _Next;
  _Voidptr _Prev;
  _Value_type _Myval;

 private:
  _List_node& operator=(const _List_node&);
  };

template<class _Value_type>
 struct _List_node<_Value_type, void *>
  {
  typedef _List_node<_Value_type, void *> *_Nodeptr;
  _Nodeptr _Next;
  _Nodeptr _Prev;
  _Value_type _Myval;

 private:
  _List_node& operator=(const _List_node&);
  };

template<class _Ty>
 struct _List_simple_types
  : public _Simple_types<_Ty>
 {
 typedef _List_node<_Ty, void *> _Node;
 typedef _Node *_Nodeptr;
 };

template<class _Ty,
 class _Alloc0>
 struct _List_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _List_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
  _Voidptr;
 typedef _List_node<typename _Alty::value_type,
  _Voidptr> _Node;

 typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
 typedef typename _Alnod_type::pointer _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _List_simple_types<typename _Alty::value_type>,
  _List_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference,
   _Nodeptr> >::type
  _Val_types;
 };


template<class _Val_types>
 class _List_val
  : public _Container_base
 {
public:
 typedef _List_val<_Val_types> _Myt;

 typedef typename _Val_types::_Nodeptr _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _List_const_iterator<_Myt> const_iterator;
 typedef _List_iterator<_Myt> iterator;

 typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
 typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;

 _List_val()
  {
  this->_Myhead = 0;
  this->_Mysize = 0;
  }

 static _Nodepref _Nextnode(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Next);
  }

 static _Nodepref _Prevnode(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Prev);
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return ((reference)_Pnode->_Myval);
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _List_alloc
  : public _List_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alnod_type _Alnod;

 typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;
#line 588 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list"
 _List_alloc(const _Alloc& _Al = _Alloc())
  : _Alnod(_Al)
  {
  this->_Myhead = _Buyheadnode();
  try {
  _Alloc_proxy();
  } catch (...) {
  _Freeheadnode(this->_Myhead);
  throw;
  }
  }

 ~_List_alloc() throw ()
  {
  _Freeheadnode(this->_Myhead);
  _Free_proxy();
  }

 void _Change_alloc(const _Alty& _Al)
  {
  _Free_proxy();
  this->_Alnod = _Al;
  _Alloc_proxy();
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alnod, _Right._Alnod);
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alnod);
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy(this->_Alnod);
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Nodeptr _Buyheadnode()
  {
  return (_Buynode0(_Nodeptr(), _Nodeptr()));
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  this->_Alnod.destroy(
   ::std:: addressof(this->_Nextnode(_Pnode)));
  this->_Alnod.destroy(
   ::std:: addressof(this->_Prevnode(_Pnode)));
  this->_Alnod.deallocate(_Pnode, 1);
  }

 _Nodeptr _Buynode0(_Nodeptr _Next,
  _Nodeptr _Prev)
  {
  _Nodeptr _Pnode = this->_Alnod.allocate(1);

  if (_Next == _Nodeptr())
   {
   _Next = _Pnode;
   _Prev = _Pnode;
   }
  try {
  this->_Alnod.construct(
   ::std:: addressof(this->_Nextnode(_Pnode)), _Next);
  this->_Alnod.construct(
   ::std:: addressof(this->_Prevnode(_Pnode)), _Prev);
  } catch (...) {
  this->_Alnod.deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 _Alty& _Getal()
  {
  return (this->_Alnod);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alnod);
  }
 };


template<class _Alloc_types>
 class _List_alloc<false, _Alloc_types>
  : public _List_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _List_alloc<false, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;
#line 719 "D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list"
 _List_alloc(const _Alloc& = _Alloc())
  {
  this->_Myhead = _Buyheadnode();
  try {
  _Alloc_proxy();
  } catch (...) {
  _Freeheadnode(this->_Myhead);
  throw;
  }
  }

 ~_List_alloc() throw ()
  {
  _Freeheadnode(this->_Myhead);
  _Free_proxy();
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Myproxy, _Right._Myproxy);
  }

 void _Alloc_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Myproxy = _Alproxy.allocate(1);
  _Alproxy.construct(this->_Myproxy, _Container_proxy());
  this->_Myproxy->_Mycont = this;
  }

 void _Free_proxy()
  {
  typename _Alty::template rebind<_Container_proxy>::other
   _Alproxy;
  this->_Orphan_all();
  _Alproxy.destroy(this->_Myproxy);
  _Alproxy.deallocate(this->_Myproxy, 1);
  this->_Myproxy = 0;
  }


 _Nodeptr _Buyheadnode()
  {
  return (_Buynode0(_Nodeptr(), _Nodeptr()));
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Nextnode(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Prevnode(_Pnode)));
  this->_Getal().deallocate(_Pnode, 1);
  }

 _Nodeptr _Buynode0(_Nodeptr _Next,
  _Nodeptr _Prev)
  {
  _Nodeptr _Pnode = this->_Getal().allocate(1);

  if (_Next == _Nodeptr())
   {
   _Next = _Pnode;
   _Prev = _Pnode;
   }
  try {
  this->_Getal().construct(
   ::std:: addressof(this->_Nextnode(_Pnode)), _Next);
  this->_Getal().construct(
   ::std:: addressof(this->_Prevnode(_Pnode)), _Prev);
  } catch (...) {
  this->_Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Ty,
 class _Alloc>
 class _List_buy
  : public _List_alloc<!is_empty<_Alloc>::value,
   _List_base_types<_Ty, _Alloc> >
 {
public:
 typedef _List_alloc<!is_empty<_Alloc>::value,
  _List_base_types<_Ty, _Alloc> > _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Nodeptr _Nodeptr;

 _List_buy(const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
   _Valty&&... _Val)
  {
  _Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  try {
  this->_Getal().construct(
   ::std:: addressof(this->_Myval(_Pnode)),
    ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  this->_Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }


 void _Freenode(_Nodeptr _Pnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Nextnode(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Prevnode(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Pnode)));
  this->_Getal().deallocate(_Pnode, 1);
  }
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class list
  : public _List_buy<_Ty, _Alloc>
 {
public:
 typedef list<_Ty, _Alloc> _Myt;
 typedef _List_buy<_Ty, _Alloc> _Mybase;
 typedef typename _Mybase::_Node _Node;
 typedef typename _Mybase::_Nodeptr _Nodeptr;
 typedef typename _Mybase::_Alty _Alty;

 typedef _Alloc allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::_Unchecked_const_iterator
  _Unchecked_const_iterator;
 typedef typename _Mybase::_Unchecked_iterator
  _Unchecked_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 list()
  : _Mybase()
  {
  }

 explicit list(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  }

 explicit list(size_type _Count)
  : _Mybase()
  {
  resize(_Count);
  }

 list(size_type _Count, const _Ty& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, _Val);
  }

 list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, _Val);
  }

 list(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  try {
  insert(begin(), _Right.begin(), _Right.end());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 list(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  try {
  insert(begin(), _Right.begin(), _Right.end());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  list(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  list(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  try {
  insert(begin(), _First, _Last);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 void _Construct_n(size_type _Count,
  const _Ty& _Val)
  {
  try {
  _Insert_n(_Unchecked_begin(), _Count, _Val);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 list(_Myt&& _Right)
  : _Mybase(_Right._Getal())
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 list(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  this->_Swap_all(_Right);
  _Swap_adl(this->_Myhead, _Right._Myhead);
  ::std:: swap(this->_Mysize, _Right._Mysize);
  }

 void push_front(_Ty&& _Val)
  {
  _Insert(_Unchecked_begin(), ::std:: forward<_Ty>(_Val));
  }

 void push_back(_Ty&& _Val)
  {
  _Insert(_Unchecked_end(), ::std:: forward<_Ty>(_Val));
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: forward<_Ty>(_Val)));
  }

 template<class... _Valty>
  void emplace_front(_Valty&&... _Val)
  {
  _Insert(_Unchecked_begin(), ::std:: forward<_Valty>(_Val)...);
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  _Insert(_Unchecked_end(), ::std:: forward<_Valty>(_Val)...);
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {

  if (_Where._Getcont() != this)
   _Debug_message(L"list emplace iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1048);


  _Insert(_Where._Unchecked(), ::std:: forward<_Valty>(_Val)...);
  return (_Make_iter(--_Where));
  }

 template<class... _Valty>
  void _Insert(_Unchecked_const_iterator _Where,
  _Valty&&... _Val)
  {
  _Nodeptr _Pnode = _Where._Mynode();
  _Nodeptr _Newnode =
   this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
    ::std:: forward<_Valty>(_Val)...);
  _Incsize(1);
  this->_Prevnode(_Pnode) = _Newnode;
  this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
  }


 list(::std:: initializer_list<_Ty> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Ty> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<_Ty> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Ty> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~list() throw ()
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    clear();
    this->_Change_alloc(_Right._Getal());
    }

   assign(_Right.begin(), _Right.end());
   }
  return (*this);
  }

 iterator begin() throw ()
  {
  return (iterator(this->_Nextnode(this->_Myhead), this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(this->_Nextnode(this->_Myhead), this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Myhead, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Myhead, this));
  }

 _Unchecked_iterator _Unchecked_begin()
  {
  return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
   this));
  }

 _Unchecked_const_iterator _Unchecked_begin() const
  {
  return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
   this));
  }

 _Unchecked_iterator _Unchecked_end()
  {
  return (_Unchecked_iterator(this->_Myhead, this));
  }

 _Unchecked_const_iterator _Unchecked_end() const
  {
  return (_Unchecked_const_iterator(this->_Myhead, this));
  }

 iterator _Make_iter(const_iterator _Where) const throw ()
  {
  return (iterator(_Where._Ptr, this));
  }

 iterator _Make_iter(_Unchecked_const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void resize(size_type _Newsize)
  {
  if (this->_Mysize < _Newsize)
   {
   size_type _Count = 0;
   try {
   for (; this->_Mysize < _Newsize; ++_Count)
    _Insert(_Unchecked_end());
   } catch (...) {
   for (; 0 < _Count; --_Count)
    pop_back();
   throw;
   }
   }
  else
   while (_Newsize < this->_Mysize)
    pop_back();
  }

 void resize(size_type _Newsize, const _Ty& _Val)
  {
  if (this->_Mysize < _Newsize)
   _Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
  else
   while (_Newsize < this->_Mysize)
    pop_back();
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  return (this->_Getal().max_size());
  }

 bool empty() const throw ()
  {
  return (this->_Mysize == 0);
  }

 allocator_type get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(--end()));
  }

 const_reference back() const
  {
  return (*(--end()));
  }

 void push_front(const _Ty& _Val)
  {
  _Insert(_Unchecked_begin(), _Val);
  }

 void pop_front()
  {
  erase(begin());
  }

 void push_back(const _Ty& _Val)
  {
  _Insert(_Unchecked_end(), _Val);
  }

 void pop_back()
  {
  erase(--end());
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  iterator _Old = begin();
  try {
  for (; _First != _Last && _Old != end(); ++_First, ++_Old)
   _Reusenode(_Old, *_First);
  for (; _First != _Last; ++_First)
   _Insert(_Unchecked_end(), *_First);
  } catch (...) {
  clear();
  throw;
  }
  erase(_Old, end());
  }

 template<class _TArg>
  void _Reusenode(iterator _Where, _TArg&& _Arg)
  {
  try {
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Where._Ptr)));
  this->_Getal().construct(
   ::std:: addressof(this->_Myval(_Where._Ptr)),
   ::std:: forward<_TArg>(_Arg));
  } catch (...) {
  _Unlinknode(_Where);
  this->_Getal().destroy(
   ::std:: addressof(this->_Nextnode(_Where._Ptr)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Prevnode(_Where._Ptr)));
  this->_Getal().deallocate(_Where._Ptr, 1);
  throw;
  }
  }

 void assign(size_type _Count, const _Ty& _Val)
  {
  clear();
  _Insert_n(_Unchecked_begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {

  if (_Where._Getcont() != this)
   _Debug_message(L"list insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1342);


  _Insert(_Where._Unchecked(), _Val);
  return (_Make_iter(--_Where));
  }

 iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
  {

  if (_Where._Getcont() != this)
   _Debug_message(L"list insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1353);


  iterator _Prev = _Make_iter(_Where);
  if (_Prev == begin())
   {
   _Insert_n(_Where._Unchecked(), _Count, _Val);
   return (begin());
   }
  else
   {
   --_Prev;
   _Insert_n(_Where._Unchecked(), _Count, _Val);
   return (++_Prev);
   }
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {

  if (_Where._Getcont() != this)
   _Debug_message(L"list insert iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1377);


  iterator _Prev = _Make_iter(_Where);
  if (_Prev == begin())
   {
   _Insert_range(_Where._Unchecked(), _First, _Last,
    _Iter_cat(_First));
   return (begin());
   }
  else
   {
   --_Prev;
   _Insert_range(_Where._Unchecked(), _First, _Last,
    _Iter_cat(_First));
   return (++_Prev);
   }
  }

 template<class _Iter>
  void _Insert_range(_Unchecked_const_iterator _Where,
   _Iter _First, _Iter _Last, input_iterator_tag)
  {
  size_type _Num = 0;

  try {
  for (; _First != _Last; ++_First, ++_Num)
   _Insert(_Where, *_First);
  } catch (...) {
  for (; 0 < _Num; --_Num)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 template<class _Iter>
  void _Insert_range(_Unchecked_const_iterator _Where,
   _Iter _First, _Iter _Last, forward_iterator_tag)
  {
  _Debug_range(_First, _Last, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1419);
  _Iter _Next = _First;

  try {
  for (; _First != _Last; ++_First)
   _Insert(_Where, *_First);
  } catch (...) {
  for (; _Next != _First; ++_Next)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 _Nodeptr _Unlinknode(const_iterator _Where)
  {

  if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
   _Debug_message(L"list erase iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1439);
  _Nodeptr _Pnode = (_Where)._Mynode();
  _Orphan_ptr(*this, _Pnode);





  this->_Nextnode(this->_Prevnode(_Pnode)) =
   this->_Nextnode(_Pnode);
  this->_Prevnode(this->_Nextnode(_Pnode)) =
   this->_Prevnode(_Pnode);

  --this->_Mysize;
  return (_Pnode);
  }

 iterator erase(const_iterator _Where)
  {
  _Nodeptr _Pnode = _Unlinknode(_Where++);
  this->_Freenode(_Pnode);
  return (_Make_iter(_Where));
  }

 void _Unchecked_erase(_Unchecked_const_iterator _Where)
  {
  _Nodeptr _Pnode = _Where._Mynode();

  this->_Nextnode(this->_Prevnode(_Pnode)) =
   this->_Nextnode(_Pnode);
  this->_Prevnode(this->_Nextnode(_Pnode)) =
   this->_Prevnode(_Pnode);
  this->_Freenode(_Pnode);
  --this->_Mysize;
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (end());
   }
  else
   {
   while (_First != _Last)
    _First = erase(_First);
   return (_Make_iter(_Last));
   }
  }

 void clear() throw ()
  {

  this->_Orphan_ptr(*this, nullptr);


  _Nodeptr _Pnode = this->_Nextnode(this->_Myhead);
  this->_Nextnode(this->_Myhead) = this->_Myhead;
  this->_Prevnode(this->_Myhead) = this->_Myhead;
  this->_Mysize = 0;

  for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)
   {
   _Pnext = this->_Nextnode(_Pnode);
   this->_Freenode(_Pnode);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myhead, _Right._Myhead);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_adl(this->_Myhead, _Right._Myhead);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else


   _Debug_message(L"list containers incompatible for swap", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1529);




  }

 void splice(const_iterator _Where, _Myt& _Right)
  {
  if (this != &_Right && !_Right.empty())
   {
   _Splice(_Where, _Right, _Right.begin(), _Right.end(),
    _Right._Mysize);
   }
  }

 void splice(const_iterator _Where, _Myt&& _Right)
  {
  splice(_Where, (_Myt&)_Right);
  }

 void splice(const_iterator _Where, _Myt& _Right,
  const_iterator _First)
  {

  if (_First == _Right.end())
   _Debug_message(L"list splice iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1555);
  else





   {
   const_iterator _Last = _First;
   ++_Last;
   if (this != &_Right
    || (_Where != _First && _Where != _Last))
    _Splice(_Where, _Right, _First, _Last, 1);
   }
  }

 void splice(const_iterator _Where, _Myt&& _Right,
  const_iterator _First)
  {
  splice(_Where, (_Myt&)_Right, _First);
  }

 void splice(const_iterator _Where,
  _Myt& _Right, const_iterator _First, const_iterator _Last)
  {
  if (_First != _Last && (this != &_Right || _Where != _Last))
   {
   size_type _Count = 0;

   if (this == &_Right)
    ;
   else if (_First == _Right.begin() && _Last == _Right.end())
    _Count = _Right._Mysize;
   else
    {
    const_iterator _Next = _First;

    for (; _Next != _Last; ++_Next, ++_Count)
     if (_Next == _Right.end())
      _Xlength_error("list<T> bad splice");
    }
   _Splice(_Where, _Right, _First, _Last, _Count);
   }
  }

 void splice(const_iterator _Where,
  _Myt&& _Right, const_iterator _First, const_iterator _Last)
  {
  splice(_Where, (_Myt&)_Right, _First, _Last);
  }

 void remove(const _Ty& _Val)
  {
  iterator _Val_it = end();

  for (iterator _First = begin(); _First != end(); )
   if (*_First == _Val)
    if (::std:: addressof(*_First) == ::std:: addressof(_Val))
     _Val_it = _First++;
    else
     _First = erase(_First);
   else
    ++_First;

  if (_Val_it != end())
   erase(_Val_it);
  }

 template<class _Pr1>
  void remove_if(_Pr1 _Pred)
  {
  for (iterator _First = begin(); _First != end(); )
   if (_Pred(*_First))
    _First = erase(_First);
   else
    ++_First;
  }

 void unique()
  {
  unique(equal_to<>());
  }

 template<class _Pr2>
  void unique(_Pr2 _Pred)
  {
  const _Nodeptr _Phead = this->_Myhead;
  _Nodeptr _Pprev = this->_Nextnode(_Phead);
  _Nodeptr _Pnode = this->_Nextnode(_Pprev);

  while (_Pnode != _Phead)
   if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
    {
    const _Nodeptr _Perase = _Pnode;
    _Pnode = this->_Nextnode(_Pnode);

    this->_Nextnode(_Pprev) = _Pnode;
    this->_Prevnode(_Pnode) = _Pprev;
    this->_Freenode(_Perase);

    --this->_Mysize;
    }
   else
    {
    _Pprev = _Pnode;
    _Pnode = this->_Nextnode(_Pnode);
    }
  }

 void merge(_Myt& _Right)
  {
  merge(_Right, less<>());
  }

 void merge(_Myt&& _Right)
  {
  merge((_Myt&)_Right);
  }

 template<class _Pr2>
  void merge(_Myt& _Right, _Pr2 _Pred)
  {
  if (&_Right != this)
   {
   iterator _First1 = begin(), _Last1 = end();
   iterator _First2 = _Right.begin(), _Last2 = _Right.end();
   _Debug_order(_First1, _Last1, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1681);
   _Debug_order(_First2, _Last2, _Pred, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1682);

   while (_First1 != _Last1 && _First2 != _Last2)
    if (_Debug_lt_pred(_Pred, *_First2, *_First1, L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1685))
     {
     iterator _Mid2 = _First2;
     _Splice(_First1, _Right, _First2, ++_Mid2, 1);
     _First2 = _Mid2;
     }
    else
     ++_First1;

   if (_First2 != _Last2)
    _Splice(_Last1, _Right, _First2, _Last2,
     _Right._Mysize);
   }
  }

 template<class _Pr2>
  void merge(_Myt&& _Right, _Pr2 _Pred)
  {
  merge((_Myt&)_Right, _Pred);
  }

 void sort()
  {
  sort(less<>());
  }

 template<class _Pr2>
  void sort(_Pr2 _Pred)
  {
  if (2 <= this->_Mysize)
   {
   const size_t _MAXBINS = 25;
   _Myt _Templist(this->_Getal()), _Binlist[_MAXBINS + 1];
   size_t _Maxbin = 0;

   while (!empty())
    {
    _Templist._Splice_same(_Templist.begin(), *this, begin(),
     ++begin(), 1);

    size_t _Bin;
    for (_Bin = 0; _Bin < _Maxbin && !_Binlist[_Bin].empty();
     ++_Bin)
     {
     _Binlist[_Bin].merge(_Templist, _Pred);
     _Binlist[_Bin].swap(_Templist);
     }

    if (_Bin == _MAXBINS)
     _Binlist[_Bin - 1].merge(_Templist, _Pred);
    else
     {
     _Binlist[_Bin].swap(_Templist);
     if (_Bin == _Maxbin)
      ++_Maxbin;
     }
    }

   for (size_t _Bin = 1; _Bin < _Maxbin; ++_Bin)
    _Binlist[_Bin].merge(_Binlist[_Bin - 1],
     _Pred);

                                 ;

   splice(begin(), _Binlist[_Maxbin - 1]);
   }
  }

 void reverse() throw ()
  {
  const _Nodeptr _Phead = this->_Myhead;
  _Nodeptr _Pnode = _Phead;

  for (; ; )
   {
   const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
   this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
   this->_Prevnode(_Pnode) = _Pnext;

   if (_Pnext == _Phead)
    break;
   _Pnode = _Pnext;
   }
  }

 void _Splice(const_iterator _Where,
  _Myt& _Right, const_iterator _First, const_iterator _Last,
  size_type _Count)
  {

  if (_Where._Getcont() != this)
   _Debug_message(L"list splice iterator outside range", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1776);
  if (this->_Getal() != _Right._Getal())
   _Debug_message(L"list containers incompatible for splice", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1778);

  if (this != &_Right)
   {
   _Lockit _Lock(3);

   const bool _One = _Count == 1;
   const bool _All = _Count == _Right.size();
   const bool _Some = !_One && !_All;

   _Nodeptr _Oldprev = _First._Ptr->_Prev;

   if (_Some)
    for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
     _Ptr = _Ptr->_Next)
     {
     _Ptr->_Prev = 0;
     }

   const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();

   if (_Pnext == 0)
    _Debug_message(L"list container corrupted", L"D:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include\\list", 1800);

   while (*_Pnext != 0)
    {
    const_iterator& _Iter = **_Pnext;

    if ((_One && _Iter._Ptr == _First._Ptr)
     || (_All && _Iter._Ptr != _Right._Myhead)
     || (_Some && _Iter._Ptr->_Prev == 0))
     {
     *_Pnext = (const_iterator *)_Iter._Mynextiter;
     _Iter._Myproxy = this->_Myproxy;
     _Iter._Mynextiter = this->_Myproxy->_Myfirstiter;
     this->_Myproxy->_Myfirstiter = &_Iter;
     }
    else
     {
     _Pnext = (const_iterator **)_Iter._Getpnext();
     }
    }

   if (_Some)
    for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
     _Ptr = _Ptr->_Next)
     {
     _Ptr->_Prev = _Oldprev;
     _Oldprev = _Ptr;
     }
   }






  _Splice_same(_Where, _Right, _First, _Last, _Count);
  }

 void _Splice_same(const_iterator _Where,
  _Myt& _Right, const_iterator _First, const_iterator _Last,
  size_type _Count)
  {
  if (this != &_Right)
   {
   _Incsize(_Count);
   _Right._Mysize -= _Count;
   }
  this->_Nextnode(this->_Prevnode(_First._Mynode())) =
   _Last._Mynode();
  this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
   _Where._Mynode();
  this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
   _First._Mynode();

  _Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
  this->_Prevnode(_Where._Mynode()) =
   this->_Prevnode(_Last._Mynode());
  this->_Prevnode(_Last._Mynode()) =
   this->_Prevnode(_First._Mynode());
  this->_Prevnode(_First._Mynode()) = _Pnode;
  }

 void _Unchecked_splice(_Unchecked_const_iterator _Where,
  _Unchecked_const_iterator _First,
  _Unchecked_const_iterator _Last)
  {
  this->_Nextnode(this->_Prevnode(_First._Mynode())) =
   _Last._Mynode();
  this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
   _Where._Mynode();
  this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
   _First._Mynode();

  _Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
  this->_Prevnode(_Where._Mynode()) =
   this->_Prevnode(_Last._Mynode());
  this->_Prevnode(_Last._Mynode()) =
   this->_Prevnode(_First._Mynode());
  this->_Prevnode(_First._Mynode()) = _Pnode;
  }

 void _Tidy()
  {
  clear();
  }

 void _Insert_n(_Unchecked_const_iterator _Where,
  size_type _Count, const _Ty& _Val)
  {
  size_type _Countsave = _Count;

  try {
  for (; 0 < _Count; --_Count)
   _Insert(_Where, _Val);
  } catch (...) {
  for (; _Count < _Countsave; ++_Count)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 void _Incsize(size_type _Count)
  {
  if (max_size() - this->_Mysize - 1 < _Count)
   _Xlength_error("list<T> too long");
  this->_Mysize += _Count;
  }


 void _Orphan_ptr(_Myt& _Cont, _Nodeptr _Ptr) const
  {
  _Lockit _Lock(3);
  const_iterator **_Pnext = (const_iterator **)_Cont._Getpfirst();
  if (_Pnext != 0)
   while (*_Pnext != 0)
    if ((*_Pnext)->_Ptr == this->_Myhead
     || (_Ptr != 0 && (*_Pnext)->_Ptr != _Ptr))
     _Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
    else
     {
     (*_Pnext)->_Clrcont();
     *_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
     }
  }

 };



template<class _Ty,
 class _Alloc> inline
 void swap(list<_Ty, _Alloc>& _Left, list<_Ty, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 24 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"


using namespace std;
#line 164 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source\\Core.h"
typedef unsigned int EntityId;
typedef unsigned int EntityRepresentationId;
typedef unsigned char Key;
typedef unsigned int StateId;
typedef unsigned int MaterialId;
typedef map<string, int> ContentMap;

enum SystemMessageType
{
 SMT_Quit,
 SMT_KeyDown,
 SMT_KeyUp,
 SMT_LMouseDown,
 SMT_LMouseUp,
 SMT_RMouseDown,
 SMT_RMouseUp,
 SMT_MouseMove,
};

enum ShaderType
{
 ST_Vertex,
 ST_Hull,
 ST_Domain,
 ST_Geometry,
 ST_Pixel,
 ST_Compute
};

enum LightType
{
 LT_Point = 1,
 LT_Spot = 2,
 LT_Directional = 3,
};
#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Root.cpp"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Root.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Representation.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Math/Vector.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Math/Math.h"


struct Math
{
 static __forceinline float Sin(float value) { return sinf(value); }
 static __forceinline float Cos(float value) { return cosf(value); }
 static __forceinline float Tan(float value) { return tanf(value); }
 static __forceinline float Atan(float value) { return atanf(value); }
 static __forceinline float Sqrt(float value) { return sqrtf(value); }
 static __forceinline float Pow(float a, float b) { return powf(a, b); }

 static __forceinline float InvSqrt(float f)
 {
  return 1.f / sqrtf(f);
 }

 template<typename T>
 static __forceinline T Abs(const T a)
 {
  return (a > (T)0) ? a : -a;
 }

 template<typename T>
 static __forceinline T Max(const T a, const T b)
 {
  return (a >= b) : a : b;
 }

 template<typename T>
 static __forceinline T Min(const T a, const T b)
 {
  return (a <= b) ? a : b;
 }

 template<typename T>
 static __forceinline T Lerp(const T & a, const T & b, double coeff)
 {
  return (T)(a + (a - b)*coeff);
 }

 template<typename T>
 static __forceinline T Clamp(T value, T min, T max)
 {
  if (value <= min)
   return min;
  if (value >= max)
   return max;

  return value;
 }
};


template<>
__forceinline float Math::Abs(const float a)
{
 return fabsf(a);
}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Math/Vector.h"


class Vec
{
public:

 float x, y, z, w;

 static const Vec g_up4;
 static const Vec g_right4;
 static const Vec g_left4;
 static const Vec g_forward4;
 static const Vec g_back4;

 __forceinline static Vec Normalize(const Vec & v);

public:



 __forceinline Vec() = default;
#line 33 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Math/Vector.h"
 __forceinline Vec(float inX, float inY, float inZ, float inW);







 __forceinline Vec(const Vec & v, float w);

 __forceinline float & operator[](int index);

 __forceinline float operator[](int index) const;

 __forceinline void Set(float inX, float inY, float inZ, float inW);

 __forceinline Vec operator-() const;

 __forceinline Vec & operator+=(const Vec & v);

 __forceinline Vec & operator-=(const Vec & v);

 __forceinline Vec & operator*=(const Vec & v);

 __forceinline Vec & operator/=(const Vec & v);

 __forceinline Vec operator*(float scale) const;

 __forceinline Vec & operator*=(float scale);

 __forceinline Vec operator/(float scale) const;


 __forceinline bool operator==(const Vec & v) const;

 __forceinline bool operator!=(const Vec & v) const;

 __forceinline const Vec & Normalize();

 __forceinline float Length() const;

 __forceinline Vec Reflect(const Vec & normal) const;
};

const Vec g_up4 = Vec{ 0.0f, 1.0f, 0.0f, 0.0f };
const Vec g_right4 = Vec{ 1.0f, 0.0f, 0.0f, 0.0f };
const Vec g_left4 = Vec{ -1.0f, 0.0f, 0.0f, 0.0f };
const Vec g_forward4 = Vec{ 0.0f, 0.0f, 1.0f, 0.0f };
const Vec g_back4 = Vec{ 0.0f, 0.0f, -1.0f, 0.0f };

__forceinline Vec Vec::Normalize(const Vec & v)
{
 const float scale = Math::InvSqrt(v.x*v.x + v.y*v.y + v.z*v.z);

 return Vec{ v.x * scale, v.y * scale, v.z * scale, v.w * scale };
}

__forceinline Vec::Vec(float inX, float inY, float inZ, float inW)
 : x{ inX }, y{ inY }, z{ inZ }, w{ inW }
{}

__forceinline Vec::Vec(const Vec & v, float w)
 : x{ v.x }, y{ v.y }, z{ v.z }, w{ w }
{}

__forceinline float & Vec::operator[](int index)
{
 return (&x)[index];
}

__forceinline float Vec::operator[](int index) const
{
 return (&x)[index];
}

__forceinline void Vec::Set(float inX, float inY, float inZ, float inW)
{
 x = inX;
 y = inY;
 z = inZ;
 w = inW;
}

__forceinline Vec Vec::operator-() const
{
 return Vec{ -x, -y, -z, -w };
}

__forceinline Vec & Vec::operator+=(const Vec & v)
{
 x += v.x;
 y += v.y;
 z += v.z;
 w += v.w;

 return *this;
}

__forceinline Vec & Vec::operator-=(const Vec & v)
{
 x -= v.x;
 y -= v.y;
 z -= v.z;
 w -= v.w;

 return *this;
}

__forceinline Vec & Vec::operator*=(const Vec & v)
{
 x *= v.x;
 y *= v.y;
 z *= v.z;
 w *= v.w;

 return *this;
}

__forceinline Vec & Vec::operator/=(const Vec & v)
{
 x /= v.x;
 y /= v.y;
 z /= v.z;
 w /= v.w;

 return *this;
}

__forceinline Vec Vec::operator*(float scale) const
{
 return Vec{ x * scale, y * scale, z * scale, w * scale };
}

__forceinline Vec & Vec::operator*=(float scale)
{
 x *= scale;
 y *= scale;
 z *= scale;
 w *= scale;

 return *this;
}

__forceinline Vec Vec::operator/(float scale) const
{
 float rscale = 1.f / scale;
 return Vec{ x * scale, y * scale, z * scale, w * scale };
}

__forceinline bool Vec::operator==(const Vec & v) const
{
 return ((x == v.x) && (y == v.y) && (z == v.z) && (w == v.w));
}

__forceinline bool Vec::operator!=(const Vec & v) const
{
 return ((x != v.x) || (y != v.y) || (z != v.z) || (w != v.w));
}

__forceinline const Vec & Vec::Normalize()
{
 const float scale = Math::InvSqrt(x*x + y*y + z*z);

 x *= scale;
 y *= scale;
 z *= scale;
 w *= scale;

 return *this;
}

__forceinline float Vec::Length() const
{
 return Math::Sqrt(x*x + y*y + z*z);
}

__forceinline Vec operator+(Vec v1, const Vec & v2)
{
 v1 += v2;
 return v1;
}

__forceinline Vec operator-(Vec v1, const Vec & v2)
{
 v1 -= v2;
 return v1;
}

__forceinline Vec operator*(Vec v1, const Vec & v2)
{
 v1 *= v2;
 return v1;
}

__forceinline Vec operator/(Vec v1, const Vec & v2)
{
 v1 /= v2;
 return v1;
}

__forceinline Vec operator^(Vec v1, const Vec & v2)
{
 return Vec
  {
   v1.y * v2.z - v1.z * v2.y,
   v1.z * v2.x - v1.x * v2.z,
   v1.x * v2.y - v1.y * v2.x,
   0.0f
  };
}






__forceinline float Dot3(const Vec & v1, const Vec & v2)
{
 return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}

__forceinline float Dot4(const Vec & v1, const Vec & v2)
{
 return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z + v1.w * v2.w;
}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Representation.h"

#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Math/Matrix.h"




class Mat4x4
{
public:
 union
 {
  float m[4][4];
 };

 static const Mat4x4 Identity;

 __forceinline static Mat4x4 CreateViewMatrixLH(const Vec & pos, const Vec & lookDir, const Vec & up);
 __forceinline static Mat4x4 CreatePerspectiveProjectionLH(float fov, float aspect, float nearZ, float farZ);
 __forceinline static Mat4x4 CreateOrthoProjectionLH(float width, float height, float nearZ, float farZ);
 __forceinline static Mat4x4 CreateTranslation(const Vec & vec);
 __forceinline static Mat4x4 CreateRotationX(float angleInRadians);
 __forceinline static Mat4x4 CreateRotationY(float angleInRadians);
 __forceinline static Mat4x4 CreateRotationZ(float angleInRadians);
 __forceinline static Mat4x4 CreateScaling(const Vec & scale);
 __forceinline static Mat4x4 CreateScaling(float x, float y, float z);
 __forceinline static Mat4x4 CreateRollPitchYaw(float rollInRadians, float pitchInRadians, float yawInRadians);





 __forceinline Mat4x4();

 __forceinline Mat4x4(float m11, float m12, float m13, float m14,
  float m21, float m22, float m23, float m24,
  float m31, float m32, float m33, float m34,
  float m41, float m42, float m43, float m44);

 __forceinline Mat4x4(const Vec & v1, const Vec & v2, const Vec & v3, const Vec & v4);

 __forceinline void SetIdentity();

 __forceinline Mat4x4 GetTransposed() const;

 __forceinline void Transpose();

 __forceinline Mat4x4 & operator*=(const Mat4x4 & other);

 __forceinline Mat4x4 & operator*=(float other);

 __forceinline Mat4x4 & operator+=(const Mat4x4 & other);

 __forceinline Mat4x4 & operator-=(const Mat4x4 & other);

 __forceinline bool operator==(const Mat4x4 & other) const;

 __forceinline bool operator!=(const Mat4x4 & other) const;
};

__forceinline Mat4x4::Mat4x4()
{
 m[0][0] = 1.0f; m[0][1] = 0.0f; m[0][2] = 0.0f; m[0][3] = 0.0f;
 m[1][0] = 0.0f; m[1][1] = 1.0f; m[1][2] = 0.0f; m[1][3] = 0.0f;
 m[2][0] = 0.0f; m[2][1] = 0.0f; m[2][2] = 1.0f; m[2][3] = 0.0f;
 m[3][0] = 0.0f; m[3][1] = 0.0f; m[3][2] = 0.0f; m[3][3] = 1.0f;
}

__forceinline Mat4x4::Mat4x4(float m11, float m12, float m13, float m14,
 float m21, float m22, float m23, float m24,
 float m31, float m32, float m33, float m34,
 float m41, float m42, float m43, float m44)
{
 m[0][0] = m11; m[0][1] = m12; m[0][2] = m13; m[0][3] = m14;
 m[1][0] = m21; m[1][1] = m22; m[1][2] = m23; m[1][3] = m24;
 m[2][0] = m31; m[2][1] = m32; m[2][2] = m33; m[2][3] = m34;
 m[3][0] = m41; m[3][1] = m42; m[3][2] = m43; m[3][3] = m44;
}

__forceinline Mat4x4::Mat4x4(const Vec & v1, const Vec & v2, const Vec & v3, const Vec & v4)
{
 m[0][0] = v1.x; m[0][1] = v1.y; m[0][2] = v1.z; m[0][3] = v1.w;
 m[1][0] = v2.x; m[1][1] = v2.y; m[1][2] = v2.z; m[1][3] = v2.w;
 m[2][0] = v3.x; m[2][1] = v3.y; m[2][2] = v3.z; m[2][3] = v3.w;
 m[3][0] = v4.x; m[3][1] = v4.y; m[3][2] = v4.z; m[3][3] = v4.w;
}

__forceinline Mat4x4 & Mat4x4::operator*=(const Mat4x4 & other)
{
 for (int i = 0; i < 4; i++)
 {
  for (int j = 0; j < 4; j++)
  {
   m[i][j] *= other.m[i][j];
  }
 }

 return *this;
}

__forceinline Mat4x4 & Mat4x4::operator+=(const Mat4x4 & other)
{
 for (int i = 0; i < 4; i++)
 {
  for (int j = 0; j < 4; j++)
  {
   m[i][j] += other.m[i][j];
  }
 }

 return *this;
}

__forceinline Mat4x4 & Mat4x4::operator-=(const Mat4x4 & other)
{
 for (int i = 0; i < 4; i++)
 {
  for (int j = 0; j < 4; j++)
  {
   m[i][j] -= other.m[i][j];
  }
 }

 return *this;
}

__forceinline Mat4x4 & Mat4x4::operator*=(float other)
{
 for (int i = 0; i < 4; i++)
 {
  for (int j = 0; j < 4; j++)
  {
   m[i][j] *= other;
  }
 }

 return *this;
}

__forceinline Mat4x4 operator*(Mat4x4 m1, const Mat4x4 & m2)
{
 m1 *= m2;
 return m1;
}

__forceinline Mat4x4 operator*(Mat4x4 m, float other)
{
 m *= other;
 return m;
}

__forceinline Mat4x4 operator+(Mat4x4 m1, const Mat4x4 & m2)
{
 m1 += m2;
 return m1;
}

__forceinline Mat4x4 operator-(Mat4x4 m1, const Mat4x4 & m2)
{
 m1 -= m2;
 return m1;
}

__forceinline bool Mat4x4::operator==(const Mat4x4 & other) const
{
 for (int i = 0; i < 4; i++)
 {
  for (int j = 0; j < 4; j++)
  {
   if (m[i][j] != other.m[i][j])
   {
    return false;
   }
  }
 }

 return true;
}

__forceinline bool Mat4x4::operator!=(const Mat4x4 & other) const
{
 for (int i = 0; i < 4; i++)
 {
  for (int j = 0; j < 4; j++)
  {
   if (m[i][j] != other.m[i][j])
   {
    return true;
   }
  }
 }

 return false;
}


__forceinline Mat4x4 Mat4x4::CreateViewMatrixLH(const Vec & pos, const Vec & lookDir, const Vec & up)
{
 Vec & zaxis = Vec::Normalize(lookDir);
 Vec & xaxis = Vec::Normalize(up ^ zaxis);
 Vec & yaxis = zaxis ^ xaxis;

 return Mat4x4{ xaxis.x, yaxis.x, zaxis.x, 0.0f,
     xaxis.y, yaxis.y, zaxis.y, 0.0f,
     xaxis.z, yaxis.z, zaxis.z, 0.0f,
     -Dot4(xaxis, pos), -Dot4(yaxis, pos), -Dot4(zaxis, pos), 1.0f };
}

__forceinline Mat4x4 Mat4x4::CreatePerspectiveProjectionLH(float fov, float aspect, float nearZ, float farZ)
{
 float SinFov = Math::Sin(fov * 0.5f);
 float CosFov = Math::Cos(fov * 0.5f);

 float height = CosFov / SinFov;
 float width = height / aspect;

 return Mat4x4{ width, 0.0f, 0.0f, 0.0f,
     0.0f, height, 0.0f, 0.0f,
     0.0f, 0.0f, farZ / (farZ - nearZ), 1.0f,
     0.0f, 0.0f, -nearZ*farZ / (farZ - nearZ), 0.0f };
}

__forceinline Mat4x4 Mat4x4::CreateOrthoProjectionLH(float width, float height, float nearZ, float farZ)
{
 return Mat4x4{ 2.0f / width, 0.0f, 0.0f, 0.0f,
     0.0f, 2.0f / height, 0.0f, 0.0f,
     0.0f, 0.0f, 1.0f / (farZ - nearZ), 0.0f,
     0.0f, 0.0f, nearZ / (nearZ - farZ), 1.0f };
}

__forceinline Mat4x4 Mat4x4::CreateTranslation(const Vec & vec)
{
 return Mat4x4{ 1.0f, 0.0f, 0.0f, 0.0f,
     0.0f, 1.0f, 0.0f, 0.0f,
     0.0f, 0.0f, 1.0f, 0.0f,
     vec.x, vec.y, vec.z, vec.w };
}

__forceinline Mat4x4 Mat4x4::CreateRotationX(float angleInRadians)
{
 return Mat4x4{ 1.0f, 0.0f, 0.0f, 0.0f,
  1.0f, Math::Cos(angleInRadians), Math::Sin(angleInRadians), 0.0f,
  0.0f, -Math::Sin(angleInRadians), Math::Cos(angleInRadians), 0.0f,
  0.0f, 0.0f, 0.0f, 1.0f };
}

__forceinline Mat4x4 Mat4x4::CreateRotationY(float angleInRadians)
{
 return Mat4x4{ Math::Cos(angleInRadians), 0.0f, -Math::Sin(angleInRadians), 0.0f,
  0.0f, 1.0f, 0.0f, 0.0f,
  Math::Sin(angleInRadians), 0.0f, Math::Cos(angleInRadians), 0.0f,
  0.0f, 0.0f, 0.0f, 1.0f };
}

__forceinline Mat4x4 Mat4x4::CreateRotationZ(float angleInRadians)
{
 return Mat4x4{ Math::Cos(angleInRadians), Math::Sin(angleInRadians), 0.0f, 0.0f,
  -Math::Sin(angleInRadians), Math::Cos(angleInRadians), 0.0f, 0.0f,
  0.0f, 0.0f, 1.0f, 0.0f,
  0.0f, 0.0f, 0.0f, 1.0f };
}

__forceinline Mat4x4 Mat4x4::CreateScaling(const Vec & scale)
{
 return Mat4x4{ scale.x, 0.0f, 0.0f, 0.0f,
  0.0f, scale.y, 0.0f, 0.0f,
  0.0f, 0.0f, scale.z, 0.0f,
  0.0f, 0.0f, 0.0f, 1.0f };
}

__forceinline Mat4x4 Mat4x4::CreateScaling(float x, float y, float z)
{
 return Mat4x4{ x, 0.0f, 0.0f, 0.0f,
  0.0f, y, 0.0f, 0.0f,
  0.0f, 0.0f, z, 0.0f,
  0.0f, 0.0f, 0.0f, 1.0f };
}

__forceinline Mat4x4 Mat4x4::CreateRollPitchYaw(float rollInRadians, float pitchInRadians, float yawInRadians)
{
 return CreateRotationZ(rollInRadians) * CreateRotationX(pitchInRadians) * CreateRotationY(yawInRadians);
}

__forceinline Mat4x4 Mat4x4::GetTransposed() const
{
 Mat4x4 mat;

 mat.m[0][0] = m[0][0];
 mat.m[0][1] = m[1][0];
 mat.m[0][2] = m[2][0];
 mat.m[0][3] = m[3][0];

 mat.m[1][0] = m[0][1];
 mat.m[1][1] = m[1][1];
 mat.m[1][2] = m[2][1];
 mat.m[1][3] = m[3][1];

 mat.m[2][0] = m[0][2];
 mat.m[2][1] = m[1][2];
 mat.m[2][2] = m[2][2];
 mat.m[2][3] = m[3][2];

 mat.m[3][0] = m[0][3];
 mat.m[3][1] = m[1][3];
 mat.m[3][2] = m[2][3];
 mat.m[3][3] = m[3][3];

 return mat;
}

__forceinline void Mat4x4::Transpose()
{
 Mat4x4 temp = GetTransposed();
 *this = temp;
}

__forceinline Vec operator*(const Vec & v, const Mat4x4 & M)
{
 return Vec(v.x * M.m[0][0] + v.y * M.m[1][0] + v.z * M.m[2][0] + v.w * M.m[3][0],
  v.x * M.m[0][1] + v.y * M.m[1][1] + v.z * M.m[2][1] + v.w * M.m[3][1],
  v.x * M.m[0][2] + v.y * M.m[1][2] + v.z * M.m[2][2] + v.w * M.m[3][2],
  v.x * M.m[0][3] + v.y * M.m[1][3] + v.z * M.m[2][3] + v.w * M.m[3][3]);
}

class MatrixStack
{
private:
 vector<Mat4x4> m_matrices;
 unsigned char m_count;

public:

 __forceinline MatrixStack();


 __forceinline const Mat4x4 & Get() const;


 __forceinline unsigned char Count() const;


 __forceinline void Pop();


 __forceinline void PushTransform(const Mat4x4 & mat);
};

__forceinline MatrixStack::MatrixStack()
 : m_count{ 1 }
{
 m_matrices.reserve(10);
 m_matrices.emplace_back();
}


__forceinline const Mat4x4 & MatrixStack::Get() const
{
 return m_matrices.back();
}


__forceinline unsigned char MatrixStack::Count() const
{
 return m_count;
}


__forceinline void MatrixStack::Pop()
{
 m_matrices.pop_back();
 --m_count;
}


__forceinline void MatrixStack::PushTransform(const Mat4x4 & mat)
{
 m_matrices.push_back(m_matrices.back() * mat);
 ++m_count;
}
#line 4 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Representation.h"

#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Lights/Light.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Lights/../Objects/IMovable.h"




class IMovable
{
protected:

 Mat4x4 m_worldTransform;

public:

 virtual void SetWorldTransform(const Mat4x4 & transform) = 0;
 __forceinline const Mat4x4 & GetWorldTransform() const;
};

__forceinline const Mat4x4 & IMovable::GetWorldTransform() const
{
 return m_worldTransform;
}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Lights/Light.h"


class Light : public IMovable
{
public:

 __forceinline Light(const Vec & color, const Vec & pos,
  const Vec & dir, float range);

 virtual void SetWorldTransform(const Mat4x4 & transform) override;
 virtual LightType VGetType() const = 0;

 __forceinline const Vec & GetColor() const;
 __forceinline const Vec & GetPos() const;
 __forceinline const Vec & GetDir() const;
 __forceinline const float GetRange() const;

protected:
 Vec m_color;
 Vec m_pos;
 Vec m_dir;

 float m_range;
};

__forceinline const Vec & Light::GetColor() const
{
 return m_color;
}

__forceinline const Vec & Light::GetPos() const
{
 return m_pos;
}

__forceinline const Vec & Light::GetDir() const
{
 return m_dir;
}

__forceinline const float Light::GetRange() const
{
 return m_range;
}
#line 5 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Representation.h"

#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/Mesh.h"




#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/VertexBuffer.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/Buffers.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/../../General.h"


struct Viewport;
class RenderTargetView;
class DepthStencilView;
class DX11API
{
private:

 static ID3D11Device* g_d3d11Device;
 static ID3D11DeviceContext* g_d3d11DeviceContext;
 static IDXGISwapChain* g_pSwapChain;

 static unique_ptr<RenderTargetView> g_pBackBufferRTV;
 static unique_ptr<DepthStencilView> g_pDepthStencilView;
 static unique_ptr<Viewport> g_pViewport;

public:






 static bool InitializeGraphics(HWND hWnd);

 static void Dispatch(int groupCountX, int groupCountY, int groupCountZ);
 static void Draw(int vertexCount, int startVertexLocation);
 static void DrawIndexed(int indexCount, int startIndexLocation, int baseVertexLocation);

 static ID3D11Device* D3D11Device();
 static ID3D11DeviceContext* D3D11DeviceContext();

 void BindGlobalRenderTargetView();
 void BindGlobalRenderTargetView(DepthStencilView* pDepthStencilView);
 void BindGlobalDepthStencilView(DepthStencilView * pDepthStencilView);
 void BindGlobalViewport();






 static void ClearRenderTargetView(const float * color, RenderTargetView * pView);
#line 54 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/../../General.h"
 static void ClearDepthStencilView(bool depth, bool stencil, float depthValue,
  unsigned int stencilValue, DepthStencilView * pView);







 static void UnbindShaderResourceViews(unsigned int slot, unsigned int numviews, ShaderType shadertype);






 void UnbindUnorderedAccessViews(unsigned int slot, unsigned int numviews);





 static void UnbindRenderTargetViews(unsigned int numviews);





 static void UnbindGeometryShader();




 static void PresentBackBuffer();
};
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/Buffers.h"

#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/../GraphicsResource.h"


struct GraphicsBox : public D3D11_BOX
{
public:

 __forceinline GraphicsBox(unsigned int left, unsigned int top, unsigned int front,
  unsigned int right, unsigned int bottom, unsigned int back);
};

__forceinline GraphicsBox::GraphicsBox(unsigned int left, unsigned int top, unsigned int front,
 unsigned int right, unsigned int bottom, unsigned int back)
{
 this->left = left;
 this->top = top;
 this->front = front;
 this->right = right;
 this->bottom = bottom;
 this->back = back;
}

struct SubresourceData : public D3D11_SUBRESOURCE_DATA
{};
#line 4 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/Buffers.h"


class Buffer
{
protected:
 ID3D11Buffer* m_pBuffer;

public:

 __forceinline Buffer();
 virtual ~Buffer();

 __forceinline ID3D11Resource* GetResourcePointer() const;

 __forceinline void UpdateSubresource(unsigned int destSubresource, const GraphicsBox * pBox,
  const void * pSrcData, unsigned int srcRowPitch, unsigned int srcDepthPitch);

 __forceinline bool Create(const D3D11_BUFFER_DESC & desc, const SubresourceData *, unsigned int numElements = 0);
};

__forceinline Buffer::Buffer()
 : m_pBuffer{ nullptr }
{}

__forceinline ID3D11Resource* Buffer::GetResourcePointer() const
{
 return static_cast<ID3D11Resource*>(m_pBuffer);
}

__forceinline void Buffer::UpdateSubresource(unsigned int destSubresource, const GraphicsBox * pBox,
 const void * pSrcData, unsigned int srcRowPitch, unsigned int srcDepthPitch)
{
 DX11API::D3D11DeviceContext()->UpdateSubresource(m_pBuffer, destSubresource, pBox, pSrcData, srcRowPitch, srcDepthPitch);
}

__forceinline bool Buffer::Create(const D3D11_BUFFER_DESC & desc, const SubresourceData * pData, unsigned int numElements)
{
 HRESULT hr = DX11API::D3D11Device()->CreateBuffer(&desc, pData, &m_pBuffer);

 if (hr == ((HRESULT)0L)) return true; else { switch (hr) { case ((HRESULT)0L): break; case ((HRESULT)1L): OutputDebugStringA("Completed without error, but only partial results were obtained. 							If a buffer is not large enough to hold the information that is returned 							to it, the returned information is often truncated to fit into the buffer 							and S_FALSE is returned from the method."); break; case ((HRESULT)0x80004005L): OutputDebugStringA("Operation couldn't be performed."); break; case ((HRESULT)0x80070057L): OutputDebugStringA("One of the arguments passed in was invalid."); break; case ((HRESULT)0x80004002L): OutputDebugStringA("The object searched for was not found."); break; case ((HRESULT)0x8007000EL): OutputDebugStringA("A memory allocation attempt failed."); break; case ((HRESULT)0x8000FFFFL): OutputDebugStringA("The target was not accessible, ot the engine was not in a state 							where the function or method could be processed."); break; case ((HRESULT)0x80004001L): OutputDebugStringA("Not implemented."); break; default: OutputDebugStringA("File not found."); break; }; __asm { int 3 };; return false; };;
}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/VertexBuffer.h"


class VertexBuffer : public Buffer
{
protected:
 unsigned int m_vertexSize;
 unsigned int m_vertexCount;

public:
 __forceinline bool Create(const D3D11_BUFFER_DESC & desc, const SubresourceData * pData, unsigned int numElements, unsigned int elementSize);
 __forceinline void Bind(unsigned int startSlot, unsigned int offset) const;
 __forceinline void Bind(unsigned int startSlot, unsigned int offset, unsigned int vertexSize) const;
 __forceinline unsigned int Count() const;
};

__forceinline bool VertexBuffer::Create(const D3D11_BUFFER_DESC & desc, const SubresourceData * pData, unsigned int numElements, unsigned int elementSize)
{
 m_vertexCount = numElements;
 m_vertexSize = elementSize;

 return Buffer::Create(desc, pData, numElements);
}

__forceinline void VertexBuffer::Bind(unsigned int startSlot, unsigned int offset) const
{
 DX11API::D3D11DeviceContext()->IASetVertexBuffers(startSlot, 1, &m_pBuffer, &m_vertexSize, &offset);
}

__forceinline void VertexBuffer::Bind(unsigned int startSlot, unsigned int offset, unsigned int vertexSize) const
{
 DX11API::D3D11DeviceContext()->IASetVertexBuffers(startSlot, 1, &m_pBuffer, &vertexSize, &offset);
}

__forceinline unsigned int VertexBuffer::Count() const
{
 return m_vertexCount;
}
#line 5 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/Mesh.h"

#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/IndexBuffer.h"




class IndexBuffer : public Buffer
{
protected:
 DXGI_FORMAT m_format;
 unsigned int m_indexSize;
 unsigned int m_indexCount;

public:

 __forceinline void Bind(unsigned int offset) const;

 __forceinline bool Create(const D3D11_BUFFER_DESC & desc, const SubresourceData * pData,
  unsigned int numElements, unsigned int elementSize);

 __forceinline unsigned int Count() const;
};

__forceinline void IndexBuffer::Bind(unsigned int offset) const
{
 DX11API::D3D11DeviceContext()->IASetIndexBuffer(m_pBuffer, m_format, offset);
}

__forceinline bool IndexBuffer::Create(const D3D11_BUFFER_DESC & desc, const SubresourceData * pData,
 unsigned int numElements, unsigned int elementSize)
{
 m_indexCount = numElements;
 m_indexSize = elementSize;

 if (elementSize == 4)
 {
  m_format = DXGI_FORMAT_R32_UINT;
 }
 else if (elementSize == 2)
 {
  m_format = DXGI_FORMAT_R16_UINT;
 }
 else
 {
  (void)( (!!(0 && "Index size should be size of 2 or 4 bytes!")) || (_wassert(L"0 && \"Index size should be size of 2 or 4 bytes!\"", L"D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../../Graphics/Resources/Buffers/IndexBuffer.h", 43), 0) );
 }

 return Buffer::Create(desc, pData, numElements);
}

__forceinline unsigned int IndexBuffer::Count() const
{
 return m_indexCount;
}
#line 6 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/Mesh.h"

#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../Materials/Material.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../Materials/../../Graphics/Resources/Textures/Texture2D.h"


#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../Materials/../../Graphics/Resources/Textures/Texture.h"


struct ShaderResourceViewParams;
struct UnorderedAccessViewParams;
struct DepthStencilViewParams;
struct RenderTargetViewParams;
class ShaderResourceView;
class UnorderedAccessView;
class DepthStencilView;
class RenderTargetView;
class ITexture
{
public:







 virtual bool CreateShaderResourceView(ShaderResourceView & view,
  const ShaderResourceViewParams & params) const = 0;

 virtual bool CreateShaderResourceView(ID3D11ShaderResourceView** ppView,
  const ShaderResourceViewParams & params) const = 0;







 virtual bool CreateUnorderedAccessView(UnorderedAccessView & view,
  const UnorderedAccessViewParams & params) const = 0;

 virtual bool CreateUnorderedAccessView(ID3D11UnorderedAccessView** ppView,
  const UnorderedAccessViewParams & params) const = 0;







 virtual bool CreateRenderTargetView(RenderTargetView & view,
  const RenderTargetViewParams & params) const = 0;

 virtual bool CreateRenderTargetView(ID3D11RenderTargetView** ppView,
  const RenderTargetViewParams & params) const = 0;







 virtual bool CreateDepthStencilView(DepthStencilView & view,
  const DepthStencilViewParams & params) const = 0;

 virtual bool CreateDepthStencilView(ID3D11DepthStencilView** ppView,
  const DepthStencilViewParams & params) const = 0;

};
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../Materials/../../Graphics/Resources/Textures/Texture2D.h"


struct ShaderResourceViewParams;
struct UnorderedAccessViewParams;
struct DepthStencilViewParams;
struct RenderTargetViewParams;
class ShaderResourceView;
class UnorderedAccessView;
class DepthStencilView;
class RenderTargetView;

struct Texture2DParams : public D3D11_TEXTURE2D_DESC
{
public:
 __forceinline Texture2DParams();

 __forceinline void Init(unsigned int width, unsigned int height, unsigned int arraySize,
  unsigned int format, bool shaderResource, bool unorderedAccess, bool renderTarget,
  bool depthStencil, unsigned int sampleCount, unsigned int sampleQuality,
  unsigned int miplevels, bool gpuWrite, bool cpuRead, bool cpuWrite,
  bool generateMipMaps = false);

 __forceinline void InitCubeTexture(unsigned int width, unsigned int height,
  unsigned int arraySize, unsigned int format, bool shaderResource, bool unorderedAccess,
  bool renderTarget, bool depthStencil, unsigned int sampleCount, unsigned int sampleQuality,
  unsigned int miplevels, bool gpuWrite, bool cpuRead, bool cpuWrite,
  bool bGenerateMipMaps = false);
};

__forceinline Texture2DParams::Texture2DParams()
{}

__forceinline void Texture2DParams::Init(unsigned int width, unsigned int height, unsigned int arraySize,
 unsigned int format, bool shaderResource, bool unorderedAccess, bool renderTarget,
 bool depthStencil, unsigned int sampleCount, unsigned int sampleQuality,
 unsigned int miplevels, bool gpuWrite, bool cpuRead, bool cpuWrite,
 bool generateMipMaps)
{
 memset((this),0,(sizeof(Texture2DParams)));

 Width = width;
 Height = height;
 ArraySize = arraySize;
 Format = (DXGI_FORMAT)format;
 SampleDesc.Count = sampleCount;
 SampleDesc.Quality = sampleQuality;
 MipLevels = miplevels;


 if (cpuRead && cpuWrite && gpuWrite)
 {
  Usage = D3D11_USAGE_STAGING;
  CPUAccessFlags = D3D11_CPU_ACCESS_READ | D3D11_CPU_ACCESS_WRITE;
 }
 else if (gpuWrite && !cpuRead && !cpuWrite)
 {
  Usage = D3D11_USAGE_DEFAULT;
 }
 else if (cpuWrite && !cpuRead && !gpuWrite)
 {
  Usage = D3D11_USAGE_DYNAMIC;
  CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
 }
 else
 {
  Usage = D3D11_USAGE_IMMUTABLE;
 }


 if (shaderResource)
  BindFlags |= D3D11_BIND_SHADER_RESOURCE;
 if (renderTarget)
  BindFlags |= D3D11_BIND_RENDER_TARGET;
 if (unorderedAccess)
  BindFlags |= D3D11_BIND_UNORDERED_ACCESS;
 if (depthStencil)
  BindFlags |= D3D11_BIND_DEPTH_STENCIL;

 if (generateMipMaps)
  MiscFlags |= D3D11_RESOURCE_MISC_GENERATE_MIPS;
}

__forceinline void Texture2DParams::InitCubeTexture(unsigned int width, unsigned int height,
 unsigned int arraySize, unsigned int format, bool shaderResource, bool unorderedAccess,
 bool renderTarget, bool depthStencil, unsigned int sampleCount, unsigned int sampleQuality,
 unsigned int miplevels, bool gpuWrite, bool cpuRead, bool cpuWrite,
 bool bGenerateMipMaps)
{
 Init(width, height, arraySize, format, shaderResource, unorderedAccess, renderTarget, depthStencil, sampleCount, sampleQuality,
  miplevels, gpuWrite, cpuRead, cpuWrite, bGenerateMipMaps);

 MiscFlags |= D3D11_RESOURCE_MISC_TEXTURECUBE;
}

class Texture2D : public ITexture
{
public:

 __forceinline Texture2D();

 virtual bool Create(const D3D11_TEXTURE2D_DESC & pParams);


 virtual bool CreateShaderResourceView(ShaderResourceView & view,
  const ShaderResourceViewParams & params) const;

 virtual bool CreateShaderResourceView(ID3D11ShaderResourceView** ppView,
  const ShaderResourceViewParams & params) const;


 virtual bool CreateUnorderedAccessView(UnorderedAccessView & view,
  const UnorderedAccessViewParams & params) const;

 virtual bool CreateUnorderedAccessView(ID3D11UnorderedAccessView** ppView,
  const UnorderedAccessViewParams & params) const;


 virtual bool CreateRenderTargetView(RenderTargetView & view,
  const RenderTargetViewParams & params) const;

 virtual bool CreateRenderTargetView(ID3D11RenderTargetView** ppView,
  const RenderTargetViewParams & params) const;


 virtual bool CreateDepthStencilView(DepthStencilView & view,
  const DepthStencilViewParams & params) const;

 virtual bool CreateDepthStencilView(ID3D11DepthStencilView** ppView,
  const DepthStencilViewParams & params) const;


protected:
 ID3D11Texture2D* m_pTexture;
};

__forceinline Texture2D::Texture2D()
 : m_pTexture{ nullptr }
{}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../Materials/Material.h"

#line 1 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../Materials/../../Graphics/Resources/Views/ShaderResourceView.h"




struct ShaderResourceViewParams : public D3D11_SHADER_RESOURCE_VIEW_DESC
{
public:
 __forceinline ShaderResourceViewParams() = default;

 __forceinline void InitForTexture2D(DXGI_FORMAT format, int miplevels, int mostdetailedmip, bool multiSampled);

 __forceinline void InitForTexture2DArray(int arraySize, DXGI_FORMAT format, int firstArraySlice, int miplevels, int mostdetailedmip, bool multiSampled);

 __forceinline void InitForCubeTexture(DXGI_FORMAT format, int miplevels, int mostdetailedmip);

 __forceinline void InitForStructuredBuffer(DXGI_FORMAT format, int elementOffset, int elementWidth);
};

__forceinline void ShaderResourceViewParams::InitForTexture2D(DXGI_FORMAT format, int miplevels, int mostdetailedmip, bool multiSampled)
{
 Format = format;
 Texture2D.MipLevels = miplevels;
 Texture2D.MostDetailedMip = mostdetailedmip;

 ViewDimension = multiSampled ? D3D11_SRV_DIMENSION_TEXTURE2DMS : D3D11_SRV_DIMENSION_TEXTURE2D;
}
__forceinline void ShaderResourceViewParams::InitForTexture2DArray(int arraySize, DXGI_FORMAT format, int firstArraySlice, int miplevels, int mostdetailedmip, bool multiSampled)
{
 Format = format;

 if (multiSampled)
 {
  ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY;
  Texture2DMSArray.ArraySize = arraySize;
  Texture2DMSArray.FirstArraySlice = firstArraySlice;
 }
 else
 {
  ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2DARRAY;
  Texture2DArray.ArraySize = arraySize;
  Texture2DArray.MipLevels = 1;
  Texture2DArray.FirstArraySlice = firstArraySlice;
 }
}
__forceinline void ShaderResourceViewParams::InitForCubeTexture(DXGI_FORMAT format, int miplevels, int mostdetailedmip)
{
 Format = format;
 TextureCube.MipLevels = miplevels;
 TextureCube.MostDetailedMip = mostdetailedmip;
 ViewDimension = D3D11_SRV_DIMENSION_TEXTURECUBE;
}
__forceinline void ShaderResourceViewParams::InitForStructuredBuffer(DXGI_FORMAT format, int elementOffset, int elementWidth)
{
 Format = format;
 Buffer.FirstElement = 0;
 Buffer.NumElements = elementWidth;
 ViewDimension = D3D11_SRV_DIMENSION_BUFFER;
}

class ShaderResourceView
{
private:
 ID3D11ShaderResourceView** m_ppViews;
 int m_numViews;

public:

 __forceinline explicit ShaderResourceView(int numViews);

 __forceinline ~ShaderResourceView();



 __forceinline ID3D11ShaderResourceView** GetView(int index) const;




 __forceinline void Bind(int slot, ShaderType type) const;
 __forceinline void BindView(int index, int slot, ShaderType type) const;
};

__forceinline ShaderResourceView::ShaderResourceView(int numViews)
: m_ppViews{ nullptr }, m_numViews{ numViews }
{}

__forceinline ShaderResourceView::~ShaderResourceView()
{
 auto i = m_numViews - 1;
 for (; i > 0; i--)
  if(m_ppViews[i]) m_ppViews[i]->Release(); m_ppViews[i]=0;;

 if (m_ppViews) delete [] m_ppViews; m_ppViews=0;;
}

__forceinline ID3D11ShaderResourceView** ShaderResourceView::GetView(int index) const
{
 return m_ppViews + index;
}

__forceinline void ShaderResourceView::Bind(int slot, ShaderType type) const
{
 switch (type)
 {
 case ST_Vertex:
  DX11API::D3D11DeviceContext()->VSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Domain:
  DX11API::D3D11DeviceContext()->DSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Geometry:
  DX11API::D3D11DeviceContext()->GSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Pixel:
  DX11API::D3D11DeviceContext()->PSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Compute:
  DX11API::D3D11DeviceContext()->CSSetShaderResources(slot, m_numViews, m_ppViews);
 default:
  break;
 };
}
__forceinline void ShaderResourceView::BindView(int index, int slot, ShaderType type) const
{
 switch (type)
 {
 case ST_Vertex:
  DX11API::D3D11DeviceContext()->VSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Domain:
  DX11API::D3D11DeviceContext()->DSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Geometry:
  DX11API::D3D11DeviceContext()->GSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Pixel:
  DX11API::D3D11DeviceContext()->PSSetShaderResources(slot, m_numViews, m_ppViews);
  break;
 case ST_Compute:
  DX11API::D3D11DeviceContext()->CSSetShaderResources(slot, m_numViews, m_ppViews);
 default:
  break;
 };
}
#line 4 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/../Materials/Material.h"


class Material
{
protected:

 MaterialId m_id;




 shared_ptr<Texture2D> m_pDiffuse;
 shared_ptr<Texture2D> m_pSpecular;
 shared_ptr<Texture2D> m_pNormalTex;




 shared_ptr<ShaderResourceView> m_pDiffuseSRV;
 shared_ptr<ShaderResourceView> m_pSpecularSRV;
 shared_ptr<ShaderResourceView> m_pNormalSRV;




 int m_diffuseSlot;
 int m_specularSlot;
 int m_normalSlot;

public:

 __forceinline Material();

 virtual bool VInitialize(const string & name);



 __forceinline void BindDiffuse(unsigned int slot);
 __forceinline void BindSpecular(unsigned int slot);
 __forceinline void BindNormal(unsigned int slot);

 virtual void VBind(unsigned int slot);



 __forceinline void UnbindDiffuse();
 __forceinline void UnbindSpecular();
 __forceinline void UnbindNormal();

 virtual void VUnbind();
};

__forceinline Material::Material()
 : m_diffuseSlot{ -1 }, m_specularSlot{ -1 }, m_normalSlot{ 01 }
{}

__forceinline void Material::BindDiffuse(unsigned int slot)
{
 m_pDiffuseSRV->Bind(slot, ST_Pixel);
 m_diffuseSlot = slot;
}

__forceinline void Material::BindSpecular(unsigned int slot)
{
 m_pSpecularSRV->Bind(slot, ST_Pixel);
 m_specularSlot = slot;
}

__forceinline void Material::BindNormal(unsigned int slot)
{
 m_pNormalSRV->Bind(slot, ST_Pixel);
}

__forceinline void Material::UnbindDiffuse()
{
 DX11API::UnbindShaderResourceViews(m_diffuseSlot, 1, ST_Pixel);
 m_diffuseSlot = -1;
}
__forceinline void Material::UnbindSpecular()
{
 DX11API::UnbindShaderResourceViews(m_specularSlot, 1, ST_Pixel);
 m_specularSlot = -1;
}

__forceinline void Material::UnbindNormal()
{
 DX11API::UnbindShaderResourceViews(m_normalSlot, 1, ST_Pixel);
 m_normalSlot = -1;
}
#line 7 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/../Renderer/Meshes/Mesh.h"


class Mesh : public IMovable
{
protected:
 Mat4x4 m_objectTransform;

 shared_ptr<VertexBuffer> m_pVertices;
 shared_ptr<VertexBuffer> m_pTexCoords;
 shared_ptr<VertexBuffer> m_pNormals;

 shared_ptr<Material> m_pMaterial;

public:

 __forceinline Mesh();
 virtual ~Mesh();

 __forceinline void SetMaterial(const string & materialName);
 __forceinline void SetPositionBuffer();
 __forceinline void SetTexCoordsBuffer();
 __forceinline void SetNormalsBuffer();

 virtual void SetWorldTransform(const Mat4x4 & transform) override;
};

__forceinline void Mesh::SetMaterial(const string & materialName)
{
 m_pMaterial->VBind(0);
}

__forceinline void Mesh::SetPositionBuffer()
{
 m_pVertices->Bind(0, 0);
}

__forceinline void Mesh::SetTexCoordsBuffer()
{
 m_pTexCoords->Bind(1, 0);
}

__forceinline void Mesh::SetNormalsBuffer()
{
 m_pNormals->Bind(2, 0);
}
#line 6 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Representation.h"


class Scene;
class Renderer;
class EntityRepresentation
{
protected:

 typedef vector<shared_ptr<EntityRepresentation>> Representations;

 double m_lastUpdate;

 EntityRepresentationId m_id;


 Mat4x4 m_currentWorldMatrix;
 Vec m_size;

 Representations m_children;


 vector<shared_ptr<Mesh>> m_meshes;
 vector<shared_ptr<Light>> m_lights;

public:

 __forceinline EntityRepresentation(EntityRepresentationId id);

 __forceinline EntityRepresentation(EntityRepresentationId id, const Vec & size);

 EntityRepresentation(EntityRepresentationId id, const string & resourceMeshName);

 virtual void VAddChild(shared_ptr<EntityRepresentation> pRep);
 virtual void VRemoveChild(EntityRepresentation* pRep);

 virtual void VAddMesh(shared_ptr<Mesh> pMesh);
 virtual void VAddLight(shared_ptr<Light> pLight);

 virtual shared_ptr<EntityRepresentation> VFindChild(EntityRepresentationId id);


 virtual void VRender(Scene * pScene, Renderer * pRenderer, double currentTime);

 __forceinline EntityRepresentationId GetId() const;

 void SetCurrentTransform(const Mat4x4 & mat, double currentTime);
 __forceinline void SetSize(float sizex, float sizey, float sizez);

protected:


 virtual void VPushParameters(Scene *pScene, double currentTime);


 virtual void VSendRenderingData(Scene * pScene, Renderer * pRenderer);


 virtual void VPullParameters(Scene * pScene);
};

__forceinline EntityRepresentation::EntityRepresentation(EntityRepresentationId id)
 : m_size{ 0.0f, 0.0f, 0.0f, 0.0f }
{}

__forceinline EntityRepresentation::EntityRepresentation(EntityRepresentationId id, const Vec & size)
 : m_size{ 0.0f, 0.0f, 0.0f, 0.0f }, m_id(id), m_lastUpdate{ 0.0 }
{}

__forceinline EntityRepresentationId EntityRepresentation::GetId() const
{
 return m_id;
}

__forceinline void EntityRepresentation::SetSize(float sizex, float sizey, float sizez)
{
 m_size.x = sizex;
 m_size.y = sizey;
 m_size.z = sizez;
}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Root.h"



enum RenderPass : unsigned char
{
 RenderPass_Static,
 RenderPass_Actors,
 NUM_RENDER_PASSES,
};


class RootRepresentation : public EntityRepresentation
{
protected:

 Representations m_passes[NUM_RENDER_PASSES];

public:

 __forceinline RootRepresentation();

 virtual void VAddChild(shared_ptr<EntityRepresentation> pRep, RenderPass pass, EntityRepresentationId parentId);
 virtual void VRemoveChild(EntityRepresentation* pRep) override;

 virtual shared_ptr<EntityRepresentation> VFindChild(EntityRepresentationId id) override;
 EntityRepresentation* FindChild(EntityRepresentationId id, RenderPass pass);

 virtual void VRender(Scene * pScene, Renderer * pRenderer, double currentTime) override;

};

__forceinline RootRepresentation::RootRepresentation()
 : EntityRepresentation{ 0 }
{}
#line 3 "D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Root.cpp"


void RootRepresentation::VAddChild(shared_ptr<EntityRepresentation> pRep, RenderPass pass, EntityRepresentationId parentId)
{


 if (!parentId)
  m_passes[pass].push_back(pRep);
 else
 {
  if (EntityRepresentation * pParent = FindChild(parentId, pass))
  {
   pParent->VAddChild(pRep);
  }
  else
  {
   (void)( (!!(0 && "Parent with such Id doesn't exists or lies in the other pass!")) || (_wassert(L"0 && \"Parent with such Id doesn't exists or lies in the other pass!\"", L"D:/Users/Dgek/Desktop/Dgek/GameEngine/GameEngine/GameEngine/Source/Scene/Root.cpp", 19), 0) );
  }
 }
}

void RootRepresentation::VRemoveChild(EntityRepresentation* pRep)
{}

shared_ptr<EntityRepresentation> RootRepresentation::VFindChild(EntityRepresentationId id)
{
 for (int pass = 0; pass < NUM_RENDER_PASSES; pass++)
 {
  if (auto pResult = FindChild(id, (RenderPass)pass))
  {

  }
 }


 return nullptr;
}

EntityRepresentation* RootRepresentation::FindChild(EntityRepresentationId id, RenderPass pass)
{

 for (auto it = m_passes[pass].begin(); it != m_passes[pass].end(); it++)
 {
  auto pRepr = (*it);
  if (auto pResult = pRepr->VFindChild(id))
  {

  }
 }


 return nullptr;
}

void RootRepresentation::VRender(Scene * pScene, Renderer * pRenderer, double currentTime)
{
 VPushParameters(pScene, currentTime);
 VSendRenderingData(pScene, pRenderer);


 for (int i = 0; i < NUM_RENDER_PASSES; i++)
 {

  for (auto it = m_passes[i].begin(); it != m_passes[i].end(); it++)
  {
   auto pRepr = (*it);
   pRepr->VRender(pScene, pRenderer, currentTime);
  }
 }

 VPullParameters(pScene);
}
